Revision: a30b2aba7ed3756bf606ea547bae8078a527e59c
Patch-set: 3
File: runtime/base/memory_tool.h

1:0-2:37
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed56c9ec_34243f66
Bytes: 18
Copyright missing.

12:8-14:66
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed56c9ec_b4182f29
Bytes: 223
IMHO those names aren't very good. The original valgrind ones at least had valgrind in the name, so the intent was very clear. MAKE_MEM_NOACCESS could just as well be a certain mmap protection scheme...

Please add a prefix

17:0-18:36
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9f6d849_5736d4a3
Bytes: 238
No, please don't use untyped macros, this is C++11.

Please make this a proper constexpr bool (there's no reason below to use the RUNNING_ON_VALGRIND macro, all usages of these flags should already be protected by RUNNING_ON_MEMORY_TOOL).

16:0-18:36
Fri May 29 19:35:37 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d42d931_f422c922
Bytes: 82
Does this mean that these could have independently different values in the future?

17:0-18:36
Fri May 29 19:59:52 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9f6d849_5736d4a3
UUID: ed56c9ec_a528f601
Bytes: 198
In case of Valgrind, this is a runtime condition. It's probably not a good idea for it to be a constexpr bool in one #if branch, and something else (like a macro or an inline function) on the other.

16:0-18:36
Fri May 29 19:59:52 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d42d931_f422c922
UUID: ed56c9ec_05d1c27c
Bytes: 57
Potentially, yes, if when add MemorySanitizer to the mix.

17:0-18:36
Fri May 29 21:25:06 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed56c9ec_a528f601
UUID: ed56c9ec_370fd768
Bytes: 281
I don't see how it's a runtime option - the way you're doing it right now, it obviously is not: when you're running on valgrind, you add redzones.

This should be constexpr true, and any use of ADDS_REDZONES should be protected by RUNNING_ON_MEMORY_TOOL (or a cached flag) anyways.

17:0-18:36
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed56c9ec_370fd768
UUID: ed56c9ec_37f5179a
Bytes: 258
ASan is a compile-time choice. Valgrind is not: you can run the same binary with or without Valgrind, and RUNNING_ON_VALGRIND will evaluate either to 1 or 0.

ASan and Valgrind are incompatible, so we can make RUNNING_ON_VALGRIND a 0 constant in ASan builds.

17:0-18:36
Fri May 29 21:39:08 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed56c9ec_37f5179a
UUID: ed56c9ec_d7b20bc5
Bytes: 264
But any of the code paths doing the protection are protected by the RUNNING_ON_VALGRIND/MEMORY_TOOL path (if they're not, it's a bug). So the redzone flag is totally independent (you shouldn't even be looking at the flag if you're not running under valgrind/asan).

33:28-33:39
Fri May 29 03:40:51 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d54fde2_36f0ce5f
Bytes: 142
This file isn't named sanitizer.h (even though I think this is a better name than memory_tool). The linter should actually break your build...

File: runtime/gc/allocator/rosalloc.cc

114:0-114:24
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed56c9ec_f442b700
Bytes: 156
We're averse to #ifdefs in the code. Please consider a constexpr bool hiding the ifdef away.

(Also, is there a particular reason to only do this for ASAN?)

114:0-114:24
Fri May 29 20:17:45 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed56c9ec_f442b700
UUID: b91fb853_442058a3
Bytes: 400
It looks like RosAlloc can be re-created without releasing the memory mapping, and this is needed to clear the redzones. Not sure why Valgrind does not need it.

I see comments in the code about RosAlloc not supporting Valgrind, referencing https://b.corp.google.com/u/0/issues/12944686. Do you know if it's still the case, and why does the code create ValgrindMallocSpace<RosAllocSpace, ...> anyway?

114:0-114:24
Fri May 29 20:55:41 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b91fb853_442058a3
UUID: 0d54fde2_bf53ae3c
Bytes: 236
Exactly. RosAllocSpace::Clear re-creates RosAlloc in the same mapping, and then the memset at "Clear the first page since it is not madvised due to the magic number" trips on the leftover redzones from the previous instance of RosAlloc.

114:0-114:24
Fri May 29 21:25:06 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d54fde2_bf53ae3c
UUID: ed56c9ec_17b81309
Bytes: 98
But is there a reason to not be consistent and make it undefined when running under any sanitizer?

114:0-114:24
Fri May 29 21:25:06 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b91fb853_442058a3
UUID: b91fb853_7e5520ca
Bytes: 49
The comment is out-dated, as you noticed. My bad.

File: runtime/gc/heap.cc

2066:4-2066:47
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d470d3e_13d12b00
Bytes: 68
Guard with ADDRESS_SANITIZER (or the corresponding constexpr flag) ?

2066:4-2066:47
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d470d3e_13d12b00
UUID: 0d54fde2_3f9ede38
Bytes: 228
This should not be ASan-specific. These bins are simply free space in the heap, from the end of one allocation to the beginning of another. They are guaranteed to contain redzones. Again, not sure why Valgrind does not catch it.

2066:4-2066:47
Fri May 29 21:39:08 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d54fde2_3f9ede38
UUID: 0d54fde2_62e0cd12
Bytes: 371
The point Seb is making:

Don't put the macros in this way. Any such thing should be protected with the flag signaling whether sanitizing is active.

 if (running_on_mem_tool_) {
   MAKE_MEM_UNDEFINED(...);
 }

That is what allows some of the flags to be clean constexpr, instead of the macro hell. We're happy to trade the one-branch overhead in a non-hot path for this.

File: runtime/gc/space/dlmalloc_space.cc

29:0-29:41
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d470d3e_53b3b3da
Bytes: 46
Includes are sorted, this should go to line 23

29:0-29:41
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d470d3e_53b3b3da
UUID: b91fb853_9edebc50
Bytes: 4
Done

File: runtime/gc/space/memory_tool_malloc_space-inl.h

21
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9fb8c32_e4464ed1
Bytes: 100
Remove empty line. We used to add such line when including header outisde of the project (<include>)

21
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9fb8c32_e4464ed1
UUID: ed56c9ec_54eb7976
Bytes: 4
Done

22:0-22:29
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d470d3e_73c0af2b
Bytes: 41
Includes are sorted, please move that up.

22:0-22:29
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d470d3e_73c0af2b
UUID: 0d54fde2_1f82fad8
Bytes: 4
Done

23
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d42d931_007b943c
Bytes: 29
Remove empty line (see above)

23
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d42d931_007b943c
UUID: ed56c9ec_74f07d60
Bytes: 4
Done

File: runtime/gc/space/rosalloc_space-inl.h

37:19-37:44
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d470d3e_b3ea17a3
Bytes: 52
That definitely needs to be a 'constexpr bool' flag.

37:19-37:44
Fri May 29 19:35:37 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d470d3e_b3ea17a3
UUID: ed56c9ec_9a8c2d8a
Bytes: 2
+1

File: runtime/mem_map.cc

460:0-460:0
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d54fde2_76409614
Bytes: 47
Please don't add spurious non-related newlines.

460:0-460:0
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d54fde2_76409614
UUID: 0d54fde2_df8872f3
Bytes: 4
Done

467:4-467:54
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9f6d849_771af02d
Bytes: 52
?

We don't like to leave such comments in the code.

467:4-467:54
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9f6d849_771af02d
UUID: 0d54fde2_ff6536cd
Bytes: 4
Done

486:0-492:6
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d54fde2_b63afe91
Bytes: 92
Is there a problem with unconditionally doing this? I would think Valgrind would not care...

486:0-492:6
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d54fde2_b63afe91
UUID: b91fb853_fe1c909d
Bytes: 69
Done. It could be a performance issue for Valgrind, but probably not.

495:0-497:6
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d54fde2_16d2ead5
Bytes: 6
Ditto.

495:0-497:6
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d54fde2_16d2ead5
UUID: 0d54fde2_df6152bb
Bytes: 4
Done

582:0-584:6
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9f6d849_b70f58e4
Bytes: 9
As above.

582:0-584:6
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9f6d849_b70f58e4
UUID: 0d54fde2_5f4e424a
Bytes: 4
Done

768:0-772:6
Fri May 29 03:37:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9f6d849_973c5c86
Bytes: 9
As above.

768:0-772:6
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9f6d849_973c5c86
UUID: 0d54fde2_9f40aa15
Bytes: 4
Done

File: runtime/mem_map.h

172:2-172:8
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d470d3e_f3e49fd8
Bytes: 12
const size_t

172:2-172:8
Fri May 29 21:31:06 2015 +0000
Author: Evgenii Stepanov <1005967@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d470d3e_f3e49fd8
UUID: b91fb853_3e14487c
Bytes: 4
Done

File: runtime/runtime.h

532:7-532:26
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9fb8c32_04d13a73
Bytes: 127
IMO, it should have been named IsRunningOnMemoryTool in the first place. Since you rename it, you can also add the "Is" prefix.

File: runtime/utils_test.cc

29:0-29:29
Fri May 29 14:27:41 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9fb8c32_e4cd2ed7
Bytes: 27
Move to the top of includes

