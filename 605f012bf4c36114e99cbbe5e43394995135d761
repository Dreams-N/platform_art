Revision: 605f012bf4c36114e99cbbe5e43394995135d761
Patch-set: 2
File: /COMMIT_MSG

10:12-10:22
Thu Nov 13 18:22:30 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5ac5b75b_159274e2
Bytes: 10
arraystore

10:2-10:32
Thu Nov 13 18:27:36 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ae6dfff_9eba1942
Bytes: 35
Do not do typecheck an array store?

10:12-10:22
Fri Nov 14 13:45:35 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5ac5b75b_159274e2
UUID: 1ae6dfff_61e8523f
Bytes: 4
Done

File: compiler/optimizing/code_generator_arm.cc

2261
Thu Nov 13 18:27:36 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3ae9e3cf_ff207b3a
Bytes: 52
Maybe add

  DCHECK(index.IsRegister()) << value;

?

2261
Fri Nov 14 13:45:35 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ae9e3cf_ff207b3a
UUID: fab4abdf_a3aee8a7
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.cc

2337
Thu Nov 13 18:27:36 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3ae9e3cf_bf26f355
Bytes: 52
Maybe add

  DCHECK(value.IsConstant()) << value;

?

2337
Fri Nov 14 13:45:35 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ae9e3cf_bf26f355
UUID: fab4abdf_c3abdc96
Bytes: 4
Done

2341
Thu Nov 13 18:27:36 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fab4abdf_5d9b2fd5
Bytes: 52
Maybe add

  DCHECK(index.IsRegister()) << value;

?

2341
Fri Nov 14 13:45:35 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fab4abdf_5d9b2fd5
UUID: fab4abdf_e3b8e0ea
Bytes: 4
Done

2345
Thu Nov 13 18:27:36 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ae6dfff_bedef590
Bytes: 52
Maybe add

  DCHECK(value.IsConstant()) << value;

?

2345
Fri Nov 14 13:45:35 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1ae6dfff_bedef590
UUID: 3ae9e3cf_02d86efa
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.cc

2211
Thu Nov 13 18:27:36 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3ae9e3cf_9f29372b
Bytes: 52
Maybe add

  DCHECK(value.IsConstant()) << value;

?

2211
Fri Nov 14 13:45:35 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ae9e3cf_9f29372b
UUID: 1ae6dfff_a1e17a59
Bytes: 4
Done

2215
Thu Nov 13 18:27:36 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ae6dfff_fed87da5
Bytes: 52
Maybe add

  DCHECK(index.IsRegister()) << value;

?

2215
Fri Nov 14 13:45:35 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1ae6dfff_fed87da5
UUID: fab4abdf_03b6b4fb
Bytes: 207
Done. Although we may be going overboard with these checks. They are already in the Location methods. I used to add them here as well because the stack trace given by DCHECK is (or used to) not be available.

2215
Fri Nov 14 13:50:32 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fab4abdf_03b6b4fb
UUID: 1ae6dfff_e1db829f
Bytes: 135
Yes, maybe; but I find them useful as documentation as well, especially within long if/switch statements ("which branch/case I'm in?").

File: compiler/optimizing/instruction_simplifier.cc

63:3-63:69
Thu Nov 13 18:22:30 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5ac5b75b_9866b9c7
Bytes: 227
Shouldn't the notion of type be richer? If the array is known to be an Object[] (commonly used in Collections) then the check isn't necessary either. We have a verifier helper for this in quick that uses the safe cast set iirc.

63:3-63:69
Thu Nov 13 18:36:28 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5ac5b75b_9866b9c7
UUID: fab4abdf_3d7d9bde
Bytes: 233
Yes, definitely. We have a type based optimization in the todo list. But I'd like to think on how types could be represented in the optimizing context, before doing it. For this change, I just wanted to play around on what we can do.

