Revision: 5c946424f158b055838f15056cf829c4231df435
Patch-set: 2
File: compiler/optimizing/graph_visualizer.cc

226:20-226:21
Tue Jan 27 15:30:17 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2bab5bf1_55345ec7
Bytes: 147
Does "B" stands for "block"?  I think "block" would be more explicit.  But maybe this is contrived by the c1visualizer format for cross references?

226:20-226:21
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2bab5bf1_55345ec7
UUID: 97662f11_f8a131bd
Bytes: 116
Yes. I don't know if it's imposed, but that's how this file already emits block references, so I kept it consistent.

File: compiler/optimizing/licm.cc

29:58-29:76
Tue Jan 27 18:20:57 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b47db3f_12276c52
Bytes: 108
I guess this must be the inner most loop that contains this block. A more appropriate name might be helpful.

29:58-29:76
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b47db3f_12276c52
UUID: 97662f11_98aef5ac
Bytes: 69
Renamed `current` to `input_loop`. Not sure if that's what you meant.

44:25-44:28
Tue Jan 27 18:20:57 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37f82338_604fcc7b
Bytes: 11
Extra word.

44:25-44:28
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37f82338_604fcc7b
UUID: 97662f11_b8abb99b
Bytes: 4
Done

101:6-102:42
Tue Jan 27 18:20:57 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b47db3f_b260587d
Bytes: 178
Another strategy we have used is iteration peeling to deal with cases that are invariants and thus are guaranteed to throw first iteration (like null checks on invariant objects)

110:56-110:68
Tue Jan 27 18:20:57 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37f82338_00a5a8c9
Bytes: 150
Likely this is adequate to capture memory effects, but what is your plan for making it possible to hoist things that touch invariant memory locations?

110:56-110:68
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37f82338_00a5a8c9
UUID: f79dab26_7b9d1f7b
Bytes: 73
It is based id the SideEffects class (which is pretty minimal right now).

117:23-117:35
Tue Jan 27 18:20:57 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1705dffd_df88bf37
Bytes: 162
Just to clarify, doing this makes it possible for InputsAreDefinedBeforeLoop to return true when the define came from an instruction that was also hoisted, right?

117:23-117:35
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1705dffd_df88bf37
UUID: 97662f11_58985d8c
Bytes: 4
Yes.

File: test/445-checker-licm/info.txt

1:8-1:12
Tue Jan 27 15:30:17 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: abd02b89_f1f47a96
Bytes: 4
test

1:8-1:12
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: abd02b89_f1f47a96
UUID: 578037c4_367258ce
Bytes: 4
Done

File: test/445-checker-licm/src/Main.java

24:0-24:61
Tue Jan 27 15:23:29 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb69dfa3_edea0d02
Bytes: 228
Start the group here again (with the same name). Otherwise the NOT will only be checked on lines preceding the matches of the DAG (there's an ordering between the CHECK lines and you want to verify the NOT on the entire output).

24:0-24:61
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb69dfa3_edea0d02
UUID: 578037c4_363b38fc
Bytes: 4
Done

27:4-27:24
Tue Jan 27 15:30:17 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb69dfa3_6dffddbc
Bytes: 33
What is the purpose of this line?

27:4-27:24
Tue Jan 27 18:20:57 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb69dfa3_6dffddbc
UUID: 1705dffd_bf43b32f
Bytes: 194
Probably so that it is initialized with a load. Likely, same could be achieved by having it as an argument. If he made it a constant or a known expression, it could be evaluated at compile time.

27:4-27:24
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb69dfa3_6dffddbc
UUID: 97662f11_784f617b
Bytes: 18
Leftover. Removed.

40:0-40:61
Tue Jan 27 15:23:29 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb69dfa3_0df021ef
Bytes: 5
Ditto

40:0-40:61
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb69dfa3_0df021ef
UUID: f79dab26_1b441b5b
Bytes: 4
Done

43:4-43:24
Tue Jan 27 15:30:17 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: abd02b89_71e9aab9
Bytes: 6
Ditto.

43:4-43:24
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: abd02b89_71e9aab9
UUID: f79dab26_3b49d773
Bytes: 4
Done

52
Tue Jan 27 15:30:17 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: abd02b89_51bf469b
Bytes: 613
BTW, regarding nested loops, do you think the LICM pass could be able to turn the following code:

  public static int innerDiv() {
    int b = staticField;
    int result = 0;
    for (int i = 0; i < 10; ++i) {
      for (int j = 0; j < 10; ++j) {
        result += staticField / i;
      }
    }
    return result;
  }

into something equivalent to this Java code:

  public static int innerDiv() {
    int b = staticField;
    int result = 0;
    for (int i = 0; i < 10; ++i) {
      int tmp = staticField / i;
      for (int j = 0; j < 10; ++j) {
        result += tmp;
      }
    }
    return result;
  }

?

52
Tue Jan 27 17:11:33 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: abd02b89_51bf469b
UUID: cb69dfa3_8de6f1e8
Bytes: 110
based on the code, it should already do it?

Anyway, I hope that there are no many who write the former loop:P

52
Tue Jan 27 17:36:07 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb69dfa3_8de6f1e8
UUID: 2bab5bf1_b5c142c7
Bytes: 278
Yes, Nicolas also explained to me offline that LICM cannot be applied in this case, as "staticField / i" may throw.  But it should work with a non-throwing expression, such as "staticField * i".  May I suggest adding such a test case exercising code hoisting from an inner loop?

52
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2bab5bf1_b5c142c7
UUID: 578037c4_166ddcec
Bytes: 4
Done

61:0-61:77
Tue Jan 27 15:23:29 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cb69dfa3_2d05e53c
Bytes: 5
Ditto

61:0-61:77
Wed Jan 28 10:15:12 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb69dfa3_2d05e53c
UUID: 97662f11_d8a46dd0
Bytes: 4
Done

