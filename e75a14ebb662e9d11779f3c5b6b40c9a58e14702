Revision: e75a14ebb662e9d11779f3c5b6b40c9a58e14702
Patch-set: 4
File: compiler/dex/local_value_numbering.cc

192:42-192:46
Fri Feb 21 12:26:57 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef985df7_7c5879e9
Bytes: 51
Can't we assume super calls are on a non-null this?

206:50-206:56
Fri Feb 21 12:26:57 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef985df7_9ca9c560
Bytes: 69
I know that's from the old code, but I don't understand this comment.

546:13-546:23
Fri Feb 21 12:26:57 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: af64a5c8_da8d051d
Bytes: 67
Please explain why volatile fields always get a new memory version.

555:8-555:9
Fri Feb 21 12:26:57 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: af64a5c8_fa92c93d
Bytes: 57
In case of volatile, why do you need to do the following?

File: compiler/dex/local_value_numbering.h

37:5-37:13
Fri Feb 21 12:26:57 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: af64a5c8_7ad1590d
Bytes: 26
FieldKey -> FieldReference

48:28-48:31
Fri Feb 21 12:26:57 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef985df7_3c751158
Bytes: 49
Pointer comparison? Can't you use something else?

186:21-186:36
Fri Feb 21 12:26:57 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef985df7_3c5ef1d7
Bytes: 160
My understanding of unique after reviewing the code is objects that don't alias. Is that correct?

In any case, please add a comment of what a unique object is.

