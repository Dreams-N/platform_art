Revision: 8f4edb0992daba5a2de6bd24741176ca49143212
Patch-set: 17
File: /COMMIT_MSG

7
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_aca5c7eb
Bytes: 81
Perhaps "Add initial default method support to Art" to be consistent with line 9?

7
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_aca5c7eb
UUID: 6e4d7d85_982fdc59
Bytes: 4
Done

18
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_d14c160e
Bytes: 102
Consider adding "with invoke-static" (just to be consistent with your explanation of line 12 and 20) ?

18
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_d14c160e
UUID: 6e4d7d85_783420a9
Bytes: 4
Done

File: cmdline/cmdline_parser_test.cc

552
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_b64996fc
Bytes: 48
Add a test for both lambdas and default-methods?

552
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_b64996fc
UUID: 4e4c398b_30247d48
Bytes: 4
Done

File: cmdline/cmdline_types.h

846
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_7ee539df
Bytes: 41
Don't need these static casts, redundant.

846
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_7ee539df
UUID: ee86cdd4_e310a184
Bytes: 4
Done

File: runtime/art_method-inl.h

214
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_39e7dba8
Bytes: 217
I think this is allowing for invoke-virtual on an interface, but perhaps leave a comment?

Also why doesn't this have an experimental defaults guard? If it's because IsDefault is always false then leave a comment too.

214
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_39e7dba8
UUID: 2e470569_61f343d7
Bytes: 4
Done

File: runtime/art_method.h

136
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_b7cab285
Bytes: 199
Let's just add a comment saying that this is synthesized by another part of the runtime (the class linker? the verifier?)

(to prevent cases of someone calling this before its set? is that possible?)

136
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_b7cab285
UUID: ee86cdd4_a335b90e
Bytes: 23
Done.

I don't think so

164
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_3cefc5c1
Bytes: 309
Not sure if this is performant, it has to construct the value of PrettyMethod regardless of whether or not DCHECKs are enabled, then it throws the value away.

The problem is it might be pretty hard to optimize it out. Have you checked assembly output to see if "PrettyMethod" call is there for release build?

164
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_3cefc5c1
UUID: 0e5fa128_dbe42c50
Bytes: 8
Removed.

178
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_1cf4018e
Bytes: 9
Comments?

178
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_1cf4018e
UUID: 2e2e2591_4d92d091
Bytes: 4
Done

File: runtime/class_linker.cc

4614:11-4614:18
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_9c291150
Bytes: 190
What is the int?

(I for one would prefer a using int alias in the header so we don't need to leave a comment every time, not sure if anyone else will agree. But it needs a comment at least)

4614:11-4614:18
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_9c291150
UUID: ce582944_d99f94c4
Bytes: 4
Done

4617
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_8381b2c9
Bytes: 39
style nit: /*out*/&default_translations

4617
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_8381b2c9
UUID: 2e470569_a1a5bba7
Bytes: 4
Done

4618:47-4618:78
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_93290650
Bytes: 26
use const T& here instead?

4618:47-4618:78
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_93290650
UUID: ee616dea_570b6e2e
Bytes: 4
Done

4746
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_9ff7c34f
Bytes: 137
Maybe misunderstanding here, why is this getting executed as part of LinkVirtualMethods instead of as part of SetupInterfaceLookupTable ?

4746
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_9ff7c34f
UUID: ee616dea_171df66d
Bytes: 115
It made more sense to me. Also we will be adding a vtable for invoke-super which would make this the obvious place.

4749:74-4749:76
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_73b20a68
Bytes: 2
zu

4749:74-4749:76
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_73b20a68
UUID: 2e470569_418cc72b
Bytes: 4
Done

4757
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_1f0e3b77
Bytes: 149
Comment what this loop is doing?


I would guess giving each interface method an IMT index (and caching the default flag), but maybe not? Maybe more?

4757
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_1f0e3b77
UUID: 8e52b121_438bb9e7
Bytes: 4
Done

4761
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_1890910d
Bytes: 117
Perhaps this could probably be refactored further

   LinkVirtualMethodsForInterface
   LinkVirtualMethodsForClass

?

4761
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_1890910d
UUID: 2e2e2591_28c1b26b
Bytes: 14
If you want...

4761
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_28c1b26b
UUID: 9555663b_3de0173a
Bytes: 365
I was just suggesting this since it seemed like you were already refactoring a few of the other functions out into separate functions.

It seems like it would be a purely mechanical refactor, it might make the function shorter and less readable. I realize this is already a mess prior to this CL, but it doesn't hurt to minimize how much larger we make the mess :).

4777
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_5cb71956
Bytes: 30
Why? (Also please add comment)

4777
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_5cb71956
UUID: ee86cdd4_6381f1eb
Bytes: 4
Done

4784
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_c4fc52a7
Bytes: 30
Why? (Also please add comment)

4784
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_c4fc52a7
UUID: 6e4d7d85_536267df
Bytes: 4
Done

4805
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_bf2cbf5f
Bytes: 48
Magic numbers ? 

Why? (Also please add comment)

4805
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_bf2cbf5f
UUID: ee86cdd4_e36c2100
Bytes: 4
Done

4853
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_5f5b9bf6
Bytes: 41
style nit: add /*out*/s, one arg per line

4853
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_5f5b9bf6
UUID: ee616dea_37ab5a5b
Bytes: 4
Done

4871
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_733c4a5b
Bytes: 103
I think I recall something about this being a phasing problem, can you elaborate some more in comments?

4871
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_733c4a5b
UUID: 6e4d7d85_b34d1b60
Bytes: 4
Done

4877
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_4334dabf
Bytes: 12
add a CHECK?

4877
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_4334dabf
UUID: 4e4c398b_906a1128
Bytes: 42
the check would be the if statement above.

4877
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_906a1128
UUID: 75439281_8702ac4b
Bytes: 105
Perhaps there is some way to check the ArtMethod itself instead of relying [only] on the declaring class?

4883:18-4883:19
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_2458ce6e
Bytes: 1
-

4883:18-4883:19
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_2458ce6e
UUID: 8e52b121_436299df
Bytes: 4
Done

4936
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_e3a2ae12
Bytes: 51
Does this function have any side effects? const it?

4936
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_e3a2ae12
UUID: 8e52b121_23679def
Bytes: 4
Done

4937:61-4937:77
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_f575c0c2
Bytes: 172
The name could probably be better, something like 'target_method', 'search_method', etc.

interface_method too vague and its easy to get lost a few loops into this function

4937:61-4937:77
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_f575c0c2
UUID: ae5bf53d_5f970180
Bytes: 4
Done

4939:49-4939:50
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_9f9c63d1
Bytes: 18
style nit: /*out*/

4939:49-4939:50
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_9f9c63d1
UUID: 8e52b121_c3756991
Bytes: 4
Done

4940
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_c4021216
Bytes: 18
style nit: /*out*/

4940
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_c4021216
UUID: 8e52b121_a3726da5
Bytes: 4
Done

4941
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_435a9ae2
Bytes: 31
DCHECK not null on the out args

4941
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_435a9ae2
UUID: ae5bf53d_ffa595ea
Bytes: 4
Done

4945
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_23b1e65e
Bytes: 244
add somewhere that the order of unrelated interfaces doesn't matter (unless it does , in which case add that it uses implements order)

IIRC implements order does matter for some things, but not sure if its relevant in this particular function.

4945
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_23b1e65e
UUID: 6e4d7d85_7309e3f6
Bytes: 4
Done

4949:9-4949:16
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_24620ed6
Bytes: 89
Nicolas nit: prefer more explicit names, iftable_count (maybe even interface_table_count)

4949:9-4949:16
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_24620ed6
UUID: ee86cdd4_231d296e
Bytes: 4
Done

4952
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_fe5c8164
Bytes: 127
Ditto as the function name, how about renaming this to e.g. 'target_name_comparator' or just a 'target_method_comparator', etc.

4952
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_fe5c8164
UUID: 4e4c398b_56bc92ef
Bytes: 4
Done

4953
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_7e2651fe
Bytes: 43
DCHECK for correct iftable order somewhere?

4953
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_7e2651fe
UUID: 2e2e2591_48f4fe8e
Bytes: 83
We do during construction. I could add one here to but getting good output is hard.

4953
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_48f4fe8e
UUID: 75439281_e7f290cd
Bytes: 55
Where is that DCHECK currently? I don't think I saw it.

4954:7-4954:14
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_4cce4e99
Bytes: 180
size_t and then do a "if k == 0 break" at the end

(size_t is 64bit on 64bit so this truncates)
.....

also add something like..


   // Iterate over the klass's iftable in reverse

4954:7-4954:14
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_4cce4e99
UUID: 0e5fa128_161a99a7
Bytes: 62
Really I'd say that's far less clear.

I will if you are sure.

4954:7-4954:14
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_161a99a7
UUID: d55b5e6b_a2bc043c
Bytes: 351
This wasn't a "stylistic" comment, this loop could have undefined behavior because this assignment

  int32_t k = iftable_count - 1

is actually doing:

  int32_t = size_t

and size_t is uint64_t on 64-bit platforms (N9, x86, etc)

  int32_t = uint64_t // OOPS.
-----------
the "if k == 0 break" is because "k>=0" is always true if you made k a size_t

4954:7-4954:14
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d55b5e6b_a2bc043c
UUID: b5398a03_7a08d9a2
Bytes: 44
Which is why k is a int32_t...

Anyway done.

4956:11-4956:28
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_43361a7a
Bytes: 58
Why not num_virtual_methods or just num_instance_methods ?

4956:11-4956:28
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_43361a7a
UUID: ce582944_796f8839
Bytes: 37
Because they are interface methods...

4956:11-4956:28
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_796f8839
UUID: 15a33681_69e56149
Bytes: 125
It's confusing because an interface can also have static methods, num_virtual_methods/num_instance_methods is less ambiguous.

4956:11-4956:28
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15a33681_69e56149
UUID: d55b5e6b_c513fd26
Bytes: 4
Done

4957
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_ff46bf43
Bytes: 80
add a // Iterate through every instance method on the interface [in some order?]

4957
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_ff46bf43
UUID: ce582944_39691032
Bytes: 4
Done

4959
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_8c832640
Bytes: 248
you can reduce # of indents by flipping this

also add comments either way

  // Skip abstract methods because they can't be default.
  // Skip non-abstract methods with non-matching signatures.
  if (current_method->IsAbstract || ...)
    continue

4959
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_8c832640
UUID: 0e5fa128_d6664136
Bytes: 4
Done

4959
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_d6664136
UUID: b5398a03_260802f4
Bytes: 14
More comments?

4959
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5398a03_260802f4
UUID: b5398a03_faf34908
Bytes: 4
Done

4962
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_b732b286
Bytes: 45
Why is this CHECK safe? Does it verify first?

4962
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_b732b286
UUID: 0e5fa128_7635550c
Bytes: 45
Interface methods should never not be public.

4962
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_7635550c
UUID: 1548969f_248bd8ea
Bytes: 234
It was more of a mechanical question. In other plces of the code I've seen comments written similar to this:

  // The verifier should've caught non-public methods on interfaces.

Please consider adding a comment here of some sort :).

4962
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1548969f_248bd8ea
UUID: b5526a4f_d24e2406
Bytes: 4
Done

4964:21-4964:40
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_9e3a2df7
Bytes: 49
perhaps chosen_iface , to reduce the number of *s

4964:21-4964:40
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_9e3a2df7
UUID: 0e5fa128_362fddc0
Bytes: 4
Done

4989
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_f51f0066
Bytes: 325
I for one would've preferred these "new" functions go below the older methods, this would've made the diff easier to read (high level to low level).

Doesn't really matter too much now (in fact, don't change it since it'll make successive reviews of this CL more difficult), but just something to keep in mind for the future.

4989
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_f51f0066
UUID: ae5bf53d_42e84aec
Bytes: 4
Done

4990
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_70ea01b2
Bytes: 109
Should mention the conflicts up here too.

What is a conflict anyway? Can you please elaborate (in comments)?

4990
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_70ea01b2
UUID: 0e5fa128_d63d21f2
Bytes: 4
Done

4995:0-4995:22
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_300ec977
Bytes: 18
style nit: /*out*/

4995:0-4995:22
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_300ec977
UUID: 2e470569_6147c341
Bytes: 4
Done

5016
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_f7da6a86
Bytes: 22
DCHECK(val != nullptr)

5016
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_f7da6a86
UUID: 2e2e2591_48dd1ef7
Bytes: 4
Done

5031
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_f594e003
Bytes: 47
(be sure to add this notation <: means subtype)

5031
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_f594e003
UUID: 0e5fa128_76a0b596
Bytes: 40
Done

It's a standard notation though...

5031
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_76a0b596
UUID: 354d9aaf_c21e6670
Bytes: 196
Do we use it elsewhere in our code? I'm not quite sure.

I am not against the standard notation either, we just need to be sure it's documented/referenced somewhere (*and* people are aware of it).

5031
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 354d9aaf_c21e6670
UUID: 9555663b_c3e819df
Bytes: 106
I don't think we use it anywhere else. It is a standard notation though, (see wikipedia page on subtyping)

5039
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_fa7b7185
Bytes: 100
add a "Upon entry, .." or similar so that it's clear this is the precondition not the postcondition.

5039
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_fa7b7185
UUID: 4e4c398b_d663e223
Bytes: 4
Done

5047:37-5047:41
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_8f9b1867
Bytes: 82
Based on comments in 5054 should this perhaps be called current_iface_list (set) ?

5047:37-5047:41
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_8f9b1867
UUID: 6e4d7d85_9379ff5c
Bytes: 29
no. Added comment to clarify.

5050
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_3e6219df
Bytes: 55
is it possible to DCHECK they were initialized already?

5050
Mon Sep 28 17:43:50 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_3e6219df
UUID: 8e52b121_104aa921
Bytes: 164
Thinking about this some more, IMHO this should also DCHECK that iftable's supers are already sorted correctly (maintaining the invariant you set out on line 5031).

5050
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_104aa921
UUID: ee86cdd4_636251d7
Bytes: 25
We check that at the end.

5050
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_3e6219df
UUID: 4e4c398b_16417a72
Bytes: 74
I don't know. I think they are just uninitialized memory if not filled in.

5050
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_636251d7
UUID: 9555663b_60b948fc
Bytes: 203
It's checking the post-condition at the end but it could also check the pre-condition (at the beginning).

You could also just put the dcheck into a lambda and then you won't have to copy/paste it twice.

5050
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9555663b_60b948fc
UUID: b5398a03_dab2c530
Bytes: 4
Done

5052:9-5052:12
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_3e5d7911
Bytes: 78
naming nit: too hard to follow what idx is, perhaps filled_ifcount or similar.

5052:9-5052:12
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_3e5d7911
UUID: ce582944_5409296d
Bytes: 4
Done

5053:12-5053:26
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_82ad2ec3
Bytes: 295
style nit: _iter, _it, _iteterator, etc implies the variable name is an iterator (e.g. std::vector<T>::iterator or similar) so it's best not to use that naming convention for the name of the element. instead consider something simply like "current_interface" or really anything else without _it.

5053:7-5053:11
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_2f2f84c0
Bytes: 40
nit: mirror::Class* instead of auto here

5053:12-5053:26
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_82ad2ec3
UUID: ee86cdd4_c350fdf5
Bytes: 4
Done

5053:7-5053:11
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_2f2f84c0
UUID: 2e470569_c109d7f8
Bytes: 4
Done

5055:32-5055:33
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_22bc42ef
Bytes: 55
missing period? Also consider newlines for readability.

5055:32-5055:33
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_22bc42ef
UUID: 8e52b121_832f7159
Bytes: 4
Done

5058
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_be75e991
Bytes: 48
unnecessary, interface_iter is already a pointer

5058
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_be75e991
UUID: 2e2e2591_48675eee
Bytes: 4
Done

5078
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_af3a54f6
Bytes: 73
see performance note about DCHECK / PrettyClass made earlier in this file

5078
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_af3a54f6
UUID: 0e5fa128_167619cf
Bytes: 4
Done

5084
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_fe46c143
Bytes: 88
else DCHECK that all of the super interfaces must already be in the current-iface-list ?

5084
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_fe46c143
UUID: 2e2e2591_4862bed6
Bytes: 1
?

5084
Fri Oct 02 21:44:01 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_4862bed6
UUID: b5526a4f_6228274a
Bytes: 242
This is based on your comment on line 5061

"If we have already seen this element then all of its super-interfaces must already be in the current iface-list so we can skip adding it"

presumably there could be a DCHECK to enforce this comment

5084
Mon Oct 05 18:46:52 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5526a4f_6228274a
UUID: cb90200c_ffe7df97
Bytes: 4
Done

5103
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_17c61e36
Bytes: 130
Can you explain somewhere why you split off this part of LinkInterfaceMethods into (2) parts and did it *before* linking virtuals?

5103
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_17c61e36
UUID: ee86cdd4_833af5ad
Bytes: 25
Done

Added at call site.

5134
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_1ac64d36
Bytes: 20
What does that mean?

5134
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_1ac64d36
UUID: 8e52b121_635b55f7
Bytes: 51
That every class being implemented is an interface.

5150
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_c3fb2ae4
Bytes: 29
nit: period at end of comment

5150
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_c3fb2ae4
UUID: 0e5fa128_16f97986
Bytes: 4
Done

5156
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_faaa5154
Bytes: 29
nit: period at end of comment

5156
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_faaa5154
UUID: 2e470569_614a2323
Bytes: 4
Done

5174
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_b03ab9f6
Bytes: 61
Can you explain why this was refactored? (And add a comment)?

5174
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_b03ab9f6
UUID: ee86cdd4_0318253d
Bytes: 65
It was long, complicated and best understood as its own function.

5251
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_23c0c687
Bytes: 25
Add comment for the skip?

5251
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_23c0c687
UUID: 6e4d7d85_13bf4f35
Bytes: 4
Done

5272
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_f5d140e2
Bytes: 132
A bit hard to follow logic (I know this line is not your code), could you please add a comment explaining what this variable is for?

5272
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_f5d140e2
UUID: ee86cdd4_c32c7d61
Bytes: 4
Done

5321
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_170dfeb1
Bytes: 172
Please no auto**, write full type out when it's not obvious without needing to scroll up/down

(also calling a pointer a ref is misleading, use & with refs, or * with ptrs)

5321
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_170dfeb1
UUID: 2e470569_e1cbb3df
Bytes: 4
Done

5351
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_77b1da38
Bytes: 49
Where is the "next step" ? Please adjust comment.

5351
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_77b1da38
UUID: 2e2e2591_088a76a0
Bytes: 4
Done

5367:77-5367:97
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_30f4898e
Bytes: 190
What does it mean for an interface to be new (please elaborate in comments)?

Presumably it means it's the immediate implements child (i.e. it wasn't implemented by any of the superclasses)?

5367:77-5367:97
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_30f4898e
UUID: ce582944_74eaedb1
Bytes: 4
Done

5378:47-5379:62
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_7a81c1c6
Bytes: 22
style nit: add /*out*/

5378:47-5379:62
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_7a81c1c6
UUID: ae5bf53d_42d28ae7
Bytes: 4
Done

5385
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_37924291
Bytes: 34
style nit: else if to save 1 line?

5385
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_37924291
UUID: 8e52b121_0374a154
Bytes: 4
Done

5387:65-5387:71
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_5a8605e1
Bytes: 33
nit: add period to end of comment

5387:65-5387:71
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_5a8605e1
UUID: 6e4d7d85_d332d787
Bytes: 4
Done

5399:55-5399:65
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_84609a98
Bytes: 15
nit: add period

5399:55-5399:65
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_84609a98
UUID: 6e4d7d85_b32f5b22
Bytes: 4
Done

5460
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_ba9e1920
Bytes: 38
nit: indent 4 more spaces to the right

5460
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_ba9e1920
UUID: 0e5fa128_16abb95a
Bytes: 4
Done

5467:57-5467:59
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_64d00689
Bytes: 38
can't be default? must not be default?

5467:57-5467:59
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_64d00689
UUID: ee616dea_17717664
Bytes: 4
Done

5471
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_a354b65f
Bytes: 201
I remember hearing something offline about these copies being necessary to avoid leaving vtable holes in classes that 'inherit' a default method.

Can you please leave a comment here with more details?

5471
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_a354b65f
UUID: ce582944_f4437d31
Bytes: 4
Done

5474
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_5a6de5ce
Bytes: 66
style nit: var name = *out, move_table.emplace(def_method, &name);

5474
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_5a6de5ce
UUID: ee86cdd4_43f14d0e
Bytes: 25
That changes the meaning.

5474
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_43f14d0e
UUID: b5398a03_668deaba
Bytes: 22
var& name = *out

then

5474
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5398a03_668deaba
UUID: 354d9aaf_315672d5
Bytes: 4
Done

5505
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_7e81b1c6
Bytes: 43
What is this doing? (Add a comment please?)

5505
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_7e81b1c6
UUID: 4e4c398b_b6606698
Bytes: 4
Done

5518:81-5518:87
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_df730b24
Bytes: 4
Must

5518:81-5518:87
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_df730b24
UUID: ce582944_b44d0560
Bytes: 4
Done

5549
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_7f152fd1
Bytes: 52
Why is this doing the check? (Add a comment please?)

5549
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_7f152fd1
UUID: 2e470569_740e5f78
Bytes: 4
Done

File: runtime/class_linker.h

20
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_83d41227
Bytes: 57
Almost always unordered_map (or even a HashMap) for speed

20
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_83d41227
UUID: ee616dea_974e86af
Bytes: 4
Done

722
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_63d91e5d
Bytes: 8
Comment?

722
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_63d91e5d
UUID: 2e470569_415a8767
Bytes: 4
Done

724:35-724:42
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_7fb777bf
Bytes: 20
What are these ints?

724:35-724:42
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_7fb777bf
UUID: 8e52b121_43d85908
Bytes: 27
They are the vtable indexes

727
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_3c06a527
Bytes: 8
Comment?

727
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_3c06a527
UUID: ee86cdd4_e33ae1f7
Bytes: 4
Done

734:47-734:49
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_cffeb5d6
Bytes: 13
Otherwise if?

734:47-734:49
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_cffeb5d6
UUID: ae5bf53d_7fd52577
Bytes: 4
Done

738
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_f7beea36
Bytes: 51
Does this have any side effects ? Can you const it?

738
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_f7beea36
UUID: ee616dea_b79bca66
Bytes: 35
Creating scopes requires non-const.

738
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_b79bca66
UUID: 9555663b_9d77a358
Bytes: 100
That's too bad, why don't we fix scopes to be mutable const?
(more of a question to other reviewers)

741
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_2f08a9a1
Bytes: 11
add /*out*/

741
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_2f08a9a1
UUID: ce582944_99cb5ce1
Bytes: 4
Done

742
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_23d3263d
Bytes: 11
add /*out*/

742
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_23d3263d
UUID: ce582944_79d0a888
Bytes: 4
Done

745
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_999c87d1
Bytes: 8
Comment?

745
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_999c87d1
UUID: ce582944_39da30a9
Bytes: 4
Done

File: runtime/experimental.h

0
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_5804cd56
Bytes: 90
File name should match type name whenever possible, experimental.h -> experimental_flags.h

0
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_5804cd56
UUID: 6e4d7d85_33812bed
Bytes: 4
Done

24
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_bd2ccf5f
Bytes: 9
Comments?

24
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_bd2ccf5f
UUID: ae5bf53d_ff435508
Bytes: 4
Done

39
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_fd49272d
Bytes: 117
style nit: don't rely on integer automatic conversion to bool (see "Coding Like Its Java")

  return value_ != kNone;

39
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_fd49272d
UUID: ae5bf53d_df4091fe
Bytes: 4
Done

73
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_63047e57
Bytes: 26
if (started = false) kNone

73
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_63047e57
UUID: ae5bf53d_9f7e9941
Bytes: 4
Done

File: runtime/interpreter/interpreter.cc

464
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_f201567c
Bytes: 407
This doesn't seem right. I think you want to load/link/verify/etc the interface class but *not* initialize it (if I'm understanding the old code here correctly?).

I think you had an upcoming CL that fixes the initialization order, so you might just want to leave a comment here saying "this is wrong but I'm fixing it in the next CL"

and add a DCHECK/CHECK/etc if possible to catch the incorrect behavior.

464
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_f201567c
UUID: ee616dea_97d9e65f
Bytes: 4
Done

File: runtime/mirror/class-inl.h

395
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_ef73b16c
Bytes: 41
Add a comment to this DCHECK for clarity?

395
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_ef73b16c
UUID: 6e4d7d85_f3e15206
Bytes: 4
Done

File: runtime/mirror/class.cc

725
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_bce4d94e
Bytes: 39
Why this change? Please leave a comment

725
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_bce4d94e
UUID: 2e470569_b4873703
Bytes: 39
I actually meant to remove this.

Done.

File: runtime/parsed_options.cc

562
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_19dd37f8
Bytes: 250
Let's include the longer disclaimer from below too.

(For example):

"All existing invoke opcodes have an unstable updated specification and are nearly guaranteed to change over time. Do not attempt to write shipping code against the invoke opcodes."

562
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_19dd37f8
UUID: 2e470569_1403ab1b
Bytes: 4
Done

File: runtime/runtime.h

535:0-541:3
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_1f58736e
Bytes: 159
Probably don't need both of these methods?


  bool AreExperimentalFlagsEnabled(ExperimentalFlags flags) [
    return experimental_flags_ & flags != kNone;
  }

535:0-541:3
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_1f58736e
UUID: 6e4d7d85_f3983266
Bytes: 52
We do want to support only one or the other I think.

535:0-541:3
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_f3983266
UUID: 75439281_67d8400d
Bytes: 261
With the above function it allows querying any combination of flags (only defaults, only lambdas, both defaults and lambdas) so it's just more general.

We might also need to add experimental repeatable etc, and we shouldn't need to add a new method every time.

File: runtime/runtime_options.def

117:105-117:109
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_7cd41d26
Bytes: 220
Having "none" as an explicit option doesn't make sense (because it wouldn't change the result of the flags if it was on the command line, i.e. x or 0 = x), it can just be '-Xexperimental:' if they don't want any options.

117:105-117:109
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_7cd41d26
UUID: ae5bf53d_22a9d6c7
Bytes: 4
Done

File: runtime/verifier/method_verifier.cc

200
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_d38bfe12
Bytes: 19
Unnecessary change?

200
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_d38bfe12
UUID: 6e4d7d85_b382baf2
Bytes: 4
Done

633:44-633:56
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_ea8cfbbe
Bytes: 14
update comment

633:44-633:56
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_ea8cfbbe
UUID: 8e52b121_86ad3fc3
Bytes: 4
Done

638
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_328dae6b
Bytes: 260
I believe Andreas wrote a dex file test that munges around with the flags to check invalid combinations, perhaps we can update it to remove kAccAbstract from the list of "invalid" flags for interfaces (when this setting is enabled)?

+agampe@ for more thoughts

667
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_5c883d5b
Bytes: 196
Not sure if this is right, the constraint might be too big.

Can an interface class have methods that aren't public (accessibility level)? Final methods? Synthetic methods (this one probably yes)?

667
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_5c883d5b
UUID: 2e2e2591_e3986d66
Bytes: 4
Done

File: test/960-default-smali/build

16
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_b8fcdda5
Bytes: 41
Pretty complicated, some comments please?

16
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_b8fcdda5
UUID: ee616dea_f7438331
Bytes: 26
replaced with bash option.

17:39-17:46
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_1c90810d
Bytes: 74
all of these exit 1s are redundant, just use "set -e" to do the same thing

17:39-17:46
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_1c90810d
UUID: ce582944_7e888e5b
Bytes: 4
Done

19:8-19:10
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_b9498bfc
Bytes: 157
Kind of a round about way of doing things

  if [[ $@ == *"--jvm"*; ]] 

which is not strictly right (it'll catch things like --jvmfoo) but its still better.

19:8-19:10
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_b9498bfc
UUID: ee86cdd4_a05b6ff5
Bytes: 4
Done

20
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_f48ca6be
Bytes: 18
why not mkdir -p ?

20
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_f48ca6be
UUID: 2e470569_fe722ea6
Bytes: 4
Done

21
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_2af1830f
Bytes: 18
why not mkdir -p ?

21
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_2af1830f
UUID: ae5bf53d_7c64135a
Bytes: 4
Done

23:61-23:62
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_78ff85a0
Bytes: 62
use "$(...)" instead or it wont support file names with spaces

23:61-23:62
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_78ff85a0
UUID: ee616dea_970447e1
Bytes: 44
doesn't work since filenames have / in them.

26:46-26:48
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_53582e21
Bytes: 129
Can you refactor this out to something like EXPERIMENTAL_API_LEVEL=23 and fix the other scripts not to use the magical 23 either?

26:70-26:72
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_572b76c4
Bytes: 62
use "$(...)" instead or it wont support file names with spaces

26:46-26:48
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_53582e21
UUID: 6e4d7d85_98159cd4
Bytes: 38
Not without changing run-test a bunch.

26:70-26:72
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_572b76c4
UUID: ce582944_59b7240d
Bytes: 48
doesn't work since the filenames have / in them.

26:70-26:72
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_59b7240d
UUID: 1548969f_4451c4db
Bytes: 44
Why does the / matter? "" shouldn't escape /

26:46-26:48
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_98159cd4
UUID: 1548969f_245638d5
Bytes: 30
Yes changing run-test is fine.

26:70-26:72
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1548969f_4451c4db
UUID: b5398a03_5a6d1539
Bytes: 61
> Why does the / matter? "" shouldn't escape /

well it does.

27:4-27:18
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_d9d79f5c
Bytes: 16
"$TEST_NAME.jar"

27:4-27:18
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_d9d79f5c
UUID: 4e4c398b_105d015f
Bytes: 4
Done

File: test/960-default-smali/expected.txt

0
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_9710ce83
Bytes: 23
Is this auto generated?

0
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_9710ce83
UUID: ce582944_be9cc6d0
Bytes: 148
Yes. Unfortunately it would be difficult to have generate_smali make this since the results depend on each class. This one is fairly small though...

File: test/960-default-smali/info.txt

3:38-3:44
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_9f46abe8
Bytes: 15
Java 8 Language

3:38-3:44
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_9f46abe8
UUID: 0e5fa128_e0ce1bbb
Bytes: 4
Done

File: test/960-default-smali/run

17
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_d8167981
Bytes: 16
Same as in build

17
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_d8167981
UUID: ee86cdd4_00181b3d
Bytes: 26
see comment on other file.

File: test/960-default-smali/smali/classes.xml

1
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_9e4d8d60
Bytes: 47
How about a corresponding XSD file for the win?

File: test/960-default-smali/util-src/generate_smali.py

35
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_a2f952b5
Bytes: 11
line length

35
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_a2f952b5
UUID: 8e52b121_b0a2b5df
Bytes: 4
Done

37
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_1abc01ef
Bytes: 238
google3 style guide kindly requests docstrings for any public (not prefixed with _) functions and classes
-- only saying this once, but obviously every function should get some docstrings added.

also style: functions are lower_with_under

37
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_1abc01ef
UUID: ce582944_59ce0499
Bytes: 4
Done

103
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_bfe4c74e
Bytes: 6
Why 4?

103
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_bfe4c74e
UUID: 4e4c398b_7035550c
Bytes: 35
Removed. i forgot i left this here.

150
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_c213268f
Bytes: 17
redundant newline

150
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_c213268f
UUID: 2e2e2591_e36f4df2
Bytes: 4
Done

159
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_ef8bac12
Bytes: 16
missing new line

229
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_f52dc075
Bytes: 17
redundant newline

229
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_f52dc075
UUID: ee86cdd4_9e26ccfb
Bytes: 4
Done

237
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_8249aeaa
Bytes: 15
missing newline

237
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_8249aeaa
UUID: 2e2e2591_c37211a7
Bytes: 4
Done

240
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_1f0d1bb2
Bytes: 17
redundant newline

240
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_1f0d1bb2
UUID: 0e5fa128_766f9539
Bytes: 4
Done

242
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_deed4585
Bytes: 11
line length

242
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_deed4585
UUID: 2e470569_f4248f8e
Bytes: 4
Done

253
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_44f1820e
Bytes: 50
style: functions are lower_with_under (same below)

253
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_44f1820e
UUID: 4e4c398b_f9981166
Bytes: 4
Done

254
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_900455e1
Bytes: 8
while c?

254
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_900455e1
UUID: 6e4d7d85_5390260e
Bytes: 4
Done

254
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_5390260e
UUID: d55b5e6b_8dcdb19e
Bytes: 28
(still says while c != None)

254
Fri Oct 02 18:49:38 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d55b5e6b_8dcdb19e
UUID: b5526a4f_f2d0885b
Bytes: 4
Done

260:0-261:16
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_300369d7
Bytes: 11
yield from?

260:0-261:16
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_300369d7
UUID: ae5bf53d_2dd2e7e6
Bytes: 4
Done

300
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_a2639224
Bytes: 86
nit: modern python prefers list comprehensions over the using the functional functions

300
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_a2639224
UUID: ee86cdd4_1e1abca7
Bytes: 4
Done

302
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_1018653d
Bytes: 11
line length

302
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_1018653d
UUID: ee86cdd4_9e49ecaa
Bytes: 4
Done

307
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_3e2a1db0
Bytes: 11
line length

307
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_3e2a1db0
UUID: 4e4c398b_b9e5f9e1
Bytes: 4
Done

File: test/961-default-iface-resolution-generated/build

19
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_de40a170
Bytes: 4
Why?

19
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_de40a170
UUID: 4e4c398b_19176d7f
Bytes: 89
Added comment. Basically it is really small and generating the smali files blows past it.

23
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_9509d4f9
Bytes: 14
Same as before

23
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_9509d4f9
UUID: 8e52b121_c6fc57a7
Bytes: 4
Done

File: test/961-default-iface-resolution-generated/expected.txt

0
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_7a0421e0
Bytes: 179
It might be good if this was generated by run-test on the fly instead of checking this in. It also makes this CL looks unnecessarily scarily large.

What does everyone else think?

0
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_7a0421e0
UUID: ee86cdd4_60ec878a
Bytes: 4
Done

File: test/961-default-iface-resolution-generated/util-src/generate_smali.py

27
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_f517000d
Bytes: 60
Seems similar-ish to the other script, can it be refactored?

27
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_f517000d
UUID: ee86cdd4_4034e3bf
Bytes: 411
Not easily. Bits could but it would become much more complicated than it already is. I could show you the small amount of work I put into refactoring out some of the stuff. Unfortunately the only bits that can really be factored out are the creation of the trees. The other stuff is all very tied to what is being tested in each file.

Did factor out some of the common functions into test/utils/python/utils.py

45
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_1515c404
Bytes: 33
see style nits from previous file

45
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_1515c404
UUID: 2e470569_0a202961
Bytes: 4
Done

200
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_b04079fd
Bytes: 32
docstrings over regular comments

200
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_b04079fd
UUID: ee86cdd4_002edb71
Bytes: 35
Cannot have docstrings for statics.

202
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae5bf53d_d043ed08
Bytes: 72
google style guide prefers not to  make such complicated functional maps

File: test/962-iface-static/build

25
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_d759a672
Bytes: 130
This looks pretty similar to the other file, can we refactor?

In fact, why not just add --jvm functionality to every single test?

25
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_d759a672
UUID: 0e5fa128_00ffefd3
Bytes: 146
Other tests already have it, we need to do different building if we are --jvm.

The architecture of run-test means we cannot really refactor this.

File: test/962-iface-static/run

0
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_53e26e98
Bytes: 16
Same as in build

0
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_53e26e98
UUID: 0e5fa128_c0f8b7e9
Bytes: 20
see comment in build

File: test/963-default-range-smali/build

25
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_533f0e9f
Bytes: 61
This looks pretty similar to the other file, can we refactor?

25
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_533f0e9f
UUID: ee616dea_f71ca373
Bytes: 25
see comment in other file

File: test/963-default-range-smali/run

17
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_33e7f2a8
Bytes: 16
Same as in build

17
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_33e7f2a8
UUID: 8e52b121_7041ddd5
Bytes: 25
see comment in other file

File: test/run-test

159:0-160:33
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_78b1cd38
Bytes: 74
This is default already, why does it need to be repeated from line 43/44 ?

159:0-160:33
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_78b1cd38
UUID: 2e470569_2a2e4572
Bytes: 4
Done

File: tools/extract_embedded_java.sh

0
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_bf983f65
Bytes: 185
bash filenames don't need '.sh' extension which implies sh[ell] scripts, not bash scripts


also consider "extract-embedded-java" to be consistent with our other scripts (run-test, etc)

0
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_bf983f65
UUID: ce582944_3e88d6a8
Bytes: 4
Done

21
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_fde7e71a
Bytes: 60
Perhaps have a small description of what this actually does?

21
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_fde7e71a
UUID: ce582944_9e60e298
Bytes: 4
Done

22:46-22:88
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_98cb61aa
Bytes: 47
This is pretty magical, can this be simplified?

22:46-22:88
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_98cb61aa
UUID: 2e2e2591_0d44c882
Bytes: 87
without this it takes forever to run this script since it does everything sequentially.

23
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_730c4a49
Bytes: 111
Can you include some comments with sample strings that get matched, and also what happens before/after the sed?

23:65-23:67
Fri Sep 25 01:10:43 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_1462a2d5
Bytes: 93
Isn't this introducing a data race? What's to prevent the output from happening concurrently?

23
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_730c4a49
UUID: 0e5fa128_a0e70358
Bytes: 4
Done

23:65-23:67
Mon Sep 28 22:45:14 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_1462a2d5
UUID: 4e4c398b_95b1e33b
Bytes: 49
no each thread writes and reads a different file.

