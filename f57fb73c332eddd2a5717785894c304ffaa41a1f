Revision: f57fb73c332eddd2a5717785894c304ffaa41a1f
Patch-set: 1
File: runtime/arch/arm64/quick_entrypoints_arm64.S

1016:4-1016:7
Thu May 08 11:15:04 2014 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8afd1475_66517695
Bytes: 33
I don't think it will be changed.

1017:4-1017:8
Thu May 08 11:15:04 2014 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8afd1475_e60726a3
Bytes: 50
ldaxr  w1, [x4]    // load lock_word, acquire lock

1019:4-1019:8
Thu May 08 11:15:04 2014 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8afd1475_26476edc
Bytes: 55
stlxr  w3, w2, [x4]    // store lock_word, release lock

1019:4-1019:8
Thu May 08 22:19:18 2014 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8afd1475_26476edc
UUID: ca138c9f_d3829eeb
Bytes: 330
This doesn't need to be a release store.  See F.3.1 in the ARMv8 manual.

So long as the ldx uses acquire, the barrier can be dropped and nothing else is needed.  I'd vote for moving everything from dmb to acquire/release in one fell swoop, since the documentation seems less than crystal clear on acquire/release/dmb interaction.

1019:4-1019:8
Fri May 09 18:16:20 2014 +0000
Author: Stuart Monteith <1037216@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca138c9f_d3829eeb
UUID: eac4d062_ef38bd5b
Bytes: 119
Agreed. The acquire ensures the following instructions happen after the load, and the stxr catches stores on other PEs.

1021:0-1021:94
Wed May 07 00:06:04 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa49f8a5_c49cb48e
Bytes: 23
dmb ishld ? (new in v8)

1021:0-1021:94
Tue May 13 01:24:41 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa49f8a5_c49cb48e
UUID: 8a6a7464_13ba565b
Bytes: 4
Done

1048
Fri May 09 18:16:20 2014 +0000
Author: Stuart Monteith <1037216@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2aa8a88f_2442e8cb
Bytes: 26
"lock" should be "unlock".

1066:11-1066:14
Wed May 07 00:06:04 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a58b470_40ffe2d0
Bytes: 6
ishst?

1066:11-1066:14
Wed May 07 01:03:07 2014 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a58b470_40ffe2d0
UUID: 8a58b470_00a84afe
Bytes: 784
This needs to be a LoadStore and StoreStore barrier.  Andreas and I concluded form the table in the documentation that ish is probably the best we can do here.

Much more importantly, the barrier needs to go BEFORE the stores that effects the release of the lock.  Otherwise memory operations inside the critical sections can become visible after the lock release becomes effective, allowing other threads to acquire the lock before they see changes performed by this critical section.

If the same code is used for ARM32, it should be fixed there, too.

I conjecture that just replacing the str with an strl, removing the dmb, will work as well and run faster.  The documentation is not as clear as I would personally like about the interaction of acquire/release operations and dmb.

1066:11-1066:14
Fri May 09 18:16:20 2014 +0000
Author: Stuart Monteith <1037216@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a58b470_00a84afe
UUID: 2aa8a88f_241748af
Bytes: 216
From my reading, a "strl" would be sufficient.
load/stores before strl will be visible before the strl itself is.
I would leave this as it is, with the dmb moved before the str - I'll try and get a definitive answer.

1066:11-1066:14
Tue May 13 01:24:41 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2aa8a88f_241748af
UUID: 8a6a7464_f3e9c249
Bytes: 16
Moved above str.

File: runtime/arch/x86_64/quick_entrypoints_x86_64.S

700:0-700:34
Wed May 07 00:06:04 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a346007_e9b0971d
Bytes: 94
was this a copy of old code brought over from x86? I remember there was a similar issue there.

700:0-700:34
Tue May 13 01:24:41 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a346007_e9b0971d
UUID: 0a43e481_c19ca48e
Bytes: 122
This is a copy of the current x86 code that correctly tests the bitmask (as fat lock is given as mask=01 of the top bits).

