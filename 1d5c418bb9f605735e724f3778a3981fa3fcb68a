Revision: 1d5c418bb9f605735e724f3778a3981fa3fcb68a
Patch-set: 4
File: compiler/dex/quick/gen_invoke.cc

533:11-533:16
Mon Jun 30 04:32:06 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c450e5a6_7fafcb1b
Bytes: 394
General comment: please take a look into https://android-review.googlesource.com/#/c/99560/2/compiler/dex/quick/x86/target_x86.cc I think this simplifies a lot this utility. If we did a promotion we have already updated the ArgLocs with information about whether it is on promoted register or not. So I do not see the sense in looking into vmap table. We can simply use RegLocation information.

533:11-533:16
Mon Jun 30 05:21:42 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c450e5a6_7fafcb1b
UUID: 841c2dfc_fdc203cc
Bytes: 112
You're probably right (didn't get a chance to look at that one closely), but it can be considered independently.

File: compiler/dex/quick/ralloc_util.cc

1140:7-1140:71
Mon Jun 30 04:32:06 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6421f930_dc7061f1
Bytes: 543
If we consider the long and int as different things and sort array then without taking into account we can meet the following case: let's we have 1 promoted register and v4 used as int 5 times and as long 5 times while v6 used as int 6 times. As a result we will promoted v6. however taking into account that core register for long and int is the same we could better benefit if we would promote v4. So I would consider add use_count to lower part anyway or handle this later as it is done in https://android-review.googlesource.com/#/c/99080/

1140:7-1140:71
Mon Jun 30 05:21:42 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6421f930_dc7061f1
UUID: c450e5a6_1fbc8752
Bytes: 202
Yes, it would be better.  I'll leave it up to Andreas, but my inclination would be to patch it up later (keeping in mind that 32-bit targets would would need the high reg portion added to the next reg).

1288:45-1288:46
Mon Jun 30 04:32:06 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 841c2dfc_1d233711
Bytes: 3
&&?

1288:45-1288:46
Mon Jun 30 05:21:42 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 841c2dfc_1d233711
UUID: 6421f930_bc6fad0c
Bytes: 30
Thanks - yes, it should be &&.

1288
Mon Jun 30 15:26:33 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6421f930_bc6fad0c
UUID: 84334d7e_36af3084
Bytes: 137
Please revert this part of patchset 3's state, x86_64 testing shows that it is not fully correct. Lets fix DCHECK issue in a separate CL.

1288
Wed Jul 02 17:19:16 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84334d7e_36af3084
UUID: 44d07588_88535726
Bytes: 309
The DCHECK issue is adressed by Andreas's https://android-review.googlesource.com/#/c/99824/.

Please revert ralloc_util.cc to state of patchset 3 and merge the promotion patch. The changes between patchset 3 and 4 in ralloc_util.cc relate to 64-bit ref support in backend, please separate it into another CL.

1305:14-1305:22
Mon Jun 30 04:32:06 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6421f930_fc7525de
Bytes: 117
This code expects that long is always promoted to pair registers but I do not see this logic in AllocPreservedCoreReg

File: compiler/dex/quick/x86/target_x86.cc

1890:53-1890:56
Wed Jul 02 17:19:16 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44d07588_c84d4f82
Bytes: 172
Please remove changes from FlushIns since they cause merge conflict with Simplify FlushIns patch.

The "Simplify Flushins patch" works correctly with patchset 3 of this CL.

1922:29-1922:32
Wed Jul 02 17:19:16 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44d07588_28434b57
Bytes: 172
Please remove changes from FlushIns since they cause merge conflict with Simplify FlushIns patch.

The "Simplify Flushins patch" works correctly with patchset 3 of this CL.

