Revision: b7b68522d2af81f8532f09492ffab3b602303e6f
Patch-set: 16
File: compiler/driver/compiler_driver.cc

1080:0-1085:3
Mon May 12 23:10:02 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_2d36196f
Bytes: 92
Perform a similar rewrite for dex-to-dex, perhaps fold into devirtualization for dex-to-dex?

1085
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_2d36196f
UUID: 6471f9c6_e89e3b82
Bytes: 13
Added as TODO

File: runtime/arch/x86/quick_entrypoints_x86.S

1312:0-1312:39
Mon May 12 23:10:02 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_4d9eeddd
Bytes: 48
/* Build pointers to the start of string data */

1312
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_4d9eeddd
UUID: 84ba6d9a_4a17331c
Bytes: 4
Done

File: runtime/asm_support.h

58:8-58:27
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa5498b1_a359ba36
Bytes: 126
Update here, too, please. Note these numbers should be simply the values for the #ifndef USE_BAKER_OR_BROOKS_READ_BARRIER + 8.

58
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa5498b1_a359ba36
UUID: e44ec981_fa580d0f
Bytes: 4
Done

File: runtime/interpreter/interpreter_common.cc

74:8-74:19
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a5e84cf_6f2881e9
Bytes: 534
So, these new string_init code fragments are dependent on the string factory method signatures, right? I wonder if there's a clearer/more robust way of coding/organizing/commenting this in case we change the string factory methods in the future.

Maybe add a top-level comment that describes what new code fragments does? Or, add a comment to each of the code fragments to describe what they do?

Do we have a test that matches the string constructors and the string factory methods signatures and detect inconsistencies between them?

74
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5e84cf_6f2881e9
UUID: 2492a112_427ab4fc
Bytes: 160
I'll add some comments to explain what the new code blocks do. StringInitToStringFactoryMethodID gets the proper method and fatally fails if something is wrong.

202:7-202:16
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a5e84cf_cf78950a
Bytes: 47
What does this code do?

What's the old string?

202
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5e84cf_cf78950a
UUID: 2492a112_02d82cab
Bytes: 557
This code makes sure that all registers that hold a copy of the string get updated to contain the result of the StringFactory.

The old string is created by a new-instance instruction, which now just allocates a dummy string. It's possible for the result of the new-instance to be copied into different registers before String.<init> is invoked. All copies of the dummy string have to be overwritten by the new StringFactory result, and this code sweeps the registers making sure that happens. I've changed the comment to explain this a little more clearly.

File: runtime/interpreter/interpreter_goto_table_impl.cc

513:14-513:15
Mon May 12 23:10:02 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa7bb835_05044634
Bytes: 37
c = mh.GetClassFromTypeIdx(inst->...)

File: runtime/interpreter/interpreter_switch_impl.cc

426:18-426:19
Mon May 12 23:10:02 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa7bb835_c5e4fe49
Bytes: 37
c = mh.GetClassFromTypeIdx(inst->...)

427:24-427:28
Mon May 12 23:10:02 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_0dba355b
Bytes: 7
nullptr

File: runtime/mirror/class.h

433:0-434:76
Mon May 12 23:10:02 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa7bb835_ba66ad2e
Bytes: 54
we should consider replacing this with a modifier flag

File: runtime/mirror/object-inl.h

346:18-346:30
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca570cb3_6428aae9
Bytes: 66
We should pass in the read barrier (the enum) through to GetClass.

346
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca570cb3_6428aae9
UUID: 64d659dd_31a11052
Bytes: 4
Done

351:18-351:30
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a30447d_7fffc313
Bytes: 5
Same.

351
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a30447d_7fffc313
UUID: 64d659dd_d18524ba
Bytes: 4
Done

397:33-397:51
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a30447d_1f0c8f9e
Bytes: 128
This looks like dangerously mixing a boolean and an enum. Please use the enum, everywhere. We no longer use the boolean version.

397
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a30447d_1f0c8f9e
UUID: 64d659dd_116dec85
Bytes: 78
This was an artifact of rebasing multiple times. I've updated it to use enums.

File: runtime/mirror/object.h

161:70-161:84
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca570cb3_442b2ee7
Bytes: 128
We're using an enum "ReadBarrierOption kReadBarrierOption" instead of a boolean for the read barrier flag. Can you switch to it?

161
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca570cb3_442b2ee7
UUID: 64d659dd_918f9cd6
Bytes: 4
Done

File: runtime/mirror/string-inl.h

65:46-65:60
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca570cb3_24b71274
Bytes: 21
This isn't necessary?

65
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca570cb3_24b71274
UUID: 2492a112_73eea8de
Bytes: 4
Done

File: runtime/mirror/string.cc

92
Tue May 13 22:49:19 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0af3e41b_1e6aed29
Bytes: 398
As discussed over chat, if you don't pass down allocator from the entrypoint it uses Heap::GetCurrentAllocator() which won't result in constant propagation. This means that there is a lot of redundant switch statements in the allocation code path. Also, this calls Alloc<true> which is the instrumented (slow) entrypoint. Consider looking at the Class::Alloc to see an example of a fast entrypoint.

98
Tue May 13 22:49:19 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aaf9f8ff_dec88159
Bytes: 185
Another issue here, there is probably a race where other threads could miss the writes since there is no fence before the return. Maybe worth using a pre fence visitor to do the memcpy?

98
Mon Jun 16 22:00:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aaf9f8ff_dec88159
UUID: 64ec997a_017eca36
Bytes: 758
I think we need to do the memcpy in the pre fence visitor, instead of here. The old string had final fields (offset, etc.), which meant that the compiler/runtime issues a store-store barrier at the end (after the char array content is copied) of the String constructor. Now, with the new string, we don't have that barrier. Currently, the allocator issues a barrier after the class and the string length are set but *before* the string contents are copied (this memcpy call). So, a string's context could temporarily look all zero to other threads.

A fix would be to move this memcpy call to SetStringCountVisitor.

Or, inserting a barrier at the end of the string construction to simulate the store-store barrier for final fields at the end of constructor.

98
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64ec997a_017eca36
UUID: 2492a112_f4537e99
Bytes: 67
I've created visitors to handle the copying for these constructors.

File: runtime/mirror/string.h

47:39-47:47
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a1b4808_c02cf488
Bytes: 29
Can we simply return &value_?

47
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a1b4808_c02cf488
UUID: 2492a112_737b0803
Bytes: 45
Not quite, but I can return something similar

50:70-50:84
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca570cb3_2422b209
Bytes: 12
bool -> enum

50
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca570cb3_2422b209
UUID: 64d659dd_578a840d
Bytes: 7
removed

154:2-154:9
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a30447d_5f6d2740
Bytes: 32
Should this be of type uint16_t?

154
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a30447d_5f6d2740
UUID: 64d659dd_b7be509a
Bytes: 4
Done

File: runtime/native/java_lang_String.cc

30:13-30:26
Tue May 13 19:08:00 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a30447d_9f109fb4
Bytes: 142
chatAt used to a non-native method. Do we have a compiler intrinsic for this? I worry about its performance.

Same for compareTo, concat, etc.

30
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a30447d_9f109fb4
UUID: 2492a112_73ec6874
Bytes: 119
charAt already has a compiler intrinsic. I'll consider adding intrinsics for other methods that were not native before.

File: runtime/reflection.cc

479:0-479:63
Mon May 12 23:10:02 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa7bb835_bae30d68
Bytes: 112
this may evaluate to true for String.<clinit>, you can avoid this by placing in the "if (!m->IsStatic())" below.

479
Wed Jun 18 22:23:46 2014 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa7bb835_bae30d68
UUID: 2492a112_b3a5102d
Bytes: 4
Done

