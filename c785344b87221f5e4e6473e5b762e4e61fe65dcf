Revision: c785344b87221f5e4e6473e5b762e4e61fe65dcf
Patch-set: 6
File: compiler/driver/compiler_driver.h

345:0-345:77
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_530f01e6
Bytes: 19
indentation is off.

345:0-345:77
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_530f01e6
UUID: 9033a6f4_4fb754c7
Bytes: 4
Done

File: compiler/image_writer.cc

193:8-193:12
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_31dd94e3
Bytes: 29
Can this be size_t? Why auto?

193:8-193:12
Wed Apr 15 00:54:43 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_31dd94e3
UUID: 9033a6f4_0fbdcc44
Bytes: 4
Done

229:2-229:12
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_71255c61
Bytes: 13
Is this used?

229:2-229:12
Wed Apr 15 00:54:43 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_71255c61
UUID: d0299e86_754f7ec5
Bytes: 4
Done

321:8-321:71
Fri Apr 10 20:15:58 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3617abc_5daacb7d
Bytes: 78
Is lint OK with this? (Did we upgrade lint to accept C++11 brace-initializer?)

321:8-321:71
Fri Apr 10 20:22:51 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_5daacb7d
UUID: a3214287_e54bf635
Bytes: 65
I don't think we did, but I thought Roland was thinking about it.

321:8-321:71
Fri Apr 10 20:23:22 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_5daacb7d
UUID: e32fba6e_47ba0e50
Bytes: 35
Seems to compile, so I'd assume so.

321:8-321:71
Mon Apr 20 09:12:40 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a3214287_e54bf635
UUID: 103a56f6_20c8ea56
Bytes: 340
I've uploaded a CL about this (https://android-review.googlesource.com/#/c/138693/), but this was for another pattern, where the closing brace is immediately followed by a semicolon in a return statement.  I'm working on merging it into upstream cpplint along with other changes.

Your case was already covered (and accepted) by cpplint. :)

File: compiler/image_writer.h

134:4-134:19
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_ededf307
Bytes: 107
Might be more intuitive if kBinMirrorCount comes after kBinArtMethodNotInitialized and kBinSize comes last?

134:4-134:19
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_ededf307
UUID: d0299e86_3588d6b8
Bytes: 4
Done

312:11-312:18
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_eeea80ed
Bytes: 39
struct members don't need the _ suffix.

312:11-312:18
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_eeea80ed
UUID: d0299e86_d54e321b
Bytes: 4
Done

353:32-353:41
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_b16744d4
Bytes: 47
Document what this second value of the pair is?

353:32-353:41
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_b16744d4
UUID: 9033a6f4_0f26ecb2
Bytes: 4
Done

File: imgdiag/imgdiag.cc

172:26-172:38
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_e3f17fae
Bytes: 100
Would it be cleaner if GetImageSize() includes the art field size or it's renamed to something else?

172:26-172:38
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_e3f17fae
UUID: 9033a6f4_6f17b044
Bytes: 150
I want to refactor the image into a bunch of "Sections" in another CL. One of the sections will be mirror objects, one ArtField, one ArtMethods, etc..

File: runtime/art_field.h

1:0-1:2
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_dbe0aa15
Bytes: 80
It would have been nicer if git/gerrit showed us a diff from mirror/art_field.h.

1:0-1:2
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_dbe0aa15
UUID: b0242aae_13be0ba1
Bytes: 6
Agreed

File: runtime/check_jni.cc

996:13-996:31
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_18299b83
Bytes: 17
Be more specific?

996:13-996:31
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_18299b83
UUID: 9033a6f4_8ffbfc8c
Bytes: 4
Done

File: runtime/class_linker.cc

81:22-81:41
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_7c765085
Bytes: 49
Add a one liner to say what kind of checks we do?

81:22-81:41
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_7c765085
UUID: b0242aae_daaad8d3
Bytes: 4
Done

938:6-938:17
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_7ce2d052
Bytes: 740
I guess this is the case where we might trigger a read barrier when it may or may not have been visited as a root yet (mostly due to BufferedRootVisitor).

It might be ok either way, using the to-space copy or the from-space one, as VisitFieldRoots only deals with the field in the non-moving ArtField, but it might be less error-prone if this situation can be avoided.

Or, does BufferedRootVisitor guarantee that the class is visited (corresponding to line 937) before the fields are (corresponding to line 938) so that we will always call VisitFieldRoots() on an already forwarded class (root)?

Maybe visit the fields as a separate root set (independent of classes, ie. this function)?

Similar comment in the for loop in lines 941-943.

938:6-938:17
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_7ce2d052
UUID: 9033a6f4_8f153c76
Bytes: 110
I changed it to be a kWithoutReadBarrier read before the buffered visitor visit. This should be sound I think.

938:6-938:17
Thu Apr 16 18:56:11 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_8f153c76
UUID: d080bec6_8a1a0da3
Bytes: 3
OK.

940:39-940:89
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_5ab38dc8
Bytes: 326
This is correct, but for the CC collector, a non-moving object has the notion of whether it's been marked (logically in to-space) for the to-space invariant, we should still visit the declaring classes of fields. I see the code does so fine, but the comment could bemisleading if it's interpreted as not needing to visit them.

940:39-940:89
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_5ab38dc8
UUID: 9033a6f4_af37d810
Bytes: 4
Done

940:39-940:89
Thu Apr 16 18:56:11 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_af37d810
UUID: 907ac6a8_75275032
Bytes: 37
What's done? Any code/comment change?

1486:26-1487:56
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_6526aab4
Bytes: 224
Maybe is there a race condition between this and GC? If some fields are allocated and their declaring class is set, but they haven't been pointed to by the class, GC may not see those declaring class and fail to update them?

1486:26-1487:56
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_6526aab4
UUID: d0299e86_d5487240
Bytes: 131
I think this race is handled by not having any suspend before the arrays are filled in, does that seem correct? I'll add a comment.

1486:26-1487:56
Thu Apr 16 18:56:11 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_d5487240
UUID: 10dc16fc_d3dd260c
Bytes: 154
Seems ok. But under the CC collector, bear in mind that objects may get moved even if a thread holds a shared mutator lock and not having a suspend point.

1492:16-1492:27
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_d7f07d63
Bytes: 90
I assume this would happen for an OOME as a result of heap allocation failure for methods?

1492:16-1492:27
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_d7f07d63
UUID: b0242aae_134f2b94
Bytes: 52
Yes, that is the case where that can happen I think.

1871:18-1871:28
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_37b461c0
Bytes: 103
Now that LoadClass is split into two parts, update the comment around class.h:91 to include SetupClass?

1871:18-1871:28
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_37b461c0
UUID: d0299e86_d5eab272
Bytes: 4
Done

1915:2-1915:23
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_f7d499e4
Bytes: 61
Is it ok to assume we never fail to allocate in linear alloc?

1915:2-1915:23
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_f7d499e4
UUID: b0242aae_d359a3e2
Bytes: 175
Currently that is the behavior since its not bounded. We would get other CHECK failures before it returns null. Whether or not we decide to bound it is a topic for discussion.

1933:2-1933:29
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_a55b720e
Bytes: 108
Maybe we should call this before above the for loop so GC can see the declaring class field in the ArtField?

1933:2-1933:29
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_a55b720e
UUID: d0299e86_b5e2864f
Bytes: 194
I thought about that, but that would mean that we have some fields with null declaring classes during this point. I think the current behavior is OK since we never update the roots concurrently.

1933:2-1933:29
Thu Apr 16 18:56:11 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_b5e2864f
UUID: 10dc16fc_13a08e18
Bytes: 182
GC seeing null declaring classes seems fine in terms of marking. A mutator won't see the field yet. What goes wrong with that?

Don't we update the roots concurrently with CMS or CC?

File: runtime/class_linker.h

521:0-522:31
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_bc9a7844
Bytes: 25
This may fit in one line.

521:0-522:31
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_bc9a7844
UUID: b0242aae_9300bb05
Bytes: 4
Done

File: runtime/class_linker_test.cc

995:58-995:60
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_1a974548
Bytes: 11
indentation

995:58-995:60
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_1a974548
UUID: b0242aae_7a3c0443
Bytes: 4
Done

File: runtime/entrypoints/entrypoint_utils-inl.h

473:39-473:40
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_194cfecd
Bytes: 11
indentation

473:39-473:40
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_194cfecd
UUID: b0242aae_ba226c20
Bytes: 4
Done

File: runtime/entrypoints/entrypoint_utils.h

136:43-136:44
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_dc32e421
Bytes: 11
indentation

136:43-136:44
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_dc32e421
UUID: b0242aae_1abaa04c
Bytes: 4
Done

147:39-147:40
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_9c2c5cc8
Bytes: 11
indentation

147:39-147:40
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_9c2c5cc8
UUID: 9033a6f4_590f22e6
Bytes: 4
Done

File: runtime/gc/space/image_space.cc

48:61-48:64
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_dceae4a4
Bytes: 55
When do we have end != mem_map->End()? Leave a comment?

48:61-48:64
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_dceae4a4
UUID: 9033a6f4_99ea2a72
Bytes: 4
Done

File: runtime/linear_alloc.h

31:8-31:13
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_e5f187ae
Bytes: 20
Worth inlining this?

31:8-31:13
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_e5f187ae
UUID: d0299e86_083ca28f
Bytes: 4
Done

File: runtime/mirror/art_method.cc

56:0-57:84
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_180cfbee
Bytes: 22
Maybe fit in one line?

56:0-57:84
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_180cfbee
UUID: 9033a6f4_393fb688
Bytes: 4
Done

File: runtime/mirror/class.h

987:23-987:30
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_a6ea6571
Bytes: 30
Why can't this be RootVisitor?

987:23-987:30
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_a6ea6571
UUID: 9033a6f4_398d7604
Bytes: 56
It could be, but the buffered visiting should be faster.

1179:11-1179:31
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_778d4403
Bytes: 48
Say this is the size of ifields_ in the comment?

1179:11-1179:31
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_778d4403
UUID: b0242aae_9a2a1031
Bytes: 4
Done

1188:11-1188:29
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_f34b90b5
Bytes: 7
similar

1188:11-1188:29
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_f34b90b5
UUID: 9033a6f4_d96792d3
Bytes: 4
Done

File: runtime/mirror/dex_cache-inl.h

62:6-62:7
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_a6cdc568
Bytes: 16
Retain UNLIKELY?

62:6-62:7
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_a6cdc568
UUID: b0242aae_7a0404d0
Bytes: 4
Done

74:4-74:12
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_f1202454
Bytes: 33
DCHECK_LE? What is this checking?

74:4-74:12
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_f1202454
UUID: 9033a6f4_797bfe74
Bytes: 14
Added comment.

File: runtime/mirror/dex_cache.cc

39:27-39:42
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_7881bf48
Bytes: 45
Should we check this is an int or long array?

39:27-39:42
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_7881bf48
UUID: b0242aae_fac3543a
Bytes: 4
Done

File: runtime/mirror/dex_cache.h

120:50-120:58
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_260f9535
Bytes: 36
Can/should this be a template param?

120:50-120:58
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_260f9535
UUID: 9033a6f4_f9d48ee4
Bytes: 136
That would require more handling, I don't see the advantage. We can make it ALWAYS_INLINE if we determine this is a performance problem.

124:62-124:70
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_e6186d78
Bytes: 5
same.

124:62-124:70
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_e6186d78
UUID: b0242aae_9a4d7050
Bytes: 4
Same

File: runtime/mirror/object-inl.h

309:2-309:7
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0242aae_7129d482
Bytes: 37
Should these four be left as DCHECKs?

309:2-309:7
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0242aae_7129d482
UUID: b0242aae_3a0f9c35
Bytes: 4
Done

File: runtime/verifier/method_verifier.cc

455:59-455:60
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0299e86_c3aa03d4
Bytes: 18
Indentation is off

455:59-455:60
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0299e86_c3aa03d4
UUID: 9033a6f4_19ad1a97
Bytes: 4
Done

3988:54-3988:55
Tue Apr 14 21:52:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9033a6f4_58760385
Bytes: 11
indentation

3988:54-3988:55
Wed Apr 15 00:53:40 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9033a6f4_58760385
UUID: 9033a6f4_59a3a2ac
Bytes: 4
Done

