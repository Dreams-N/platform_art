Revision: ff1306c07d724848e329a3a1b82936f131db5828
Patch-set: 4
File: compiler/optimizing/code_generator_arm64.cc

578:43-578:59
Tue Dec 09 10:23:14 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_c3d24889
Bytes: 77
For the time being, could we avoid this complexity, and just do 64bits moves?

578:43-578:59
Tue Dec 09 10:40:23 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a48dbaf4_c3d24889
UUID: 84927610_824bdcf9
Bytes: 235
Ok I'll clean that up now.
Note that this function did not allow generating 32bit moves. It was just necessary to find an appropriate type for the `MoveLocation()` helper. I'll remove it by making the type optional in `MoveLocation()`.

578:43-578:59
Tue Dec 09 10:42:38 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84927610_824bdcf9
UUID: 84927610_0257cc9c
Bytes: 77
Thanks. What's your opinion on it? Did you get any feedback from other teams?

578:43-578:59
Tue Dec 09 15:13:31 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84927610_0257cc9c
UUID: 84927610_65a4a2be
Bytes: 795
32bit moves might bring some (little?) power gain, but will almost certainly not
bring any performance improvement. So my opinion is that we should keep
generating 32bit moves where we can, but that this issue should not drive any
work now.
However we should stay open to investigating other changes around the
parallel move resolver. I'm thinking in particular of using 'load pair' and
'store pair', but we will have a look at that later.

I'm still waiting for feedback. I'm afraid there may not be much data on this
32bit vs 64bit move. For other instructions (eg. data processing) we should note
that this may have a bigger impact on power, and that in certain cases it has an
explicit impact on latencies (eg. 32bit and 64bit SDIV instructions respectively
have a 19 and 35 cycles latency).

