Revision: b0ec24596b0a44c77b57cc3b5a05b198623acbde
Patch-set: 3
File: compiler/utils/arm/assembler_arm.h

380
Thu Aug 27 11:26:24 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_8ca5cb8c
Bytes: 610
I need to read the patch more in details, but I am wondering about one thing.

`kCcDontCare` is used as a default for the `set_cc` arg in instructions. If I understand correctly it means that  instructions that don't override the default can be generated as setting the condition flags, and implies that everything should work if we replace the default with `kCcSet`. Does it?

I don't know about the arm32/T2 code, but I'm pretty sure such a behaviour would break the arm64 code in the opt compiler. We write code like:

    subs dst, in1, in2
    <do some other stuff not setting the flags>
    b.cond target

380
Thu Aug 27 11:55:41 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_8ca5cb8c
UUID: c459e9e9_2efdaba2
Bytes: 697
Yes, everything should work if the default is changed to kCcSet, but some instructions would use the 32-bit encoding instead of available 16-bit encoding, for example ADD/MOV with high registers and many instructions in IT blocks.

On arm64, the S flag is uniformly present for all instructions (notably CMP is an alias for SUBS). This is not the case for 16-bit Thumb instructions which we want to prioritize over 32-bit versions, so we use a different approach. So if you want to use such code on Thumb2, you will have to specify kCcKeep for all instructions in "<do some other stuff not setting the flags>". And this wasn't even possible before, so such code was previously impossible to write.

380
Fri Aug 28 09:19:02 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_2efdaba2
UUID: e478ad71_b6edc884
Bytes: 147
Ok sounds good! I guess it will be worth a test ;)
Maybe the default value can be abstracted to make testing it easy? `static constexpr SetCC ...`?

