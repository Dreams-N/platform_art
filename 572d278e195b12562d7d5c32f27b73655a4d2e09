Revision: 572d278e195b12562d7d5c32f27b73655a4d2e09
Patch-set: 5
File: runtime/memory_region.h

152:49-153:35
Mon Jun 01 13:14:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9fb8c32_a8a134b3
Bytes: 64
Maybe we should (D)CHECK that `vector` fits in the MemoryRegion?

152:49-153:35
Mon Jun 01 13:16:06 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9fb8c32_a8a134b3
UUID: 7919c071_0267f41b
Bytes: 101
I can check that the highest set bit is within the bounds. BitVector does not remember its true size.

152:49-153:35
Mon Jun 01 13:20:44 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7919c071_0267f41b
UUID: 6d42d931_43b20179
Bytes: 55
Yes, this is what I meant; sorry if it wasn't clear. :)

File: runtime/stack_map.h

673:23-673:31
Mon Jun 01 12:59:10 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9fb8c32_e8705cd3
Bytes: 84
dcheck sizes please. FillWith is to generic and here we actually expect equal sizes.

673:23-673:31
Mon Jun 01 13:06:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9fb8c32_e8705cd3
UUID: 7919c071_a2160078
Bytes: 392
Um, that's tricky because BitVector does not know it's true size. It allocates an array of uint32 big enough to fit the highest set bit and all the higher bits are implicitly zero. The size that it returns is the length of the array.

That means:
- the reported size might be smaller if not all bits are used
- the reported size might be bigger because the array is allocated in 32-bit chunks

673:23-673:31
Mon Jun 01 13:16:44 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7919c071_a2160078
UUID: 6d42d931_4369216b
Bytes: 315
huh, that means we are relying on internal details of the BitVector in FillWith which is not ideal... it adds an extra cloud on something whose correctness was trivial to see. 

Could you at least add some docs to the GetRawStorage()? It will minimize the amount of future reasoning when we look at this code again.

673:23-673:31
Mon Jun 01 13:21:39 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d42d931_4369216b
UUID: 7919c071_2239d001
Bytes: 118
If that's the issue, we could move this back to BitVector, so that the implementation details are hidden in the class.

673:23-673:31
Mon Jun 01 14:40:10 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7919c071_2239d001
UUID: d9fb8c32_c87da02b
Bytes: 26
Yea, I'll do that. Thanks.

