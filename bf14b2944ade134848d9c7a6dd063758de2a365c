Revision: bf14b2944ade134848d9c7a6dd063758de2a365c
Patch-set: 13
File: /COMMIT_MSG

43
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2900dfee_fb46ef8a
Bytes: 95
Also add that you removed the bogus test LICMTest.ConstantHoisting from licm_test.cc (and why).

43
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2900dfee_fb46ef8a
UUID: 691f3755_55380c06
Bytes: 4
Done

File: compiler/optimizing/code_generator.cc

823:37-823:64
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 89fb8b33_1e24edee
Bytes: 86
Maybe be more precise here ("Inlining calls from catch blocks is not supported yet.")?

823:37-823:64
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 89fb8b33_1e24edee
UUID: 691f3755_352d90c4
Bytes: 4
Done

825:37-825:60
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c93f43b4_b0cbd887
Bytes: 27
Capital + period please. :)

825:37-825:60
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c93f43b4_b0cbd887
UUID: 89fb8b33_9e3d9df3
Bytes: 4
Done

839:0-845:7
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64211e85_e52216e3
Bytes: 117
Maybe more this check into SSAChecker? (Likewise for the similar check in compiler/optimizing/register_allocator.cc.)

839:0-845:7
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64211e85_e52216e3
UUID: e9ea475e_c1958230
Bytes: 4
Done

852:8-853:71
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2900dfee_bb674731
Bytes: 138
Isn't this check already covered by the `default` case on line 872â€“873?  (I would keep the comment though, and move it before line 873.)

852:8-853:71
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2900dfee_bb674731
UUID: 691f3755_d543fc78
Bytes: 4
Done

1054:6-1054:8
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 09e87b64_a2f6fec4
Bytes: 154
I think we are trying to place operators at the end of lines now (although the C++ style guide seems to be OK with having them at the beginning of lines).

1054:9-1054:47
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e9ea475e_6138f606
Bytes: 116
Add a small explanation about why we cannot use implicit null checks when `null_check` may throw into a catch block?

1054:9-1054:47
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e9ea475e_6138f606
UUID: 2900dfee_bb6e27f3
Bytes: 4
Done

1054:6-1054:8
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 09e87b64_a2f6fec4
UUID: 89fb8b33_1ea74dae
Bytes: 35
I'm getting confused by all this...

File: compiler/optimizing/code_generator_arm.cc

2757:6-2757:7
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44209a82_a4b902b6
Bytes: 62
Move operator on the previous line (likewise for other cases)?

2757:6-2757:7
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44209a82_a4b902b6
UUID: e9ea475e_a1927e44
Bytes: 61
As discussed, I'm gonna leave the ternary operator like this.

2758:6-2758:7
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c93f43b4_90c8d48b
Bytes: 6
Ditto?

2758:6-2758:7
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c93f43b4_90c8d48b
UUID: 2900dfee_9b6b6be3
Bytes: 5
Ditto

3542:0-3548:1
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 691f3755_b512c08d
Bytes: 217
This pattern is the same for all code generators and could be factored.  Maybe we could introduce (possibly in another CL) an InstructionCodeGenerator visitor as base class for all InstructionCodeGeneratorXYZ classes?

File: compiler/optimizing/graph_checker.cc

676
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 490513fd_3c06915e
Bytes: 12
Nit: period.

676
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 490513fd_3c06915e
UUID: e9ea475e_8181baf0
Bytes: 4
Done

683:76-684:65
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64211e85_45692a04
Bytes: 54
Maybe show the constant's values in the error message?

683:76-684:65
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64211e85_45692a04
UUID: 64211e85_65946631
Bytes: 170
I wouldn't complicate it too much. The inputs could be something else than constants, so maybe i could show the number of inputs, but that would make the code uglier too.

File: compiler/optimizing/nodes.h

2190:19-2190:40
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2900dfee_db433379
Bytes: 17
GetValueAsUint64?

2190:19-2190:40
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2900dfee_db433379
UUID: 691f3755_15a734ae
Bytes: 4
Done

4021:8-4021:10
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 09e87b64_421f329b
Bytes: 39
Move to the beginning of previous line?

File: compiler/optimizing/optimizing_compiler.cc

492:0-498:16
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44209a82_44b3eece
Bytes: 167
We should only instantiate the optimizations that will be actually used in `optimizations2`.  For instance, `bce` won't be used if the compiled method has a try/catch.

492:0-498:16
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44209a82_44b3eece
UUID: 691f3755_95922445
Bytes: 110
I agree, but the split is just temporary and I don't want to make this method even messier than it already is.

File: compiler/optimizing/register_allocator.h

214:9-214:31
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e9ea475e_0147ea88
Bytes: 25
Document this new member.

214:9-214:31
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e9ea475e_0147ea88
UUID: 2900dfee_7b0f7f3b
Bytes: 4
Done

File: compiler/optimizing/ssa_liveness_analysis.cc

197:51-197:55
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e9ea475e_e143e678
Bytes: 5
phis?

197:51-197:55
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e9ea475e_e143e678
UUID: c93f43b4_d043fc78
Bytes: 4
Done

198:34-198:44
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e9ea475e_c140e26e
Bytes: 10
SSAChecker

198:34-198:44
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e9ea475e_c140e26e
UUID: a9f4cf41_9f64732d
Bytes: 4
Done

File: runtime/quick_exception_handler.cc

160:30-160:33
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44209a82_a4e022b6
Bytes: 9
Nit: FPU.

160:30-160:33
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44209a82_a4e022b6
UUID: a9f4cf41_bf673731
Bytes: 4
Done

204:0-205:52
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 89fb8b33_de5a0567
Bytes: 25
Break the line after `=`?

204:0-205:52
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 89fb8b33_de5a0567
UUID: 691f3755_d5889c16
Bytes: 4
Done

File: runtime/stack_map.h

1132:30-1132:79
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c93f43b4_b0f998b7
Bytes: 59
Did you add the `encoding` argument for uniformity reasons?

1132:30-1132:79
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c93f43b4_b0f998b7
UUID: 44209a82_24943202
Bytes: 68
Yeah, remnant of the two section changes. Reverted in the latest PS.

1191:0-1192:63
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e9ea475e_a13ddef2
Bytes: 267
We should adjust or remove the comment, as binary search won't work for "normal" stack maps either.

Note that if there's an easy way to state that this method has no catch stack map (maybe using the ArtMethod object?), then we could apply the binary search strategy.

1191:0-1192:63
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e9ea475e_a13ddef2
UUID: c93f43b4_1032a426
Bytes: 4
Done

File: test/510-checker-try-catch/smali/RegisterAllocator.smali

26:0-27:41
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 89fb8b33_5e383506
Bytes: 15
That's awesome!

26:0-27:41
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 89fb8b33_5e383506
UUID: 2900dfee_3b7b37bc
Bytes: 2
:)

File: test/510-checker-try-catch/smali/Runtime.smali

251:16-251:21
Mon Sep 14 11:00:16 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 89fb8b33_3e2d69c4
Bytes: 26
(v0, v1) (here and below)?

251:16-251:21
Mon Sep 14 13:07:46 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 89fb8b33_3e2d69c4
UUID: c93f43b4_302da8c4
Bytes: 4
Done

