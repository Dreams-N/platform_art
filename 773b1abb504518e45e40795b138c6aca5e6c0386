Revision: 773b1abb504518e45e40795b138c6aca5e6c0386
Patch-set: 6
File: compiler/optimizing/builder.cc

753:35-753:61
Tue Jun 09 17:37:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 99ce74a2_1d7477f3
Bytes: 38
Nit: put braces around this expression

753:35-753:61
Tue Jun 09 23:14:54 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 99ce74a2_1d7477f3
UUID: 99fcb4c6_e7047c4f
Bytes: 603
I was looking through some optimizing code and trying to understand when the right time to place braces is so I can document the correct style usage. 

I am guessing if there's == or != AND ((more than 1 operand to && or ||) or it's used by an assignment = operator  ) , it's good?

  x = (a == b)
  x = (a != b)
  (a == b) || (c == d)
  (a == b) && (c == d)

Are there any other examples I missed?

(I'm also not sure I understand the rationale, it's quite common knowledge ==/!= operator precedence is fairly low, and = is even lower. Perhaps there are much better examples than the ones I have here?)

753:35-753:61
Wed Jun 10 00:07:47 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 99fcb4c6_e7047c4f
UUID: 5934fc65_c5340c6b
Bytes: 284
I think adding parens in conditionals should be only to disambiguate && vs || e.g:
if (allocator == kAllocatorTypeTLAB || allocator == kAllocatorTypeRegionTLAB)

vs
if ((allocator == kAllocatorTypeTLAB || allocator == kAllocatorTypeRegionTLAB) &&
      byte_count <= self->TlabSize())

