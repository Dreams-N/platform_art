Revision: 17abd0039cfaed310de4a087740b2a73c3d1a008
Patch-set: 7
File: compiler/driver/compiler_driver-inl.h

317:2-317:26
Tue Jan 26 12:29:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b4a27ebd_00cac629
Bytes: 68
No, thanks to your check line 308. Please add a DCHECK to ensure it.

317:2-317:26
Tue Jan 26 17:57:45 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b4a27ebd_00cac629
UUID: 14beeac6_2774a265
Bytes: 4
Done

311:0-326:3
Tue Jan 26 12:29:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 54a782d1_bdda1f0c
Bytes: 117
Comments please: what is the difference between methods_class and methods_declaring_class. An example will also help.

311:0-326:3
Tue Jan 26 17:57:45 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 54a782d1_bdda1f0c
UUID: f4b5d6da_c39d9cdb
Bytes: 4
Done

331:0-331:103
Tue Jan 26 12:29:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 94a57ac9_7fbecf7c
Bytes: 14
Line too long.

331:0-331:103
Tue Jan 26 17:57:45 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 94a57ac9_7fbecf7c
UUID: f49a3677_1b99c792
Bytes: 4
Done

File: compiler/optimizing/builder.cc

800:0-820:1
Tue Jan 26 12:29:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b4bb5ef1_f8d0b1ef
Bytes: 113
Isn't that more or less what ClassLinker::ResolvedReferencedClassOfMethod is doing? Please avoid the duplication.

800:0-820:1
Tue Jan 26 17:57:45 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b4bb5ef1_f8d0b1ef
UUID: 54c4e260_5e51690e
Bytes: 51
No since we don't have the referring artmethod yet.

800:0-820:1
Wed Jan 27 08:43:05 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 54c4e260_5e51690e
UUID: b417ded7_78d12124
Bytes: 138
Really? I'd assume if we don't then we are just going to generate InvokeUnresolved. And if we do, you can get it from graph_->GetMethod().

800:0-820:1
Wed Jan 27 20:22:25 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b417ded7_78d12124
UUID: 14beeac6_951117a1
Bytes: 4
Done

891:11-891:23
Tue Jan 26 12:29:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 54a782d1_9ddf63fc
Bytes: 46
You're correct, you can drop this TODO: AFAICT

891:11-891:23
Tue Jan 26 17:57:45 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 54a782d1_9ddf63fc
UUID: f4b5d6da_63e93036
Bytes: 4
Done

File: test/973-iface-super-multidex-generated/build

1:0-1:11
Tue Jan 26 12:29:36 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 54a782d1_3def2fa9
Bytes: 255
We need to stop this practice of making individual tests test infrastructure on themselves. What's the difference between this test and the other "generated" like tests?

What is this test making sure is being tested that requires all that infrastructure?

1:0-1:11
Tue Jan 26 17:57:45 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 54a782d1_3def2fa9
UUID: 54c4e260_9e3a21be
Bytes: 91
It is testing that multidex works correctly with invoke-super. I can remove it if you want.

1:0-1:11
Wed Jan 27 08:43:05 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 54c4e260_9e3a21be
UUID: b417ded7_58d45d15
Bytes: 86
OK, then you have src-multidex you can use that the run-test/build scripts understand.

1:0-1:11
Wed Jan 27 20:22:25 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b417ded7_58d45d15
UUID: d4b8d2d6_c23af3be
Bytes: 203
This generates hundreds of files and creates 3 dex files. run-test/build does not understand. If you want I can remove this. I made it originally just to prove to myself that I was doing the right thing.

1:0-1:11
Thu Jan 28 13:57:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d4b8d2d6_c23af3be
UUID: b4bb5ef1_3bdd0391
Bytes: 336
Is the smali-multidex covering what you want to cover? If yes than you can drop this test. If not, then what do you need to *minimally* test it?

Don't get me wrong, I think it's great that you did this test to stress test your implementation. But stress tests (like say fuzzer) are additional maintenance, so should be taken carefully.

