Revision: 3eaf1942d326e3877a47f2cc689cf7d324218cc5
Patch-set: 2
File: compiler/optimizing/code_generator.cc

336:10-336:53
Fri Dec 19 17:29:24 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4144f0e8_00f8a8d9
Bytes: 121
we could store this in the CodeGenerator base class but until we have a real need in other sub classes I wouldn't bother.

File: compiler/optimizing/code_generator_arm.cc

2662
Fri Dec 19 18:48:32 2014 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 614734ed_2120488c
Bytes: 331
I am not sure about this.

The Java spec needs both Atomic and Volatile for Loading/Storing volatiles. As I understand this you only issue a DMB if the implementation does not have HasAtomicLdrd...(). Thus, for platforms that do not have the LPAE extensions you do not generate the DMB, therefore you do not ensure memory ordering.

2662
Fri Dec 19 22:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 614734ed_2120488c
UUID: a13dac4e_03d510ff
Bytes: 112
oh yes... this is wrong (got carried away with the replacement), thanks!. We should always generate the barrier.

2692
Fri Dec 19 18:48:32 2014 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4144f0e8_6035ecf7
Bytes: 48
Only this should depend on HasAtomicLdrdAnd...()

2692
Fri Dec 19 22:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4144f0e8_6035ecf7
UUID: a13dac4e_c3de4821
Bytes: 238
I assume that you wanted to say this, and the double below?

This is one question that I forgot to address. When using LPAE, does the atomicity holds for both, ldrd/strd and vldrd/vstrd? I assumed so since this is how it is done in quick.

2692
Mon Dec 22 11:03:24 2014 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a13dac4e_c3de4821
UUID: a1b76c4b_d07cdca6
Bytes: 751
From ARM ARM - "LDRD and STRD accesses to 64-bit aligned locations are 64-bit single-copy atomic as seen by translation table walks and accesses to translation tables." But no mention of VLDRD and VSTRD being atomic. 

The reason for 64-bit atomic load/stores in LPAE are the page table entries that need to be updated atomicly (using the General Purpose register bank). From this point of view I see no reason  to impose this restriction on the load/stores coming from the Floating Point bank.

If Quick does it, you can use it as a reference, but I am not sure it is correct in this case. I will raise this question with the architecture team, but I do not expect an answer before the new year. I will update you on this as soon as I have an answer.

2692
Mon Jan 05 16:26:56 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a1b76c4b_d07cdca6
UUID: a185ac8b_14302489
Bytes: 32
Yea, I use Quick as a reference.

