Revision: 7050080a3ff6035879f05108ded12bb741417991
Patch-set: 1
File: compiler/optimizing/register_allocator.cc

319:14-319:90
Tue Apr 14 16:26:36 2015 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_40e2b052
Bytes: 23
Does this always stand?

319:14-319:90
Tue Apr 14 16:27:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_40e2b052
UUID: 90a1e660_1f71678b
Bytes: 63
Yes, that's why it's checked :-). Why do you think it wouldn't?

319:14-319:90
Tue Apr 14 18:37:38 2015 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_1f71678b
UUID: b0926a12_83b442e6
Bytes: 287
I remember that when I was collecting the calls positions in ProcessInstruction I had to sort the them by the lifetime_position_ in order to get a monotonic ascending list.

void RegisterAllocator::ProcessInstruction(HInstruction* instruction) {
 if (locations->WillCall()) {
  >>>>
 }
}

File: compiler/optimizing/ssa_liveness_analysis.h

744:6-744:15
Tue Apr 14 16:26:36 2015 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_5f67efd4
Bytes: 6
ditto.

744:6-744:15
Tue Apr 14 16:27:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_5f67efd4
UUID: 90a1e660_3f76a384
Bytes: 5
ditto

