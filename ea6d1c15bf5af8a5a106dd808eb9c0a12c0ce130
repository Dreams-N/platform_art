Revision: ea6d1c15bf5af8a5a106dd808eb9c0a12c0ce130
Patch-set: 1
File: runtime/arch/arm/quick_entrypoints_arm.S

93:49-93:50
Wed Jun 08 17:49:35 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_f50118fc
Bytes: 15
Nit: stray ".".

93:49-93:50
Thu Jun 09 09:36:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_f50118fc
UUID: af9cf82a_3bfb1784
Bytes: 4
Done

96:7-96:56
Wed Jun 08 17:49:35 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_95fc2416
Bytes: 148
Thanks for the refactoring!

Maybe this could factored a bit further, as this new macro shares a lot of code with SETUP_REFS_ONLY_CALLEE_SAVE_FRAME?

96:7-96:56
Thu Jun 09 09:36:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_95fc2416
UUID: af9cf82a_9be90bb7
Bytes: 153
Just checked with vmarko, we agree trying to share code here by using more macros won't really help readability. Did you have something specific in mind?

96:7-96:56
Thu Jun 09 10:21:37 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: af9cf82a_9be90bb7
UUID: af9cf82a_bb3de723
Bytes: 2354
These macros only differ by two lines (saving and restoring rTemp2).  What about something like this:

      /*
       * Macro that sets up the callee save frame to conform with
       * Runtime::CreateCalleeSaveMethod(kRefsOnly).
       * If preserveRTemp2 is non null, preserve the value of rTemp2 at entry.
       */
  .macro SETUP_REFS_ONLY_CALLEE_SAVE_FRAME_MAYBE_PRESERVE_RTEMP2 rTemp1, rTemp2, preserveRTemp2
      push {r5-r8, r10-r11, lr}                     @ 7 words of callee saves
      .cfi_adjust_cfa_offset 28
      .cfi_rel_offset r5, 0
      .cfi_rel_offset r6, 4
      .cfi_rel_offset r7, 8
      .cfi_rel_offset r8, 12
      .cfi_rel_offset r10, 16
      .cfi_rel_offset r11, 20
      .cfi_rel_offset lr, 24
      sub sp, #4                                    @ bottom word will hold Method*
      .cfi_adjust_cfa_offset 4
      .if preserveRTemp2
      str \rTemp2, [sp, #0]                         @ save rTemp2
      .endif
      RUNTIME_CURRENT2 \rTemp1, \rTemp2             @ Load Runtime::Current into rTemp1.
      ldr \rTemp1, [\rTemp1, #RUNTIME_REFS_ONLY_CALLEE_SAVE_FRAME_OFFSET] @ rTemp1 is kRefsOnly Method*.
      .if preserveRTemp2
      str \rTemp2, [sp, #0]                         @ save rTemp2
      .endif
      ldr \rTemp2, [sp, #0]                         @ restore rTemp2
      str \rTemp1, [sp, #0]                         @ Place Method* at bottom of stack.
      str sp, [r9, #THREAD_TOP_QUICK_FRAME_OFFSET]  @ Place sp in Thread::Current()->top_quick_frame.
  
      // Ugly compile-time check, but we only have the preprocessor.
  #if (FRAME_SIZE_REFS_ONLY_CALLEE_SAVE != 28 + 4)
  #error "REFS_ONLY_CALLEE_SAVE_FRAME(ARM) size not as expected."
  #endif
  .endm
  
      /*
       * Macro that sets up the callee save frame to conform with
       * Runtime::CreateCalleeSaveMethod(kRefsOnly).
       */
  .macro SETUP_REFS_ONLY_CALLEE_SAVE_FRAME rTemp1, rTemp2
      SETUP_REFS_ONLY_CALLEE_SAVE_FRAME_MAYBE_PRESERVE_RTEMP2 rTemp1, rTemp2, 0
  .endm
  
      /*
       * Macro that sets up the callee save frame to conform with
       * Runtime::CreateCalleeSaveMethod(kRefsOnly)
       * and preserves the value of rTemp2 at entry.
       */
  .macro SETUP_REFS_ONLY_CALLEE_SAVE_FRAME_PRESERVE_RTEMP2 rTemp1, rTemp2
      SETUP_REFS_ONLY_CALLEE_SAVE_FRAME_MAYBE_PRESERVE_RTEMP2 rTemp1, rTemp2, 1
  .endm

?

File: runtime/arch/x86/quick_entrypoints_x86.S

84
Wed Jun 08 17:49:35 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_350c302f
Bytes: 36
Maybe add

  // Save got_reg.

here?

84
Thu Jun 09 09:36:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_350c302f
UUID: af9cf82a_bbe647e2
Bytes: 4
Done

98:7-98:14
Wed Jun 08 17:49:35 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_d5069c11
Bytes: 7
Restore

98:7-98:14
Thu Jun 09 09:36:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_d5069c11
UUID: af9cf82a_5b23830a
Bytes: 4
Done

File: test/605-new-string-from-bytes/src/Main.java

27:24-27:26
Wed Jun 08 17:38:47 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8385505b_80410002
Bytes: 50
Is 10 iterations really enough to repro the issue?

27:24-27:26
Thu Jun 09 09:36:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8385505b_80410002
UUID: af9cf82a_7b28bfe5
Bytes: 190
For gcstress yes. Though the test wasn't enough for non-gcstress, so I just increased the size of the array below, and now I get consistent crashes even with non-gcstress with 10 iterations.

