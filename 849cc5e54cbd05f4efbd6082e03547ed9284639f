Revision: 849cc5e54cbd05f4efbd6082e03547ed9284639f
Patch-set: 2
File: compiler/utils/arm/assembler_arm32_test.cc

28:11-28:23
Fri Nov 21 08:46:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f526d24_464cf29e
Bytes: 27
Huh? Please document these.

28:11-28:23
Fri Nov 21 08:51:04 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f526d24_464cf29e
UUID: ff5e5d2a_8ad66bcf
Bytes: 224
Sure. I'll put a comment in a follow-up (I'm trying to figure out a way to pull this out as far up the hierarchy of assembler test classes as I can).

In short, this is for std::bind, when all you want is partial evaluation.

169:47-169:89
Fri Nov 21 08:46:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f526d24_2641f666
Bytes: 4
Why?

169:47-169:89
Fri Nov 21 08:51:04 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f526d24_2641f666
UUID: bf586542_c8146f34
Bytes: 122
Made the most sense. If you select the sparse list for "standard" operands, it seemed logical to also pick that list here.

169:47-169:89
Fri Nov 21 08:54:21 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf586542_c8146f34
UUID: 7f526d24_a634c6fd
Bytes: 132
I wasn't clear: registers_ is conditionally the sparse set or the full set. So I don't understand why this will pick the sparse set.

170:41-170:43
Fri Nov 21 08:46:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9f448158_4f23edd4
Bytes: 12
Explain why.

170:41-170:43
Fri Nov 21 08:51:04 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9f448158_4f23edd4
UUID: bf586542_a8213b98
Bytes: 76
I'll put a comment. In short, many instructions don't allow PC in this role.

File: compiler/utils/assembler_test.h

41:27-41:37
Fri Nov 21 08:46:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9f448158_6f1eb188
Bytes: 14
Stall comment?

41:5-41:10
Fri Nov 21 08:46:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f526d24_8618aa93
Bytes: 22
Do you need the class?

41:27-41:37
Fri Nov 21 08:51:04 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9f448158_6f1eb188
UUID: ff5e5d2a_cacc6345
Bytes: 51
I prefer the increased type safety of enum classes.

41:27-41:37
Fri Nov 21 08:54:21 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ff5e5d2a_cacc6345
UUID: 9f448158_ef118173
Bytes: 48
So should we move all our enums to enum classes?

686:0-686:2
Fri Nov 21 08:46:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f526d24_6647ee7e
Bytes: 12
Remove this.

686:0-686:2
Fri Nov 21 08:51:04 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f526d24_6647ee7e
UUID: 9f5d6134_a7d96a01
Bytes: 8
Ah, yes.

748:25-748:42
Fri Nov 21 08:46:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df3a79c4_f1df2865
Bytes: 48
How about returning "", to avoid the null check?

748:25-748:42
Fri Nov 21 08:51:04 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df3a79c4_f1df2865
UUID: ff5e5d2a_6ae577b8
Bytes: 5
Sure.

