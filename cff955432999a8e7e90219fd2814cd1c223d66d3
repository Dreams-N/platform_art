Revision: cff955432999a8e7e90219fd2814cd1c223d66d3
Patch-set: 2
File: compiler/optimizing/instruction_simplifier.cc

26:2-26:30
Fri Mar 20 18:54:53 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_2d8a99b1
Bytes: 141
It would be interested to see how many such transformation we actually do. It's pretty easy to count them if you use OptimizingCompilerStats.

26:2-26:30
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_2d8a99b1
UUID: 83cfde46_b57882bd
Bytes: 4
Done

29:7-29:22
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_2d7a99b7
Bytes: 17
GetRevisitCurrent

29:7-29:22
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_2d7a99b7
UUID: 66111809_d62ea2bb
Bytes: 4
Done

68:0-70:39
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_ac01ab08
Bytes: 216
This seems reasonable, however I wonder whether we could run into infinite loops here.  It might be wise to have a visitor-wide flag stating whether there were a change since we revisited a node, and if not, advance.

68:0-70:39
Fri Mar 20 18:54:53 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_ac01ab08
UUID: 466b346a_6d31719a
Bytes: 203
+1. I don't think we can easily test that this always ends (due to the kind of work done here I think it's not hard to loop through simplifications by mistake).

Should we be worried about converge time?

68:0-70:39
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_6d31719a
UUID: 63caea3a_142b9aad
Bytes: 174
I don't think we need to worry about convergence time.
To ensure we cannot loop infinitely I slightly changed the way we 'revisit' the current instruction by using a counter.

111:0-112:30
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_4e3ef33e
Bytes: 106
I know it might seem over the top, but maybe you should wrap this pattern in a new method of this visitor.

111:0-112:30
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_4e3ef33e
UUID: a61790fa_38b1c574
Bytes: 103
Done.
Locally, I personally prefer explicit code with a comment, but the helper may prove useful later.

241:0-242:35
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_ce298308
Bytes: 7
Remove.

241:0-242:35
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_ce298308
UUID: a61790fa_78bb3d54
Bytes: 4
Done

252:28-252:36
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_ee2ebf0d
Bytes: 13
left->AsNeg()

252:39-252:48
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_8e237b24
Bytes: 14
right->AsNeg()

252:28-252:36
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_ee2ebf0d
UUID: 66111809_16213ac9
Bytes: 4
Done

252:39-252:48
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_8e237b24
UUID: c61c8421_59d3e7fd
Bytes: 4
Done

253:38-253:98
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_8c13875a
Bytes: 92
This predicate is a recurring pattern in this file, that could be moved into its own method.

253:100-253:101
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_ac18cb76
Bytes: 15
Nit: long line.

253:100-253:101
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_ac18cb76
UUID: c3c55625_82e8aaf9
Bytes: 6
Fixed.

253:38-253:98
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_8c13875a
UUID: a61790fa_58b80156
Bytes: 4
Done

259:29-259:41
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_0c547724
Bytes: 55
optimization (and likewise in the rest of this file) ;)

259:29-259:41
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_0c547724
UUID: c61c8421_d9a53780
Bytes: 53
Grepped through the patch to fix all the occurrences.

422:18-422:22
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_ec98037a
Bytes: 9
new_left?

422:18-422:22
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_ec98037a
UUID: a61790fa_58512134
Bytes: 72
Removed the intermediate variable. I think it is more readable that way.

423:18-423:23
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_6ee96f29
Bytes: 10
new_right?

423:18-423:23
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_6ee96f29
UUID: c61c8421_99829fd4
Bytes: 72
Removed the intermediate variable. I think it is more readable that way.

488:2-488:48
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_6c85f307
Bytes: 130
I think you should move back this definition to where it was, as it is better to have variable definitions near their (first) use.

488:2-488:48
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_6c85f307
UUID: c61c8421_39926b25
Bytes: 4
Done

555
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_0c11d755
Bytes: 23
Nit: remove empty line.

555
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_0c11d755
UUID: 66111809_b65e8653
Bytes: 4
Done

File: test/458-checker-instruction-simplification/src/Main.java

281:3-281:15
Fri Mar 20 18:54:53 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_8d4f0515
Bytes: 285
General comment for all these: I would either (re)name the test names based on the actual function they try to verify (e.g. TryMoveNegOnInputsAfterBinopTest) or add the function name in the test comment.

This will make easier to see the links between the tests and the implementation.

281:3-281:15
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_8d4f0515
UUID: c63d64a0_6e60cfb3
Bytes: 362
I opted to add the function tested in the comment. Using the name of the function tested would here create a long line, and in other places be less clear.

As a note, the tests are ordered to follow the order of the transformation implementations. So when looking at the diff for this patch, the transformations and their associated tests come in the same order.

306:28-306:48
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_2cfdbb35
Bytes: 141
"AddNegs1 test case" (Naming test cases is more robust than using a relative location reference, when test cases are modified/moved/deleted).

306:28-306:48
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_2cfdbb35
UUID: c63d64a0_4e3a3399
Bytes: 30
Done here and in other places.

337:11-337:44
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_2e47e7a8
Bytes: 67
Interesting test case; have you had a look at the result after GVN?

337:11-337:44
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_2e47e7a8
UUID: 83cfde46_b5cac2c5
Bytes: 226
I wrote this because it makes it easy to predict the result.
I did have a look:
GVN merges the two additions. Then `instruction_simplifier_after_types` optimizises the `or` away and moves the `neg` after the `add`. Quite cool!

337:11-337:44
Fri Apr 10 15:34:41 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_b5cac2c5
UUID: 634caa14_fb51afec
Bytes: 228
Indeed!

To prevent regressions, I suggest adding an additional Checker (Czecher?) :) section to make sure the two additions are merged:

  // CHECK-START: int Main.AddNegs2(int, int) GVN (after)
  // ...

(Maybe in another CL?)

357:73-357:79
Sat Mar 21 14:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 66111809_13faecb8
Bytes: 6
after?

357:73-357:79
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 66111809_13faecb8
UUID: c61c8421_1c567de7
Bytes: 4
Done

405:28-405:43
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_8d45c525
Bytes: 19
"AddNeg1 test case"

405:28-405:43
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_8d45c525
UUID: 83cfde46_d592ee24
Bytes: 4
Done

406:49-406:61
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_6d3df18e
Bytes: 34
optimization (and likewise below).

406:49-406:61
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_6d3df18e
UUID: c3c55625_771d421e
Bytes: 4
Done

417
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_4c402f12
Bytes: 33
Maybe add

  // CHECK-NOT: Sub

?

417
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_4c402f12
UUID: 83cfde46_5564bece
Bytes: 96
Done.
Also added a few more `CHECK-NOT` in tests that check that an optimization does not occur.

465
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_b1925854
Bytes: 144
Maybe also check that this function returns 0 after constant folding (an optimization that is enabled by the "a + -b → a - b" simplification)?

465
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_b1925854
UUID: c61c8421_9c50cde8
Bytes: 198
I checked that manually. But when I add a test it fails although the output looks ok. From a quick test it looks like the checker only looks at the first instance of the line matching `CHECK-START`.

465
Fri Apr 10 15:34:41 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c61c8421_9c50cde8
UUID: 2312b2d8_12cb52cd
Bytes: 573
Yeah,  when an optimization is performed more than once with the same name (here, "constant_folding"), Checker only looks at the first instance.

Can you add add an explicit name (e.g. "constant_folding_after_inlining") to the "fold2" object (through an additional argument to its ctor) in RunOptimizations in compiler/optimizing/optimizing_compiler.cc, and add a new Checker stanza starting with:

  // CHECK-START: int Main.NegNeg2(int) constant_folding_after_inlining (after)
  // ...

to ensure the second constant folding pass produces this constant 0 as return value?

517:28-517:48
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_8c22a757
Bytes: 19
"NegSub1 test case"

517:28-517:48
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_8c22a757
UUID: c3c55625_22c45690
Bytes: 4
Done

600
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_b101f808
Bytes: 33
Maybe add

  // CHECK-NOT: Sub

?

600
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_b101f808
UUID: c61c8421_bc4b093b
Bytes: 4
Done

608:28-608:48
Fri Mar 20 17:37:20 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_cdcadd1f
Bytes: 19
"SubNeg1 test case"

608:28-608:48
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_cdcadd1f
UUID: c3c55625_42c962a5
Bytes: 4
Done

650:72-650:78
Sat Mar 21 14:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c61c8421_d6bb44d5
Bytes: 6
after?

650:72-650:78
Mon Mar 30 16:32:03 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c61c8421_d6bb44d5
UUID: c61c8421_5c60f5b2
Bytes: 4
Done

