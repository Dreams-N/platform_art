Revision: 3792d2f2d04d4b75937efa5edc7a9e0153ed6a7f
Patch-set: 3
File: compiler/optimizing/stack_map_stream.h

31:0-31:90
Sat Mar 21 14:45:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c61c8421_1685bc08
Bytes: 52
Is this because the HashMap implementation needs it?

31:0-31:90
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c61c8421_1685bc08
UUID: a61790fa_95f6e45d
Bytes: 95
Yeah; that was supposed to be a short alias, but it's longer than the original typeâ€¦ Removed.

43:6-43:31
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_2b47d9a8
Bytes: 67
worth mentioning that this hash function does not create collisions

43:6-43:31
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_2b47d9a8
UUID: 66111809_533744ad
Bytes: 18
Good point!  Done.

File: runtime/check_reference_map_visitor.h

79:6-80:70
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_cd3f3d6c
Bytes: 231
This is getting nasty, as more implementation details are exposed to the user. I think we should invest in finding a good/efficient abstraction for this.

I already had this discussion with Nicolas and I think we should resume it..

79:6-80:70
Sat Mar 21 14:45:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_cd3f3d6c
UUID: 66111809_b32fb8ba
Bytes: 83
Yeah, for now I suggest just passing the CodeInfo to a query on the DexRegisterMap.

79:6-80:70
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 66111809_b32fb8ba
UUID: 66111809_53fd8434
Bytes: 5
Done.

File: runtime/memory_region.h

131:20-131:57
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_f1ec60bf
Bytes: 83
length must not be larger than the number of bits which can be fitted in `unsigned`

131:20-131:57
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_f1ec60bf
UUID: c61c8421_7621901f
Bytes: 4
Done

132:2-132:10
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_2c613b7f
Bytes: 35
use more exact types. i.e. uint32_t

132:2-132:10
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_2c613b7f
UUID: 66111809_f3393088
Bytes: 4
Done

144:39-144:47
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_ccbc1f53
Bytes: 5
ditto

144:39-144:47
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_ccbc1f53
UUID: 66111809_d33eb46d
Bytes: 4
Done

File: runtime/stack.cc

206:1-206:87
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_91e15cc6
Bytes: 55
Same comment regarding exposing implementation details.

206:1-206:87
Sat Mar 21 14:45:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_91e15cc6
UUID: c61c8421_76823002
Bytes: 45
I agree the dictionary should not be exposed.

206:1-206:87
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c61c8421_76823002
UUID: 66111809_b3297809
Bytes: 4
Done

File: runtime/stack_map.h

194:0-195:40
Sat Mar 21 14:45:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a61790fa_b52fa0ba
Bytes: 9
One line?

194:0-195:40
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a61790fa_b52fa0ba
UUID: a61790fa_15e9342a
Bytes: 51
Done (and likewise for the other ctor on line 197).

225:2-225:41
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_8987f963
Bytes: 85
Is there an actual benefit of having this here? I would just use GetValue()/GetKind()

225:2-225:41
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_8987f963
UUID: c61c8421_791ea390
Bytes: 421
`art::DexRegisterLocationHashFn' deals with internals of `art::DexRegisterLocation' and needs access to the actual values of `art::DexRegisterLocation's attributes.  An accessor could provide a different value (indeed, calling `art::DexRegisterLocation::GetKind()' is actually different from using `art::DexRegisterLocation::kind_'!), especially if the implementation of `art::DexRegisterLocation's changes in the future.

234:6-234:27
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_ca5ba38c
Bytes: 155
How about naming this DexRegistersRepository? Or something more semantically adequate (even if from a data structure perspective this is a map/dictionary).

234:6-234:27
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_ca5ba38c
UUID: a61790fa_35bb9027
Bytes: 100
I'm not sure that "repository" conveys the idea of uniqueness.  What about `DexRegisterLocationSet'?

234:6-234:27
Mon Mar 23 17:10:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a61790fa_35bb9027
UUID: 66111809_f6f11e17
Bytes: 141
I think the uniqueness part could be document and does not necessary need to be reflected in the name.

I'm good with DexRegisterLocationSet.

234:6-234:27
Tue Mar 24 17:03:37 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 66111809_f6f11e17
UUID: 263640c8_0c2e778b
Bytes: 74
Alright; I renamed DexRegisterDictionary to DexRegisterLocationSet in PS5.

428:26-428:57
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_6e2baf7b
Bytes: 25
kNoneLocationEntryIndex ?

428:26-428:57
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_6e2baf7b
UUID: c61c8421_d96d3701
Bytes: 32
Renamed to NoLocationEntryIndex.

428:26-428:57
Mon Mar 23 17:10:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c61c8421_d96d3701
UUID: a61790fa_989299a6
Bytes: 42
i just realized... why is this a function?

428:26-428:57
Tue Mar 24 17:03:37 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a61790fa_989299a6
UUID: c63d64a0_514ad6b2
Bytes: 486
Because I could not use a static member here initialy, as it would have required a corresponding definition in a `.cc' file.  This was triggered by an ASSERT_EQ in stack_map_test.cc, requiring this constant to have an address.  Such a file did not exist at that time, and I did not want to create a stack_map.cc file for just one static member definition.  As we now have a stack_map.cc file with other definitions, I have turned this static member function into a static member in PS5.

433:23-433:33
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_49a261f0
Bytes: 24
i would get rid of this.

433:23-433:33
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_49a261f0
UUID: a61790fa_55c28ca0
Bytes: 199
We use this idiom throughout this file.  I think it is useful from the consistency perspective, especially since CodeInfo/StackMap/DexRegisterMap form a light, stateless layer on top of MemoryRegion.

908:8-908:44
Fri Mar 20 18:10:02 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_ec5a43d8
Bytes: 107
this is a bit hard to read and i think i miss something. Why do you you need to add the offset to the size?

908:8-908:44
Mon Mar 23 15:49:42 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_ec5a43d8
UUID: c61c8421_7954e325
Bytes: 461
`locations_offset_in_dex_register_map' is the offset where the actual Dex register mapping data starts within the `art::DexRegisterMap' object, just after the live bit mask.  I added a comment, renamed this variable as `location_mapping_data_offset_in_dex_register_map' and renamed `art::DexRegisterMap::GetDexRegisterMapLocationsOffset' as `art::DexRegisterMap::GetLocationMappingDataOffset'.  I renamed some other variables as well for the sake of uniformity.

