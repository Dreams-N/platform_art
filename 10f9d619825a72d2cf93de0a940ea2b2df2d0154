Revision: 10f9d619825a72d2cf93de0a940ea2b2df2d0154
Patch-set: 1
File: runtime/oat_file.cc

123:8-123:25
Thu Oct 08 00:13:58 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30592d74_84fbc7e8
Bytes: 48
Seems your condition is a bit screwed up here...

File: runtime/oat_file_manager.cc

0
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90673931_5e1ea401
Bytes: 170
Feel free to ignore most issues here (just style nits), I would however consider fixing the raw pointers to use std::unique_ptr instead of manually release/deleting them.

51
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 704d65ae_b6b3983f
Bytes: 237
two liner:

  auto it = std::find_if(oat_files_.begin(), oat_files_.end(), [&](const OatFile* oat_file) { DCHECK(oat_file != nullptr); return oat_file->GetLocation() == oat_location; });
  return (it == oat_files_.end()) ? nullptr : *it;

67
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5061411e_1fa8a64e
Bytes: 155
one liner:

  return std::find_if_not(oat_files_.begin(), oat_files_.end(), [](const OatFile* oat_file) { return oat_file->IsPic(); }) != oat_files_.end();

88
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d03c51f4_39dbffd8
Bytes: 6
see 51

105
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d03c51f4_d9e9336f
Bytes: 168
This would be *much* better off using std::unique_ptr<DexFile> .

It's completely non obvious that it owns the ownership IMHO until I saw the emplace a few lines later.

111
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d03c51f4_99e04b86
Bytes: 24
Why no move constructor?

113
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1001893d_4b17195e
Bytes: 23
Why no move assignment?

126:16-126:29
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5061411e_df862edb
Bytes: 19
nit: lhs_descriptor

127:16-127:29
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90673931_3ec5a8c2
Bytes: 19
nit: rhs_descriptor

164
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0435d80_933b0eba
Bytes: 30
dcheck the truncation is safe?

184:16-184:22
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0435d80_f32b7261
Bytes: 26
nit: don't need the .get()

188
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 704d65ae_b661d83f
Bytes: 78
heap->emplace(std::move(dex_file), 0U /*current_class_index*/, already_loaded)

194
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 105c2963_484707e4
Bytes: 39
nit: mark inout parameters as /*inout*/

204:30-204:31
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 504861a0_b0e43e07
Bytes: 39
nit: mark inout parameters as /*inout*/

218:59-218:60
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90673931_3eae480a
Bytes: 35
nit: mark out parameters as /*out*/

219
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 504861a0_501dfaaa
Bytes: 51
DCHECK error msg is not null, oat file is not null?

246:31-246:36
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 504861a0_f0eec6e2
Bytes: 31
nit:

  /*already_loaded*/false

285
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 704d65ae_71b59a0d
Bytes: 25
DCHECK args are not null?

300:30-300:31
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d00a915c_789f505a
Bytes: 58
nit: annotate with /*out*/ when parameters are written out

323:38-323:39
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d03c51f4_99f96b3c
Bytes: 58
nit: annotate with /*out*/ when parameters are written out

331:57-331:58
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1001893d_0bba31aa
Bytes: 58
nit: annotate with /*out*/ when parameters are written out

355:22-355:37
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d03c51f4_d912d328
Bytes: 20
std::move(oat_file);

375:54-375:55
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 704d65ae_b1b60217
Bytes: 58
nit: annotate with /*out*/ when parameters are written out

File: runtime/oat_file_manager.h

46
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0435d80_73992244
Bytes: 48
nit: comments for public member functions please

61
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0435d80_d39d9631
Bytes: 22
Why no const overload?

63:45-63:46
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d03c51f4_b948af45
Bytes: 35
nit: mark out parameters as /*out*/

83
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0435d80_9394ae10
Bytes: 68
nit: REQUIRES go on a separate line here, mark error_msgs as /*out*/

86:14-86:28
Thu Oct 08 00:17:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 105c2963_08698f73
Bytes: 71
Does it own the oat files (I assume so). Then it should be unique_ptrs.

File: runtime/runtime.cc

285:26-285:33
Thu Oct 08 00:42:26 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5061411e_5f417e1d
Bytes: 57
nit: don't need the argument here, it defaults to nullptr

