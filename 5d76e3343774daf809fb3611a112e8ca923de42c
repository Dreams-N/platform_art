Revision: 5d76e3343774daf809fb3611a112e8ca923de42c
Patch-set: 6
File: compiler/optimizing/nodes.cc

2104:57-2104:75
Thu Dec 17 10:14:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 45398ab3_ad1b9dbc
Bytes: 11
Why except?

2104:57-2104:75
Thu Dec 17 17:25:42 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 45398ab3_ad1b9dbc
UUID: c5b1fa58_d7a054c8
Bytes: 109
This is the same as the default for any method. It means it may generate a GC, but it may not depend on a GC.

File: compiler/optimizing/nodes.h

3302:11-3302:34
Thu Dec 17 10:14:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65f4ce02_1e082d6e
Bytes: 35
This is guaranteed from the caller.

3302:11-3302:34
Thu Dec 17 17:25:42 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65f4ce02_1e082d6e
UUID: 05a79224_d4985259
Bytes: 13
Okay, removed

File: test/449-checker-bce/src/Main.java

621
Thu Dec 17 10:35:09 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85ed423a_1fdf8326
Bytes: 1471
This is more of a general comment the Checker tests in this file:

I trust you that you looked at the graph dump and test the important features of it, but it's not clear to me what exactly you're trying to do here. -DAG is meant to test dependencies between instructions, e.g. X is input of Y. It therefore doesn't care about the order of the instructions in the graph dump (i.e. the lines they appear on) because the fact that inputs dominate uses is guaranteed by GraphChecker. Your "(before)" test therefore only tests that there are at least two NullChecks, two ArrayLengths, etc. It's not obvious to me if that is all you need or not.

The "(after)" test is even weirder. What it will do is:
1) find the first line of the CFG containing ArrayGet
2) check that there aren't any NullChecks, ArrayLengths and BoundsChecks on any earlier lines
3) find lines containing Invoke, ArraySet, Exit and Deoptimize, in no given order
4) check that there isn't an ArrayGet between the line matched in 1) and the earliest line matched in 3)

Again, I'm not saying that it's wrong but I don't see what it's testing either. Would it help if GraphVisualizer printed more info, e.g. loop headers like it does for LICM? If so, then by all means add that into the graph dump. I would even suggest we print the block number with every single instructions and put name of the block and its predecessors/successors on one line. That would help us0 better argue about the layout of blocks.

621
Thu Dec 17 17:25:42 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85ed423a_1fdf8326
UUID: 0512320e_67e9dad4
Bytes: 223
So, are you saying I should use CHECK, not CHECK-DAG?

In any case, not all is weird. What you describe in the after test as weird is exactly what I want, for example. An ArrayGet with no precedding Null/Length/BoundsCheck.

