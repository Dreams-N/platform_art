Revision: 77d6a53032cd504918a4d00d8ca4abc44aa0a869
Patch-set: 1
File: compiler/optimizing/intrinsics_arm.cc

1580:0-1580:40
Mon Jan 18 09:57:04 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8780ea14_8a2bab51
Bytes: 52
Reasonable to think we can? (here and arm64 as well)

1580:0-1580:40
Mon Jan 18 11:35:02 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8780ea14_8a2bab51
UUID: 47727221_283d639b
Bytes: 81
Yes, we should be able to use the SIMD instructions VCNT on ARM and CNT on ARM64.

1580:0-1580:40
Mon Jan 18 12:09:13 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 47727221_283d639b
UUID: 8780ea14_aaccefe5
Bytes: 869
For code size, the best option on ARM would be

  vmov sTmp, rInput
  vcnt.8 sTmp, sTmp
  vmov rOutput, rOutput
  add rOutput, rOutput, rOutput, shl #8
  add rOutput, rOutput, rOutput, shl #16
  lsr rOutput, rOutput, #24

Note, that LSR can be a 16-bit instruction but AND is always 32-bit, so we should choose to accumulate the result in the highest byte (as above) rather than the lowest.

For Long, we have two options how to add the results for the two words: VADD or UADD8. VADD should be preferred to avoid clobbering an extra core register.

The question is, would it be faster if we stick to core registers (with 6 extra instructions for Int and even more for Long)?

Similar on ARM64, except that for adding the high and low word results for Long should be done in core register. And it doesn't matter whether the result is accumulated in the high or low byte.

File: compiler/optimizing/intrinsics_x86_64.cc

2386:0-2389:63
Mon Jan 18 11:35:02 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 47727221_882bb751
Bytes: 256
I would use the `POPCOUNT` helper provided by runtime/base/bit_utils.h here:

    HInstruction* arg = invoke->InputAt(0)
    int32_t count = is_long ?
        POPCOUNT(arg->AsLongConstant()->GetValue()) :
        POPCOUNT(arg->AsIntConstant()->GetValue());

2395:11-2395:21
Mon Jan 18 11:35:02 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 47727221_a8287355
Bytes: 7
Remove?

File: test/564-bitcount/src/Main.java

19:21-19:27
Mon Jan 18 09:57:04 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e783661b_4d71cd75
Bytes: 74
Maybe add an ARCH-X86_64 specific checker test to ensure there is no call?

