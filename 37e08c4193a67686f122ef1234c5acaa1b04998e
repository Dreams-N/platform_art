Revision: 37e08c4193a67686f122ef1234c5acaa1b04998e
Patch-set: 1
File: runtime/interpreter/interpreter_common.cc

570:14-570:61
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d20e12c_4d9259d2
Bytes: 200
It seems error prone: it's easy to forget doing this when adding a new return in this part of the code. Why not having a scoped object that pushes/pops the shadow frame in its constructor/destructor ?

File: runtime/mirror/art_method.cc

427:9-427:41
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_e7182c78
Bytes: 297
I would give a few more details here:

"For nested deoptimization cases: the called method may cause a deoptimization while we already are in the middle of another deoptimization. Therefore we need to save the top shadow frame into a stack and restore it after the call."

Feel free to amend it :)

428:88-428:95
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_c6d64cc8
Bytes: 232
I think you also need to save the deoptimized return value. Otherwise a nested deoptimization will clobber it.

And if the return value is an object, we need the GC to visit it... Though I'm not sure we are doing this at the moment.

452:12-452:40
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_86d934f7
Bytes: 79
From my comment above, you'd need to restore the deoptimized return value here.

File: runtime/thread.cc

166:66-166:68
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_a7123454
Bytes: 23
DCHECK(sf != nullptr) ?

174:2-174:64
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_87885024
Bytes: 71
I prefer two DCHECKs so we know which condition is wrong if that fails.

181:13-181:49
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_e6f03065
Bytes: 130
I'd create a common method passing the extra enum kind. This is almost the same code than PushStackedShadowFrameUnderConstruction.

188:2-193:22
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_47823804
Bytes: 78
I'd say the same for this method: you could pass the enum kind for the DCHECK.

2400:6-2401:39
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d20e12c_cd274931
Bytes: 70
nit: I would have preferred a for loop but that's a question of style.

File: runtime/thread.h

101:0-101:4
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d20e12c_0d054197
Bytes: 23
Prefer enum class here.

106:6-106:30
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_678bbc21
Bytes: 28
Add DISALLOW_COPY_AND_ASSIGN

115:31-115:32
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_c7bc08cd
Bytes: 5
const

116:31-116:32
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_86405415
Bytes: 5
const

117:28-117:29
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d20e12c_ad09b5b3
Bytes: 5
const

118:37-118:38
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_263dc88b
Bytes: 5
const

121:2-121:14
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_079c4067
Bytes: 18
ShadowFrame* const

122:2-122:24
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_a790f44d
Bytes: 28
const StackedShadowFrameType

123:2-123:27
Thu May 21 15:26:36 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d20e12c_4d1b39f4
Bytes: 31
StackedShadowFrameRecord* const

