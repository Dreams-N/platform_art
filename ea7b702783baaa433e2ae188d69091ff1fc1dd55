Revision: ea7b702783baaa433e2ae188d69091ff1fc1dd55
Patch-set: 2
File: /COMMIT_MSG

10:45-11:37
Fri Nov 06 11:43:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9609fab1_abf7757d
Bytes: 11
Thanks :-).

File: compiler/optimizing/common_dominator_finder.h

34:2-34:10
Fri Nov 06 11:57:18 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 760c86c0_27f3ba08
Bytes: 13
also private.

34:2-34:10
Fri Nov 06 12:46:43 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 760c86c0_27f3ba08
UUID: 56030291_a6b9e63c
Bytes: 75
No, this is exactly as intended even if it's not yet fully used in this CL.

34:2-34:10
Fri Nov 06 17:59:56 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 56030291_a6b9e63c
UUID: 1698aa84_fdbce8e0
Bytes: 565
I'm not a fan of future use claims. I'd prefer if you kept it simple (the algorithm can be written as FindCommonDominator and DominatorChainLength helper functions) and later modified it, or used straight away.

I take it that means you want to keep a CommonDominatorFinder instance per block in the ComputeDominanceInformation function to save one ChainLength call and some equalize iterations. But then you're trading back speed for space. It would be good to get some numbers on that, perhaps focusing mainly on the pathological cases, to find the right balance.

34:2-34:10
Fri Nov 06 18:09:34 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1698aa84_fdbce8e0
UUID: b637de6a_644f44b8
Bytes: 330
This CL was split out of https://android-review.googlesource.com/180842 . There would be no point in doing so if another refactoring was needed immediately in that CL anyway.

Trading speed for space? What space? 8B/16B on the stack is absolutely irrelevant; assuming it's even stored on the stack and not scalarized and promoted.

40:7-40:13
Fri Nov 06 11:57:18 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6127ed6_69b4e53f
Bytes: 69
I find it slightly hard to read the code with block and block2 names.

40:7-40:13
Fri Nov 06 12:46:43 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6127ed6_69b4e53f
UUID: d60ff2af_eabfa71f
Bytes: 85
We're working with two interchangeable blocks here, so what else would you name them?

44:1-46:5
Fri Nov 06 11:57:18 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6345268_c235e285
Bytes: 146
why not 

if (block == dominator_) { return; }

and DCHECK at the end of the function that domniator_ != nullptr (such that you have an invariant)

44:1-46:5
Fri Nov 06 12:46:43 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d6345268_c235e285
UUID: 96173ad8_f8ca1172
Bytes: 168
That's purely a matter of style. Note that the != nullptr is enforced throughout this function, so I find an extra DCHECK(dominator_ != nullptr) at the end unnecessary.

File: compiler/optimizing/nodes.cc

183:8-185:67
Fri Nov 06 11:57:18 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6127ed6_c9c4f1b6
Bytes: 69
I find it hard to understand this comment. Could you try rephrase it?

183:8-185:67
Fri Nov 06 12:46:43 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6127ed6_c9c4f1b6
UUID: 16e42a25_2f594583
Bytes: 4
Done

