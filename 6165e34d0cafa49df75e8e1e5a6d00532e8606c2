Revision: 6165e34d0cafa49df75e8e1e5a6d00532e8606c2
Patch-set: 6
File: /COMMIT_MSG

20
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_cc45ef65
Bytes: 118
Maybe add that as a consequence these blocks won't be considered by the various optimization passes (and that's okay)?

20
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_cc45ef65
UUID: dec53225_420de23d
Bytes: 4
Done

File: compiler/optimizing/builder.cc

262:12-262:31
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_9cad8922
Bytes: 162
The role of this method is not clear to me: does it say whether a block ends with a HTryBoundary instruction?  or that the bock only contains such an instruction?

262:12-262:31
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_9cad8922
UUID: 9ecf3a47_55935eb1
Bytes: 163
At this point, TryBoundary is only inserted when splitting an edge and is always the only instruction in the block. Renamed to IsTryBoundaryBlock and added comment

269:71-269:79
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_97b78ec3
Bytes: 18
Nit: dex_pc_start?

269:90-269:96
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_b7b40abf
Bytes: 21
Likewise, dex_pc_end?

269:90-269:96
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_b7b40abf
UUID: 9efbba85_6c72fb90
Bytes: 4
Done

269:71-269:79
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_97b78ec3
UUID: 9ecf3a47_35db3217
Bytes: 4
Done

270:11-270:13
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_5c9931fe
Bytes: 7
dex_pc?

270:11-270:13
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_5c9931fe
UUID: 7e7526b8_5c9371b1
Bytes: 4
Done

332:68-332:80
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_7788e2f8
Bytes: 15
neighboring? :)

332:68-332:80
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_7788e2f8
UUID: dec53225_77f46254
Bytes: 56
neighboring is US, neighbouring is UK. guess i'm posh...

334:0-334:101
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_b5172276
Bytes: 15
Nit: long line.

334:0-334:101
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_b5172276
UUID: 9efbba85_4c773f7f
Bytes: 4
Done

340:43-340:46
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_75577a2d
Bytes: 5
it's?

340:43-340:46
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_75577a2d
UUID: beecfece_ed2a652f
Bytes: 4
Done

348:0-349:40
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_9c86e998
Bytes: 98
Maybe introduce a HTryBoundary ctor taking care of performing

  try_boundary->SetIsTryEntry();

?

348:0-349:40
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_9c86e998
UUID: dec53225_573da67e
Bytes: 4
Done

367:67-367:79
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_d796761d
Bytes: 6
Ditto.

367:67-367:79
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_d796761d
UUID: 7e7526b8_1c8df987
Bytes: 5
Ditto

378:0-379:38
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_ec76ebb6
Bytes: 6
Ditto.

378:0-379:38
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_ec76ebb6
UUID: beecfece_0d67f19f
Bytes: 4
Done

557:12-557:63
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_0c037717
Bytes: 107
Nit: Instead of casting branch_targets_.Size() down to an int32_t, what about casting index up to a size_t?

557:12-557:63
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_0c037717
UUID: 9efbba85_ec654bc2
Bytes: 4
Done

2243:10-2243:24
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_ad44dd1b
Bytes: 45
Maybe rename as `latest_move_result_cursor_`?

2243:10-2243:24
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_ad44dd1b
UUID: 9efbba85_0c56d7d8
Bytes: 29
Done. (latest_result_cursor_)

File: compiler/optimizing/builder.h

281:2-281:31
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_75321a32
Bytes: 21
Document this member.

281:2-281:31
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_75321a32
UUID: 9efbba85_4c929fab
Bytes: 31
Removed per Nicolas' suggestion

File: compiler/optimizing/code_generator_arm.cc

966:0-983:3
Tue Jun 23 10:09:30 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_2731c27a
Bytes: 42
Can all of this happen for a try boundary?

966:0-983:3
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_2731c27a
UUID: 9efbba85_4c873f61
Bytes: 117
Yep, especially if DCE merges a Goto->TryBoundary. I guess it might make sense to make TryBoundary a subclass of Goto

File: compiler/optimizing/graph_visualizer.cc

247:9-247:10
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_ed3ee595
Bytes: 87
Does the "X" stand for "exception"?  If so, the latter should probably be used instead.

247:9-247:10
Tue Jun 23 10:09:30 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_ed3ee595
UUID: 7e7526b8_47363e74
Bytes: 5
Agree

247:9-247:10
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_ed3ee595
UUID: dec53225_82e42a23
Bytes: 68
Yeah, it's a C1 jargon. Name changed and moved to HBasicBlock class.

263:12-263:13
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_9c2b490c
Bytes: 9
Likewise.

263:12-263:13
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_9c2b490c
UUID: beecfece_0d7d31df
Bytes: 4
Done

265:16-265:17
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_cd3b29a4
Bytes: 9
Likewise?

265:16-265:17
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_cd3b29a4
UUID: 9ecf3a47_f55b6ac9
Bytes: 26
This is a C1visualizer tag

383:40-385:57
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_ec1b8b78
Bytes: 111
This seems to be a recurring pattern:

  ostr << std::boolalpha << something() << std::noboolalpha;

Factor it?

383:40-385:57
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_ec1b8b78
UUID: 7e7526b8_4704fe83
Bytes: 197
Could do in a separate CL. Is it possible to override the operator<<(stream,bool) though? I could just add a function that would return the right "true"/"false" string instead of passing boolalpha.

File: compiler/optimizing/nodes.cc

1041:5-1041:30
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_b762cab6
Bytes: 130
Update the documentation to mention HTryBoundary as well? And/or maybe update the name of this method (IsSingleGotoOrTryBoundary)?

1047:0-1047:85
Tue Jun 23 10:09:30 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_0caff7ee
Bytes: 43
Should HTryBoundary be a subclass of HGoto?

1047:0-1047:85
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_0caff7ee
UUID: beecfece_8d51215e
Bytes: 295
I thought about that and it very much makes sense. My worry is that we do sometimes assume that a block ending with a Goto will have just one successor, so this could introduce some subtle bugs. WDYT? I could just do a global grep for IsGoto and make sure we're doing the right thing everywhere.

File: compiler/optimizing/nodes.h

697:21-697:32
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_97654ec3
Bytes: 13
Predecessors?

697:21-697:32
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_97654ec3
UUID: beecfece_6d82f552
Bytes: 124
Um, the point is to find out whether `idx` is the first occurrence of `predecessor` in `predecessors_`. I've added a comment

1931:0-1932:16
Tue Jun 23 10:09:30 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_42616206
Bytes: 129
Why not an enum like HMonitorOperation? Also I think you should be able to know at build time whether this wil lbe exit or entry.

1931:0-1932:16
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_42616206
UUID: 9ecf3a47_b5d64269
Bytes: 487
Not enum because I opted to create just one TryBoundary instruction when jumping from one try block to another and hence it can be both an entry and an exit. I could have an enum with three states (entry/exit/both), or I could create two separate instructions which introduces redundancy.

I didn't make them const because the algorithm processes one TryItem at a time and hence cannot easily tell if there is another TryItem on the other side of the edge that it is currently splitting.

File: compiler/utils/growable_array.h

49
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_4c261fc2
Bytes: 46
Maybe add

  DCHECK_LT(start_from, Size());

?

49
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_4c261fc2
UUID: beecfece_6d5b157f
Bytes: 77
That's a little tricky because then it would always crash for an empty array.

File: test/510-checker-try-catch/smali/Builder.smali

26:13-26:15
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_dc4a21d6
Bytes: 44
Nit: Minus1? (Likewise for other constants.)

26:13-26:15
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_dc4a21d6
UUID: 7e7526b8_07cda6d4
Bytes: 42
I was going for concise but fair enough :)

53:22-53:33
Tue Jun 23 10:09:30 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_6cb4bb43
Bytes: 29
indentation? (here and below)

53:22-53:33
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_6cb4bb43
UUID: 7e7526b8_a7d9529b
Bytes: 4
Done

687:0-696:13
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_6cd67bf1
Bytes: 40
Isn't the loop missing from this method?

687:0-696:13
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_6cd67bf1
UUID: dec53225_a29da66f
Bytes: 78
Nope, the loop is formed by the Div throwing an exception and catching it too.

744:4-744:13
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_d593ce63
Bytes: 22
Is this really needed?

744:4-744:13
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_d593ce63
UUID: 9ecf3a47_f5f5aafc
Bytes: 17
Done. Good catch.

805:4-805:13
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_5cdcd18f
Bytes: 9
Likewise.

805:4-805:13
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_5cdcd18f
UUID: 7e7526b8_e7cf4acd
Bytes: 4
Done

809:12-809:35
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_b73baaa4
Bytes: 26
a MOVE_RESULT instruction?

809:12-809:35
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_b73baaa4
UUID: beecfece_cd4b29a6
Bytes: 5
Done.

835:12-835:35
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_6de95577
Bytes: 9
Likewise.

835:12-835:35
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_6de95577
UUID: 9efbba85_ac6b4315
Bytes: 4
Done

File: test/510-checker-try-catch/src/Main.java

2:16-2:20
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_4cdbbf15
Bytes: 4
2015

2:16-2:20
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_4cdbbf15
UUID: 9efbba85_6c8ddb87
Bytes: 4
Done

2:0-15:2
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_acbfc3ab
Bytes: 19
Indentation is off.

2:0-15:2
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_acbfc3ab
UUID: beecfece_50c5127f
Bytes: 4
Done

22:42-22:43
Mon Jun 22 15:39:33 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_77cb0216
Bytes: 18
Nit: remove space?

22:42-22:43
Tue Jun 23 11:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_77cb0216
UUID: 9ecf3a47_95f22612
Bytes: 4
Done

