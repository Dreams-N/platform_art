Revision: 9502cc12cc0a64639e73e4dcdc3295ab88a9bdd7
Patch-set: 9
File: runtime/jit/offline_profiling_info.cc

184:0-185:99
Tue Dec 01 14:10:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b3e8348_63b2dc0f
Bytes: 82
What would you need to test? I think we should fix it now before bug bankrupcy :-)

184:0-185:99
Tue Dec 01 14:36:09 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b3e8348_63b2dc0f
UUID: 9b3e8348_63dbbc45
Bytes: 358
As I mentioned before we used it in different places like
oat_file: `Split(dex_dependencies, kDexClassPathEncodingSeparator, &split)`
parsing arguments in dex2oat and paresed_arguments,
and a lot of tests.

I don't expect things to necessarily break, but it's work orthogonal to this CL and don't want to tie up the two.

I'll take care of it in a follow up.

217:18-217:36
Tue Dec 01 14:10:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b43d7e3_5d6f7bd2
Bytes: 12
what's this?

217:18-217:36
Tue Dec 01 14:36:09 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b43d7e3_5d6f7bd2
UUID: 9b3e8348_83d84048
Bytes: 26
dangling comment. removed.

346:3-353:17
Tue Dec 01 14:10:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b3e8348_23bcd4dc
Bytes: 42
why two maps? The id of methods is unique.

346:3-353:17
Tue Dec 01 14:36:09 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b3e8348_23bcd4dc
UUID: fbf77fdf_0309ce06
Bytes: 147
- faster lookups
- I'm experimenting with skipping the entire class or dex if they have no methods. The double map makes it much easier and faster.

346:3-353:17
Tue Dec 01 14:47:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fbf77fdf_0309ce06
UUID: 5b488bfd_7eb27156
Bytes: 274
Why faster lookups? You're doing two lookups, which is one extra to being faster :)

So it's the query over class id you're interested in? "Does this class have any hot method"?

FWIW, you could still have two sets, but one is fir class ids, and the other is for method ids.

346:3-353:17
Tue Dec 01 14:59:53 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b488bfd_7eb27156
UUID: fbf77fdf_e33b52ab
Bytes: 377
I expect to be faster because there should be far fewer classes then methods (and std::map is a red-black tree).

Yea, that's precisely the question i'm interested. (it's not in this CL cause it requires some compiler driver tweaking since we still want to generate the quick jni stubs).

I could have two maps but that seemed unnecessary.

Do you have strong feeling about it?

346:3-353:17
Tue Dec 01 15:13:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fbf77fdf_e33b52ab
UUID: 1b5293ad_3ca5d11f
Bytes: 89
Not so much. Those maps just feel a lot more heavy weight than just two sets of integers.

346:3-353:17
Tue Dec 01 16:49:08 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b5293ad_3ca5d11f
UUID: db0f1bb0_f93f83b6
Bytes: 137
It would be interesting to have data. :-) I could throw in bitsets here, in case there actually is a non-trivial amount of hot methods...

File: runtime/jit/offline_profiling_info.h

69:5-69:33
Tue Dec 01 14:10:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb37c76a_616f36d3
Bytes: 38
'It'- > The method?

And which 'data'?

69:5-69:33
Tue Dec 01 14:36:09 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb37c76a_616f36d3
UUID: 5b032b91_e63b5eab
Bytes: 4
Done

72:5-72:11
Tue Dec 01 14:10:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b032b91_c62d0286
Bytes: 25
Returns (for consistency)

72:5-72:11
Tue Dec 01 14:36:09 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b032b91_c62d0286
UUID: db347b68_02b0aa1e
Bytes: 4
Done

