Revision: 4dda3376b71209fae07f5c3c8ac3eb4b54207aa8
Patch-set: 15
File: compiler/utils/mips64/assembler_mips64.cc

858:0-859:27
Fri Oct 30 16:52:36 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 569941f8_9f2c57d1
Bytes: 36
Why not Jialc(indirect_reg, offset)?

858:0-859:27
Sat Oct 31 00:52:43 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 569941f8_9f2c57d1
UUID: 96401a44_244c4a53
Bytes: 81
AFAIK, the T9 register must have the function address upon entry to the function.

858:0-859:27
Mon Nov 02 10:16:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96401a44_244c4a53
UUID: 166509c4_9df8e733
Bytes: 114
Is that a requirement of the mips64 C/C++ ABI?
(The compiled Java ABI could deviate from that if it's beneficial.)

858:0-859:27
Mon Nov 02 22:42:33 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 166509c4_9df8e733
UUID: d63612de_687d7c96
Bytes: 547
Right, calls to labeled code are calls to code we're generating (and not external C/C++/assembly/whatever code) and T9 manipulation is most likely unnecessary here and can be removed.

AFAIK, the only place, where we can call into external native code not generated by dex2oat, is CodeGeneratorMIPS::InvokeRuntime(), where the distinction between the two kinds of called code is made (for the purpose of allocating stack slots shadowing a0-a3). Is that correct or is there something in e.g. CodeGeneratorMIPS::GenerateStaticOrDirectCall() as well?

858:0-859:27
Tue Nov 03 09:01:43 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d63612de_687d7c96
UUID: d685318b_0310f062
Bytes: 209
CodeGeneratorMIPS::GenerateStaticOrDirectCall will either go to a Java method including a Jni stub or a stub from runtime/arch/entrypoints. In those we can save things that the underlying runtime ABI will use.

