Revision: e8e42f3548fd894f860912bb1b71ce6fa2d7daf3
Base-for-patch-set: 3
File: runtime/entrypoints/entrypoint_utils.cc

293:6-293:59
Tue Mar 10 15:12:23 2015 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ccfcd73_e1f1c6e4
Bytes: 35
why isn't this a functional change?

293:6-293:59
Tue Mar 10 15:19:20 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1ccfcd73_e1f1c6e4
UUID: bcf161a4_91ff7eaa
Bytes: 69
Because the passed throw_location isn't used later in the call stack.

293:6-293:59
Tue Mar 10 16:02:54 2015 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bcf161a4_91ff7eaa
UUID: 7ce9a9ce_bc2601e6
Bytes: 675
That's irrelevant, this throw location is not the same as the current method. Having the code now use the current method elsewhere on the call stack is a functional change, no? I can believe that there are bugs in this code, but it looks now that unboxed exception throwing will not report that the unboxing failure happened in the called proxy method but in the caller as determined by the current method.
Fwiw, the throw location existed to match JDWP APIs that may not yet have been implemented. It seems this change may need reversing were those to be implemented. I'm sure Seb has a fuller picture. The trick with the throw location was making sure it was robust for GC.

File: runtime/runtime.cc

1019:26-1019:42
Tue Mar 10 15:12:23 2015 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1ccfcd73_611936ac
Bytes: 35
why isn't this a functional change?

