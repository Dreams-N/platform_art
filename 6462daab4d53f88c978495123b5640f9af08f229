Revision: 6462daab4d53f88c978495123b5640f9af08f229
Patch-set: 4
File: compiler/optimizing/load_store_elimination.cc

35:15-36:69
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_3365c8a7
Bytes: 17
nit: one per line

35:15-36:69
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_3365c8a7
UUID: 2e2e2591_00ac94d7
Bytes: 4
Done

37:8-38:89
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_2179ee5a
Bytes: 5
ditto

37:8-38:89
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_2179ee5a
UUID: 2e470569_112067aa
Bytes: 4
Done

75:16-75:42
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_f5f972b4
Bytes: 43
How does that deal with multiple dex files?

75:16-75:42
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e9a4178_f5f972b4
UUID: ee616dea_15f97786
Bytes: 106
It may treat some classes that cannot alias as may alias, but not the other way around. So should be safe.

82:30-82:33
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_417ef243
Bytes: 9
reference

82:30-82:33
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_417ef243
UUID: ae5bf53d_ff147a0a
Bytes: 4
Done

92:25-92:41
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_735f40d1
Bytes: 13
nit: new line

92:25-92:41
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_735f40d1
UUID: ae5bf53d_df11b618
Bytes: 4
Done

124:9-124:26
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_d0e1fc3d
Bytes: 35
-> allocation and stores into ... ?

124:9-124:26
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_d0e1fc3d
UUID: 4e4c398b_a146e9e7
Bytes: 4
Done

131:45-131:65
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_d943d308
Bytes: 28
what's reference+info_array?

131:45-131:65
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_d943d308
UUID: 8e52b121_fb5c9364
Bytes: 68
I changed it to:
position in HeapLocationCollector's ref_info_array_

132:0-133:20
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_f50ed8f9
Bytes: 73
Do you need two flags? Is it worth knowing it's a singleton but returned?

132:0-133:20
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6ec3bd5a_f50ed8f9
UUID: 4e4c398b_81b1ad3b
Bytes: 202
Yes if it's singleton we know it won't alias during current method's invocation and can do some optimizations. If it's returned though, we cannot eliminate the allocation and the stores into the object.

79:0-134:2
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_da32e587
Bytes: 29
Move this above HeapLocation?

79:0-134:2
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_da32e587
UUID: 8e52b121_5ba04796
Bytes: 4
Done

143:8-146:80
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_54506ccf
Bytes: 17
nit: one per line

143:8-146:80
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_54506ccf
UUID: ae5bf53d_5a06f427
Bytes: 4
Done

156:17-156:34
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_745568be
Bytes: 20
FindReferenceInfoOf?

156:17-156:34
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_745568be
UUID: 8e52b121_7b1543d1
Bytes: 4
Done

185:9-185:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_7b90fb0e
Bytes: 28
What's 'Id' in this context?

185:9-185:27
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_7b90fb0e
UUID: 2e470569_713f9b9f
Bytes: 108
I changed Id to Index and added this comment:
// Find and return the heap location index in heap_locations_.

185:28-186:82
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_3be3e3c4
Bytes: 12
one per line

185:28-186:82
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_3be3e3c4
UUID: 2e470569_313923b8
Bytes: 4
Done

219:12-219:21
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_1979cb5a
Bytes: 8
Compute?

219:12-219:21
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_1979cb5a
UUID: ee86cdd4_1674ea0b
Bytes: 4
Done

228:19-228:22
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_d36d748c
Bytes: 6
cannot

228:19-228:22
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_d36d748c
UUID: 4e4c398b_2192f987
Bytes: 4
Done

232:80-232:83
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_5bd89708
Bytes: 6
cannot

232:80-232:83
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_5bd89708
UUID: 8e52b121_1b81afec
Bytes: 4
Done

251:64-251:66
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_700810a3
Bytes: 23
Shouldn't that be '&&'?

251:64-251:66
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_700810a3
UUID: ee86cdd4_b6809e2e
Bytes: 92
As long as one cannot alias with the other by checking the pre-existence, they cannot alias.

258:23-258:26
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_13cb6ce2
Bytes: 8
Position

258:23-258:26
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_13cb6ce2
UUID: 2e470569_31ec8389
Bytes: 4
Done

260:17-260:23
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_7a3b9960
Bytes: 19
number_of_locations

260:17-260:23
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_7a3b9960
UUID: 0e5fa128_4a8bc8e7
Bytes: 4
Done

261:12-261:25
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_3504da56
Bytes: 54
Use return (id1 == 0)
  ?
  :

To avoi this temporary?

261:12-261:25
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e9a4178_3504da56
UUID: ee616dea_26ab2f5b
Bytes: 79
The id1 == 0 part isn't needed. The single math formula works. I simplified it.

272:9-272:26
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_500d0cb1
Bytes: 36
Why not CheckAliasingMatrixPosition?

272:9-272:26
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_500d0cb1
UUID: 6e4d7d85_a226e7fa
Bytes: 44
Changed it to CheckedAliasingMatrixPosition.

280:7-280:16
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_1479945a
Bytes: 8
Compute?

280:7-280:16
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_1479945a
UUID: 4e4c398b_04502b9c
Bytes: 4
Done

283:0-291:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_55095e6d
Bytes: 56
If we had the ArtField available, wouldn't it be easier?

283:0-291:5
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e9a4178_55095e6d
UUID: 2e2e2591_342fd1c0
Bytes: 116
I'm thinking of using the resolved field index instead of the (class index, offset) pair. I can do it in another CL.

292:9-292:17
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_5983438e
Bytes: 117
The naming isn't great here, as this sounds like a cached version of CalculateMayAlias. How about CanReferencesAlias?

292:9-292:17
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_5983438e
UUID: ee616dea_ab4008fd
Bytes: 4
Done

299:0-302:7
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_1ae7fd59
Bytes: 52
How about checking line 295 if loc2->IsArrayElement?

299:0-302:7
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_1ae7fd59
UUID: 2e2e2591_f48b8912
Bytes: 4
Done

303:11-304:86
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_53d5e476
Bytes: 17
nit: one per line

303:11-304:86
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_53d5e476
UUID: ee616dea_2bdad8a8
Bytes: 4
Done

312:36-313:90
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_b001d87d
Bytes: 12
one per line

312:36-313:90
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_b001d87d
UUID: 2e2e2591_d4988d66
Bytes: 4
Done

314:0-316:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_798807aa
Bytes: 50
You'll probably also have trouble with HBoundType.

314:0-316:5
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_798807aa
UUID: 2e470569_d16d2f8c
Bytes: 94
I moved the while loop to a separate static method where I check both NullCheck and BoundType.

323:99-323:101
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_1656fcce
Bytes: 13
line too long

323:99-323:101
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_1656fcce
UUID: 2e470569_b16ab370
Bytes: 4
Done

349:18-349:21
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_7bdd5bf7
Bytes: 8
location

349:18-349:21
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_7bdd5bf7
UUID: 4e4c398b_a4f957b5
Bytes: 4
Done

351:8-352:53
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_90fe54d5
Bytes: 12
one per line

351:8-352:53
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_90fe54d5
UUID: 2e470569_11bf4735
Bytes: 4
Done

389:0-390:28
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_b989bfad
Bytes: 43
Why is that not doing SetMayBecomeUnknown ?

389:0-390:28
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_b989bfad
UUID: 0e5fa128_876ad927
Bytes: 155
We don't eliminate stores into arrays since array location can easily alias due to non-constant index.

I added some comment in the store elimination part.

405:7-405:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_365bf8f7
Bytes: 36
You need to add VisitUnresolved now.

405:7-405:27
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_365bf8f7
UUID: ee86cdd4_2a417e72
Bytes: 40
I don't see it in the code. What's that?

412:0-414:47
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_3965afa7
Bytes: 32
Please add comment around these.

412:0-414:47
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_3965afa7
UUID: 2e2e2591_14d295e6
Bytes: 4
Done

416:59-416:85
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_3aecc13b
Bytes: 46
Maybe expand on why, and what it can still do?

416:59-416:85
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_3aecc13b
UUID: 8e52b121_bb75fb91
Bytes: 120
Changed it to:
 // If there is no heap stores, LSE acts as GVN with better
 // alias analysis and won't be as effective.

416:0-419:23
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_21600e97
Bytes: 102
It's a shame a single instruction can bail the optimization. What's your plan to do this contextually?

416:0-419:23
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_21600e97
UUID: 8e52b121_9b247f8e
Bytes: 76
I'll address it in another CL. Just want to make sure it sticks to the spec.

424:26-424:44
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_0194eabd
Bytes: 31
I don't understand this comment

424:26-424:44
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_0194eabd
UUID: ce582944_65e361c4
Bytes: 107
Changed it to:
// An unknown heap value. Loads with such a value in the heap location cannot be eliminated.

434:42-434:60
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_d99673c8
Bytes: 24
heap_locations_collector

434:42-434:60
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_d99673c8
UUID: 2e470569_b1a2b3df
Bytes: 4
Done

447:0-453:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_fbc88b37
Bytes: 49
Add a comment on why heap_values may not be null.

447:0-453:5
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_fbc88b37
UUID: ee616dea_cb57bc63
Bytes: 188
Added:
      // There is no heap values array allocated yet for the block. The block
      // is either just visited, or didn't inherit its heap values array from
      // one predecessor.

459:33-459:61
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_10b6e431
Bytes: 43
block->GetLoopInformation()->GetPreHeader()

459:33-459:61
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_10b6e431
UUID: 2e2e2591_94dd65d5
Bytes: 4
Done

476:35-476:36
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_765570be
Bytes: 1
&

476:35-476:36
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_765570be
UUID: 4e4c398b_a416f74d
Bytes: 4
Done

475:0-481:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_b646281a
Bytes: 124
Why not moving this optimization into the MergePredecessorValues?

Also, I suggest doing this optimization in a followup cl.

475:0-481:5
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_b646281a
UUID: ae5bf53d_5acef498
Bytes: 35
Ok, I'll do this in a following CL.

533:0-542:3
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_615a16e3
Bytes: 112
This doesn't seem to belong to this optimization, or is maybe too premature for this change. Do you need it now?

533:0-542:3
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_615a16e3
UUID: ee86cdd4_6a0b062f
Bytes: 107
Currently we don't have another pass after lse that can eliminate the null check. It's cheap to do it here.

565:25-566:93
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_815f1ad0
Bytes: 12
One per line

565:25-566:93
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_815f1ad0
UUID: 0e5fa128_2aec1489
Bytes: 4
Done

567:16-567:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_bad7f15c
Bytes: 32
Same comment for the HBoundType.

567:16-567:27
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_bad7f15c
UUID: ce582944_a57279a5
Bytes: 25
Done with the new method.

585:0-585:64
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_5b8b37e7
Bytes: 16
How can that be?

585:0-585:64
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_5b8b37e7
UUID: 0e5fa128_4a2aa8b0
Bytes: 139
We have the unfortunate I/F, J/D aliasing issue. An int value node can be stored into a float array, for example. I have a testcase for it.

601:16-601:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_367e9843
Bytes: 16
ditto HBoundType

601:16-601:27
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_367e9843
UUID: ce582944_256209d6
Bytes: 25
Done with the new method.

615:1-616:8
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_c1704263
Bytes: 8
else if?

615:1-616:8
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_c1704263
UUID: ce582944_482ab4b0
Bytes: 4
Done

618:10-618:28
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_e16d468c
Bytes: 28
What about array allocation?

618:10-618:28
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_e16d468c
UUID: 2e2e2591_54fedd2a
Bytes: 172
I added some comment. Array stores can't be eliminated (at least for now) since it can be easily aliased with a non-constant index. Field accesses can be tracked precisely.

621:76-621:81
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_f96a5771
Bytes: 20
What's `value` here?

621:76-621:81
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_f96a5771
UUID: 2e470569_35e8eeeb
Bytes: 86
The value passed in the parameter. I changed it to:
the value set by this instruction.

628:48-628:54
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_d0cbbca8
Bytes: 6
static

628:48-628:54
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_d0cbbca8
UUID: 4e4c398b_4462a3df
Bytes: 4
Done

634:28-634:32
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_b970df61
Bytes: 6
false?

634:28-634:32
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_b970df61
UUID: 8e52b121_5b7e0744
Bytes: 121
Nice catch. Fixed.
I'm wondering if the I/F, J/D aliasing only happens for arrays which we don't eliminate stores anyway.

645:5-645:20
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_f529784e
Bytes: 45
Aren't you arleady doing this check line 648?

645:5-645:20
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6ec3bd5a_f529784e
UUID: 2e2e2591_747e7944
Bytes: 14
I took it out.

753
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_5683148e
Bytes: 130
Could you add a VisitInstruction, and make sure they don't write to any field/static/array, to make sure you've covered all cases?

753
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_5683148e
UUID: 0e5fa128_8ab780be
Bytes: 63
How do I make sure a generic instruction doesn't write to heap?

757:0-763:23
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_355bf0f7
Bytes: 48
Shouldn't remove/substiute be at the same index?

757:0-763:23
Sat Sep 26 00:30:46 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6ec3bd5a_355bf0f7
UUID: 0e5fa128_2ac65436
Bytes: 151
This is linear search to find if the instruction is removed. It's to be used by the code that traces substitutes all the way to one that's not removed.

File: compiler/optimizing/nodes.h

4164:20-4165:48
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_55506ccf
Bytes: 12
one per line

4164:20-4165:48
Sat Sep 26 00:31:26 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6ec3bd5a_55506ccf
UUID: 2e470569_35746e55
Bytes: 4
Done

4211:20-4212:48
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_3a13e1d6
Bytes: 5
ditto

4211:20-4212:48
Sat Sep 26 00:31:26 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_3a13e1d6
UUID: ae5bf53d_fafec8d5
Bytes: 4
Done

4618:20-4619:48
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_755568be
Bytes: 5
ditto

4618:20-4619:48
Sat Sep 26 00:31:26 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6ec3bd5a_755568be
UUID: ee86cdd4_2a8adea0
Bytes: 4
Done

4662:20-4663:49
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_fb9b2b2e
Bytes: 5
ditto

4662:20-4663:49
Sat Sep 26 00:31:26 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_fb9b2b2e
UUID: ee86cdd4_ca96d2c8
Bytes: 4
Done

