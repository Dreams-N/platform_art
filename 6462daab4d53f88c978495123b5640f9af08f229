Revision: 6462daab4d53f88c978495123b5640f9af08f229
Patch-set: 4
File: compiler/optimizing/load_store_elimination.cc

35:15-36:69
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_3365c8a7
Bytes: 17
nit: one per line

37:8-38:89
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_2179ee5a
Bytes: 5
ditto

75:16-75:42
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_f5f972b4
Bytes: 43
How does that deal with multiple dex files?

82:30-82:33
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_417ef243
Bytes: 9
reference

92:25-92:41
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_735f40d1
Bytes: 13
nit: new line

124:9-124:26
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_d0e1fc3d
Bytes: 35
-> allocation and stores into ... ?

131:45-131:65
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_d943d308
Bytes: 28
what's reference+info_array?

132:0-133:20
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_f50ed8f9
Bytes: 73
Do you need two flags? Is it worth knowing it's a singleton but returned?

79:0-134:2
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_da32e587
Bytes: 29
Move this above HeapLocation?

143:8-146:80
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_54506ccf
Bytes: 17
nit: one per line

156:17-156:34
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_745568be
Bytes: 20
FindReferenceInfoOf?

185:9-185:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_7b90fb0e
Bytes: 28
What's 'Id' in this context?

185:28-186:82
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_3be3e3c4
Bytes: 12
one per line

219:12-219:21
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_1979cb5a
Bytes: 8
Compute?

228:19-228:22
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_d36d748c
Bytes: 6
cannot

232:80-232:83
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_5bd89708
Bytes: 6
cannot

251:64-251:66
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_700810a3
Bytes: 23
Shouldn't that be '&&'?

258:23-258:26
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_13cb6ce2
Bytes: 8
Position

260:17-260:23
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_7a3b9960
Bytes: 19
number_of_locations

261:12-261:25
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_3504da56
Bytes: 54
Use return (id1 == 0)
  ?
  :

To avoi this temporary?

272:9-272:26
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_500d0cb1
Bytes: 36
Why not CheckAliasingMatrixPosition?

280:7-280:16
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_1479945a
Bytes: 8
Compute?

283:0-291:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_55095e6d
Bytes: 56
If we had the ArtField available, wouldn't it be easier?

292:9-292:17
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_5983438e
Bytes: 117
The naming isn't great here, as this sounds like a cached version of CalculateMayAlias. How about CanReferencesAlias?

299:0-302:7
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_1ae7fd59
Bytes: 52
How about checking line 295 if loc2->IsArrayElement?

303:11-304:86
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_53d5e476
Bytes: 17
nit: one per line

312:36-313:90
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_b001d87d
Bytes: 12
one per line

314:0-316:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_798807aa
Bytes: 50
You'll probably also have trouble with HBoundType.

323:99-323:101
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_1656fcce
Bytes: 13
line too long

349:18-349:21
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_7bdd5bf7
Bytes: 8
location

351:8-352:53
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_90fe54d5
Bytes: 12
one per line

389:0-390:28
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_b989bfad
Bytes: 43
Why is that not doing SetMayBecomeUnknown ?

405:7-405:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_365bf8f7
Bytes: 36
You need to add VisitUnresolved now.

412:0-414:47
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_3965afa7
Bytes: 32
Please add comment around these.

416:59-416:85
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_3aecc13b
Bytes: 46
Maybe expand on why, and what it can still do?

416:0-419:23
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_21600e97
Bytes: 102
It's a shame a single instruction can bail the optimization. What's your plan to do this contextually?

424:26-424:44
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_0194eabd
Bytes: 31
I don't understand this comment

434:42-434:60
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_d99673c8
Bytes: 24
heap_locations_collector

447:0-453:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_fbc88b37
Bytes: 49
Add a comment on why heap_values may not be null.

459:33-459:61
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_10b6e431
Bytes: 43
block->GetLoopInformation()->GetPreHeader()

476:35-476:36
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_765570be
Bytes: 1
&

475:0-481:5
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_b646281a
Bytes: 124
Why not moving this optimization into the MergePredecessorValues?

Also, I suggest doing this optimization in a followup cl.

533:0-542:3
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_615a16e3
Bytes: 112
This doesn't seem to belong to this optimization, or is maybe too premature for this change. Do you need it now?

565:25-566:93
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_815f1ad0
Bytes: 12
One per line

567:16-567:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_bad7f15c
Bytes: 32
Same comment for the HBoundType.

585:0-585:64
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_5b8b37e7
Bytes: 16
How can that be?

601:16-601:27
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_367e9843
Bytes: 16
ditto HBoundType

615:1-616:8
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_c1704263
Bytes: 8
else if?

618:10-618:28
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_e16d468c
Bytes: 28
What about array allocation?

621:76-621:81
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_f96a5771
Bytes: 20
What's `value` here?

628:48-628:54
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_d0cbbca8
Bytes: 6
static

634:28-634:32
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_b970df61
Bytes: 6
false?

645:5-645:20
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_f529784e
Bytes: 45
Aren't you arleady doing this check line 648?

753
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_5683148e
Bytes: 130
Could you add a VisitInstruction, and make sure they don't write to any field/static/array, to make sure you've covered all cases?

757:0-763:23
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_355bf0f7
Bytes: 48
Shouldn't remove/substiute be at the same index?

File: compiler/optimizing/nodes.h

4164:20-4165:48
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_55506ccf
Bytes: 12
one per line

4211:20-4212:48
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_3a13e1d6
Bytes: 5
ditto

4618:20-4619:48
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6ec3bd5a_755568be
Bytes: 5
ditto

4662:20-4663:49
Fri Sep 25 10:55:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_fb9b2b2e
Bytes: 5
ditto

