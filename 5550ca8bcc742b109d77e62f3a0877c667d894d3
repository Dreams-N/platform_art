Revision: 5550ca8bcc742b109d77e62f3a0877c667d894d3
Patch-set: 12
File: runtime/jit/profiling_info.cc

68:41-68:44
Tue Oct 06 12:50:18 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b57c2af2_0e850fff
Bytes: 2
in

94:54-94:73
Fri Oct 02 22:18:14 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 953c86f3_9c5034d7
Bytes: 50
Why is this reading with the read barrier enabled?

94:54-94:73
Mon Oct 05 07:59:36 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953c86f3_9c5034d7
UUID: 55eccecd_9322e434
Bytes: 226
You mean disabled? The cache is a root (always visited through ArtMethod), so I was assuming you wouldn't need a read barrier. Class unloading probably invalidates that, but I think it was still a WIP when this CL was started.

94:54-94:73
Mon Oct 05 18:31:06 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55eccecd_9322e434
UUID: 2b6d3ced_7dfaf3a9
Bytes: 301
Yes, I mean disabled.

Generally, the GC roots that we visit concurrently need read barriers (particularly "GcRoot" ones, that's the primary reason that we invented the GcRoot type.)

This one is no different than ArtMethod::declaring_class_. So, I think this one should have the read barrier enabled.

94:54-94:73
Tue Oct 06 08:30:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2b6d3ced_7dfaf3a9
UUID: 957f26e6_cd993d6f
Bytes: 306
So if this one needs a read barrier, how about the inline cache in compiled code? The compiled code will look like:

r0 = load the cache
r1 = load the class from r0
r2 = load the class from receiver
r3 = compare r1 and r2
deopt if r3 is false
... // continue

Will we need a read barrier when executing r1?

94:54-94:73
Tue Oct 06 17:53:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 957f26e6_cd993d6f
UUID: eb66c411_0dae216f
Bytes: 4
Yes.

94:54-94:73
Wed Oct 07 08:33:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb66c411_0dae216f
UUID: b06c3d16_f6c36067
Bytes: 100
Any ways to prevent this? We are special casing thread stacks, could we also special case the cache?

