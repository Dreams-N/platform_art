Revision: ec6910fb3cc0c06a7bc68a9faa1ca49cb59fe63d
Patch-set: 3
File: compiler/optimizing/gvn.cc

43:19-43:35
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_0b24fdb0
Bytes: 46
Should you DCHECK num_buckets is a power of 2?

43:19-43:35
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_0b24fdb0
UUID: c62484a6_562ff40a
Bytes: 4
Done

48:2-48:10
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 97ec78cf_ed50a530
Bytes: 8
No need.

48:2-48:10
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 97ec78cf_ed50a530
UUID: c62484a6_3624782b
Bytes: 4
Done

49:0-49:42
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 97ec78cf_ad84dd0b
Bytes: 17
Fits on one line?

49:0-49:42
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 97ec78cf_ad84dd0b
UUID: 861e0c58_b420801c
Bytes: 4
Done

58:32-58:47
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 77fb8486_6c8b1b1d
Bytes: 93
That's bucket_owned, right? Might be clearer to name it directly instead of mentioning flags.

58:32-58:47
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 77fb8486_6c8b1b1d
UUID: a61f9053_f5eb9821
Bytes: 4
Done

61:25-61:32
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 77fb8486_eca54bb2
Bytes: 19
changes -> changes,

61:25-61:32
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 77fb8486_eca54bb2
UUID: a61f9053_d5e89c27
Bytes: 9
Rephrased

62:9-62:43
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7f17ca4_6e3dcfe5
Bytes: 59
Why the "but" in "but will". Also, is it "we will" instead?

62:9-62:43
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7f17ca4_6e3dcfe5
UUID: a61f9053_15b6143e
Bytes: 9
Rephrased

134:6-134:90
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7f17ca4_4e445304
Bytes: 72
Aren't we guaranteed pure instructions survive? Shouldn't you skip them?

134:6-134:90
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7f17ca4_4e445304
UUID: c62484a6_56fdb4ea
Bytes: 56
That is a *very* good point. Didn't occur to me, thanks.

158:0-158:28
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_0b96bd48
Bytes: 24
Is the caching worth it?

158:0-158:28
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_0b96bd48
UUID: 861e0c58_14b6143e
Bytes: 156
Good question. I just ran it on Golem (see dbrazdil-gvn-{cached,computed}-hashcode) and it does help slightly, so I'll keep it here if that's okay with you.

164:11-164:12
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_ab84c90b
Bytes: 15
own -> our own?

164:42-164:46
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_8b810dfc
Bytes: 48
was only -> is currently pointing to the parent?

164:11-164:12
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_ab84c90b
UUID: a61f9053_581f2161
Bytes: 4
Done

164:42-164:46
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_8b810dfc
UUID: c62484a6_7930a31b
Bytes: 4
Done

167:52-167:65
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_4b90c549
Bytes: 21
What's preserve_node?

167:52-167:65
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_4b90c549
UUID: 861e0c58_d7209ec6
Bytes: 169
Sry, couldn't decide what to call this - it's the 'return_node_clone'. I've rephrased the comment and shuffled things around in the method body to make it more readable.

168:34-168:67
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7f17ca4_0e4a4b11
Bytes: 21
Please document this.

168:34-168:67
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7f17ca4_0e4a4b11
UUID: c62484a6_192f6fba
Bytes: 5
ditto

171:75-171:88
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 97ec78cf_ed60a582
Bytes: 10
== nullptr

171:75-171:88
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 97ec78cf_ed60a582
UUID: a61f9053_f8b4adc5
Bytes: 4
Done

181:0-181:47
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_6b002101
Bytes: 75
OK, so you're cloning all entries/collisions at this bucket index, correct?

181:0-181:47
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_6b002101
UUID: a61f9053_58ede1b8
Bytes: 331
Yep, I had to make this more complicated to preserve the order of entries. 

That's useful in Delete because I can iterate over a bucket and call CloneBucket at the point of first deletion without having to restart the iteration. The order remains the same and CloneBucket returns the cloned iterator too so I can happily continue.

196:49-196:64
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_8b062d19
Bytes: 46
satisfy cond -> on which `cond` returns true ?

196:39-196:48
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_4b05650f
Bytes: 28
all which -> the ones that ?

196:39-196:48
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_4b05650f
UUID: c62484a6_f97273df
Bytes: 4
Done

196:49-196:64
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_8b062d19
UUID: 861e0c58_b77c02b4
Bytes: 4
Done

212:52-212:55
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7f17ca4_2e458703
Bytes: 15
don't -> do not

212:52-212:55
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7f17ca4_2e458703
UUID: a61f9053_18e769d9
Bytes: 4
Done

228:15-228:20
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 97ec78cf_6dc2f5d2
Bytes: 15
don't -> do not

228:15-228:20
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 97ec78cf_6dc2f5d2
UUID: c62484a6_d96fb7f5
Bytes: 4
Done

248:5-248:12
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 97ec78cf_8da8010a
Bytes: 72
Nit: Please be consistent on the comments. Either "Return" or "Returns".

248:5-248:12
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 97ec78cf_8da8010a
UUID: 861e0c58_977906c4
Bytes: 23
Done. Fixed throughout.

251:4-251:61
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_2b1f395e
Bytes: 58
Please add a comment on why you're doing this computation.

251:4-251:61
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_2b1f395e
UUID: 861e0c58_f7aa7a4e
Bytes: 4
Done

281:47-281:56
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 97ec78cf_edb54564
Bytes: 33
hash set? you mean the ValueSet ?

281:47-281:56
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 97ec78cf_edb54564
UUID: a61f9053_38ec658c
Bytes: 32
Changed to just "set" as on 279.

290:17-290:30
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7f17ca4_4e429369
Bytes: 33
bucket_owned_ -> buckets_owned_ ?

290:17-290:30
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7f17ca4_4e429369
UUID: c62484a6_39146b41
Bytes: 4
Done

292:0-293:20
Fri Mar 06 16:48:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 57f6809e_6b194175
Bytes: 67
Should this be computed instead? GetHashMask() -> num_buckets - 1 ?

292:0-293:20
Mon Mar 16 14:58:20 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 57f6809e_6b194175
UUID: a61f9053_98fc993b
Bytes: 189
Done. Both num_buckets_ and hash_mask_ are used pretty often so I wanted to cache both. But you're right that the compiler should inline most of this and not compute it over and over again.

