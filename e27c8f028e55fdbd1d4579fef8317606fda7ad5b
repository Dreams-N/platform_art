Revision: e27c8f028e55fdbd1d4579fef8317606fda7ad5b
Patch-set: 2
File: compiler/optimizing/instruction_simplifier_arm64.h

65
Wed Mar 30 09:29:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b1b1b559_51ae34a9
Bytes: 320
else we rely on the "next_" link in the already removed instruction to still correctly point to the rest of the list that we still want to process. This is bogus and we should really just record the instructions that we want to merge into all uses and do the merging _after_ we have visited all the block's instructions.

65
Wed Mar 30 09:40:13 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b1b1b559_51ae34a9
UUID: d1d7097d_caa1c3bc
Bytes: 454
Ah, missed this - excellent point, Vladimir.

You don't need to record them though. The problem stems from the fact that HInstructionIterator pre-loads the `next_` pointer in Advance() in case the current instruction gets removed and does not account for forward removals.

The only time we can run into trouble is therefore if we remove the very next instruction. That could be accounted for with a custom iterator and without having to allocate a list.

65
Wed Mar 30 09:45:35 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b1b1b559_51ae34a9
UUID: f17a4d32_2b0d9957
Bytes: 114
I fear deferred merging would be complicated for example if multiple patterns are able to merge an IR into others.

65
Wed Mar 30 09:58:24 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f17a4d32_2b0d9957
UUID: f1a6cd26_8bbeadd6
Bytes: 343
Yes, this can be done with a custom iteration. For example, we could keep the iterator in a member variable and update it as needed.

The pre-loading of the HInstructionIterator::next_ is also an oddity I'd like to remove in future and make it very explicit in places where we rely on the pre-loading, such as HGraphVisitor::VisitBasicBlock().

65
Wed Mar 30 10:06:21 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f1a6cd26_8bbeadd6
UUID: b1da95a7_e9b3f50c
Bytes: 109
I'd opt for an HInstructionFwdRemovalIterator (or something along those lines), but I'll leave it up to Aart.

65
Wed Mar 30 15:28:00 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b1da95a7_e9b3f50c
UUID: 3174e57a_75dc082e
Bytes: 385
Yes, this solution works because the instruction iterator already preloads the next. and we cannot reach instructions that are removed "farther forward" because the next pointer of the instructions before them will no longer point to them (if you want to remove that oddity, there are probably a lot of other places that rely on that already).

So what do you guys want to change here?

65
Wed Mar 30 15:42:56 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3174e57a_75dc082e
UUID: b1b1b559_11130c81
Bytes: 143
It doesn't work because if you're iterating over instruction X and delete X->next, the next iteration will look at X->next->next which is null.

65
Wed Mar 30 15:46:01 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3174e57a_75dc082e
UUID: 3174e57a_752968c7
Bytes: 176
Hmm, I do see a potential flaw though if we could remove a cascade of next instructions at once. Does not happen in this phase, but is that what you guys want to guard against?

File: test/593-amd64-simplifier/src/Main.java

23
Wed Mar 30 08:22:19 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d1e62928_52c79481
Bytes: 155
Can we CHECK this pattern, please? Would be good to ensure it keeps testing the same thing in the future. For that, a $noinline$ might be in order as well.

23
Wed Mar 30 15:35:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d1e62928_52c79481
UUID: 3174e57a_75f328b2
Bytes: 401
Sigh. Happy to do that too. I don't know what the convention for our typical regression test is, but this feels a bit odd. We don't necessarily want this particular pattern in our HIR per se, so someone changing something in the future may wonder why he/she has to preserve that particular set of operations.

It simply serves the fail-before/pass-after purpose for now with some sanity going forward.

25:14-25:15
Wed Mar 30 08:22:19 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d198e991_45557c40
Bytes: 13
Nit: no space

25:14-25:15
Wed Mar 30 15:35:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d198e991_45557c40
UUID: 3174e57a_15fcb483
Bytes: 4
Done

