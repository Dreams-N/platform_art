Revision: bd808a3dfe887cea9e9c9e7ffb4ad3850f53b425
Patch-set: 2
File: compiler/optimizing/dead_code_elimination.cc

25:12-25:34
Mon Sep 01 13:52:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 133de99e_31146a5c
Bytes: 61
Please add a (virtual) HasSideEffects method on HInstruction.

25:12-25:34
Thu Sep 04 00:09:38 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 133de99e_31146a5c
UUID: 10807fc3_39f9eb9a
Bytes: 26
I agree with Nicolas here.

25:12-25:34
Thu Sep 04 09:50:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10807fc3_39f9eb9a
UUID: 90d1cfe4_b24bc03c
Bytes: 114
Actually, once https://android-review.googlesource.com/#/c/106342 gets in, you can just use the SideEffects class.

34:14-34:24
Thu Sep 04 00:09:38 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f04e8b81_24a447a5
Bytes: 175
I do not see how this is safe to remove. This updates the heap. This is only okay to remove if the array does not escape and you have successfully disambiguated heap accesses.

34:14-34:24
Thu Sep 04 09:50:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f04e8b81_24a447a5
UUID: d0a0a75c_5c1b7d0a
Bytes: 87
Note that there is a ! line 27. So ArraySet is not in the list of things to be removed.

35:14-35:28
Thu Sep 04 09:50:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0a0a75c_3c1a3104
Bytes: 114
parallel moves are inserted after register allocation, so you should never see one when doing graph optimizations.

43:7-43:44
Thu Sep 04 00:09:38 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 50583741_0fd04601
Bytes: 71
Linear pass through blocks is likely not going to be effective for DCE.

45:9-45:29
Mon Sep 01 13:52:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 133de99e_91499e7f
Bytes: 139
Phis should probably be dealt separately (and already are in SsaDeadPhiElimination), since we statically know they never have side effects.

61:10-61:19
Mon Sep 01 13:52:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 33582d1a_cf09bd94
Bytes: 190
I don't think you need a worklist approach. You could just do a post-dominator visit and remove dead instructions. This way, you ensure dead instructions cannot be used by dead instructions.

81:21-81:24
Mon Sep 01 13:52:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 33582d1a_6f04517d
Bytes: 35
Always use braces for control flow.

File: compiler/optimizing/dead_code_elimination.h

28:6-28:25
Thu Sep 04 00:09:38 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 10807fc3_59bce7c5
Bytes: 136
Seem a pass infrastructure like in Quick would be more useful. So that these optimizations can be easily controlled and reran as needed.

File: compiler/optimizing/dead_code_elimination_test.cc

47:22-47:27
Mon Sep 01 13:52:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d398b1f7_5cabbdfb
Bytes: 91
I think you should check you did eliminate the instructions you think should be eliminated.

55:0-55:2
Mon Sep 01 13:52:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d398b1f7_1ca1351c
Bytes: 28
Nit: /** and * at each line.

