Revision: 3f6342f1d94464317240ee3284f52eaac6605b4b
Patch-set: 1
File: runtime/gc/allocator/rosalloc.cc

575:13-575:25
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_d9731f24
Bytes: 123
InitFreeList should touch all the cache lines, worth trying to disable kUsePrefetchDuringAllocRun and seeing if that helps?

575:13-575:25
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_d9731f24
UUID: 4e4c398b_307c767e
Bytes: 115
Good point. Measured it with kUsePrefetchDuringAllocRun disabled. It improved it a bit. Updated the commit message.

946:60-946:90
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_7111e75b
Bytes: 18
Put on a new line?

946:60-946:90
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_7111e75b
UUID: 0e5fa128_acded9f5
Bytes: 4
Done

996:0-996:62
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_795567be
Bytes: 32
I don't understand this comment.

996:0-996:62
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_795567be
UUID: ee616dea_71ce7a99
Bytes: 22
Clarified the comment.

1706:0-1706:48
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_60834b8f
Bytes: 25
Split into two DCHECK_GT?

1706:0-1706:48
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_60834b8f
UUID: 6e4d7d85_62fea62b
Bytes: 4
Done

1956:0-1986:3
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_1360cc96
Bytes: 40
Why is that not calling InspectAllSlots?

1956:0-1986:3
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_1360cc96
UUID: 4e4c398b_7009ce6d
Bytes: 73
It looks like it can call InspectAllSlots. Will address in a separate CL.

File: runtime/gc/allocator/rosalloc.h

118:16-118:17
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_30e7a85a
Bytes: 5
const

118:16-118:17
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_30e7a85a
UUID: ce582944_6eb7b90d
Bytes: 4
Done

130
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee86cdd4_553b4c60
Bytes: 89
I thought cpplint required vertical whitespace before the private:, is this not the case?

130
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee86cdd4_553b4c60
UUID: 4e4c398b_10f05ac7
Bytes: 15
Not sure. Done.

135:16-135:24
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_81555ac1
Bytes: 23
Why making it optional?

135:16-135:24
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_81555ac1
UUID: 8e52b121_b2f995b5
Bytes: 16
Added a comment.

139:16-139:17
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_f929774e
Bytes: 5
const

139:16-139:17
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_f929774e
UUID: ae5bf53d_18999a68
Bytes: 4
Done

142:16-142:17
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_10ec243b
Bytes: 5
const

142:16-142:17
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_10ec243b
UUID: 8e52b121_722b1dc5
Bytes: 4
Done

146:17-146:18
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_9422046b
Bytes: 5
const

146:17-146:18
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_9422046b
UUID: 8e52b121_522021dd
Bytes: 4
Done

149:10-149:16
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_55cebe98
Bytes: 145
Maybe FetchOneSlotAndRemove?

Just calling it Remove makes me think that there must be some guarantee about whehre it removes (random/head/tail).

149:10-149:16
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e9a4178_55cebe98
UUID: f86a1765_cd12ddf0
Bytes: 59
Remove() does always remove from the head of the free list.

149:10-149:16
Wed Sep 30 08:19:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f86a1765_cd12ddf0
UUID: 35703a18_24d8325e
Bytes: 40
Thanks, could you add that as a comment?

149:10-149:16
Wed Sep 30 21:32:57 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35703a18_24d8325e
UUID: b5398a03_6695ea05
Bytes: 4
Done

177:8-177:13
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_9e7229a6
Bytes: 111
Is it worth investigating not keeping a size_ field, I think its only required to figure out if a run is empty?

177:8-177:13
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_9e7229a6
UUID: f86a1765_adb20960
Bytes: 163
size_ is used to make it fast to check if a free list is all free (IsAllFree()), which, without size_, would need to traverse the whole free list, which I'd avoid.

214:28-214:32
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_615056d0
Bytes: 9
kUseTail?

214:28-214:32
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_615056d0
UUID: 2e2e2591_60622ed7
Bytes: 16
Added a comment.

215:0-221:7
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_d42c7c61
Bytes: 37
Move all this to if (kIsDebugBuild) ?

215:0-221:7
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_d42c7c61
UUID: ee86cdd4_4f8dec69
Bytes: 4
Done

284:22-284:40
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_f429784e
Bytes: 73
Why do we need this guarantee? Please add the explanation in the comment.

284:22-284:40
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_f429784e
UUID: ee86cdd4_6f58f06f
Bytes: 16
Added a comment.

414
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_31bc8fef
Bytes: 6
const?

414
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_31bc8fef
UUID: 2e2e2591_202b0662
Bytes: 4
Done

415:6-415:44
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_1456f4ce
Bytes: 10
nit: drop?

415:6-415:44
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_1456f4ce
UUID: 2e2e2591_e024de8e
Bytes: 4
Done

425
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee616dea_d29f75c4
Bytes: 6
const?

425
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_d29f75c4
UUID: ce582944_2e442183
Bytes: 4
Done

429
Fri Sep 25 17:41:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_11c18b6b
Bytes: 6
const?

429
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_11c18b6b
UUID: 15197672_13d2ac3e
Bytes: 4
Done

477:0-483:48
Fri Sep 25 10:01:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_938cdcbe
Bytes: 38
What are these Java-conventions named?

477:0-483:48
Wed Sep 30 00:02:58 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_938cdcbe
UUID: 4e4c398b_708b0ee8
Bytes: 35
Will address that in a separate CL.

