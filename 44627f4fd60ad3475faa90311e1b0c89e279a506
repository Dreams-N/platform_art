Revision: 44627f4fd60ad3475faa90311e1b0c89e279a506
Patch-set: 11
File: runtime/interpreter/interpreter_goto_table_impl.cc

2557
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 504861a0_24691374
Bytes: 180
What is it supposed to throw then?

  throw OldException(MonitorException)

or

  throw MonitorException(OldException)

or just 

  throw MonitorException //discard OldException

?

2557
Thu Oct 08 18:31:14 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 504861a0_24691374
UUID: 90673931_b7b0bb6c
Bytes: 13
The last one.

2557
Thu Oct 08 18:46:55 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90673931_b7b0bb6c
UUID: 5061411e_50ae8d0a
Bytes: 291
Ok, do you think it would make sense to add that in a comment somewhere?

  // Potentially throws a MonitorStateException, clearing the previous exception

Although it's pretty easy to get to now by just looking in the .cc file for LockCountData, so maybe people can just look at the source.

File: runtime/stack.cc

1088
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90673931_375dcb0b
Bytes: 190
Agreed, this should wrap either as a suppressed exception so that we don't lose the original one.

(looks like IllegalMonitorStateException doesn't have an (Exception) constructor, too bad).

1088
Thu Oct 08 18:31:14 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90673931_375dcb0b
UUID: 90673931_571e8701
Bytes: 329
1) The constructor would be the wrong way (that is the cause, not the suppressed exception).

2) The definition isn't clear (it never is with suppressed exceptions).

3) Suppressed exceptions are a lot of work to get right. I think for simplicity it's enough to tell people they screwed up with locks, as it should not be common.

1099
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d00a915c_5b888661
Bytes: 44
DCHECK obj not null?

Why does it need self?

1099
Thu Oct 08 18:31:14 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d00a915c_5b888661
UUID: 90673931_97281f25
Bytes: 49
Because I don't want to put in Thread::Current().

File: runtime/stack.h

78
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30592d74_158d23bb
Bytes: 56
nit: public functions should have comments, as per style

80
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 504861a0_64c03bb3
Bytes: 45
can obj be const?
DCHECK for self being null?

88
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5061411e_75cf3be0
Bytes: 54
nit: DCHECK arguments for not null?

can obj be const?

92
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 504861a0_84a8e7fb
Bytes: 320
So apparently this can throw but nothing mentions that, I was under the impression the existing interpreter convention was

   bool FunctionNameOrThrow(args)

and it would return false and set the exception, otherwise return true.

Also Nicolas has remarked in the past that the name/comment should mention if it throws.

104
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 704d65ae_037e8d6d
Bytes: 25
should probably be Args&&

106
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5061411e_15bec73e
Bytes: 27
std::forward<Args>(args)...

118
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d00a915c_fbe69a4b
Bytes: 91
IIRC Mathieu was asking for a comment earlier explaining why they weren't used with GcRoots

118
Thu Oct 08 18:31:14 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d00a915c_fbe69a4b
UUID: 105c2963_0eba37aa
Bytes: 40
The comment is in the class description.

118
Thu Oct 08 18:46:55 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 105c2963_0eba37aa
UUID: d03c51f4_48226eef
Bytes: 81
Oh, I see it now. Perhaps it might be slightly better if it was here instead :) ?

328
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5061411e_d531ef91
Bytes: 102
nit: This could just be LockCountData& GetLockCountData(), so the call site doesn't have to null check

328
Thu Oct 08 18:31:14 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5061411e_d531ef91
UUID: 5061411e_300dd104
Bytes: 92
We modify the data, so it must be a non-const ref, and I thought we're still averse to that?

328
Thu Oct 08 18:46:55 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5061411e_300dd104
UUID: 30592d74_b0df25ea
Bytes: 287
No, we're not averse to that currently, and we never were because it's not a parameter.

Some people might disagree, in which case it should at least say "// Returns a not-null pointer to..."

but my personal philosophy is why repeat something in a comment obvious from the signature? :)

File: test/088-monitor-verification/src/Main.java

72
Thu Oct 08 17:50:08 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1001893d_26c5acc2
Bytes: 18
What does that do?

72
Thu Oct 08 18:31:14 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1001893d_26c5acc2
UUID: b0435d80_2890c4d5
Bytes: 122
What it states in the name. If asserts aren't disabled, it will check that the call-site is managed code, not interpreted.

72
Thu Oct 08 18:46:55 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0435d80_2890c4d5
UUID: 5061411e_10bb754e
Bytes: 268
Oh, that was confusing to me because "managed" just usually means anything not native (i.e. any executed java code is managed code). Perhaps there is a terminology in Art I'm not familiar with yet.

Alternatively, this could be "assertIsCompiled" to be less ambiguous.

