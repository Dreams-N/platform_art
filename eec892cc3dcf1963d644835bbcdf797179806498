Revision: eec892cc3dcf1963d644835bbcdf797179806498
Patch-set: 1
File: compiler/optimizing/nodes.h

1673:7-1673:15
Tue Dec 02 19:12:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f70f517_ad05e539
Bytes: 71
Add a comment on why it can throw and a TODO that we can optimize this.

1673:7-1673:15
Tue Dec 02 19:47:21 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f70f517_ad05e539
UUID: ff82dd17_f3ffc2bd
Bytes: 4
Done

File: test/435-new-instance/smali/instance.smali

16:1-16:6
Tue Dec 02 19:12:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f70f517_cd02212f
Bytes: 64
As discussed, can we somehow have a full Java test case instead?

16:1-16:6
Tue Dec 02 19:47:21 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f70f517_cd02212f
UUID: 3f70f517_0d1ef986
Bytes: 348
Now that I think about it I'm not so sure anymore:
- we can add a full Java test which verifies that newInstance() will throw an InstantiationException
- what I don't think is possible is to generate a test that verifies the optimizing regression (that we unsafely removed dead new-instance calls).

I'll expand the test info comment to cover this.

16:1-16:6
Wed Dec 03 08:59:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f70f517_0d1ef986
UUID: ff82dd17_93176637
Bytes: 257
Why not? Here's the trick (in pseudo command line):

# javac Main.class ClassForCompilation.class (where class is concrete)
# javac ClassForExecution.class (where class is abstract)
# jar Main.class ClassForExecution.class -o foo.jar
# java -cp foo.jar Main

16:1-16:6
Wed Dec 03 11:48:33 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ff82dd17_93176637
UUID: 5f8a0930_f60896c6
Bytes: 148
You're right, my bad. I was thinking in calling newInstance via reflection and not using the javac/jar "magic". I'll do  it later in a follow up CL.

