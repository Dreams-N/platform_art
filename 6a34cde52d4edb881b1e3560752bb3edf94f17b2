Revision: 6a34cde52d4edb881b1e3560752bb3edf94f17b2
Patch-set: 1
File: compiler/optimizing/ssa_liveness_analysis.h

714:0-715:59
Mon Mar 02 13:55:51 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72cf1248_ccf90fd2
Bytes: 102
Not sure I understand this check. Is it for checking the last visited range is owned by this interval?

714:0-715:59
Mon Mar 02 14:35:17 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72cf1248_ccf90fd2
UUID: 72cf1248_cc27cfe1
Bytes: 317
I added this mostly for myself to make sure I wasn't iterating over a sibling's list when I assigned the cached range to the correct sibling during a split. Doing that gained nothing so I just cleared the cached value but the check stayed. You might be right that it's slightly too paranoid. Want me to get rid of it?

714:0-715:59
Mon Mar 02 14:38:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72cf1248_cc27cfe1
UUID: 92c00617_0d74f188
Bytes: 46
It's OK to keep it, but it deserves a comment.

720:0-720:88
Mon Mar 02 13:55:51 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 92c00617_4dec39c3
Bytes: 158
So we go back to first range if the position is below the last visited range. If we knew the places we restart the algorithm, we wouldn't need to check right?

720:0-720:88
Mon Mar 02 14:35:17 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 92c00617_4dec39c3
UUID: b2c50a26_8e353bac
Bytes: 392
That's assuming Covers is always called on non-decreasing sequences. For example, FreeIfNotCover is called on current_pos+1 and ConnectSplitSiblings calls Covers completely out of sequence. 

So yes, we could get rid of it but apart from "resetting" the cached value of each interval, we would also have to rewrite some bits to run in the correct order and I'm worried I might miss something.

720:0-720:88
Mon Mar 02 14:38:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b2c50a26_8e353bac
UUID: 92c00617_cd8d8900
Bytes: 89
Please add a comment on this code then, explaining that "even though it is linear, ....".

