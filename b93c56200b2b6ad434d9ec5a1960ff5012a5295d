Revision: b93c56200b2b6ad434d9ec5a1960ff5012a5295d
Patch-set: 1
File: compiler/dex/quick/gen_invoke.cc

1455:6-1456:37
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6496ba6_5ea35154
Bytes: 123
Remove those. At most make them a DCHECK, though I'm trying to remove all specific instruction set checks as much as I can.

1482:24-1482:47
Tue Aug 05 10:34:07 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76345307_e11d66ca
Bytes: 155
This is an INVOKE_STATIC, it will not have the MIR_IGNORE_NULL_CHECK set, ever. The meaning would be ill-defined anyway as we've got 2 references to check.

1482:24-1482:47
Tue Aug 05 11:04:12 2014 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76345307_e11d66ca
UUID: 363e5beb_02b5ecce
Bytes: 47
Do you mean this flag should simply be ignored?

1496:49-1496:50
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6496ba6_de39215a
Bytes: 2
ws

1499:32-1499:34
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16431782_c142e4c2
Bytes: 2
ws

1500:0-1501:71
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d64c1fb5_1fd0a7de
Bytes: 36
Why not use one unsigned comparison?

1506:33-1506:34
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6496ba6_de67615b
Bytes: 2
ws

1507:56-1507:57
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6496ba6_3eeac552
Bytes: 2
ws

1508:19-1508:20
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d64c1fb5_3ff00374
Bytes: 2
ws

1508:19-1508:20
Tue Aug 05 10:34:07 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d64c1fb5_3ff00374
UUID: 56390f00_00216600
Bytes: 34
MarkPossibleNullPointerException()

1512:33-1512:34
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d64c1fb5_1ff54764
Bytes: 2
ws

1513:56-1513:57
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d64c1fb5_7ffa8b53
Bytes: 2
ws

1514:19-1514:20
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d64c1fb5_5fffcf41
Bytes: 2
ws

1514:19-1514:20
Tue Aug 05 10:34:07 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d64c1fb5_5fffcf41
UUID: 76345307_84dc6883
Bytes: 34
MarkPossibleNullPointerException()

1528:29-1528:30
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d64c1fb5_bfe373aa
Bytes: 2
ws

1547:48-1547:55
Tue Aug 05 04:24:14 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6496ba6_9e84b9bf
Bytes: 22
A floating-point load?

1547:48-1547:55
Tue Aug 05 10:34:07 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6496ba6_9e84b9bf
UUID: 56390f00_809e1611
Bytes: 83
A potentially unaligned floating-point load? Alignment fault even with SCTRL.A = 0.

1547:48-1547:55
Tue Aug 05 11:04:12 2014 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 56390f00_809e1611
UUID: 962f07b5_6b293172
Bytes: 254
Actually, at first I was trying to use d registers to copy 4 elements at a time and ignore the differences between 32-bit and 64-bit. But at last, I found that I am not able to access d registers at this level. But I forgot to change kSingle back to k32.

