Revision: 348de7eeaf1d1c4f6f00dfa3734676b58b6eda46
Patch-set: 13
File: compiler/optimizing/code_generator_arm.cc

1643:2-1645:62
Mon Jan 11 12:24:19 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a6ebfb0_536c84d8
Bytes: 161
Could you add a comment about why using a parallel move instead of a "generic" move here? (Likewise in other back ends using a parallel move for this operation.)

1643:2-1645:62
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a6ebfb0_536c84d8
UUID: 4774327b_759b2836
Bytes: 48
Removed, using MoveLocation after go/aog/197640.

File: compiler/optimizing/code_generator_x86.cc

1617:23-1617:24
Tue Jan 12 20:03:39 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 67f216a9_ae54d7d9
Bytes: 113
You can specify the template parameter here to avoid the static_cast<>() below. Same further down and for x86-64.

1617:23-1617:24
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 67f216a9_ae54d7d9
UUID: 344dae87_24f21289
Bytes: 39
Much better, thanks for the suggestion.

1642:0-1643:71
Mon Jan 11 13:22:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a3e5b9d_0ee74bcf
Bytes: 64
Shouldn't you split pairs, like we do in the register allocator?

1642:0-1643:71
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a3e5b9d_0ee74bcf
UUID: e74a8641_d2c2440d
Bytes: 46
Good catch, thanks. Resolved by go/aog/197640.

File: compiler/optimizing/instruction_simplifier.cc

618:9-618:10
Mon Jan 11 13:22:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a738396_b416a029
Bytes: 54
Add a comment what you intend on doing in this branch?

618:9-618:10
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a738396_b416a029
UUID: f484f6cd_425b9238
Bytes: 4
Done

619
Mon Jan 11 11:56:03 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a273b99_46205274
Bytes: 66
Nit: You have this in the `if` as well. Take out of the `if/else`?

619
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a273b99_46205274
UUID: 1448aa77_43cf4639
Bytes: 4
Done

File: compiler/optimizing/nodes.cc

683
Mon Jan 11 11:56:03 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a21c386_847326f0
Bytes: 91
`DCHECK(insn->CanBeMoved());`
`DCHECK(!insn->HasSideEffects() && !insn->HasDependencies());

683
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a21c386_847326f0
UUID: 4774327b_b56300ee
Bytes: 21
Why !HasDependencies?

File: compiler/optimizing/nodes.h

5583
Mon Jan 11 11:56:03 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a273b99_661d4e41
Bytes: 89
How does the order here impact codegen? We can pass indexes as we prefer at codegen time.

5583
Mon Jan 11 13:22:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a273b99_661d4e41
UUID: ca4d875b_1195ac03
Bytes: 73
I guess it's the SameAsFirstInput? But I agree it's odd to see this here.

5583
Mon Jan 11 13:23:44 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a273b99_661d4e41
UUID: 6a901bcb_87aa4ceb
Bytes: 78
It helps x86, which has two operand instructions, and SameAsFirst output mode.

5583
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a901bcb_87aa4ceb
UUID: 544ea283_c537bad4
Bytes: 411
Yeah, it's a combination of two things: SameAsFirstInput allocation policy and inverting floating-point compares.

With the fallback implementation and architectures with conditional moves (x86, x86_64, arm) we will do:

  out = SameAsFirstInput = false_value;
  if (cond) { out = true_value; }

So first input needs to be `false_value`. If we could at least invert conditions, it could be `true_value` as well.

5594:7-5594:17
Mon Jan 11 13:22:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a738396_b43060dc
Bytes: 77
You also need InstructionDataEquals and InstructionTypeEquals to support gvn.

5594:7-5594:17
Mon Jan 11 13:28:33 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a738396_b43060dc
UUID: 4a8b57a3_513644dc
Bytes: 182
Since all the data is in the inputs, it shouldn't be necessary to provide InstructionDataEquals.  Not sure why you need InstructionTypeEquals, as nothing else provides it explicitly.

5594:7-5594:17
Mon Jan 11 13:31:37 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a8b57a3_513644dc
UUID: ea4a4b41_52dbb49f
Bytes: 161
Yeah, InstructionTypeEquals is provided by the DECLARE_INSTRUCTION macro. Still, you need InstructionDataEquals to return true (default implementation is false).

5594:7-5594:17
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea4a4b41_52dbb49f
UUID: 344dae87_64a36a71
Bytes: 4
Done

File: compiler/optimizing/prepare_for_register_allocation.cc

138
Mon Jan 11 11:56:03 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a22778b_ab146d93
Bytes: 264
This made me think of a corner case when a value is both used as the condition and as the true or false value.

If you think it is worth it, we could improve that in the simplifier by replacing the use of the condition as a true/false value by constant true/false.

138
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a22778b_ab146d93
UUID: 67793673_d67fa488
Bytes: 259
So what you're saying is:

  a = x ? x : y = x || y
  b = x ? y : x = x && y

There are other patterns like that, for example:

  c = x ? 1 : y = x || y
  d = x ? y : 0 = x && y

If you want to implement a general-purpose static math solver, then be my guest.

File: compiler/optimizing/select_generator.cc

21:57-21:64
Mon Jan 11 13:22:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea4a4b41_5284947b
Bytes: 22
Explain why "at most"?

21:57-21:64
Fri Jan 22 10:14:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea4a4b41_5284947b
UUID: d46292ed_2c70bbde
Bytes: 49
Ping on that comment? Why can we support at most?

21:57-21:64
Fri Jan 22 14:09:29 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d46292ed_2c70bbde
UUID: 1476eac5_d3ac54af
Bytes: 195
Sry. This is an arbitrary choice of the max number of instructions in the branch where it is still worthwhile to do the optimization. I've rewritten the method so that the number is configurable.

28:0-36:15
Mon Jan 11 12:24:19 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a6ebfb0_539564f0
Bytes: 308
What about a more "functional" approach (which matches better the comment from lines 21â€“22 IMO):

  return last_insn->IsGoto() &&
      (first_insn == last_insn ||
       (first_insn->GetNext() == last_insn &&
        first_insn->CanBeMoved() &&
        !first_insn->GetSideEffects().HasSideEffects()));

?

28:0-36:15
Mon Jan 11 13:22:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a6ebfb0_539564f0
UUID: 4a3997b3_2d888dd9
Bytes: 108
I think I actually find the "ifs" more readable.

Or just having:
if (!last_insn->IsGoto()) return false
...

28:0-36:15
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a3997b3_2d888dd9
UUID: 341f6e57_f4871883
Bytes: 35
Yeah, I'd rather left it like this.

39
Mon Jan 11 11:56:03 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a7f24e53_e037621f
Bytes: 40
The comment does not match the function.

39:19-39:40
Mon Jan 11 12:24:19 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa54d3e4_9038b4ae
Bytes: 27
Nit: `block1` and `block2`.

66:11-66:56
Mon Jan 11 12:24:19 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a431f35_ebf8316c
Bytes: 78
Could you add some more details on this? (When can this constraint be lifted?)

66:11-66:56
Tue Jan 12 20:03:39 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a431f35_ebf8316c
UUID: c72ae2be_6977851c
Bytes: 176
For example:

  int x = 0;
  if (bool1) {
    x = bool2 ? 42 : 7;  // We want to use HSelect here
  }  // but the merge_block has 3 predecessors.

(See also my comment in PS8.)

66:11-66:56
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c72ae2be_6977851c
UUID: 341f6e57_54e48c5e
Bytes: 626
I was gonna do this in a follow-up CL but might as well do it now because the code needs some refactor to allow for this.

Note, however, that this has a strange consequence of chaining Selects. Consider:

  x = bool1 ? (bool2 ? a : b) : c;

Translates to:

  temp = Select [b, a, bool2]
  x = Select [c, temp, bool1]

Here we will always do the bool2 comparison even if bool1 is false. I don't think the performance impact would be significant in either direction though.

It also only happens if bool2 is a simplified condition because otherwise there are three instructions in the true branch (Cond, Select, Goto) of bool1.

66:11-66:56
Thu Jan 21 18:16:21 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 341f6e57_54e48c5e
UUID: e74a8641_524f3440
Bytes: 141
Once we have proper HSelect implementations with condition moves instead of branching, 2xHSelect will be much better than the branching code.

71:36-71:83
Mon Jan 11 13:22:51 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a3e5b9d_2e0b2740
Bytes: 50
How about if_instruction->IfTrueSuccessorIndex() ?

71:36-71:83
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a3e5b9d_2e0b2740
UUID: 4774327b_f5465837
Bytes: 138
Huh? This computes the predecessor index from the merge block. What you're suggesting would give me the successor index from the if block.

File: test/458-checker-instruction-simplification/src/Main.java

973:6-973:15
Mon Jan 11 11:56:03 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e7e8c667_622c76d5
Bytes: 176
We can use simple CHECK directives for the parameter and after the constants. This may be fixed in another commit since it appears other tests in this file are using CHECK-DAG.

973:6-973:15
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e7e8c667_622c76d5
UUID: e74a8641_b23ce09f
Bytes: 107
Sorry, I don't follow. There's no guaranteed order of instructions in the entry block. We need to use -DAG.

File: test/463-checker-boolean-simplifier/src/Main.java

0
Mon Jan 11 11:56:03 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c7ebc261_81777a6d
Bytes: 72
Use CHECK instead of CHECK-DAG where possible?
Same in other test files.

0
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c7ebc261_81777a6d
UUID: 4774327b_3529b059
Bytes: 4
Why?

File: test/480-checker-dead-blocks/src/Main.java

59
Mon Jan 11 12:24:19 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a570fe9_0fe745cf
Bytes: 66
Â« by creating a "false" block with more than one instruction. Â»?

59
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a570fe9_0fe745cf
UUID: f484f6cd_a24ffe42
Bytes: 4
Done

90
Mon Jan 11 12:24:19 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea332bd5_eaf8276c
Bytes: 6
Ditto?

90
Thu Jan 21 17:28:03 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea332bd5_eaf8276c
UUID: a75faef8_7805e1ee
Bytes: 4
Done

