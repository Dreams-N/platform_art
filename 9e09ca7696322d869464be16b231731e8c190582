Revision: 9e09ca7696322d869464be16b231731e8c190582
Patch-set: 4
File: compiler/jni/quick/x86/calling_convention_x86.cc

87:13-87:69
Mon Jan 19 13:58:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_7d661799
Bytes: 37
Please add a named variable for this.

87:13-87:69
Mon Jan 19 19:31:18 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_7d661799
UUID: eb586371_a00a3e41
Bytes: 50
Added a gpr_arg_count_ field and worked with that.

88:0-90:66
Mon Jan 19 13:58:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bc24f1f_7348f88e
Bytes: 19
Indentation is off.

88:0-90:66
Mon Jan 19 19:31:18 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bc24f1f_7348f88e
UUID: ab52eb4e_bb043342
Bytes: 4
Done

103:0-105:64
Mon Jan 19 13:58:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_9d6cc374
Bytes: 5
ditto

103:0-105:64
Mon Jan 19 19:31:18 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_9d6cc374
UUID: 8b57e740_9a332912
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.cc

3381:30-3381:50
Mon Jan 19 13:58:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbd63fdb_17d2bc65
Bytes: 79
Do you think you could do the register allocator related changes in another CL?

3381:30-3381:50
Mon Jan 19 19:31:18 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbd63fdb_17d2bc65
UUID: ab52eb4e_9b0a0f42
Bytes: 187
I am pretty sure that needed this change to get core.oat to build and the tests to pass using the optimizing compiler.  Or do you want me to not enable the optimizing compiler in this CL?

File: runtime/arch/x86/context_x86.cc

43:0-43:56
Mon Jan 19 13:58:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbd63fdb_37d7c056
Bytes: 35
Isn't that what the DCHECK was for?

43:0-43:56
Mon Jan 19 19:31:18 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbd63fdb_37d7c056
UUID: 8b57e740_370af8c8
Bytes: 114
The problem was that the FP argument register bits were on, so the DCHECK failed.  Will have a another look at it.

43:0-43:56
Mon Jan 19 20:19:59 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b57e740_370af8c8
UUID: eb586371_a07cfea1
Bytes: 587
I recreated the problem.

This code in runtime/arch/x86/quick_method_frame_info_x86.h:
static constexpr uint32_t kX86CalleeSaveFpArgSpills =
    (1 << art::x86::XMM0) | (1 << art::x86::XMM1) |
    (1 << art::x86::XMM2) | (1 << art::x86::XMM3);
...
constexpr uint32_t X86CalleeSaveFpSpills(Runtime::CalleeSaveType type) {
    return type == Runtime::kRefsAndArgs ? kX86CalleeSaveFpArgSpills : 0;
}

which I copied from the x86_64 version of the file causes the DCHECK to fail, as if the type is kRefsAndArgs, some bits will be on.  This causes much of the host testing to fail.

Comments?

