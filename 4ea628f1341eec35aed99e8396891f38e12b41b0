Revision: 4ea628f1341eec35aed99e8396891f38e12b41b0
Patch-set: 3
File: runtime/gc/collector/concurrent_copying.cc

180:0-181:63
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_534ed014
Bytes: 145
The intention is to print the ranges of immune spaces, not just the immune region. Can we print out the ranges of all the spaces in ImmuneSpaces?

180:0-181:63
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_534ed014
UUID: 96d1fa8e_cb59ac84
Bytes: 4
Done

1508:8-1508:44
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db847bce_d0767ee4
Bytes: 245
I think this should be immune_spaces_.ContainsObject(obj) rather than just checking if the object is in the immune region. We allocate a bitmap for each immune space in BindBitmaps(). Note the CC collector doesn't currently use mod union tables.

1508:8-1508:44
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db847bce_d0767ee4
UUID: 96d1fa8e_8b369426
Bytes: 4
Done

1548:6-1548:42
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_55a439df
Bytes: 5
Same.

1548:6-1548:42
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_55a439df
UUID: db847bce_f3a70c28
Bytes: 4
Done

1933:8-1933:49
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_7c4f4813
Bytes: 5
Same.

1933:8-1933:49
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb75bfb9_7c4f4813
UUID: db847bce_b373c484
Bytes: 4
Done

1987:6-1987:42
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_95beb1ef
Bytes: 5
Same.

1987:6-1987:42
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_95beb1ef
UUID: db847bce_d378c860
Bytes: 47
Done, keep in mind that this may be a slowdown.

File: runtime/gc/collector/immune_spaces.cc

31:19-31:44
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76d4867d_f2ba9ae1
Bytes: 416
Do we assume the boot image and the zygote space will *always* be part of the immune region (which I think we do)? If so, can we assert that somehow and have a comment saying that, unless we do already so? If not, my comments in concurrent_copying.cc about immune_spaces_.ContainsObject(obj) are fairly important to be addressed because heap_bitmap doesn't have a mutable mark bitmap for the boot image, for example.

31:19-31:44
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_f2ba9ae1
UUID: 96d1fa8e_ab2d58d1
Bytes: 93
Ideally they are for performance reasons, but the code should not have any hard requirements.

32
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db847bce_10b8668f
Bytes: 215
Also, could the app image be below (at a lower address than) the boot image? If so, does CreateLargestImmuneRegion() does the right thing (that is, compute an immune region that always covers the boot image/zygote)?

32
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db847bce_10b8668f
UUID: 5b2a4b7b_c3f3235b
Bytes: 127
It depends on the size of the app image, the new app image code changes the marking logic to read before setting in the bitmap.

32
Thu Nov 19 00:48:55 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b2a4b7b_c3f3235b
UUID: 76d4867d_d864d527
Bytes: 43
What does the new marking logic imply here?

32
Thu Nov 19 01:04:04 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_d864d527
UUID: fb75bfb9_926a4d94
Bytes: 141
SpaceBitmap::Modify, it means that if we try to mark an object in the image we wont crash since it will not write the RO image bitmap memory.

36:0-37:89
Wed Nov 18 10:33:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d67c5259_e8a3e7d6
Bytes: 107
Could you expand on the "mask"? I could interpret this sentence as we are introducing heap corruption bugs.

36:0-37:89
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d67c5259_e8a3e7d6
UUID: 7b6aafda_f9e92aa6
Bytes: 4
Done

File: runtime/gc/collector/semi_space.cc

381:31-381:33
Wed Nov 18 10:33:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 569062ca_07b47ca7
Bytes: 4
does

381:31-381:33
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 569062ca_07b47ca7
UUID: fb75bfb9_3ffea2d3
Bytes: 4
Done

File: runtime/gc/space/image_space.h

137:1-137:10
Wed Nov 18 22:11:13 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b816bc7_2b92e93b
Bytes: 41
I guess there's a subclass to ImageSpace?

137:1-137:10
Wed Nov 18 23:44:48 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b816bc7_2b92e93b
UUID: 1b3453db_65db5745
Bytes: 25
In the immune_spaces_test

