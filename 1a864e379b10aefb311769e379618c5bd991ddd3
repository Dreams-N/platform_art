Revision: 1a864e379b10aefb311769e379618c5bd991ddd3
Patch-set: 1
File: compiler/optimizing/nodes.cc

1875:2-1877:3
Thu Mar 03 10:13:08 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c2d7357d_aa31ef46
Bytes: 70
BTW, mentioned only now - so in this method we do not need code below.

File: test/579-inline-infinite/src/Main.java

21:0-23:5
Thu Mar 03 09:46:17 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a2b16159_74fb668f
Bytes: 89
I don't understand this change. There's code in the inliner to not inline infinite loops.

21:0-23:5
Thu Mar 03 10:00:49 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a2b16159_74fb668f
UUID: a2b881d5_537f9c87
Bytes: 487
Optimizing compiler has a bug. Indeed inliner checks whether the method contains infinite loop or not. It checks whether the graph corresponding to inlining method contains or not exit_block_ set. This field is set by builder in the beginning. After that exit block can be removed but no one clear exit_block_ field in graph. As result graph contains a link to block which is removed. So inliner does not really detect that inlining method contains the infinite loop.

I hope this helps.

21:0-23:5
Thu Mar 03 10:06:16 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a2b881d5_537f9c87
UUID: 42f42502_04e8da9a
Bytes: 85
No, why was I able to pass your test then?
/art/test/run-test --host --optimizing 579

