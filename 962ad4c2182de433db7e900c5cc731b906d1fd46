Revision: 962ad4c2182de433db7e900c5cc731b906d1fd46
Patch-set: 11
File: runtime/jit/jit_code_cache.cc

560:42-560:49
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d60ff2af_0aa0bb5d
Bytes: 42
not so much, you're just going to fill it.

560:42-560:49
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d60ff2af_0aa0bb5d
UUID: 56030291_46ca32c8
Bytes: 44
erh, yea, bordeline semantic. I will remove.

File: runtime/jit/offline_profiling_info.cc

33
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 760c86c0_0759d6d9
Bytes: 10
extra line

33
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 760c86c0_0759d6d9
UUID: d60ff2af_0ad43b67
Bytes: 4
Done

146:0-147:28
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b637de6a_c103a29a
Bytes: 179
Just use a buffer stream that dumps at every 4096 or what not? I was sort of assuming the default ::read and ::write would do this for you, or maybe some other stl data structure.

146:0-147:28
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b637de6a_c103a29a
UUID: 56030291_86beea20
Bytes: 169
c++ streams don't support exclusive looking. If you know a way let me know. Added this todo because I didn't what to complicate this yet with my custom buffered writing.

File: runtime/jit/offline_profiling_info.h

58:8-58:21
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d60ff2af_ea71e77c
Bytes: 40
We already have a class named like this.

58:8-58:21
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d60ff2af_ea71e77c
UUID: 56030291_26d73670
Bytes: 20
indeed. I'll rename.

60:42-60:45
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d61d32f8_9a442d9d
Bytes: 37
Not so much, you're going to fill it.

60:42-60:45
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d61d32f8_9a442d9d
UUID: b6127ed6_c92bd129
Bytes: 6
ditto.

64:2-64:8
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d61d32f8_ba49f1b5
Bytes: 4
Why?

64:2-64:8
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d61d32f8_ba49f1b5
UUID: 96173ad8_58b3fd10
Bytes: 139
I am not convinced yet that we'll always be called from the same thread. I forgot to add a TODO to look more closely to the framework code.

File: runtime/native/dalvik_system_VMRuntime.cc

574:27-574:30
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6345268_e226e661
Bytes: 4
use?

574:47-574:50
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 760c86c0_c7f97eed
Bytes: 9
directory

574:47-574:50
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 760c86c0_c7f97eed
UUID: d6345268_82e6fa43
Bytes: 4
Done

574:27-574:30
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d6345268_e226e661
UUID: 760c86c0_67d77241
Bytes: 4
Done

576:15-576:21
Fri Nov 06 11:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6127ed6_09d44967
Bytes: 5
exist

576:15-576:21
Fri Nov 06 13:48:06 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6127ed6_09d44967
UUID: d6345268_22f36e08
Bytes: 4
Done

