Revision: 761ca00b396af75f7fc27e6d85020d0bfcd0fa96
Patch-set: 4
File: compiler/optimizing/code_generator_x86_64.cc

654:0-659:37
Tue Jan 20 09:09:02 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_408d3017
Bytes: 16
Why this change?

654:0-659:37
Tue Jan 20 12:45:13 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_408d3017
UUID: ebfdc373_72dc9828
Bytes: 370
You are right.  This isn't essential.  I thought that moving to two MOVs would allow them to issue in parallel, avoiding the dependency from the 2 movqs.  I will remove this change.

I happened to be in this code looking to change the movq of a constant 0 to an xorq, but realized afterwords that you were worried about setting the CC here, so I didn't make that change.

2038:0-2038:83
Tue Jan 20 09:09:02 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbd63fdb_77c788d9
Bytes: 71
Do you really need this? Can't you load from the existing stack offset?

2038:0-2038:83
Tue Jan 20 12:45:13 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cbd63fdb_77c788d9
UUID: cb02bf41_f117e867
Bytes: 244
In this case, we have already tested for single/double stack slot above, and therefore we can't load from the stack.  We have to put the register/constant into memory first.

Is there another type of location that is in memory?  I don't see it.

2038:0-2038:83
Tue Jan 20 19:44:16 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb02bf41_f117e867
UUID: 4b408f75_035332ae
Bytes: 162
I don't see any instruction that can load to the FP stack from registers or constants so I guess that's the best that can be done without a RequireStack Location.

2038:0-2038:83
Wed Jan 21 08:48:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cb02bf41_f117e867
UUID: 4bc24f1f_41e082a1
Bytes: 129
Nevermind, I thought this branch was handling a source already in stack, but I  can see it's being handled in the other branches.

