Revision: 2e2dd41462d643bcda4361e53a521a5f16f64b15
Patch-set: 1
File: compiler/optimizing/bounds_check_elimination.cc

251:6-251:33
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_e038c29d
Bytes: 24
: public ValueObject { ?

251:6-251:33
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_e038c29d
UUID: f055c239_e341dd18
Bytes: 4
Done

267:4-274:7
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_fb2fcf35
Bytes: 93
The HLoopInformation contains a bitset of the blocks it contains. Could yo uuse that instead?

267:4-274:7
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_fb2fcf35
UUID: 10a416b9_b03e1889
Bytes: 4
Done

322:0-329:11
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 10089662_307cc86e
Bytes: 136
Please add a small Java code snippet of what this covers. I don't understand why the offsets are not relative to the induction variable.

322:0-329:11
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10089662_307cc86e
UUID: 305cba63_ee1b83f2
Bytes: 199
I missed a check. There should still be a check of
left == induction_variable_
for the ValueBound::IsAddOrSubAConstant(index, &left, &right) case. Added.

Also dded some examples of what this covers.

336:8-336:21
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 10089662_1081c4d2
Bytes: 58
Renamed this to found_array_length_ to avoid naming typos?

336:8-336:21
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10089662_1081c4d2
UUID: 305cba63_2e91fba0
Bytes: 5
Done.

357:41-357:43
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_80d3b6d7
Bytes: 7
an -> a

357:41-357:43
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_80d3b6d7
UUID: d06c3e17_4c627814
Bytes: 4
Done

363:5-363:76
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_9b004bbc
Bytes: 43
Add " relative ti the induction variable" ?

363:5-363:76
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_9b004bbc
UUID: 305cba63_ae4eabc6
Bytes: 4
Done

581:5-581:58
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 10089662_507b4c74
Bytes: 49
Add a check that ...., and HDeoptimize otherwise.

581:5-581:58
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10089662_507b4c74
UUID: f055c239_9615bd76
Bytes: 4
Done

615:5-615:70
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_803c5676
Bytes: 5
ditto

615:5-615:70
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_803c5676
UUID: f055c239_761aa9a5
Bytes: 4
Done

619:0-620:61
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_3b6db785
Bytes: 18
indentation is off

619:0-620:61
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_3b6db785
UUID: d076fe11_8941fd19
Bytes: 6
Fixed.

668:95-668:105
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 10089662_d0861ce5
Bytes: 13
line too long

668:61-668:65
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_1b727b61
Bytes: 13
missing space

668:61-668:65
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_1b727b61
UUID: f055c239_f61cf995
Bytes: 43
Some pasted garbage in the middle. Deleted.

714:25-714:60
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_e02c4244
Bytes: 8
const& ?

714:25-714:60
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_e02c4244
UUID: 302afabf_c9d31152
Bytes: 4
Done

727:4-727:36
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_5b7c0334
Bytes: 138
This looks ok. It's resetting previous instructions added for another array? Should you do it when you actually know that the deopt is ok?

727:4-727:36
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_5b7c0334
UUID: 302afabf_8922b9cd
Bytes: 114
I changed it to an assert that the list is empty with this comment:
// Should only try to add deoptimization once.

728:4-728:26
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_406d2e84
Bytes: 40
Please add a comment about this 1 check.

728:4-728:26
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_406d2e84
UUID: 302afabf_c94e7196
Bytes: 56
Added this comment:
// Increasing from initial_ to end_.

729:0-737:7
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_9b7deb30
Bytes: 75
Nit: How about doing if (Add.. && Add..) { ... } else { remove && clear } ?

729:0-737:7
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_9b7deb30
UUID: f02302ea_e708c25c
Bytes: 4
Done

738:6-738:34
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 10089662_5076ac84
Bytes: 15
Comment please.

738:6-738:34
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10089662_5076ac84
UUID: 302afabf_09b409e4
Bytes: 56
Added this comment:
// Decreasing from initial_ to end_.

739:6-746:20
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_80773650
Bytes: 25
if (Add.. && Add..) { } ?

739:6-746:20
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_80773650
UUID: f02302ea_2732da22
Bytes: 4
Done

795:32-795:54
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 10089662_106c24b7
Bytes: 141
Maybe rename this to instructions_added_ to avoid any confusion? With this name, it looks like it only contains HDeoptimization instructions.

795:32-795:54
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10089662_106c24b7
UUID: f02302ea_672cd2c7
Bytes: 4
Done

1203:0-1205:62
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_1b59dbe1
Bytes: 34
Add a comment on what this checks.

1203:0-1205:62
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_1b59dbe1
UUID: 302afabf_89b3d9d8
Bytes: 4
Done

File: compiler/optimizing/nodes.cc

524:6-524:12
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_9ba5eb81
Bytes: 10
continue??

524:6-524:12
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_9ba5eb81
UUID: 305cba63_ae286b80
Bytes: 11
Good catch!

526:4-533:5
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_e0bd62a5
Bytes: 48
Please add a comment on why you need to do this.

526:4-533:5
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_e0bd62a5
UUID: 305cba63_0e6517c6
Bytes: 4
Done

File: test/449-checker-bce/src/Main.java

689:7-689:14
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 103a56f6_00d84617
Bytes: 11
duplicated.

689:7-689:14
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 103a56f6_00d84617
UUID: 305cba63_6ed813f4
Bytes: 6
Fixed.

716:7-716:14
Mon Apr 20 10:54:47 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7048f2a0_fb898ff7
Bytes: 5
ditto

716:7-716:14
Wed Apr 22 08:15:01 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7048f2a0_fb898ff7
UUID: d06c3e17_313cb790
Bytes: 6
Fixed.

