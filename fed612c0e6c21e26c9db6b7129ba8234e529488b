Revision: fed612c0e6c21e26c9db6b7129ba8234e529488b
Patch-set: 1
File: compiler/optimizing/intrinsics_mips64.cc

35:29-35:32
Wed Sep 23 04:47:31 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a905afc4_7a1df56c
Bytes: 24
Naming. Should be kTemp.

35:29-35:32
Wed Sep 23 19:21:27 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a905afc4_7a1df56c
UUID: 699c97d8_70fc0e36
Bytes: 563
Likewise for TMP in compiler/optimizing/code_generator_mips64.cc?

If so, how would you name "static constexpr FpuRegister FTMP = F8;" also in compiler/optimizing/code_generator_mips64.cc?

And should TMP be handled the same way as you suggested for TR? From your comments regarding patch 172320:

"Move the definition in code_generator_mips64.cc into the h file and use it here. It isn't good to have to separate declarations that aren't checked to be equal.

Alternatively, you could extend the register enum with a TR value that maps to S1 and share that way."

35:29-35:32
Wed Sep 23 20:33:08 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 699c97d8_70fc0e36
UUID: 09aebbf9_db0a3f5f
Bytes: 242
If you wanted it as a general value, you could do that, and then TMP would be an acceptable name. However, it's less important than TR. So I'm fine having the temp registers defined locally (other architectures are doing it that way already).

35:29-35:32
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 09aebbf9_db0a3f5f
UUID: 2e2e2591_542a5db0
Bytes: 30
Just moved to kTemp right now.

35:29-35:32
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 09aebbf9_db0a3f5f
UUID: ee616dea_6be330c4
Bytes: 4
Done

276:10-276:31
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_be75f191
Bytes: 42
`java.lang.Object.Math`? (Here and below.)

276:10-276:31
Thu Sep 24 21:28:30 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_be75f191
UUID: 8e52b121_8f631d25
Bytes: 36
It's java.lang.Math, actually... :-)

276:10-276:31
Thu Sep 24 21:43:00 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_8f631d25
UUID: ee616dea_b813c58f
Bytes: 38
Yeah, sorry, copy n' paste errorâ€¦ :)

276:10-276:31
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_b813c58f
UUID: ee616dea_8b2f8459
Bytes: 4
Done

276:10-276:31
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee616dea_b813c58f
UUID: 4e4c398b_8e3afcad
Bytes: 4
Done

302:0-304:50
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a9ba0f35_529c72d0
Bytes: 26
Nit: put on a single line.

302:0-304:50
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a9ba0f35_529c72d0
UUID: 6e4d7d85_e772b1d8
Bytes: 4
Done

302:0-304:50
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a9ba0f35_529c72d0
UUID: 2e2e2591_a554b25f
Bytes: 4
Done

305:0-306:34
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_97cb34aa
Bytes: 243
Replace with

  GpuRegister in = locations->InAt(0).AsRegister<GpuRegister>();
  GpuRegister out = locations->Out().AsRegister<GpuRegister>();

and replace `in.AsRegister<GpuRegister>()` and `out.AsRegister<GpuRegister>()` with `in` and `out`.

305:0-306:34
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_97cb34aa
UUID: ee86cdd4_cae1f206
Bytes: 4
Done

305:0-306:34
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_97cb34aa
UUID: 8e52b121_20f4368e
Bytes: 4
Done

341:0-343:34
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_8d544960
Bytes: 265
Likewise, replace with

  FpuRegister lhs = locations->InAt(0).AsFpuRegister<FpuRegister>();
  FpuRegister rhs = locations->InAt(1).AsFpuRegister<FpuRegister>();
  FpuRegister out = locations->Out().AsFpuRegister<FpuRegister>();

and simplify the expressions below?

341:0-343:34
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_8d544960
UUID: ee86cdd4_8aff6a9f
Bytes: 4
Done

341:0-343:34
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_8d544960
UUID: 4e4c398b_2e39c8b7
Bytes: 4
Done

415:22-415:52
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e2e2591_f47b8e85
Bytes: 7
Remove?

415:22-415:52
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_f47b8e85
UUID: 0e5fa128_e7c1958b
Bytes: 4
Done

415:22-415:52
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_f47b8e85
UUID: 6e4d7d85_d1fbf7e3
Bytes: 4
Done

417:0-419:34
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce582944_d1253644
Bytes: 43
Ditto (here and in other intrinsics below).

417:0-419:34
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_d1253644
UUID: 2e2e2591_94e565e2
Bytes: 4
Done

417:0-419:34
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce582944_d1253644
UUID: ce582944_8f3c365c
Bytes: 4
Done

421:2-421:69
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_52b26a1e
Bytes: 179
I don't really get that. Should the code be shorter in that case? Also, shouldn't you also address the case where `out.AsRegister<GpuRegister>() == op2.AsRegister<GpuRegister>()`?

421:2-421:69
Thu Sep 24 21:28:30 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_52b26a1e
UUID: 2e2e2591_f4494e2d
Bytes: 74
I guess you could drop one of the Sel instructions in each branch below...

421:2-421:69
Thu Sep 24 21:43:00 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e2e2591_f4494e2d
UUID: 2e470569_b2199e82
Bytes: 27
Yes, this was my guess too.

421:2-421:69
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_b2199e82
UUID: ae5bf53d_44f4df8e
Bytes: 1363
The short answer is "no, you can't drop one of the SELxxx instructions below". Or, at least if it's possible nobody here mentioned it to me when they reviewed the code. ;-)

Some architectures (such as ARM and MIPS prior to r6) have a conditional move instruction which only changes the target (output) register if the condition is true (MIPS prior to r6 had MOVF, MOVT, and MOVZ). The SELEQZ and SELNEZ instructions always change the target (output) register.  If the condition is true the output register gets the contents of the "rs" register; otherwise, the output register is set to zero. One consequence of this is that to implement something like "rd = c==0 ? rs : rt" MIPS64r6 needs to use a pair of instructions SELEQZ/SELNEZ instructions. After executing this pair of instructions one of the output registers from the pair will necessarily contain zero. Then the code ORs the output registers from the SELEQZ/SELNEZ instructions to get the final result.

The initial test to see if the output register is same as the first input register is needed to make sure that value in the first input register isn't clobbered before we've finished computing the output value. The logic in the corresponding else clause performs the same task but makes sure the second input register isn't clobbered in the event that it's the same register as the output register.

421:2-421:69
Sat Sep 26 00:20:41 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae5bf53d_44f4df8e
UUID: 2e2e2591_34691132
Bytes: 107
Ah, yes. The short description I could find didn't make this very clear. Thanks. (Also thanks for the docs)

541:18-541:23
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_32b7ee0e
Bytes: 64
Move this magic number to a constant and document it a bit more.

541:18-541:23
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_32b7ee0e
UUID: 8e52b121_fb949303
Bytes: 229
Chris, can you send us a PDF or so for the instruction set manual? It's really hard to find good literature on this. I was trying to fix up the CL, but I can't fix this without figuring out how the classify (?) instruction works.

541:18-541:23
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_32b7ee0e
UUID: ae5bf53d_a4b71bbe
Bytes: 4
Done

541:18-541:23
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_fb949303
UUID: 2e470569_71ec3b3c
Bytes: 12
On it's way.

546:23-546:34
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8e52b121_0fd3ad3c
Bytes: 17
`Long.MAX_VALUE`?

546:23-546:34
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_0fd3ad3c
UUID: ee616dea_ebfe00d6
Bytes: 4
Done

546:23-546:34
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8e52b121_0fd3ad3c
UUID: 0e5fa128_74e315c4
Bytes: 10
Yes. Done.

552:55-552:66
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6e4d7d85_3906b727
Bytes: 6
Ditto?

552:55-552:66
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_3906b727
UUID: ee86cdd4_2a5ade66
Bytes: 4
Done

552:55-552:66
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6e4d7d85_3906b727
UUID: ce582944_8f0e76b0
Bytes: 4
Done

590:18-590:23
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e4c398b_78e549df
Bytes: 6
Ditto.

590:18-590:23
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e4c398b_78e549df
UUID: 0e5fa128_546251df
Bytes: 4
Done

595:23-595:34
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e5fa128_1e62bdd5
Bytes: 6
Ditto?

595:23-595:34
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_1e62bdd5
UUID: ce582944_6587e104
Bytes: 4
Done

595:23-595:34
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e5fa128_1e62bdd5
UUID: 2e2e2591_40205cdd
Bytes: 4
Done

601:55-601:66
Thu Sep 24 21:13:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2e470569_b2e19e07
Bytes: 6
Ditto?

601:55-601:66
Fri Sep 25 22:53:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_b2e19e07
UUID: ee86cdd4_ca66d236
Bytes: 4
Done

601:55-601:66
Fri Sep 25 23:04:31 2015 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e470569_b2e19e07
UUID: 2e2e2591_202550ed
Bytes: 4
Done

