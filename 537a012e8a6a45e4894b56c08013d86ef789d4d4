Revision: 537a012e8a6a45e4894b56c08013d86ef789d4d4
Patch-set: 3
File: compiler/optimizing/builder.h

250:5-250:7
Fri Dec 12 16:49:24 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 844276da_5f068b47
Bytes: 23
Nit: "it" (no capital).

250:5-250:7
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 844276da_5f068b47
UUID: e4adf2fd_35c55a4a
Bytes: 4
Done

File: compiler/optimizing/code_generator.cc

577:10-577:46
Fri Dec 12 16:49:24 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 844276da_7f034f36
Bytes: 60
Shouldn't this be an `else' statement with a DCHECK instead?

577:10-577:46
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 844276da_7f034f36
UUID: 641ca21f_b9183ba2
Bytes: 10
Yes, Done.

File: compiler/optimizing/inliner.cc

23:0-23:20
Fri Dec 12 16:49:24 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 844276da_1f000327
Bytes: 77
Nit: Should be the first #include, separated from the others by a blank line.

23:0-23:20
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 844276da_1f000327
UUID: 641ca21f_59e64740
Bytes: 4
Done

95:97-95:105
Fri Dec 12 15:23:57 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e497b25c_4817d36a
Bytes: 13
line too long

95:97-95:105
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e497b25c_4817d36a
UUID: 641ca21f_b9f15bfa
Bytes: 4
Done

99:2-103:3
Fri Dec 12 16:49:24 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 844276da_ff1d1f90
Bytes: 206
What would happen with a method containing a `try` statement with a `finally` clause, but with no `catch` block (i.e. the case where there's an exception handler but where `code_item->tries_size_` is null)?

99:2-103:3
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 844276da_ff1d1f90
UUID: 24162a01_173bf6bd
Bytes: 92
Then your fix to properly remove instructions out of dead blocks would kick in, wouldn't it?

File: compiler/optimizing/nodes.cc

740:4-745:26
Fri Dec 12 16:49:24 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2451caa8_fc1d2990
Bytes: 155
Will the inlined instructions be properly (re)numbered? In particular, could it be possible to have two instructions having the same number after inlining?

740:4-745:26
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2451caa8_fc1d2990
UUID: e4adf2fd_f5dab22e
Bytes: 265
Do you mean have a different instruction id? Yes because when we try inlining, we give a the last id of the graph as a base to construct new ids in the new graph.

That reminded me that we probably want a DCHECK that we don't overflow when creating an id :-). Done.

748:4-752:5
Fri Dec 12 16:49:24 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2451caa8_3cfdd1c5
Bytes: 47
Maybe turn this `while` loop into a `for` loop?

748:4-752:5
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2451caa8_3cfdd1c5
UUID: 641ca21f_79006328
Bytes: 4
Done

File: test/437-inline/src/Main.java

34:0-34:2
Fri Dec 12 15:23:57 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e497b25c_a8277fd6
Bytes: 14
trailing space

34:0-34:2
Mon Dec 15 14:48:59 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e497b25c_a8277fd6
UUID: 24162a01_77386abf
Bytes: 4
Done

