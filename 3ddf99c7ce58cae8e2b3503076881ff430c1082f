Revision: 3ddf99c7ce58cae8e2b3503076881ff430c1082f
Patch-set: 2
File: /COMMIT_MSG

7:34-7:35
Fri Apr 29 17:22:25 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 28dab964_d525ab4c
Bytes: 44
please add

BUG=26327751

to commit message.

7:34-7:35
Fri Apr 29 21:55:38 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28dab964_d525ab4c
UUID: 2848f9fc_07bf5ce1
Bytes: 4
Done

File: compiler/optimizing/intrinsics_mips.cc

2453
Fri Apr 29 17:22:25 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 28dab964_4b811a9f
Bytes: 230
I would be helpful if you wrote the full pseudo code here in a top level comment, and then only use minor comments below to separate out the different parts. Now I have to scan over the full method to know how this is implemented.

2453
Fri Apr 29 21:55:38 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28dab964_4b811a9f
UUID: 2848f9fc_64f97ed8
Bytes: 636
How's this for top-level pseudocode?

  // if (in.isNaN) {
  //   return 0;
  // }

  // if (in <= (float)Integer.MIN_VALUE) {
  //   /*
  //    * Needed for MIPS32 because values <= Integer.MIN_VALUE
  //    * get output as Integer.MAX_VALUE by "floor.w.s" & Java requires Integer.MIN_VALUE.
  //    */
  //   return Integer.MIN_VALUE;
  // }

  // out = floor(in);
  // TMP = (((in - out) >= 0.5f) && (out != java.lang.Integer.MAX_VALUE)) ? 1 : 0;
  // return out += TMP;
  //
  // Note: Except for the two exception cases (in.isNaN &
  // in <= (float)Integer.MIN_VALUE), branching is avoided
  // to keep from breaking the pipeline.

2453
Mon May 02 20:46:07 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2848f9fc_64f97ed8
UUID: 28a2b911_c2a092b8
Bytes: 387
Much better. But as non-longer-a-MIPS-expert, it would greatly help me if the float-int conversions were more explicit. It looks like "out" is an int, necessitating the MAX_VALUE test? Presumably the ISA makes it hard to do the conversion later?

Since Integer.MAX_VALUE can presumably only arise from overflow, isn't it cheaper just to do one test after evaluating the floor() function?

2453
Mon May 02 21:18:12 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28a2b911_c2a092b8
UUID: 28a2b911_7d9fc36f
Bytes: 1122
MIPS has a series of floor commands in the form of "floor.x.y" where x can be either l (64 bits) or w (32 bits), and y can be s (32 bits) or d (64 bits). Here we're dealing with floor.w.s. Both the input register, and the output register are FP registers but the output register holds a 32-bit integer value. So, yes, this is necessitating the MAX_VALUE test; it's also necessitating the explicit conversion back to "float" using the cvt.s.w command (via the Cvtsw() method).

[Note: 32-bit MIPS (the case this code is dealing with) doesn't have support for floor.l.s, or floor.s.d so the intrinsic java.lang.Math.round(double) won't be implemented in this file.]

I'm not following the chain of logic for how only one test is required. If out == Integer.MAX_VALUE then it's true that we don't need to test ((in - out) >= 0.5), so I can see how the first test could cause the code to skip the second test. But I wrote the code to avoid breaking the pipeline for either case by using conditional move instructions (selnez/movn/movf). Could you be more explicit about how you think the code could use a single test?

Thanks.

2453
Mon May 02 21:44:59 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28a2b911_7d9fc36f
UUID: 28a2b911_08cabbb1
Bytes: 432
Could you unconditionally do the floor.w.s, and then test the output against Integer.MAX_VALUE? If you see MAX_VALUE, you then check the input against zero, and return MIN_VALUE or MAX_VALUE as appropriate.  Otherwise you just do the conditional increment by 1.

Or am I misunderstanding the instruction semantics? It sounds like any overflow is indicated by MAX_VALUE.  Which is a good choice, since it can't otherwise be produced.

2453
Mon May 02 23:25:48 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28a2b911_08cabbb1
UUID: 28a2b911_b82f76e5
Bytes: 836
If I understand you correctly you're looking at getting rid of this part of the code:

  // if (in <= (float)Integer.MIN_VALUE) {
  //   /*
  //    * Needed for MIPS32 because values <= Integer.MIN_VALUE
  //    * get output as Integer.MAX_VALUE by "floor.w.s" & Java requires Integer.MIN_VALUE.
  //    */
  //   return Integer.MIN_VALUE;
  // }

not getting rid of the ((in - out) >= 0.5) part of the code, yes?

So the pseudocode would be:

  // if (in.isNaN) {
  //   return 0;
  // }
  //
  // out = floor(in);
  //
  // if (out == Integer.MAX_VALUE) {
  //   TMP = (in < 0.0f) ? 1 : 0;
  //   /*
  //    * If TMP is 1, then adding it to out will wrap its value from
  //    * Integer.MAX_VALUE to Integer.MIN_VALUE.
  //    */
  //   return out += TMP;
  // }
  //
  // TMP = (((in - out) >= 0.5f) ? 1 : 0;
  // return out += TMP;

2454:14-2454:17
Fri Apr 29 17:22:25 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 28dab964_ebc0c6f2
Bytes: 13
period at end

2454:14-2454:17
Fri Apr 29 21:55:38 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28dab964_ebc0c6f2
UUID: 2848f9fc_52d8c42d
Bytes: 4
Done

2518:15-2518:16
Fri Apr 29 17:22:25 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 28dab964_8b7702c4
Bytes: 160
This looks like a commented out comment, not an actual comment. I would rephrase this and all other comments in the google style (use sentences, not fragments).

2518:15-2518:16
Fri Apr 29 21:55:38 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28dab964_8b7702c4
UUID: 2848f9fc_324978c1
Bytes: 4
Done

2529:30-2529:45
Fri Apr 29 17:22:25 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 28dab964_6badf640
Bytes: 21
plans for double too?

2529:30-2529:45
Fri Apr 29 21:55:38 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 28dab964_6badf640
UUID: 2848f9fc_b234a83a
Bytes: 48
No, 32-bit processors don't support "floor.l.d".

