Revision: f832284dd847ff077577bb5712225430bbbb3b67
Patch-set: 5
File: compiler/driver/compiler_driver.cc

758:50-758:55
Mon May 19 08:42:26 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a3da49e_370e1ac2
Bytes: 85
Why is that not const Handle<mirror::Class>& c? How can the GC find this handle copy?

758
Mon May 19 17:09:06 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a3da49e_370e1ac2
UUID: 7f10a43e_3a57b601
Bytes: 34
Its a pointer to a StackReference.

758
Mon May 19 17:18:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f10a43e_3a57b601
UUID: 0a3da49e_e2af6e6a
Bytes: 259
So this is relying on the fact another handle holds the StackReference right? For things passed as arguments, that's 
OK, but othewrwise that's not OK.

I find that very error prone, how about a DISALLOW_COPY_AND_ASSIGN on Handle and always pass as reference?

758
Mon May 19 17:22:46 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a3da49e_e2af6e6a
UUID: bf1dbc5e_74b9c8d9
Bytes: 204
Do you want to explain your concern, perhaps with an example? I think in this change Mathieu is following a pattern that's already established for Handles in ART. That's not to say the pattern is correct.

763:64-763:65
Mon May 19 08:42:26 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a531cfd_44584e0f
Bytes: 69
I don't understand this, seems like defeating the purpose of handles.

763
Mon May 19 17:09:06 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a531cfd_44584e0f
UUID: bf1dbc5e_b42400cf
Bytes: 113
In this case it would be OK to do that but it would change the stack reference in the handle which was passed in.

763
Mon May 19 17:18:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf1dbc5e_b42400cf
UUID: 4a531cfd_1f320fe6
Bytes: 80
So making the passed argument as a reference should prevent that problem, right?

775:23-775:24
Mon May 19 08:42:26 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a531cfd_245b4a0e
Bytes: 117
Instead of doing this, why don't you create an empty handle at the beginning of the function and then Assign it here?

775
Mon May 19 17:09:06 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a531cfd_245b4a0e
UUID: 7f10a43e_5acdca99
Bytes: 80
Good idea, that should be what we do in places where it is performance critical.

File: runtime/class_linker.cc

2405:4-2405:5
Mon May 19 08:42:26 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a3da49e_570ba6b0
Bytes: 194
Would it be worth it to have a DCHECK(!strcmp(descriptor, klass->GetDescriptor())

How do we enforce these char* are canonicalized?

(Comment also applies to all the strcmp -> == changes below).

2405
Mon May 19 17:09:06 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a3da49e_570ba6b0
UUID: df20b093_7ba5378f
Bytes: 184
I'll change it to DescriptorEquals, you are right that it would be confusing if GetDescriptor returned a char* instead of a string. We should use string::compare instead of operator ==

2405
Mon May 19 17:18:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df20b093_7ba5378f
UUID: 2a58a819_43ff6613
Bytes: 13
SGTM, thanks.

File: runtime/mirror/class-inl.h

536:19-536:35
Mon May 19 08:42:26 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a3da49e_7708a2b3
Bytes: 56
Why is that not strcmp(GetDescriptor().c_str(), match) ?

536
Mon May 19 17:09:06 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a3da49e_7708a2b3
UUID: df20b093_5bd15bdb
Bytes: 165
Ian had some concerns that allocating a string would cause performance regressions in reflection, the current way avoids allocating a string in the else common case.

536
Mon May 19 17:18:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df20b093_5bd15bdb
UUID: 2a58a819_83094e91
Bytes: 149
I see. It's a pity it's doing the same thing as GetDescriptor though, and this code is not trivial. Any way the code could be shared between the two?

