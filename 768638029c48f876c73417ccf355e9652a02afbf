Revision: 768638029c48f876c73417ccf355e9652a02afbf
Patch-set: 2
File: tools/ahat/src/ahat/AhatHandler.java

17:8-17:12
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a61b821_b9c1d798
Bytes: 59
I presume we need a com.android.tools... package for this..

17:8-17:12
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a61b821_b9c1d798
UUID: aa667c34_5dda2f5e
Bytes: 53
yep, we should use com.android.* to be good citizens.

17:8-17:12
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa667c34_5dda2f5e
UUID: e7aeef64_a6f2a659
Bytes: 31
I switched to com.android.ahat.

23:0-24:32
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_1b8c4310
Bytes: 123
as gfrost suggested elsewhere, coding style is not to use *

+ no spaces between import sections in art/libcore/dalvik code

23:0-24:32
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_1b8c4310
UUID: 27b567ac_089867fb
Bytes: 4
Done

55:13-55:24
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a5c2064_5ce7d158
Bytes: 105
What exception are we catching here?  java.lang.Exception seems too broad, probably should be IOException

55:13-55:24
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a5c2064_5ce7d158
UUID: 0a0b0862_d52d6c94
Bytes: 55
multicatch is preferred to a general Exception catchall

55:13-55:24
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a0b0862_d52d6c94
UUID: cac3b058_495b715b
Bytes: 669
For debugging purposes, I would like to see stack traces for exceptions in the handlers, which the HttpServer does not report. Sometimes these are IOExceptions, but more often they are NullPointerExceptions. Presumably there could be other kinds of exceptions I would like to see a stack trace for rather than just having the page hang or fail to load.

1. Is general Exception catchall appropriate for this use case?
2. Should I add IOException, NullPointerException, and others to a multicatch as I see them arise?
3. Or should I not print the stack traces at all in the checked in code, and only modify the code locally or use a debugger (?) to see the stack traces?

55:13-55:24
Thu Aug 06 00:16:23 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cac3b058_495b715b
UUID: 6a6ba46a_8a384bfb
Bytes: 103
I'd just catch RuntimeException then with a comment that otherwise they are swallowed and not reported.

55:13-55:24
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a6ba46a_8a384bfb
UUID: 67303f13_82ec5ab8
Bytes: 224
I forgot about this in PS3. I'll fix it in PS4. I think the server may actually be reporting the stack trace already (because I see multiple copies of the stack traces), but there may be some buffering issue. I look into it.

55:13-55:24
Mon Aug 10 15:41:13 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 67303f13_82ec5ab8
UUID: c7cf2b9d_551accfb
Bytes: 187
There's no buffering issue. The server does swallow the error messages. I switched to catching RuntimeException and added the comment noting they are swallowed and not reported otherwise.

File: tools/ahat/src/ahat/AhatSnapshot.java

19:38-19:39
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa667c34_7ad5712e
Bytes: 77
Can we separate out the imported classes. Rather than using the wildcard here

19:38-19:39
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa667c34_7ad5712e
UUID: c7a9eb5f_85d8c299
Bytes: 4
Done

49
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a5c2064_3fb2cf35
Bytes: 44
null parent I assume.  I would comment this.

49
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a5c2064_3fb2cf35
UUID: c7a9eb5f_6507c690
Bytes: 106
I made a separate constructor for Site to construct root objects where we don't pass null. Is that better?

112
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_f0e52015
Bytes: 105
I am not sure what the google comment convention is for recursion, but I would comment the recursion here

112
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea6cf416_f0e52015
UUID: c7a9eb5f_2501ce78
Bytes: 4
Done

File: tools/ahat/src/ahat/BitmapHandler.java

26:38-26:39
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa667c34_1a2efdc5
Bytes: 41
replace wildcards with actual references.

26:38-26:39
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa667c34_1a2efdc5
UUID: 273ac7f6_8036160b
Bytes: 4
Done

48
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a08cc62_d649f483
Bytes: 116
We dealt with query being null.  Does the algorithm below have to deal with id being left as its default value of 0?

48
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a08cc62_d649f483
UUID: e7aeef64_a60dc6f3
Bytes: 4
Done

57:8-57:31
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_7b761781
Bytes: 49
should this be in a helper function? unit tested?

57:8-57:31
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_7b761781
UUID: 47bedb91_0934e992
Bytes: 220
I think the unit test is as likely to be buggy as the code. I would rather test this as part of an end-to-end test once I set end-to-end testing.

I did move this to FieldReader, so eventually we can put it into perflib.

File: tools/ahat/src/ahat/CompareInstance.java

40
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_38d8259f
Bytes: 128
You should probably implement @Override Object.equals(Object other) as part of the Comparator contract (see Comparator javadoc).

40
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_38d8259f
UUID: 87a3737f_83499e88
Bytes: 203
I want to define a partial order, not a total order. The Comaparator javadoc says this is okay, as long as you clearly note that the compare is not consistent with equals. I added comments that say that.

63:3-64:47
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a0b0862_120f0abf
Bytes: 121
I had to scan this a few times.  Maybe replaced with 

Comparator<Instance>compare = new ByTotalRetainedSize(new ById());

63:3-64:47
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a0b0862_120f0abf
UUID: 27b567ac_2818cb02
Bytes: 119
I refactored the sorting code so you pass a list of comparators, instead of chaining them. Hopefully that's more clear.

File: tools/ahat/src/ahat/DominatedList.java

86:4-98:6
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a61b821_dc9e416d
Bytes: 516
It looks like this AIC(anonymous inner class) is just used to build data for the table rendering. I would refactor this.  It does not seem to be capturing any state from the call site, so you could move this out as a static final field (and comment it and it's relationship to the other AIC below). Honestly I had to scan these two implementations a few times to work out what was going on. 

You may also consider creating a separate class for the AIC below.  There is a little too much content (for me) for an AIC.

86:4-98:6
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a61b821_dc9e416d
UUID: caa650d5_a3ac3e73
Bytes: 804
My goal is to share code for producing tables that contain heap numbers. What changes between each table, currently, is the description of what the heap values mean, how to get the heap values, and how to render any additional columns in the table.

I'm not terribly happy with the approach I'm using, where I provide an implementation of a configuration interface to configure the table. Is there a better way? Is there a more canonical way for doing this kind of thing in Java?

For example, would it be better to have HeapTable be an abstract base class that I subclass for each instance of the table I want to render? Does that violate "inheritance vs. composition" arguments?

I really just want a nice way to pass functions (or rather, a list of functions) as arguments. Can I use lambdas for that?

86:4-98:6
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: caa650d5_a3ac3e73
UUID: 47333b20_a1bb5eb9
Bytes: 130
I move the AIC for the values inside the AIC for the table, and switched to using Collections.singletonList. Is it more clear now?

100:43-119:6
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a5c2064_3f8daf3e
Bytes: 152
I think this should be a separate class.  Maybe a static non-anonymous inner class of DominatedList which includes the static final value defined above.

100:43-119:6
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a5c2064_3f8daf3e
UUID: 273ac7f6_a07eba88
Bytes: 299
See above. Is it more clear now? Or do you still think I should go to a static class?

What I like about the anonymous inner class is that it puts the table configuration next to the line that renders the table, instead of somewhere else in the class file. I don't care that much either way, though.

174:4-174:10
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa667c34_fabb41a8
Bytes: 30
Consider a StringBuilder here?

174:4-174:10
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa667c34_fabb41a8
UUID: 4a5c2064_1f38ab59
Bytes: 52
yes, generally we shouldn't be concatenating Strings

174:4-174:10
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a5c2064_1f38ab59
UUID: 273ac7f6_e078c29d
Bytes: 4
Done

File: tools/ahat/src/ahat/HtmlWriter.java

52:34-52:62
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_50105410
Bytes: 56
why not public void print(String format, Object...args)?

52:34-52:62
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea6cf416_50105410
UUID: 2a536c56_7e2d6917
Bytes: 43
if arg1 is special, give it a special name?

52:34-52:62
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a536c56_7e2d6917
UUID: 2aa28cbf_80a8160f
Bytes: 709
arg1 is not special. Is the comment not clear?

"
The format string itself will not be sanitized. To ensure an unsanitized string is not accidentally passed as the format string, this requires at least one format argument. To print an already sanitized string, use:
  print("%R", str);
To print a string that needs to be sanitized, use:
  print("%s", str);
"

I separate arg1 so you'll get a compiler error if you do something like 'html.print(instance.toString())'. This is dangerous, because instance.toString() may not have been sanitized. Requiring the user explicitly put "%R" as the first object makes it harder to make that mistake (I hope), and easier to grep for "%R" for potential problems later on.

56:4-58:5
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_bb69cfeb
Bytes: 19
System.arraycopy()?

56:4-58:5
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_bb69cfeb
UUID: 0a24e8f1_674fb23d
Bytes: 2
+1

56:4-58:5
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a24e8f1_674fb23d
UUID: 47333b20_844628f9
Bytes: 4
Done

File: tools/ahat/src/ahat/Main.java

23:28-23:37
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_3ba49fbe
Bytes: 19
is this used below?

23:28-23:37
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_3ba49fbe
UUID: 27b567ac_e84073bc
Bytes: 4
Yes.

29:29-29:31
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a61b821_3c55b5d1
Bytes: 63
Again I think we should use explicit class names not wildcards.

29:29-29:31
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a61b821_3c55b5d1
UUID: 47333b20_a4bd2c20
Bytes: 4
Done

33:21-33:25
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a536c56_de6635c8
Bytes: 31
Why is this H (upper case) elp?

33:21-33:25
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a536c56_de6635c8
UUID: 4a01803c_b7d550b7
Bytes: 19
style is lower case

33:21-33:25
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a01803c_b7d550b7
UUID: 273ac7f6_60083236
Bytes: 4
Done

File: tools/ahat/src/ahat/ObjectHandler.java

76:24-76:73
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_f059a0d5
Bytes: 291
This note applies across this whole app.   There are a lot of embedded html tags in text strewn through here.  I have to believe that there is a Google preferred way of generating html.  I know there are external tools (rendersnake, jatl, ecj) that make this easier to write and to maintain.

76:24-76:73
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea6cf416_f059a0d5
UUID: ca673030_7b4f373d
Bytes: 229
google preferred != android preferred... we aren't going to use GWT :)

I'm fine with something quick and dirty to keep this easy to work on without needing to learn some third party toolkit that is just wrapping text generation.

76:24-76:73
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_7b4f373d
UUID: 8ac9b89e_33bc08a1
Bytes: 301
The recommendations I've seen are GWT, Closure Templates, jslayout, and GXP. The first three of those generate JavaScript code, but it is important to me that javascript not be required to view the heap dump.

GXP may work, but I agree with Brian. I think it will add more complexity than it is worth.

76:24-76:73
Tue Aug 11 17:52:17 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ac9b89e_33bc08a1
UUID: 67e67f2a_8ce6fbd2
Bytes: 319
Perhaps consider creating a HTMLBuilder (wrapping a StringBuilder) which will at least allow you to encapsulate some of the nastyness ;)
If you use a 'fluent' style builder then you can probably make the code more compact.
HTMLBuilder builder = new HTMLBuilder();
builder.h2("ArrayElements").table().tr().td("text") ...

File: tools/ahat/src/ahat/RootsHandler.java

35:4-35:11
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a01803c_57098435
Bytes: 145
I prefer using the interface/abstraction 'Set<Instance> rootset = new HashSet<Instance>();' rather than the concrete type 'HashSet rootset = ...'

35:4-35:11
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a01803c_57098435
UUID: 4a5c2064_3fd80f9f
Bytes: 34
that is the libcore style as well.

35:4-35:11
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a5c2064_3fd80f9f
UUID: 07b863a5_a724ea61
Bytes: 4
Done

File: tools/ahat/src/ahat/Site.java

157
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a0b0862_353f98e6
Bytes: 102
Again I think you may need to implement equals(Object other) too (as part of the Comparator contract).

157
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a0b0862_353f98e6
UUID: 27b567ac_68e00343
Bytes: 92
I used the same approach for this as for the other comparators, so hopefully it is okay now.

File: tools/ahat/src/ahat/SiteHandler.java

94:3-97:49
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_f087e096
Bytes: 137
is this 
Comparator<Site.ObjectsInfo> compare = 
   new  ObjectsInfoByHeapName(new ObjectsInfoBySize(new ObjectInfoByClassName(null))));?

94:3-97:49
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea6cf416_f087e096
UUID: 47bedb91_29744d42
Bytes: 59
Hopefully this is more clear with the new sorting approach.

143:18-143:26
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_5b099b35
Bytes: 38
are we sure that classObj is not null?

143:18-143:26
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_5b099b35
UUID: 273ac7f6_c033fef8
Bytes: 47
I put checks in so we can handle null classObj.

145
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_9b0a1328
Bytes: 57
Again I think we need to implement 'equals(Object other)'

145
Fri Aug 07 22:59:20 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_9b0a1328
UUID: 87a3737f_e3973250
Bytes: 23
Fixed in Sort refactor.

