Revision: 768638029c48f876c73417ccf355e9652a02afbf
Patch-set: 2
File: tools/ahat/src/ahat/AhatHandler.java

17:8-17:12
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a61b821_b9c1d798
Bytes: 59
I presume we need a com.android.tools... package for this..

17:8-17:12
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a61b821_b9c1d798
UUID: aa667c34_5dda2f5e
Bytes: 53
yep, we should use com.android.* to be good citizens.

23:0-24:32
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_1b8c4310
Bytes: 123
as gfrost suggested elsewhere, coding style is not to use *

+ no spaces between import sections in art/libcore/dalvik code

55:13-55:24
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a5c2064_5ce7d158
Bytes: 105
What exception are we catching here?  java.lang.Exception seems too broad, probably should be IOException

55:13-55:24
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a5c2064_5ce7d158
UUID: 0a0b0862_d52d6c94
Bytes: 55
multicatch is preferred to a general Exception catchall

55:13-55:24
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a0b0862_d52d6c94
UUID: cac3b058_495b715b
Bytes: 669
For debugging purposes, I would like to see stack traces for exceptions in the handlers, which the HttpServer does not report. Sometimes these are IOExceptions, but more often they are NullPointerExceptions. Presumably there could be other kinds of exceptions I would like to see a stack trace for rather than just having the page hang or fail to load.

1. Is general Exception catchall appropriate for this use case?
2. Should I add IOException, NullPointerException, and others to a multicatch as I see them arise?
3. Or should I not print the stack traces at all in the checked in code, and only modify the code locally or use a debugger (?) to see the stack traces?

File: tools/ahat/src/ahat/AhatSnapshot.java

19:38-19:39
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa667c34_7ad5712e
Bytes: 77
Can we separate out the imported classes. Rather than using the wildcard here

49
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a5c2064_3fb2cf35
Bytes: 44
null parent I assume.  I would comment this.

112
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_f0e52015
Bytes: 105
I am not sure what the google comment convention is for recursion, but I would comment the recursion here

File: tools/ahat/src/ahat/BitmapHandler.java

26:38-26:39
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa667c34_1a2efdc5
Bytes: 41
replace wildcards with actual references.

48
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a08cc62_d649f483
Bytes: 116
We dealt with query being null.  Does the algorithm below have to deal with id being left as its default value of 0?

57:8-57:31
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_7b761781
Bytes: 49
should this be in a helper function? unit tested?

File: tools/ahat/src/ahat/CompareInstance.java

40
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_38d8259f
Bytes: 128
You should probably implement @Override Object.equals(Object other) as part of the Comparator contract (see Comparator javadoc).

63:3-64:47
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a0b0862_120f0abf
Bytes: 121
I had to scan this a few times.  Maybe replaced with 

Comparator<Instance>compare = new ByTotalRetainedSize(new ById());

File: tools/ahat/src/ahat/DominatedList.java

86:4-98:6
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a61b821_dc9e416d
Bytes: 516
It looks like this AIC(anonymous inner class) is just used to build data for the table rendering. I would refactor this.  It does not seem to be capturing any state from the call site, so you could move this out as a static final field (and comment it and it's relationship to the other AIC below). Honestly I had to scan these two implementations a few times to work out what was going on. 

You may also consider creating a separate class for the AIC below.  There is a little too much content (for me) for an AIC.

86:4-98:6
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a61b821_dc9e416d
UUID: caa650d5_a3ac3e73
Bytes: 804
My goal is to share code for producing tables that contain heap numbers. What changes between each table, currently, is the description of what the heap values mean, how to get the heap values, and how to render any additional columns in the table.

I'm not terribly happy with the approach I'm using, where I provide an implementation of a configuration interface to configure the table. Is there a better way? Is there a more canonical way for doing this kind of thing in Java?

For example, would it be better to have HeapTable be an abstract base class that I subclass for each instance of the table I want to render? Does that violate "inheritance vs. composition" arguments?

I really just want a nice way to pass functions (or rather, a list of functions) as arguments. Can I use lambdas for that?

100:43-119:6
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a5c2064_3f8daf3e
Bytes: 152
I think this should be a separate class.  Maybe a static non-anonymous inner class of DominatedList which includes the static final value defined above.

174:4-174:10
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa667c34_fabb41a8
Bytes: 30
Consider a StringBuilder here?

174:4-174:10
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa667c34_fabb41a8
UUID: 4a5c2064_1f38ab59
Bytes: 52
yes, generally we shouldn't be concatenating Strings

File: tools/ahat/src/ahat/HtmlWriter.java

52:34-52:62
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_50105410
Bytes: 56
why not public void print(String format, Object...args)?

52:34-52:62
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea6cf416_50105410
UUID: 2a536c56_7e2d6917
Bytes: 43
if arg1 is special, give it a special name?

52:34-52:62
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a536c56_7e2d6917
UUID: 2aa28cbf_80a8160f
Bytes: 709
arg1 is not special. Is the comment not clear?

"
The format string itself will not be sanitized. To ensure an unsanitized string is not accidentally passed as the format string, this requires at least one format argument. To print an already sanitized string, use:
  print("%R", str);
To print a string that needs to be sanitized, use:
  print("%s", str);
"

I separate arg1 so you'll get a compiler error if you do something like 'html.print(instance.toString())'. This is dangerous, because instance.toString() may not have been sanitized. Requiring the user explicitly put "%R" as the first object makes it harder to make that mistake (I hope), and easier to grep for "%R" for potential problems later on.

56:4-58:5
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_bb69cfeb
Bytes: 19
System.arraycopy()?

56:4-58:5
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_bb69cfeb
UUID: 0a24e8f1_674fb23d
Bytes: 2
+1

File: tools/ahat/src/ahat/Main.java

23:28-23:37
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_3ba49fbe
Bytes: 19
is this used below?

29:29-29:31
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a61b821_3c55b5d1
Bytes: 63
Again I think we should use explicit class names not wildcards.

33:21-33:25
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a536c56_de6635c8
Bytes: 31
Why is this H (upper case) elp?

33:21-33:25
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a536c56_de6635c8
UUID: 4a01803c_b7d550b7
Bytes: 19
style is lower case

File: tools/ahat/src/ahat/ObjectHandler.java

76:24-76:73
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_f059a0d5
Bytes: 291
This note applies across this whole app.   There are a lot of embedded html tags in text strewn through here.  I have to believe that there is a Google preferred way of generating html.  I know there are external tools (rendersnake, jatl, ecj) that make this easier to write and to maintain.

76:24-76:73
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea6cf416_f059a0d5
UUID: ca673030_7b4f373d
Bytes: 229
google preferred != android preferred... we aren't going to use GWT :)

I'm fine with something quick and dirty to keep this easy to work on without needing to learn some third party toolkit that is just wrapping text generation.

76:24-76:73
Wed Aug 05 23:19:42 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca673030_7b4f373d
UUID: 8ac9b89e_33bc08a1
Bytes: 301
The recommendations I've seen are GWT, Closure Templates, jslayout, and GXP. The first three of those generate JavaScript code, but it is important to me that javascript not be required to view the heap dump.

GXP may work, but I agree with Brian. I think it will add more complexity than it is worth.

File: tools/ahat/src/ahat/RootsHandler.java

35:4-35:11
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a01803c_57098435
Bytes: 145
I prefer using the interface/abstraction 'Set<Instance> rootset = new HashSet<Instance>();' rather than the concrete type 'HashSet rootset = ...'

35:4-35:11
Mon Aug 03 19:50:50 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a01803c_57098435
UUID: 4a5c2064_3fd80f9f
Bytes: 34
that is the libcore style as well.

File: tools/ahat/src/ahat/Site.java

157
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a0b0862_353f98e6
Bytes: 102
Again I think you may need to implement equals(Object other) too (as part of the Comparator contract).

File: tools/ahat/src/ahat/SiteHandler.java

94:3-97:49
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea6cf416_f087e096
Bytes: 137
is this 
Comparator<Site.ObjectsInfo> compare = 
   new  ObjectsInfoByHeapName(new ObjectsInfoBySize(new ObjectInfoByClassName(null))));?

143:18-143:26
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_5b099b35
Bytes: 38
are we sure that classObj is not null?

145
Mon Aug 03 19:26:16 2015 +0000
Author: Gary Frost <1047883@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca673030_9b0a1328
Bytes: 57
Again I think we need to implement 'equals(Object other)'

