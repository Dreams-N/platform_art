Revision: 3322e10cd5c2435e6b76928c2962c5f7b8120acf
Patch-set: 2
File: compiler/utils/assembler.cc

141
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_36c1b878
Bytes: 24
Nit: indent by 4 spaces.

File: compiler/utils/mips/assembler_mips.cc

49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_48a953db
Bytes: 20
CHECK(!overwriting);

95
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_0a99ffff
Bytes: 26
CHECK_LT(imm21, 0x200000);

95
Thu Aug 27 12:21:36 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_0a99ffff
UUID: 44e3394a_0afd7fdf
Bytes: 33
CHECK(IsUint<21>(imm21)) << imm21

98:28-98:39
Thu Aug 27 12:21:36 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_4af787ff
Bytes: 61
You don't need this once you add the suggested CHECK() above.

102
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_0888eb74
Bytes: 27
CHECK_LT(imm26, 0x4000000);

111
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_d62404e9
Bytes: 53
CHECK(fs % 2, 0);
CHECK(ft % 2, 0);
CHECK(fd % 2, 0);

143:2-143:8
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2ba03ded
Bytes: 83
DCHECK â†’ CHECK (here and below), to be consistent with usage in other assemblers.

408
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ab8c2d89
Bytes: 14
CHECK(IsR6());

412
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_f610208e
Bytes: 40
CHECK(IsR6());
CHECK_LT(imm19, 0x80000);

416
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_16f67ccb
Bytes: 14
CHECK(IsR6());

420
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_3de42fcb
Bytes: 9
Likewise.

424
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_5de1fbb9
Bytes: 9
Likewise.

428
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_36f378dc
Bytes: 9
Likewise.

435
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_3ed189c6
Bytes: 9
Likewise.

440
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_6c32cff8
Bytes: 9
Likewise.

445
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_2aa7a341
Bytes: 9
Likewise.

452
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_af20bd5a
Bytes: 9
Likewise.

457
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_6b6f1520
Bytes: 9
Likewise.

462
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_5600f43a
Bytes: 9
Likewise.

469
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_68a097ee
Bytes: 9
Likewise.

476
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2b791de7
Bytes: 9
Likewise.

479:14-480:32
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0c2f9b8f
Bytes: 16
std::min(rs, rt)

480:34-480:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_cb664949
Bytes: 16
std::max(rs, rt)

483
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_6ab1ab77
Bytes: 14
CHECK(IsR6());

487:14-487:33
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_a8829f56
Bytes: 16
std::min(rs, rt)

487:35-487:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_eb6b050e
Bytes: 16
std::max(rs, rt)

490
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_71806a04
Bytes: 14
CHECK(IsR6());

495
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_76fdf0a1
Bytes: 9
Likewise.

541:6-541:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_312c3298
Bytes: 53
LOG(FATAL) << "Unexpected branch condition " << cond;

597:6-597:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_ea2f7b0f
Bytes: 53
LOG(FATAL) << "Unexpected branch condition " << cond;

602
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_ca0717a8
Bytes: 53
CHECK(fd % 2, 0);
CHECK(fs % 2, 0);
CHECK(ft % 2, 0);

606
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_8cd38b01
Bytes: 9
Likewise.

610
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_acd8c71b
Bytes: 9
Likewise.

614
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_91015e15
Bytes: 9
Likewise.

618
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_aebe7bf9
Bytes: 9
Likewise.

622
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_4ec4a788
Bytes: 9
Likewise.

626
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_499345e0
Bytes: 9
Likewise.

630
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4cbef3ab
Bytes: 9
Likewise.

634
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_510c4647
Bytes: 35
CHECK(fd % 2, 0);
CHECK(fs % 2, 0);

638
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_6ec16377
Bytes: 9
Likewise.

642
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_161f5c93
Bytes: 9
Likewise.

646
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_71094a36
Bytes: 9
Likewise.

650
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_699081d2
Bytes: 9
Likewise.

654
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_c8660349
Bytes: 9
Likewise.

658
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_6cbbafba
Bytes: 9
Likewise.

662
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b5b4e01e
Bytes: 9
Likewise.

666
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_fee721a0
Bytes: 17
CHECK(fs % 2, 0);

670
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_c90735a8
Bytes: 9
Likewise.

674
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_1efdad2d
Bytes: 9
Likewise.

678
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0cc8fb48
Bytes: 9
Likewise.

686
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_361c589c
Bytes: 9
Likewise.

694
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_08610b2f
Bytes: 9
Likewise.

727:12-727:23
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_6a236b33
Bytes: 17
High16Bits(value)

729:18-729:23
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_75cb2896
Bytes: 16
Low16Bits(value)

734:22-734:49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_68525762
Bytes: 16
Low32Bits(value)

735:22-735:55
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_f1253ab4
Bytes: 10
High32Bits

764:20-764:47
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4ce7d3d1
Bytes: 16
Low32Bits(value)

766:20-766:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b5ddc056
Bytes: 17
High32Bits(value)

770
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_d5d23c45
Bytes: 16
CHECK(r % 2, 0);

775
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_0f29c939
Bytes: 17
CHECK(rd % 2, 0);

776:20-776:47
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_491ca5f5
Bytes: 16
Low32Bits(value)

778:20-778:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_7616d07d
Bytes: 17
High32Bits(value)

782:78-782:82
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_aa357363
Bytes: 5
temp?

874:2-874:8
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0ce1dbba
Bytes: 165
Replace with

  CHECK_NE(condition, kUncond);

and add `utils/mips/assembler_mips.h` to `LIBART_COMPILER_ENUM_OPERATOR_OUT_HEADER_FILES_mips` in compiler/Android.mk.

891:6-891:49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_e9355162
Bytes: 49
CHECK_NE(lhs_reg, ZERO);
CHECK_NE(rhs_reg, ZERO);

900:6-900:49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_6eeac3e9
Bytes: 49
CHECK_NE(lhs_reg, ZERO);
CHECK_EQ(rhs_reg, ZERO);

920:2-920:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cc9bc351
Bytes: 57
CHECK_NE(indirect_reg, ZERO);
CHECK_NE(indirect_reg, AT);

956:6-956:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_d65de44c
Bytes: 53
LOG(FATAL) << "Unexpected branch condition " << cond;

1110
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_75e4081a
Bytes: 45
Add a comment:

  // `type_` is already long.

1112
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_6bcb7196
Bytes: 16
CHECK(IsLong());

1126:4-1126:32
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2ee4cb18
Bytes: 29
CHECK_GT(new_size, old_size);

1129:2-1130:71
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b506a05a
Bytes: 50
Is this case really needed?  It looks sub-optimal.

1131:28-1131:38
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_f662e009
Bytes: 36
std::numeric_limits<uint32_t>::max()

1138:6-1138:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d1c91655
Bytes: 29
CHECK_GT(new_size, old_size);

1162:4-1162:19
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_91d39e01
Bytes: 32
Shouldn't we abort in this case?

1171:14-1171:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_963c4cef
Bytes: 16
list of branches

1232
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_f510188e
Bytes: 67
Please try to factor common parts of Buncond, Bcond and Call below.

1236:12-1236:21
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ae62fb08
Bytes: 17
Use emplace_back.

1262:12-1262:21
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_96a52cbf
Bytes: 9
Likewise.

1284:12-1284:21
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_ea013b7b
Bytes: 9
Likewise.

1306:2-1321:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_6be4111a
Bytes: 74
This has a quadratic complexity.  Could this be achieved more efficiently?

1326:6-1326:18
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_2f584dce
Bytes: 16
branch_count > 0

1334:4-1342:3
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_d636c40c
Bytes: 137
Rewrite this loop as:

  for (size_t j = branch_count; j >= 0; --j) {
    size_t i = j - 1;
    Branch* branch = branches_[i];
    // ...

1345:0-1345:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_952a84b3
Bytes: 73
// Note: Make sure branch_info_[] and EmitBranch() are kept synchronized.

1348:2-1348:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_e9deb188
Bytes: 73
Suggestion: move these comments to the right of the values in this array.

1377:0-1377:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_0ae45f55
Bytes: 73
// Note: Make sure branch_info_[] and EmitBranch() are kept synchronized.

1388:6-1388:12
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0cba3ba5
Bytes: 28
Use CHECK_EQ, here an below.

1404
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_31c51232
Bytes: 34
Add a blank line before line 1405.

1425:0-1426:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_89e37d4f
Bytes: 24
Introduce a Push method.

1429:14-1429:26
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_a9e8b929
Bytes: 18
High16Bits(offset)

1430:18-1430:24
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_f1f77a80
Bytes: 17
Low16Bits(offset)

1432:0-1432:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_f63bc0f1
Bytes: 23
Introduce a Pop method.

1437:9-1437:32
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b52f80c2
Bytes: 47
The comment on case `Branch::kLongUncondBranch`

1443:14-1443:26
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_2cb7f7bd
Bytes: 18
High16Bits(offset)

1444:18-1444:24
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_8fbff947
Bytes: 17
Low16Bits(offset)

1453:14-1453:26
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cc8423ef
Bytes: 18
High16Bits(offset)

1454:18-1454:24
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_16511c2f
Bytes: 17
Low16Bits(offset)

1458
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d1f27693
Bytes: 34
Add a blank line before line 1459.

1473
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_d524fce8
Bytes: 34
Add a blank line before line 1474.

1478:16-1478:28
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_8b00753c
Bytes: 18
High16Bits(offset)

1479:14-1479:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_8e24dfe7
Bytes: 17
Low16Bits(offset)

1485:16-1485:28
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_6bfd31a2
Bytes: 18
High16Bits(offset)

1486:14-1486:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ae299bbe
Bytes: 17
Low16Bits(offset)

1491:17-1491:29
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_f529f8bd
Bytes: 18
High16Bits(offset)

1492:22-1492:28
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_364e1890
Bytes: 17
Low16Bits(offset)

1496:2-1496:58
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_69cba1c8
Bytes: 56
CHECK_EQ(overwrite_location_, branch->GetEndLocation());

1497:2-1497:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_afc43dda
Bytes: 52
CHECK_LT(branch->GetSize(), Branch::kMaxBranchSize);

1646:4-1646:22
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_ec89df03
Bytes: 57
Reverse the condition and swap the branches of this `if`.

1647
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_5e29f538
Bytes: 14
// 64-bit FPU.

1648:6-1648:31
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_351c509c
Bytes: 29
Are we allowed to clobber T8?

1729:4-1729:22
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_a901997b
Bytes: 57
Reverse the condition and swap the branches of this `if`.

1730:6-1730:21
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_7516c87d
Bytes: 29
Are we allowed to clobber T8?

1730
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_89fcdde4
Bytes: 14
// 64-bit FPU.

1876:5-1876:64
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2e160b7d
Bytes: 15
Which function?

2057:37-2057:45
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_6fa72541
Bytes: 72
Replace with

  dest ATTRIBUTE_UNUSED

and likewise for other arguments.

2059:30-2059:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_51e766d1
Bytes: 4
MIPS

2064:30-2064:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_71e4eacb
Bytes: 4
MIPS

2134:49-2134:56
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_7e26b16b
Bytes: 21
Use ATTRIBUTE_UNUSED.

2138:45-2138:52
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_9e637d91
Bytes: 6
Ditto.

2166:53-2166:63
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_0fb46967
Bytes: 6
Ditto.

2174:73-2174:85
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ce53b742
Bytes: 6
Ditto.

2181:20-2181:29
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_95536443
Bytes: 17
Use emplace_back.

2199:60-2199:61
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_76489081
Bytes: 77
Replace with

  kMipsWordSize

(and define kMipsWordSize in assembler_mips.h)

2199
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d19b5651
Bytes: 77
Add

  CheckEntrypointTypes<kQuickDeliverException, void, mirror::Object*>();

File: compiler/utils/mips/assembler_mips.h

65
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_114b2e80
Bytes: 37
Nit: Add a blank line before line 65.

77:95-77:96
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_4fd4a1b6
Bytes: 20
Nit: put on line 78.

87:6-87:12
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_6fd165c5
Bytes: 65
DCHECK â†’ CHECK, to be consistent with other uses in assemblers.

428:0-435:6
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_dec98523
Bytes: 14
Ofs â†’ Offset

441:11-441:21
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_76cb3096
Bytes: 54
Please put comments before the documented enum values.

456:41-456:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4c0cb347
Bytes: 10
/* Type */

458
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_cfe89176
Bytes: 1
.

460
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d1a596bd
Bytes: 1
.

506:54-506:55
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_b6ddc856
Bytes: 90
Why `~`?  Is this to highlight the space occupied by the composite instruction themselves?

529:59-529:69
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_afe75da1
Bytes: 36
std::numeric_limits<uint32_t>::max()

547:4-547:25
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cc20a3a7
Bytes: 30
Why not using `Register` here?

549:4-549:25
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_0ee78f20
Bytes: 9
Likewise.

550:31-550:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_6ffac537
Bytes: 28
What is the purpose of this?

552:15-552:18
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_7dc5d730
Bytes: 6
Ditto.

553:19-553:22
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_9df2a392
Bytes: 6
Ditto.

576:11-576:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_0ba301fd
Bytes: 15
Nit: exception.

596:2-596:37
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_8af18f0b
Bytes: 100
Replace with

  std::vector<MipsExceptionSlowPath> 

and remove dynamic allocation and deallocation.

598:2-598:22
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_6c964f20
Bytes: 84
Replace with

  std::vector<Branch>

and remove dynamic allocation and deallocation.

600:0-603:31
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_aaba9357
Bytes: 38
Have each member have its own comment.

