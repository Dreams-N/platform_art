Revision: 3322e10cd5c2435e6b76928c2962c5f7b8120acf
Patch-set: 2
File: compiler/utils/assembler.cc

141
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_36c1b878
Bytes: 24
Nit: indent by 4 spaces.

141
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_36c1b878
UUID: e48fcdab_617290d7
Bytes: 5
Done.

File: compiler/utils/mips/assembler_mips.cc

49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_48a953db
Bytes: 20
CHECK(!overwriting);

49
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_48a953db
UUID: e478ad71_162f5c41
Bytes: 5
Done!

95
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_0a99ffff
Bytes: 26
CHECK_LT(imm21, 0x200000);

95
Thu Aug 27 12:21:36 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_0a99ffff
UUID: 44e3394a_0afd7fdf
Bytes: 33
CHECK(IsUint<21>(imm21)) << imm21

95
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_0afd7fdf
UUID: 4485f957_0802097f
Bytes: 282
Such checks may require introducing "& constant" on the caller site, if not already there. And the caller is quite aware of the cases when the immediate/offset field is not 8, 16, 32 or 64 bits. I'm not sure there's a value in introducing checks and moving "& const" to the callers.

95
Thu Aug 27 13:34:43 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4485f957_0802097f
UUID: e45eedce_6c488f33
Bytes: 251
Readability: I find it _very_ confusing that EmitI21() accepts input that isn't 21-bit.

Maybe you want a signed 21-bit value? Then why is the argument uint32_t? It should be int32_t, CHECK(IsInt<21>(imm21)) << imm21 and the "& const" needs to remain.

95
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_6c488f33
UUID: 845371c9_ac1f6762
Bytes: 38
Done. Used IsUint<21> from bit_utils.h

98:28-98:39
Thu Aug 27 12:21:36 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_4af787ff
Bytes: 61
You don't need this once you add the suggested CHECK() above.

98:28-98:39
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_4af787ff
UUID: e478ad71_5629d438
Bytes: 8
Removed.

102
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_0888eb74
Bytes: 27
CHECK_LT(imm26, 0x4000000);

102
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_0888eb74
UUID: e45eedce_4ccef3d9
Bytes: 14
Same as above.

111
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_d62404e9
Bytes: 53
CHECK(fs % 2, 0);
CHECK(ft % 2, 0);
CHECK(fd % 2, 0);

111
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_d62404e9
UUID: e45eedce_0cd8fb96
Bytes: 75
It is my understanding that FRegister can be odd in certain cases (for R2).

143:2-143:8
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2ba03ded
Bytes: 83
DCHECK â†’ CHECK (here and below), to be consistent with usage in other assemblers.

143:2-143:8
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_2ba03ded
UUID: e48fcdab_fe65613a
Bytes: 6
Check.

408
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ab8c2d89
Bytes: 14
CHECK(IsR6());

408
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_ab8c2d89
UUID: e45eedce_2cd5b75f
Bytes: 6
Check.

412
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_f610208e
Bytes: 40
CHECK(IsR6());
CHECK_LT(imm19, 0x80000);

412
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_f610208e
UUID: 446ed97b_724e2e91
Bytes: 6
Check.

416
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_16f67ccb
Bytes: 14
CHECK(IsR6());

416
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_16f67ccb
UUID: 446ed97b_124b3280
Bytes: 6
Check.

420
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_3de42fcb
Bytes: 9
Likewise.

420
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c48ac99e_3de42fcb
UUID: e45eedce_ec079f8e
Bytes: 6
Check.

424
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_5de1fbb9
Bytes: 9
Likewise.

424
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c48ac99e_5de1fbb9
UUID: e48fcdab_1e5bed7f
Bytes: 6
Check.

428
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_36f378dc
Bytes: 9
Likewise.

428
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_36f378dc
UUID: e48fcdab_3e58a980
Bytes: 6
Check.

435
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_3ed189c6
Bytes: 9
Likewise.

435
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_3ed189c6
UUID: e478ad71_96636c91
Bytes: 6
Check.

440
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_6c32cff8
Bytes: 9
Likewise.

440
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_6c32cff8
UUID: e45eedce_8cfcebe4
Bytes: 6
Check.

445
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_2aa7a341
Bytes: 9
Likewise.

445
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_2aa7a341
UUID: 44e3394a_d5e85c76
Bytes: 6
Check.

452
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_af20bd5a
Bytes: 9
Likewise.

452
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_af20bd5a
UUID: 64e03d3d_ab161908
Bytes: 6
Check.

457
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_6b6f1520
Bytes: 9
Likewise.

457
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_6b6f1520
UUID: e45eedce_ac01a77b
Bytes: 6
Check.

462
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_5600f43a
Bytes: 9
Likewise.

462
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_5600f43a
UUID: c459e9e9_ee3f936f
Bytes: 6
Check.

469
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_68a097ee
Bytes: 9
Likewise.

469
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_68a097ee
UUID: 444df958_d1d24445
Bytes: 6
Check.

476
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2b791de7
Bytes: 9
Likewise.

476
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_2b791de7
UUID: e478ad71_b668686c
Bytes: 6
Check.

479:14-480:32
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0c2f9b8f
Bytes: 16
std::min(rs, rt)

480:34-480:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_cb664949
Bytes: 16
std::max(rs, rt)

479:14-480:32
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_0c2f9b8f
UUID: e48fcdab_5e557547
Bytes: 5
Done.

483
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_6ab1ab77
Bytes: 14
CHECK(IsR6());

487:14-487:33
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_a8829f56
Bytes: 16
std::min(rs, rt)

487:35-487:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_eb6b050e
Bytes: 16
std::max(rs, rt)

490
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_71806a04
Bytes: 14
CHECK(IsR6());

490
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_71806a04
UUID: 845371c9_0c2f9b8f
Bytes: 6
Check.

495
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_76fdf0a1
Bytes: 9
Likewise.

495
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_76fdf0a1
UUID: 64e03d3d_0b1c6526
Bytes: 6
Check.

541:6-541:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_312c3298
Bytes: 53
LOG(FATAL) << "Unexpected branch condition " << cond;

541:6-541:53
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_312c3298
UUID: 24656596_1c1905ac
Bytes: 5
Done.

597:6-597:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_ea2f7b0f
Bytes: 53
LOG(FATAL) << "Unexpected branch condition " << cond;

597:6-597:53
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_ea2f7b0f
UUID: 444df958_11edacff
Bytes: 5
Done.

602
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_ca0717a8
Bytes: 53
CHECK(fd % 2, 0);
CHECK(fs % 2, 0);
CHECK(ft % 2, 0);

602
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_ca0717a8
UUID: 444df958_b106a05a
Bytes: 13
See previous.

606
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_8cd38b01
Bytes: 9
Likewise.

606
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_8cd38b01
UUID: c459e9e9_0e29cf39
Bytes: 13
See previous.

610
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_acd8c71b
Bytes: 9
Likewise.

610
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_acd8c71b
UUID: 64e03d3d_cb3a7d82
Bytes: 13
See previous.

614
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_91015e15
Bytes: 9
Likewise.

614
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_91015e15
UUID: 24656596_fc58b15e
Bytes: 13
See previous.

618
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_aebe7bf9
Bytes: 9
Likewise.

618
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_aebe7bf9
UUID: 444df958_d10b2461
Bytes: 13
See previous.

622
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_4ec4a788
Bytes: 9
Likewise.

622
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_4ec4a788
UUID: c459e9e9_2e260b6b
Bytes: 13
See previous.

626
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_499345e0
Bytes: 9
Likewise.

626
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_499345e0
UUID: e45eedce_6cf40ffa
Bytes: 13
See previous.

630
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4cbef3ab
Bytes: 9
Likewise.

630
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_4cbef3ab
UUID: 44e3394a_35fa6836
Bytes: 13
See previous.

634
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_510c4647
Bytes: 35
CHECK(fd % 2, 0);
CHECK(fs % 2, 0);

634
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_510c4647
UUID: 845371c9_6cbbafba
Bytes: 13
See previous.

638
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_6ec16377
Bytes: 9
Likewise.

638
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_6ec16377
UUID: e48fcdab_41c11477
Bytes: 13
See previous.

642
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_161f5c93
Bytes: 9
Likewise.

642
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_161f5c93
UUID: 64e03d3d_ab3f3970
Bytes: 13
See previous.

646
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_71094a36
Bytes: 9
Likewise.

646
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_71094a36
UUID: 446ed97b_92af229a
Bytes: 13
See previous.

650
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_699081d2
Bytes: 9
Likewise.

650
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_699081d2
UUID: e45eedce_0cf1db08
Bytes: 13
See previous.

654
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_c8660349
Bytes: 9
Likewise.

654
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_c8660349
UUID: e48fcdab_61ce10a8
Bytes: 13
See previous.

658
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_6cbbafba
Bytes: 9
Likewise.

658
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_6cbbafba
UUID: 845371c9_0cc8fb48
Bytes: 13
See previous.

662
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b5b4e01e
Bytes: 9
Likewise.

662
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_b5b4e01e
UUID: 444df958_f110288e
Bytes: 13
See previous.

666
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_fee721a0
Bytes: 17
CHECK(fs % 2, 0);

666
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_fee721a0
UUID: 4485f957_a8f73dfe
Bytes: 156
Not really. When the FPU is 32-bit, 64-bit doubles can be accessed as 32-bit halves using mtc1/mfc1, those halves are both even- and odd-numbered registers.

670
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_c90735a8
Bytes: 9
Likewise.

670
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_c90735a8
UUID: e45eedce_2cee172a
Bytes: 13
See previous.

674
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_1efdad2d
Bytes: 9
Likewise.

674
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_1efdad2d
UUID: e478ad71_f672e057
Bytes: 13
See previous.

678
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0cc8fb48
Bytes: 9
Likewise.

678
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_0cc8fb48
UUID: 24656596_bc623909
Bytes: 13
See previous.

686
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_361c589c
Bytes: 9
Likewise.

686
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_361c589c
UUID: 444df958_11f68ccb
Bytes: 13
See previous.

694
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_08610b2f
Bytes: 9
Likewise.

694
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_08610b2f
UUID: c459e9e9_ce63b790
Bytes: 13
See previous.

727:12-727:23
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_6a236b33
Bytes: 17
High16Bits(value)

727:12-727:23
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_6a236b33
UUID: e45eedce_ccabc3df
Bytes: 5
Done.

729:18-729:23
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_75cb2896
Bytes: 16
Low16Bits(value)

729:18-729:23
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_75cb2896
UUID: 44e3394a_75f4f047
Bytes: 5
Done.

734:22-734:49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_68525762
Bytes: 16
Low32Bits(value)

734:22-734:49
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_68525762
UUID: 446ed97b_b2b4a6ec
Bytes: 5
Done.

735:22-735:55
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_f1253ab4
Bytes: 10
High32Bits

735:22-735:55
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_f1253ab4
UUID: 446ed97b_529a0a7c
Bytes: 5
Done.

764:20-764:47
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4ce7d3d1
Bytes: 16
Low32Bits(value)

764:20-764:47
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_4ce7d3d1
UUID: e478ad71_16783c35
Bytes: 5
Done.

766:20-766:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b5ddc056
Bytes: 17
High32Bits(value)

766:20-766:53
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_b5ddc056
UUID: 446ed97b_72970e53
Bytes: 5
Done.

770
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_d5d23c45
Bytes: 16
CHECK(r % 2, 0);

770
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_d5d23c45
UUID: 446ed97b_12a492b9
Bytes: 13
See previous.

775
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_0f29c939
Bytes: 17
CHECK(rd % 2, 0);

775
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_0f29c939
UUID: e45eedce_ecb0ff4b
Bytes: 13
See previous.

776:20-776:47
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_491ca5f5
Bytes: 16
Low32Bits(value)

776:20-776:47
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_491ca5f5
UUID: 446ed97b_32a196aa
Bytes: 5
Done.

778:20-778:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_7616d07d
Bytes: 17
High32Bits(value)

778:20-778:53
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_7616d07d
UUID: e45eedce_8cb5cb3a
Bytes: 5
Done.

782:78-782:82
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_aa357363
Bytes: 5
temp?

782:78-782:82
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_aa357363
UUID: e48fcdab_81cb1c95
Bytes: 11
Ok, temp :)

782:78-782:82
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_81cb1c95
UUID: e4d42ed5_d117647f
Bytes: 57
Thanks.  (This is more consistent with previous methods.)

874:2-874:8
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0ce1dbba
Bytes: 165
Replace with

  CHECK_NE(condition, kUncond);

and add `utils/mips/assembler_mips.h` to `LIBART_COMPILER_ENUM_OPERATOR_OUT_HEADER_FILES_mips` in compiler/Android.mk.

874:2-874:8
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_0ce1dbba
UUID: 24656596_5c68dde7
Bytes: 5
Done.

891:6-891:49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_e9355162
Bytes: 49
CHECK_NE(lhs_reg, ZERO);
CHECK_NE(rhs_reg, ZERO);

891:6-891:49
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_e9355162
UUID: 64e03d3d_0b358590
Bytes: 5
Done.

900:6-900:49
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_6eeac3e9
Bytes: 49
CHECK_NE(lhs_reg, ZERO);
CHECK_EQ(rhs_reg, ZERO);

900:6-900:49
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_6eeac3e9
UUID: 64e03d3d_eb39418c
Bytes: 5
Done.

920:2-920:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cc9bc351
Bytes: 57
CHECK_NE(indirect_reg, ZERO);
CHECK_NE(indirect_reg, AT);

920:2-920:53
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_cc9bc351
UUID: 446ed97b_d28efa3b
Bytes: 5
Done.

956:6-956:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_d65de44c
Bytes: 53
LOG(FATAL) << "Unexpected branch condition " << cond;

956:6-956:53
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_d65de44c
UUID: c459e9e9_ee68f36c
Bytes: 5
Done.

1110
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_75e4081a
Bytes: 45
Add a comment:

  // `type_` is already long.

1110
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_75e4081a
UUID: 446ed97b_f293fe60
Bytes: 5
Done.

1112
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_6bcb7196
Bytes: 16
CHECK(IsLong());

1112
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_6bcb7196
UUID: 44e3394a_55060cda
Bytes: 5
Done.

1126:4-1126:32
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2ee4cb18
Bytes: 29
CHECK_GT(new_size, old_size);

1126:4-1126:32
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_2ee4cb18
UUID: 845371c9_ecf79f80
Bytes: 5
Done.

1129:2-1130:71
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b506a05a
Bytes: 50
Is this case really needed?  It looks sub-optimal.

1129:2-1130:71
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_b506a05a
UUID: 248c8586_00f892ec
Bytes: 273
Sub-optimal in what sense? It's debugging/testing code path that must be optimized out since the caller uses the default implicit value of max_short_distance = UINT32_MAX. If the caller provides a different value explicitly, this code will be compiled and will have effect.

1129:2-1130:71
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 248c8586_00f892ec
UUID: 64c03e16_adc91d91
Bytes: 122
I meant, will we ever use this routine with a  `max_short_distance` value other than std::numeric_limits<uint32_t>::max()?

1131:28-1131:38
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_f662e009
Bytes: 36
std::numeric_limits<uint32_t>::max()

1131:28-1131:38
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_f662e009
UUID: 444df958_5100143b
Bytes: 5
Done.

1138:6-1138:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d1c91655
Bytes: 29
CHECK_GT(new_size, old_size);

1138:6-1138:34
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_d1c91655
UUID: e45eedce_acba0726
Bytes: 5
Done.

1162:4-1162:19
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_91d39e01
Bytes: 32
Shouldn't we abort in this case?

1162:4-1162:19
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_91d39e01
UUID: e4750d3f_9216237b
Bytes: 35
It was copied from ARM at the time.

1171:14-1171:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_963c4cef
Bytes: 16
list of branches

1171:14-1171:34
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_963c4cef
UUID: 446ed97b_9288822f
Bytes: 5
Done.

1232
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_f510188e
Bytes: 67
Please try to factor common parts of Buncond, Bcond and Call below.

1232
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_f510188e
UUID: 048f817d_cac07497
Bytes: 88
Yet another helper or two for functions of this size? Or do you envision something else?

1232
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 048f817d_cac07497
UUID: 447a5aab_7402084b
Bytes: 125
Yes, we could factor the body of these routines in a new helper function, so as to minimize code duplication and maintenance.

1236:12-1236:21
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ae62fb08
Bytes: 17
Use emplace_back.

1236:12-1236:21
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_ae62fb08
UUID: e478ad71_b65148b4
Bytes: 5
Done.

1262:12-1262:21
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_96a52cbf
Bytes: 9
Likewise.

1262:12-1262:21
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_96a52cbf
UUID: 24656596_7c65a10e
Bytes: 5
Done.

1284:12-1284:21
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_ea013b7b
Bytes: 9
Likewise.

1284:12-1284:21
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_ea013b7b
UUID: 24656596_1c7265d6
Bytes: 5
Done.

1306:2-1321:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_6be4111a
Bytes: 74
This has a quadratic complexity.  Could this be achieved more efficiently?

1306:2-1321:20
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_6be4111a
UUID: 048f817d_eabd381d
Bytes: 155
Is this not an NP-complete problem?
Further, the entire Android has been successfully built and booted only using short branches (+/-128KB range of jumps).

1306:2-1321:20
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 048f817d_eabd381d
UUID: 04d222e7_f2e6281d
Bytes: 159
Fair enough.  I was thinking about something similar to the fixup generation code in compiler/utils/arm/assembler_thumb2.cc, which uses a list of dependencies.

1326:6-1326:18
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_2f584dce
Bytes: 16
branch_count > 0

1326:6-1326:18
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_2f584dce
UUID: 444df958_71fd18a2
Bytes: 5
Done.

1334:4-1342:3
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_d636c40c
Bytes: 137
Rewrite this loop as:

  for (size_t j = branch_count; j >= 0; --j) {
    size_t i = j - 1;
    Branch* branch = branches_[i];
    // ...

1334:4-1342:3
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_d636c40c
UUID: 444df958_912a7cb3
Bytes: 11
Loop fixed.

1334:4-1342:3
Sun Aug 30 02:29:00 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_d636c40c
UUID: 4485f957_8ba34efb
Bytes: 56
That looks like an infinite loop. And it confused Pavle.

1345:0-1345:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_952a84b3
Bytes: 73
// Note: Make sure branch_info_[] and EmitBranch() are kept synchronized.

1345:0-1345:54
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_952a84b3
UUID: 44e3394a_750d10f0
Bytes: 5
Done.

1348:2-1348:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_e9deb188
Bytes: 73
Suggestion: move these comments to the right of the values in this array.

1348:2-1348:20
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_e9deb188
UUID: c459e9e9_6e75e33c
Bytes: 15
Fixed comments.

1377:0-1377:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_0ae45f55
Bytes: 73
// Note: Make sure branch_info_[] and EmitBranch() are kept synchronized.

1377:0-1377:54
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_0ae45f55
UUID: 24656596_dc3ccdef
Bytes: 5
Done.

1388:6-1388:12
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0cba3ba5
Bytes: 28
Use CHECK_EQ, here an below.

1388:6-1388:12
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_0cba3ba5
UUID: e48fcdab_21ede8ff
Bytes: 5
Done.

1404
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_31c51232
Bytes: 34
Add a blank line before line 1405.

1404
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_31c51232
UUID: e48fcdab_81e4fc1a
Bytes: 5
Done.

1425:0-1426:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_89e37d4f
Bytes: 24
Introduce a Push method.

1429:14-1429:26
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_a9e8b929
Bytes: 18
High16Bits(offset)

1429:14-1429:26
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_a9e8b929
UUID: 24656596_fcaaf18a
Bytes: 5
Done.

1430:18-1430:24
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_f1f77a80
Bytes: 17
Low16Bits(offset)

1430:18-1430:24
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_f1f77a80
UUID: e478ad71_b6ba2858
Bytes: 5
Done.

1432:0-1432:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_f63bc0f1
Bytes: 23
Introduce a Pop method.

1437:9-1437:32
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b52f80c2
Bytes: 47
The comment on case `Branch::kLongUncondBranch`

1437:9-1437:32
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_b52f80c2
UUID: c459e9e9_0e5b0fce
Bytes: 5
Done.

1443:14-1443:26
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_2cb7f7bd
Bytes: 18
High16Bits(offset)

1443:14-1443:26
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_2cb7f7bd
UUID: 845371c9_8ca5cb8c
Bytes: 5
Done.

1444:18-1444:24
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_8fbff947
Bytes: 17
Low16Bits(offset)

1444:18-1444:24
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_8fbff947
UUID: 845371c9_acaa0758
Bytes: 5
Done.

1453:14-1453:26
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cc8423ef
Bytes: 18
High16Bits(offset)

1453:14-1453:26
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_cc8423ef
UUID: e478ad71_d6bfa446
Bytes: 5
Done.

1454:18-1454:24
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_16511c2f
Bytes: 17
Low16Bits(offset)

1454:18-1454:24
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_16511c2f
UUID: e48fcdab_216888e7
Bytes: 5
Done.

1458
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d1f27693
Bytes: 34
Add a blank line before line 1459.

1458
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_d1f27693
UUID: c459e9e9_2e584bce
Bytes: 5
Done.

1473
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_d524fce8
Bytes: 34
Add a blank line before line 1474.

1473
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_d524fce8
UUID: 444df958_b158605e
Bytes: 5
Done.

1478:16-1478:28
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_8b00753c
Bytes: 18
High16Bits(offset)

1478:16-1478:28
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_8b00753c
UUID: c459e9e9_ceb5f76b
Bytes: 5
Done.

1479:14-1479:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_8e24dfe7
Bytes: 17
Low16Bits(offset)

1479:14-1479:20
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_8e24dfe7
UUID: c459e9e9_eeba3359
Bytes: 5
Done.

1485:16-1485:28
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_6bfd31a2
Bytes: 18
High16Bits(offset)

1485:16-1485:28
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_6bfd31a2
UUID: c459e9e9_8ebfff47
Bytes: 5
Done.

1486:14-1486:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ae299bbe
Bytes: 17
Low16Bits(offset)

1486:14-1486:20
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_ae299bbe
UUID: 444df958_d15de44c
Bytes: 5
Done.

1491:17-1491:29
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_f529f8bd
Bytes: 18
High16Bits(offset)

1491:17-1491:29
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_f529f8bd
UUID: e478ad71_56b47468
Bytes: 5
Done.

1492:22-1492:28
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_364e1890
Bytes: 17
Low16Bits(offset)

1492:22-1492:28
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_364e1890
UUID: 24656596_9caf359a
Bytes: 5
Done.

1496:2-1496:58
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_69cba1c8
Bytes: 56
CHECK_EQ(overwrite_location_, branch->GetEndLocation());

1496:2-1496:58
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_69cba1c8
UUID: 24656596_bcb479ec
Bytes: 5
Done.

1497:2-1497:53
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_afc43dda
Bytes: 52
CHECK_LT(branch->GetSize(), Branch::kMaxBranchSize);

1497:2-1497:53
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_afc43dda
UUID: 44e3394a_b5baf857
Bytes: 5
Done.

1646:4-1646:22
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_ec89df03
Bytes: 57
Reverse the condition and swap the branches of this `if`.

1646:4-1646:22
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_ec89df03
UUID: 24656596_5c9a1d7c
Bytes: 9
Reversed.

1647
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_5e29f538
Bytes: 14
// 64-bit FPU.

1647
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_5e29f538
UUID: e45eedce_8c870b67
Bytes: 5
Done.

1648:6-1648:31
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_351c509c
Bytes: 29
Are we allowed to clobber T8?

1648:6-1648:31
Sun Aug 30 02:29:00 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_351c509c
UUID: c42ba915_3654fb29
Bytes: 80
We reviewed this, and while this isn't very nice, we can clobber T8 around here.

1648:6-1648:31
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c42ba915_3654fb29
UUID: a46956e6_b7f748c1
Bytes: 37
Please add a comment about this then.

1729:4-1729:22
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_a901997b
Bytes: 57
Reverse the condition and swap the branches of this `if`.

1729:4-1729:22
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_a901997b
UUID: 446ed97b_7232aef8
Bytes: 9
Reversed.

1730:6-1730:21
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_7516c87d
Bytes: 29
Are we allowed to clobber T8?

1730
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_89fcdde4
Bytes: 14
// 64-bit FPU.

1730
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_89fcdde4
UUID: e48fcdab_4165940e
Bytes: 5
Done.

1876:5-1876:64
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2e160b7d
Bytes: 15
Which function?

1876:5-1876:64
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_2e160b7d
UUID: 048f817d_8aca6cb1
Bytes: 126
StoreImmediateToThread32. AFAIR, it exists/existed in implementations for other architectures, but I couldn't find any caller.

1876:5-1876:64
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 048f817d_8aca6cb1
UUID: a46956e6_57d6ec31
Bytes: 130
Thanks for the explanation.  Feel free to remove this method.  If you decide to keep it, please remove the comment from line 1876.

2057:37-2057:45
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_6fa72541
Bytes: 72
Replace with

  dest ATTRIBUTE_UNUSED

and likewise for other arguments.

2057:37-2057:45
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_6fa72541
UUID: 24656596_7c97e152
Bytes: 9
Replaced.

2059:30-2059:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_51e766d1
Bytes: 4
MIPS

2059:30-2059:34
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_51e766d1
UUID: 845371c9_2cb7f7bd
Bytes: 5
Done.

2064:30-2064:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_71e4eacb
Bytes: 4
MIPS

2064:30-2064:34
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_71e4eacb
UUID: 64e03d3d_6b7ff11b
Bytes: 5
Done.

2134:49-2134:56
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_7e26b16b
Bytes: 21
Use ATTRIBUTE_UNUSED.

2134:49-2134:56
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_7e26b16b
UUID: e45eedce_ac8c4789
Bytes: 5
Done.

2138:45-2138:52
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_9e637d91
Bytes: 6
Ditto.

2138:45-2138:52
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_9e637d91
UUID: 24656596_1ca4a5b9
Bytes: 5
Done.

2166:53-2166:63
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_0fb46967
Bytes: 6
Ditto.

2166:53-2166:63
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_0fb46967
UUID: 44e3394a_15c004c6
Bytes: 5
Done.

2174:73-2174:85
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ce53b742
Bytes: 6
Ditto.

2174:73-2174:85
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_ce53b742
UUID: 24656596_3ca169aa
Bytes: 5
Done.

2181:20-2181:29
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_95536443
Bytes: 17
Use emplace_back.

2181:20-2181:29
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_95536443
UUID: 446ed97b_122fb28f
Bytes: 5
Done.

2199:60-2199:61
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_76489081
Bytes: 77
Replace with

  kMipsWordSize

(and define kMipsWordSize in assembler_mips.h)

2199
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d19b5651
Bytes: 77
Add

  CheckEntrypointTypes<kQuickDeliverException, void, mirror::Object*>();

2199
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_d19b5651
UUID: 444df958_31655010
Bytes: 5
Done.

File: compiler/utils/mips/assembler_mips.h

65
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_114b2e80
Bytes: 37
Nit: Add a blank line before line 65.

65
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_114b2e80
UUID: 44e3394a_f5c480db
Bytes: 5
Done.

77:95-77:96
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_4fd4a1b6
Bytes: 20
Nit: put on line 78.

77:95-77:96
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_4fd4a1b6
UUID: e45eedce_6c6f2f20
Bytes: 5
Done.

87:6-87:12
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_6fd165c5
Bytes: 65
DCHECK â†’ CHECK, to be consistent with other uses in assemblers.

87:6-87:12
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_6fd165c5
UUID: c459e9e9_2eb12b78
Bytes: 6
Check.

428:0-435:6
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_dec98523
Bytes: 14
Ofs â†’ Offset

428:0-435:6
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_dec98523
UUID: 845371c9_ac83e7e1
Bytes: 5
Done.

441:11-441:21
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_76cb3096
Bytes: 54
Please put comments before the documented enum values.

441:11-441:21
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_76cb3096
UUID: 849451c2_af7d61db
Bytes: 41
Misplaced comment or could you elaborate?

441:11-441:21
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 849451c2_af7d61db
UUID: c459e9e9_ce9e57ea
Bytes: 116
I literally put the existing comments before the enum values. As in, geographically :) Is this what you had in mind?

441:11-441:21
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_ce9e57ea
UUID: 84c53226_2ed52721
Bytes: 151
Thanks, this is better now.  Comments placed after enum values are OK when they're short; but for longer comments, placing them before is more legible.

456:41-456:54
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4c0cb347
Bytes: 10
/* Type */

456:41-456:54
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_4c0cb347
UUID: c459e9e9_eea3132f
Bytes: 5
Done.

458
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_cfe89176
Bytes: 1
.

458
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_cfe89176
UUID: c459e9e9_8e985ffd
Bytes: 4
Dot.

460
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_d1a596bd
Bytes: 1
.

460
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_d1a596bd
UUID: e45eedce_0c7c7bd6
Bytes: 1
.

506:54-506:55
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_b6ddc856
Bytes: 90
Why `~`?  Is this to highlight the space occupied by the composite instruction themselves?

506:54-506:55
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_b6ddc856
UUID: e4750d3f_12631310
Bytes: 235
~ is what I opted to use instead of â‰ˆ, which isn't ASCII. It means approximate (not the entire 4GB range end to end is supported, it can be around, AFAIR, 2GB-64KB on one side due to sign extension peculiarities). Use a word instead?

506:54-506:55
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4750d3f_12631310
UUID: a46956e6_37d57821
Bytes: 184
I understood what `~` meant. :)  What I was missing was the reason why this was an approximate, and not an exact offset.  Could you please add this explanation in the comment?  Thanks!

529:59-529:69
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_afe75da1
Bytes: 36
std::numeric_limits<uint32_t>::max()

529:59-529:69
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_afe75da1
UUID: 444df958_716fd8ed
Bytes: 5
Done.

547:4-547:25
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cc20a3a7
Bytes: 30
Why not using `Register` here?

547:4-547:25
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_cc20a3a7
UUID: 046221c0_17be74aa
Bytes: 33
Tried to save space. Suggestions?

547:4-547:25
Tue Sep 01 10:44:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 046221c0_17be74aa
UUID: 64c03e16_0dd07130
Bytes: 224
I think we should not compromise type safety to save memory.  Also, if we actually save space here (i.e., if the compiler does not add padding), there's probably a run-time penalty for reading and writing non-aligned fields.

549:4-549:25
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_0ee78f20
Bytes: 9
Likewise.

550:31-550:34
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_6ffac537
Bytes: 28
What is the purpose of this?

550:31-550:34
Thu Aug 27 13:19:48 2015 +0000
Author: Alexey Frunze <1056098@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_6ffac537
UUID: e4750d3f_b268ffe8
Bytes: 33
Tried to save space. Suggestions?

552:15-552:18
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_7dc5d730
Bytes: 6
Ditto.

553:19-553:22
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c48ac99e_9df2a392
Bytes: 6
Ditto.

576:11-576:20
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_0ba301fd
Bytes: 15
Nit: exception.

576:11-576:20
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_0ba301fd
UUID: 845371c9_4c99134d
Bytes: 5
Done.

596:2-596:37
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_8af18f0b
Bytes: 100
Replace with

  std::vector<MipsExceptionSlowPath> 

and remove dynamic allocation and deallocation.

596:2-596:37
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_8af18f0b
UUID: 44e3394a_b5a31830
Bytes: 5
Done.

598:2-598:22
Thu Aug 27 12:21:28 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_6c964f20
Bytes: 84
Replace with

  std::vector<Branch>

and remove dynamic allocation and deallocation.

598:2-598:22
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_6c964f20
UUID: c459e9e9_4e9347e0
Bytes: 5
Done.

600:0-603:31
Thu Aug 27 12:16:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_aaba9357
Bytes: 38
Have each member have its own comment.

600:0-603:31
Fri Aug 28 15:59:11 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_aaba9357
UUID: 44e3394a_15992400
Bytes: 5
Done.

