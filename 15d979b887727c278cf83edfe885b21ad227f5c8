Revision: 15d979b887727c278cf83edfe885b21ad227f5c8
Patch-set: 1
File: compiler/optimizing/builder.cc

324:20-324:24
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e99a4788_c41e309e
Bytes: 25
sentence is not finished.

324:20-324:24
Tue Sep 22 14:41:40 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e99a4788_c41e309e
UUID: 091ddbf6_dd9a9fac
Bytes: 4
Done

325:0-326:48
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 89ab8b9d_214a68ec
Bytes: 79
Do you need this optimization? I'd make it a follow-up cl if you don't need it.

325:0-326:48
Tue Sep 22 14:41:40 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 89ab8b9d_214a68ec
UUID: c9ef43fe_935e1e0c
Bytes: 113
I could rewrite it without it but one has to be careful about dex_pc->TryItem as blocks are split. This is safer.

342:0-348:5
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c9ef43fe_b38b62e4
Bytes: 76
Instead of doing this dance, consider just inlining the code below line 342.

342:0-348:5
Tue Sep 22 14:41:40 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c9ef43fe_b38b62e4
UUID: 89ab8b9d_81c6dca1
Bytes: 168
It's not very readable if I do that. I've moved the instruction iterator into a HBasicBlock method, so now it's just an if. I'll also use that method in a follow up CL.

351:51-352:71
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 89762b11_69c3e124
Bytes: 63
Explain why it's important that the catch block does not throw.

351:51-352:71
Tue Sep 22 14:41:40 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 89762b11_69c3e124
UUID: 4970b318_4706105f
Bytes: 42
Done. Let me know if you want more detail.

390:0-400:5
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 090f9bb2_cd9cfd60
Bytes: 38
Same comment about avoiding the dance.

390:0-400:5
Tue Sep 22 14:41:40 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 090f9bb2_cd9cfd60
UUID: e99a4788_64440482
Bytes: 4
Done

419:18-419:25
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8902ab8b_c684e247
Bytes: 6
-> the

419:18-419:25
Tue Sep 22 14:41:40 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8902ab8b_c684e247
UUID: 091ddbf6_bd99ebb6
Bytes: 4
Done

File: compiler/optimizing/builder.h

122:11-122:17
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e99a4788_042538ee
Bytes: 10
-> blocks,

122:63-122:68
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4970b318_64686a2b
Bytes: 11
What order?

122:11-122:17
Tue Sep 22 15:13:17 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e99a4788_042538ee
UUID: 4970b318_272af4bd
Bytes: 4
Done

File: compiler/optimizing/nodes.cc

1148:30-1148:43
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 090f9bb2_ada1c99a
Bytes: 42
-> Support for moving .... not implemented

1148:30-1148:43
Tue Sep 22 15:13:17 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 090f9bb2_ada1c99a
UUID: 89ab8b9d_61acf0d4
Bytes: 4
Done

File: compiler/optimizing/nodes.h

839:22-839:25
Tue Sep 22 13:24:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8902ab8b_a689e65d
Bytes: 44
Top -> Entry?
AtTop->BeforeFirstInstruction?

839:22-839:25
Tue Sep 22 15:13:17 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8902ab8b_a689e65d
UUID: a97f6fe5_6a32f727
Bytes: 589
Didn't want to name it SplitBeforeFirstInstruction because that suggests it's equivalent to SplitBefore(FirstInstruction()) which GraphBuilder uses as well to split catch blocks. 

The difference is quite subtle - SplitBefore creates the block that will come second, SplitAtTop the one that will come first. This preserves try/catch information in the respective use cases. When splitting a try+catch block, the first block should keep the catch info. When splitting a block to insert try entry, the second block should remain the try block... I could just make this a flag of SplitBefore.

