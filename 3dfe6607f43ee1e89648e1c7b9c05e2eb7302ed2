Revision: 3dfe6607f43ee1e89648e1c7b9c05e2eb7302ed2
Patch-set: 3
File: runtime/interpreter/interpreter.cc

357:49-357:88
Mon Jun 30 12:34:29 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c450e5a6_c215e610
Bytes: 140
I'd prefer the DCHECK at the caller's site:
DCHECK(shadow_frame.GetMethod()->GetDeclaringClass()->IsInitializedOrInitializingInThread(self))

357:49-357:88
Fri Jul 04 12:21:22 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c450e5a6_c215e610
UUID: c498e5f7_02354efb
Bytes: 276
I prefer keeping AssertInitializedOrInitializingInThread. I find it easier to log a helpful failure message indicating what's the actual problem.

Maybe your concern is related to debug build? I thought using the "Assert" word would help remind we only do this in debug build.

357:49-357:88
Fri Jul 04 12:31:38 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c498e5f7_02354efb
UUID: c498e5f7_a24e5a7e
Bytes: 374
What I find confusing is that it's not following the current standard of how we check. For example line 356 is:
DCHECK(!shadow_frame.GetMethod()->IsNative());

Not 
shadow_frame.GetMethod()->AssertIsNotNative()

Having just one and consistent logic around writing debug checks makes it easier when reading the code.

Isn't the DCHECK outputing the C instruction that failed?

File: runtime/interpreter/interpreter_common.cc

763:60-763:66
Mon Jun 30 12:34:29 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 841c2dfc_40ac628c
Bytes: 48
Shouldn't className and class_loader be handles?

763:60-763:66
Fri Jul 04 12:21:22 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 841c2dfc_40ac628c
UUID: 043d9d9e_cec1c338
Bytes: 4
Done

