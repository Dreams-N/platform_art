Revision: 8dbdc2fb14f50f7a41566ba9346407fb9bb0996b
Patch-set: 1
File: runtime/gc/heap.cc

410:65-412:81
Wed Aug 27 18:58:23 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 53ef61ff_2ac2536a
Bytes: 172
the code and the comment below don't match up. Why do we only check in the zygote case? dex2oat allocates objects like Strings, that may end up as large object allocations.

410:65-412:81
Wed Aug 27 19:47:34 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 53ef61ff_2ac2536a
UUID: 9333997e_28b90f61
Bytes: 196
This was derived from talking with mathieuc and basically up for review. Valgrind consistently gives us a non-moving space before the image space. If that can be fixed, I'd be fine with that, too.

410:65-412:81
Wed Aug 27 23:20:52 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9333997e_28b90f61
UUID: 7321c530_62064cf2
Bytes: 450
I can see that we can skip this no-gap check if there is no image (eg dex2oat).

I don't see what the Valgrind case looks like. It's got an image, but the non-moving space comes before the image space? I don't see how that happens. Does it have a separate non-moving space (from the main space)? Can you clarify?

In any case, this check should be enabled as much as possible. Or else, we'd have a large object being treated as immune and a GC crash.

410:65-412:81
Wed Aug 27 23:27:53 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7321c530_62064cf2
UUID: 7321c530_a2fc644d
Bytes: 61
dex2oat has an image in the case that we're compiling an app.

