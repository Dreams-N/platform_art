Revision: c7c0efd3c17f9ed668eb38781945efad698e5df7
Patch-set: 4
File: /COMMIT_MSG

7:0-7:74
Tue Apr 14 11:48:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_7bc43fe3
Bytes: 15
Nit: long line.

7:15-7:24
Tue Apr 14 11:48:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_bd907fc7
Bytes: 9
mechanism

7:0-7:74
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_7bc43fe3
UUID: b07b4aac_d5519c66
Bytes: 6
Fixed.

7:15-7:24
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_bd907fc7
UUID: d080bec6_f61140d5
Bytes: 6
Fixed.

10:0-10:76
Tue Apr 14 11:48:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_1bc97bfa
Bytes: 15
Nit: long line.

10:0-10:76
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_1bc97bfa
UUID: b07b4aac_f54e18c8
Bytes: 6
Fixed.

File: compiler/optimizing/nodes.h

164:41-164:48
Tue Apr 14 11:48:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_5ba5c302
Bytes: 33
Maybe document this new argument?

164:41-164:48
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_5ba5c302
UUID: b07b4aac_78be7df8
Bytes: 4
Done

305:24-305:28
Tue Apr 14 11:48:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_3c7c7133
Bytes: 3
has

305:24-305:28
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_3c7c7133
UUID: 907ac6a8_f4b5b82d
Bytes: 4
Done

307:5-307:9
Tue Apr 14 11:48:38 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_fc7da92e
Bytes: 3
has

307:5-307:9
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_fc7da92e
UUID: b07b4aac_b548a0ba
Bytes: 4
Done

File: runtime/mirror/art_method.cc

443:11-443:26
Tue Apr 14 07:24:16 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 506daeeb_9a74adf9
Bytes: 94
Please don't add dependencies on the compiler. Things were supposed to be cleanly separated...

470:41-470:64
Mon Apr 13 18:53:16 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f4e242_c29904c6
Bytes: 114
This ShadowFrame is not visited by GC so it may contain stale references if a GC occurred during the invoke above.

470:41-470:64
Tue Apr 14 07:00:55 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f4e242_c29904c6
UUID: 10597645_17b4de31
Bytes: 24
Good point! I'll fix it.

470:41-470:64
Tue Apr 14 07:24:16 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 10597645_17b4de31
UUID: 904c868c_074dd84d
Bytes: 106
You could generalize ShadowFrameUnderConstruction to be a general stack of "OutOfLineShadowFrames," maybe.

470:41-470:64
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 904c868c_074dd84d
UUID: 10597645_fe0b5ed6
Bytes: 25
Good idea. I'll try that.

File: runtime/thread.h

357:4-359:5
Mon Apr 13 18:53:16 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30ebda64_24867c62
Bytes: 41
Can you explain why you need this change?

357:4-359:5
Tue Apr 14 07:00:55 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30ebda64_24867c62
UUID: 904c868c_a764c4ca
Bytes: 676
It's possible there is nested case for QuickExceptionHandler. And each QuickExceptionHandler calls GetLongJumpContext() and then ReleaseLongJumpContext(), so the DCHECK(tlsPtr_.long_jump_context == nullptr); isn't accurate.

tlsPtr_.long_jump_context is basically a cached context to avoid allocating a context each time GetLongJumpContext() is called. Since we only cache one, we just delete the one that's not needed.

Guess I can also do it as:
    if (tlsPtr_.long_jump_context != nullptr) {
      // We already have one context for reuse.
      delete context;
    } else {
      // Save context for reuse.
      tlsPtr_.long_jump_context = context;
    }
Is this better?

357:4-359:5
Wed Apr 15 18:27:45 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 904c868c_a764c4ca
UUID: 506daeeb_43d2ac04
Bytes: 144
Actually we can't delete context since it's yet to be used for longjump. Still need to delete tlsPtr_.long_jump_context. I'll add some comments.

