Revision: a0cb64b2ba1ec20f0657e0a25995a1e103a888a9
Patch-set: 9
File: compiler/optimizing/graph_visualizer.cc

312:26-312:35
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_5f2a8b6c
Bytes: 239
Do you think we could drop the two subclasses? I think I'd prefer having a check whether we're outputing for c1, or whether we're outputing pretty print. This would avoid the ugly std::unique_ptr we have to do when creating the visualizer.

File: compiler/optimizing/graph_visualizer.h

49:7-49:13
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_3f12274e
Bytes: 72
In general, we avoid using stl in the opt compiler. Can that be a char*?

67:2-67:9
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_3ea309b5
Bytes: 15
Remove virtual.

67:81-67:86
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_a0205a8c
Bytes: 12
add OVERRIDE

72:18-72:19
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_df169b40
Bytes: 24
DISALLOW_COPY_AND_ASSIGN

84:81-84:86
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_ff135f4d
Bytes: 8
OVERRIDE

84:2-84:9
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_602a526d
Bytes: 14
Remove virtual

85:0-85:2
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_c01d5e5b
Bytes: 24
DISALLOW_COPY_AND_ASSIGN

File: compiler/optimizing/optimizing_compiler.cc

213:14-213:26
Mon Dec 08 09:27:16 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_9f20138d
Bytes: 230
Not a big fan of this. At this level, we shouldn't care about internal details of the visualizer. I feel the code below, complexifies more than helps.

If you need to know names of previous pass, you can keep it in the visualizer.

File: compiler/optimizing/test/ConstantFolding.java

24:21-24:36
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_40294e72
Bytes: 13
Why the $001?

31:5-31:10
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_1f24039b
Bytes: 140
Personal opinion, but I find it more logical to move the checking code above the method. But I won't mind if you think it's better this way.

39:27-39:33
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_7e08b11d
Bytes: 52
What is that for? The Const42 above did not need it.

66:18-66:24
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_e03d02b2
Bytes: 185
Do you need to specify those here (Const1 and Const2). The fact that they are still in the graph are not relevant for what you're checking: you just want to know if you are returning 3.

68:18-68:21
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_3f29c773
Bytes: 30
Why is that not called Const3?

File: tools/checker.py

18:0-18:1
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_003b46bd
Bytes: 59
I think the (unsaid rule) for comments is below 80 columns.

52:2-52:6
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_fe13614d
Bytes: 44
Are those fields? Why are they capital case?

55:2-55:9
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_a037facd
Bytes: 65
Why do you pre-define fields here but not in other classes below?

126:4-126:8
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_5fd12b12
Bytes: 319
General nit (it applies for the methods below): thanks for the comment, but it will also help to have them close to where the code is. For example, when reading the code below, what do all the 'if/elif' correspond to?

So this top-level comment should be divided into a good mix of top-level comment, and inline comment

158:40-158:43
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_9f37b3ce
Bytes: 22
What's an environment?

172:46-172:53
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_1e0ded2c
Bytes: 51
Expand the comment by saying where it will find it.

184:12-184:16
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_bf34f7c9
Bytes: 50
Why are you making a copy and not in-place update?

229:36-229:39
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_7fd66f0d
Bytes: 66
nit: avoid abbreviations, don't assume you readers must know them.

275:2-275:5
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_be1dd95b
Bytes: 42
Please make the following a helper method.

File: tools/checker_test.py

17:42-17:50
Mon Dec 08 09:52:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_1fdba334
Bytes: 8
features

