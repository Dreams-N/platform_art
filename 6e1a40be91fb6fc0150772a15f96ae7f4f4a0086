Revision: 6e1a40be91fb6fc0150772a15f96ae7f4f4a0086
Patch-set: 7
File: compiler/optimizing/induction_var_analysis.cc

209:4-209:45
Thu Sep 03 11:52:29 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2461e61f_53c22490
Bytes: 90
Humâ€¦ If this continues to grow, we should think about introducing a visitor for real. :)

209:4-209:45
Thu Sep 03 16:17:00 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2461e61f_53c22490
UUID: 6492fe15_9cec9ccb
Bytes: 168
You are right, I knew you would say that (I tried to avoid it by adding one at the time but you are too smart for that).

If this grows more, we make it a vistor, okay?

378:38-378:62
Thu Sep 03 11:52:29 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 247566b9_f6edbef2
Bytes: 129
I agree with Igor here; I think `value` should be masked with `kMaxIntShiftValue` and the range checking test on `value` removed.

378:38-378:62
Thu Sep 03 16:17:00 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 247566b9_f6edbef2
UUID: 64159e82_e84ecb58
Bytes: 408
Well, please note that I don't do the 31 case (since that would yield a negative multiplier constant; although semantically correct in wrap-around arithmetic, it would confuse the induction a bit).

How about this compromise: we perform the masking in the instructions simplifier on constants. That way, there is a central place with this knowledge, and all later phases don't have to jump through the hoops?

