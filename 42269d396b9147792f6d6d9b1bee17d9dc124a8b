Revision: 42269d396b9147792f6d6d9b1bee17d9dc124a8b
Patch-set: 1
File: runtime/art_method.h

139:51-139:56
Thu Oct 15 23:35:01 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39611e20_b9827742
Bytes: 5
throw

139:51-139:56
Fri Oct 16 23:19:20 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 39611e20_b9827742
UUID: d90802ae_4e6da77e
Bytes: 4
Done

145
Thu Oct 15 23:35:01 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1959ba73_e391e04b
Bytes: 99
That should probably go into "SetDefaultConflict" or "SetAccessFlags" or into "kAccDefaultConflict"

145
Fri Oct 16 23:19:20 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1959ba73_e391e04b
UUID: b9f26ee4_b543480a
Bytes: 4
Done

146
Thu Oct 15 23:35:01 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9550e3b_a0d240df
Bytes: 55
Summarizing what a default conflict here would be good?

146
Fri Oct 16 23:19:20 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9550e3b_a0d240df
UUID: 59e3321f_55e2de88
Bytes: 4
Done

147
Thu Oct 15 23:35:01 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9b786e1_79b00717
Bytes: 33
nit: don't need the outer-most ()

147
Fri Oct 16 23:19:20 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f9b786e1_79b00717
UUID: b9f26ee4_d54ecc33
Bytes: 4
Done

149:47-149:48
Thu Oct 15 23:35:01 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9b786e1_39a68fe8
Bytes: 14
nit: missing -

149:47-149:48
Fri Oct 16 23:19:20 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f9b786e1_39a68fe8
UUID: 39de7e5b_b168f8ab
Bytes: 4
Done

205:16-205:17
Fri Oct 09 23:12:43 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8538d9b1_1c84e1d2
Bytes: 1
c

205:16-205:17
Mon Oct 12 21:41:30 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8538d9b1_1c84e1d2
UUID: 0536a9c7_dd696bbc
Bytes: 4
Done

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

648:23-648:24
Fri Oct 09 23:12:43 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a526bd9a_75ab32c7
Bytes: 1
c

648:23-648:24
Mon Oct 12 21:41:30 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a526bd9a_75ab32c7
UUID: 0536a9c7_fd6e2fc1
Bytes: 4
Done

File: runtime/interpreter/interpreter_common.h

127:22-127:63
Fri Oct 09 23:15:21 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eaba42ed_fe1659ce
Bytes: 154
This is bad. The original test could be inlined, making the branch simple and possibly easier to predict, this can't.

Why not (!Invokable()) { Throw... ?

127:22-127:63
Mon Oct 12 21:41:30 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eaba42ed_fe1659ce
UUID: e55355fb_ca7e07a2
Bytes: 4
Done

