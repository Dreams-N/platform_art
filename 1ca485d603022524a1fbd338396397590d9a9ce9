Revision: 1ca485d603022524a1fbd338396397590d9a9ce9
Patch-set: 1
File: runtime/profiler.cc

66:11-66:13
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff5d74d3_46a4872c
Bytes: 47
prefer dex_pc as pc can have different meanings

286
Tue Jun 10 16:42:20 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1fbc0831_f26be671
Bytes: 56
doesn't linter complain about having an empty line here?

292:2-300:3
Tue Jun 10 16:42:20 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1fbc0831_12630a99
Bytes: 150
There's a similar code in Runtime::Start() for the method case. I'd prefer to have the file creation in the same place. Could you bring that one here?

376:88-376:90
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bffcdced_03060db5
Bytes: 8
and here

376:71-376:77
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f696874_d0990d65
Bytes: 140
we should be trying to avoid holding references into the Java heap, they move and break. Think about using the safe MethodReference instead.

376:71-376:77
Tue Jun 10 21:18:13 2014 +0000
Author: Wei Jin <1047393@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f696874_d0990d65
UUID: bf15bcf5_1739365e
Bytes: 242
we probably need to redesign the whole data structure that stores profile data if we don't want to use method pointers. In the current implementation, the hash function and the maps store the profile data heavily relies on the method pointer.

376:71-376:77
Wed Jun 11 21:31:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf15bcf5_1739365e
UUID: 1f8a489d_216a45f7
Bytes: 386
Agreed. This code is broken as methods may move. For example a dynamically allocated Proxy class can allocate methods in the Java heap at any time, and we can compact these. This will break the key and sorting of the map.
I agree this change isn't adding to the problems, my original comment was to add a comment to the profile_table_ explaining that its broken and should be rewritten.

376:71-376:77
Thu Jun 12 09:52:04 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f8a489d_216a45f7
UUID: 1fd5e878_cd427d21
Bytes: 56
Thanks Ian, I was not aware of this. Created b/15574371.

410:37-410:55
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff5d74d3_a6645b2a
Bytes: 113
signature has a precise meaning, you are sampling methods here not the parameters to them, prefer kProfilerMethod

412:44-412:58
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bffcdced_631271e8
Bytes: 30
prefer kProfilerMethodAndDexPc

465:72-465:74
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f696874_b094992c
Bytes: 8
and here

466:2-466:32
Tue Jun 10 16:42:20 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1fbc0831_d2b342d6
Bytes: 133
I know that you probably took this one from ProfileSampleResults::Put() but could you use  "MutexLock mu(Thread::Current(), lock_);"?

483:37-483:54
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bffcdced_031d6df7
Bytes: 17
std::ostream& os,

544:9-544:91
Tue Jun 10 16:42:20 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3fb70c4e_53c0f60c
Bytes: 125
A bit of waste repeating the method name for every PC but I guess we won't have so many PCs in practice so this should be ok.

File: runtime/profiler.h

74:2-75:24
Tue Jun 10 15:13:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f696874_707f0134
Bytes: 27
ugh, TODO remove this turd.

