Revision: 8cf29238a0e95de08855d6ac5573e2583b6e2c74
Patch-set: 4
File: compiler/optimizing/induction_var_analysis.cc

50:34-50:36
Tue Oct 06 20:46:58 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0435d80_1edb8dd8
Bytes: 211
just curious for my own understanding of this change

the [] has slightly different semantics than at()

can't you just add a check to the at operator to make everything checked (and at also throws out_of_range)

50:34-50:36
Wed Oct 07 10:00:15 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0435d80_1edb8dd8
UUID: 90ec99cf_6d17958c
Bytes: 178
We don't want to throw or catch C++ exceptions, ever. So at() was using an unsupported way of asserting that the index is correct. With this change we DCHECK() in the operator[].

50:34-50:36
Wed Oct 07 18:29:30 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90ec99cf_6d17958c
UUID: 704d65ae_30783086
Bytes: 299
I guess my question was why you don't also "intercept" the at() operator in checked vector and add the DCHECK before issuing the base implementation. That way future clients that inadvertently use at() will still get your desired behavior.

Again, just curious, the change here obviously looks good.

50:34-50:36
Wed Oct 07 18:36:26 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 704d65ae_30783086
UUID: 506b0131_e37d3272
Bytes: 158
People familiar with at() would actually expect it to throw out_of_range. To avoid misinterpretation of the code, I decided to remove at() from the interface.

50:34-50:36
Wed Oct 07 19:30:39 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 506b0131_e37d3272
UUID: d03c51f4_3377a062
Bytes: 123
Fair enough. Perhaps a good idea to add this rationale as a comment to the class. Other than than, +1 for induction change.

