Revision: 8cf29238a0e95de08855d6ac5573e2583b6e2c74
Patch-set: 4
File: compiler/dex/quick/codegen_util.cc

19:0-19:19
Thu Oct 08 09:49:47 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f00235ba_183205dd
Bytes: 15
Is this needed?

19:0-19:19
Thu Oct 08 10:02:49 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f00235ba_183205dd
UUID: b06c3d16_b6172811
Bytes: 212
It seems to be commonly indirectly included. However, for flounder it isn't and that's how I found the invalid &references_buffer[0] in the generic non-litte-endian branch which I previously assumed to be unused.

19:0-19:19
Thu Oct 08 18:10:33 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b06c3d16_b6172811
UUID: 30fe8d70_72c49895
Bytes: 78
Mac doesn't provide endian.h, https://android-review.googlesource.com/175052 .

File: compiler/optimizing/bounds_check_elimination.cc

800:41-800:59
Thu Oct 08 09:49:47 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 459c212a_7bfc3fa2
Bytes: 74
You can actually replace this with IfTrueSuccessor(). It's safer anyway...

800:41-800:59
Thu Oct 08 10:02:49 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 459c212a_7bfc3fa2
UUID: 70fba586_6c283b24
Bytes: 67
You mean if_block->GetLastInstruction()->AsIf()->IfTrueSuccessor()?

800:41-800:59
Thu Oct 08 14:13:30 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70fba586_6c283b24
UUID: 70fba586_0fab69b2
Bytes: 44
Ah, forgot it's on the HIf. Never mind then.

801:41-801:54
Thu Oct 08 09:49:47 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70700519_84856699
Bytes: 5
ditto

File: compiler/optimizing/induction_var_analysis.cc

50:34-50:36
Tue Oct 06 20:46:58 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0435d80_1edb8dd8
Bytes: 211
just curious for my own understanding of this change

the [] has slightly different semantics than at()

can't you just add a check to the at operator to make everything checked (and at also throws out_of_range)

50:34-50:36
Wed Oct 07 10:00:15 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0435d80_1edb8dd8
UUID: 90ec99cf_6d17958c
Bytes: 178
We don't want to throw or catch C++ exceptions, ever. So at() was using an unsupported way of asserting that the index is correct. With this change we DCHECK() in the operator[].

50:34-50:36
Wed Oct 07 18:29:30 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90ec99cf_6d17958c
UUID: 704d65ae_30783086
Bytes: 299
I guess my question was why you don't also "intercept" the at() operator in checked vector and add the DCHECK before issuing the base implementation. That way future clients that inadvertently use at() will still get your desired behavior.

Again, just curious, the change here obviously looks good.

50:34-50:36
Wed Oct 07 18:36:26 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 704d65ae_30783086
UUID: 506b0131_e37d3272
Bytes: 158
People familiar with at() would actually expect it to throw out_of_range. To avoid misinterpretation of the code, I decided to remove at() from the interface.

50:34-50:36
Wed Oct 07 19:30:39 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 506b0131_e37d3272
UUID: d03c51f4_3377a062
Bytes: 123
Fair enough. Perhaps a good idea to add this rationale as a comment to the class. Other than than, +1 for induction change.

50:34-50:36
Thu Oct 08 10:07:36 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d03c51f4_3377a062
UUID: 70700519_846e467d
Bytes: 4
Done

