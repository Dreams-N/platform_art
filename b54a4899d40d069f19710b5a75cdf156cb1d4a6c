Revision: b54a4899d40d069f19710b5a75cdf156cb1d4a6c
Patch-set: 1
File: compiler/compiled_method.h

97:3-97:28
Mon Mar 09 17:09:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37e02c3c_c2d38288
Bytes: 7
Period.

97:3-97:28
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37e02c3c_c2d38288
UUID: 1c9b4d8e_81137a0a
Bytes: 4
Done

99:29-99:57
Mon Mar 09 17:09:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7f33c1a_9eac3da2
Bytes: 80
We mostly prefer a new line. Possibly even braces. Otherwise consider a ternary.

99:29-99:57
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7f33c1a_9eac3da2
UUID: 5cb06509_1b8d9bad
Bytes: 4
Done

122:2-122:18
Mon Mar 09 17:09:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37e02c3c_c2fc22f6
Bytes: 28
Side-effect and self-return?

122:2-122:18
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37e02c3c_c2fc22f6
UUID: 1c9d0d70_51ab34db
Bytes: 169
Well, this method is odd but this is what was here before.  I just renamed it.  In fact, I believe the method is redundant since the vector is populated in sorted order.

123:4-123:38
Mon Mar 09 17:09:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37e02c3c_a2011e70
Bytes: 7
Period.

123:4-123:38
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37e02c3c_a2011e70
UUID: 1c9b4d8e_617ab63c
Bytes: 4
Done

135:7-135:53
Mon Mar 09 17:09:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37e02c3c_e2fb26f8
Bytes: 7
Period.

135:7-135:53
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37e02c3c_e2fb26f8
UUID: 5cb06509_5b3d6340
Bytes: 4
Done

349:85-349:89
Mon Mar 09 17:09:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 37e02c3c_22eeae35
Bytes: 15
Period, offset.

349:85-349:89
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37e02c3c_22eeae35
UUID: 1c9d0d70_71b03843
Bytes: 4
Done

File: compiler/dex/quick/lazy_debug_frame_opcode_writer.h

26:70-26:77
Mon Mar 09 16:48:02 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 777f0422_4c6effff
Bytes: 7
offsets

26:70-26:77
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 777f0422_4c6effff
UUID: 5cb06509_dbdbb39d
Bytes: 4
Done

File: compiler/dex/quick/mir_to_lir.h

30:0-30:43
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 577a0034_2b5b590b
Bytes: 7
Sort...

30:0-30:43
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 577a0034_2b5b590b
UUID: 1c9b4d8e_e15486a6
Bytes: 4
Done

File: compiler/dwarf/debug_frame_opcode_writer.h

31:0-31:49
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_d12e0412
Bytes: 62
If there's no current subclass, ART style is to make it FINAL.

31:0-31:49
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_d12e0412
UUID: 1c9d0d70_91b4bc37
Bytes: 65
There is subclass in this case, but I marked the others as FINAL.

231:1-231:11
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 777f0422_6c82db00
Bytes: 83
If there's no current reason to make it protected, ART style is to make it private.

231:1-231:11
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 777f0422_6c82db00
UUID: 1c9d0d70_b1b1c046
Bytes: 114
The subclass accesses some of those members in this case, but I changed protected to private in some other places.

File: compiler/dwarf/debug_frame_writer.h

22:10-22:37
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_d1b7e46f
Bytes: 71
This is a rather weird dependence. Can you decouple it a different way?

22:10-22:37
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_d1b7e46f
UUID: 1c9d0d70_d1be4415
Bytes: 663
I do not find it that weird.  The opcodes are part of .debug_frame, so it seems reasonable that main writer for .debug_frame would reference them.

In particular the class DebugFrameOpCodeWriter is referenced in this file. (although it is just for the helper method)

More importantly, the code/data factors which were used to generate the opcodes also need to be written in the header.  I would like to have one truth, which means that one file has to include the other or there has to be common external definition (which gets messy if the factors can be chosen at run-time.  Which is the case for .debug_line)  So I think that the current solution is the best.

28:0-28:43
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_f133087b
Bytes: 6
FINAL.

28:0-28:43
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_f133087b
UUID: 5cb06509_9be52b5f
Bytes: 4
Done

85:1-85:11
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 577a0034_6b3ac19d
Bytes: 8
Private.

85:1-85:11
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 577a0034_6b3ac19d
UUID: 1c9d0d70_f1bb4822
Bytes: 4
Done

File: compiler/dwarf/debug_line_opcode_writer.h

31:0-31:48
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 777f0422_ecfa4b8f
Bytes: 6
FINAL.

31:0-31:48
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 777f0422_ecfa4b8f
UUID: 1c9b4d8e_c1498210
Bytes: 4
Done

112:44-112:69
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 577a0034_0bec5d92
Bytes: 25
Comments end with period.

112:44-112:69
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 577a0034_0bec5d92
UUID: 1c9b4d8e_a14e7e14
Bytes: 4
Done

214:0-214:11
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_5143f4cb
Bytes: 8
Private.

214:0-214:11
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_5143f4cb
UUID: 1c9b4d8e_81649a98
Bytes: 4
Done

File: compiler/dwarf/debug_line_writer.h

27:3-27:47
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 577a0034_4be265a5
Bytes: 25
Comments end with period.

27:3-27:47
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 577a0034_4be265a5
UUID: 5cb06509_7bcb7fce
Bytes: 4
Done

28:0-28:42
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_113d6c41
Bytes: 6
Final.

28:0-28:42
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_113d6c41
UUID: 1c9b4d8e_61619686
Bytes: 4
Done

43:41-43:47
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 777f0422_0c147741
Bytes: 5
Typo.

43:41-43:47
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 777f0422_0c147741
UUID: 1c9b4d8e_415e92c2
Bytes: 4
Done

47:24-47:48
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 577a0034_8bd7edc2
Bytes: 25
Comments end with period.

47:24-47:48
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 577a0034_8bd7edc2
UUID: 1c9b4d8e_215b8ed2
Bytes: 4
Done

60:22-60:56
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_d1d36488
Bytes: 25
Comments end with period.

60:22-60:56
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_d1d36488
UUID: 1c9d0d70_318dd084
Bytes: 4
Done

67:21-67:41
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 577a0034_abdc29e5
Bytes: 25
Comments end with period.

67:21-67:41
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 577a0034_abdc29e5
UUID: 5cb06509_5bc8c3cf
Bytes: 4
Done

File: compiler/elf_writer_quick.cc

167:4-167:12
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_b1e26053
Bytes: 110
Remove. That allows to compiler-check that all enum cases are handled. Put a LOG(FATAL) and UNREACHABLE below.

167:4-167:12
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_b1e26053
UUID: 5cb06509_1bd23b7c
Bytes: 4
Done

File: runtime/elf_file.cc

28:9-28:33
Mon Mar 09 15:54:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1785e858_910f1cb0
Bytes: 155
No. The runtime should not depend on the compiler. Crap like the JIT are a special case, but if you need this here, then the enum needs to go into runtime.

28:9-28:33
Tue Mar 10 23:11:43 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1785e858_910f1cb0
UUID: 1c9b4d8e_e1bfe644
Bytes: 4
Done

