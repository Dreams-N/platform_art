Revision: 759acb32530c27d8a2247823085aa02e488f539c
Patch-set: 5
File: compiler/optimizing/licm_test.cc

109:20-109:38
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d55b5e6b_626e6cc5
Bytes: 102
I am personally okay with this layout, but I don't we have the one per line convention when broken up?

109:20-109:38
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d55b5e6b_626e6cc5
UUID: 105c2963_fcb985b6
Bytes: 18
Let me do it then.

File: compiler/optimizing/load_store_elimination.cc

26:39-26:62
Fri Oct 02 20:04:21 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 953c86f3_28a44a70
Bytes: 65
nit: either mention what the *info* contains or drop the comment.

26:39-26:62
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953c86f3_28a44a70
UUID: 704d65ae_7ff60b05
Bytes: 45
Added some comments about what info contains.

30:35-30:36
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d55b5e6b_2208f4f3
Bytes: 31
this seems to fit on same line.

30:35-30:36
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d55b5e6b_2208f4f3
UUID: 504861a0_7ea3ad21
Bytes: 4
Done

31:24-31:25
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_4686e6e4
Bytes: 56
why don't you put these in the initializer list as well?

31:24-31:25
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5398a03_4686e6e4
UUID: 504861a0_becd35b8
Bytes: 101
I prefer initializing it in the constructor body with more complicated logic than splitting the code.

38:4-38:7
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_69832193
Bytes: 144
Why don't you document the code a bit more, especially loops typically need explanation.

// Visit all uses to determine if this reference .....

38:4-38:7
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15a33681_69832193
UUID: b0435d80_01b16c36
Bytes: 4
Done

44:16-44:32
Fri Oct 02 20:04:21 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_e7444d19
Bytes: 21
add unresolved fields

44:16-44:32
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1548969f_e7444d19
UUID: 704d65ae_7f6bab20
Bytes: 4
Done

72:24-72:30
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_e6a0da5d
Bytes: 81
First document what function means, then list possible implications like this one

72:24-72:30
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5398a03_e6a0da5d
UUID: 105c2963_5c67d1dc
Bytes: 4
Done

112:47-112:48
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 354d9aaf_62ab1274
Bytes: 13
class' (no s)

112:47-112:48
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 354d9aaf_62ab1274
UUID: 504861a0_deada1d8
Bytes: 4
Done

130:59-130:66
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_696c818d
Bytes: 152
typo: unknown

Is this the "bottom" value in a lattice of heap information? If so, perhaps that term is a bit more common than the very generic unknown?

130:59-130:66
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15a33681_696c818d
UUID: 90673931_3b4dbf32
Bytes: 209
Fixed the typo.
I didn't specifically follow a lattice. Merging two different values can set it back to unknown value, or values can be killed due to aliasing. It seems to me clearer to understand it this way.

149
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 354d9aaf_e296023e
Bytes: 86
DCHECK(ref != nullptr) on entry perhaps
(since this is a general utility in this file)

149
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 354d9aaf_e296023e
UUID: 90673931_1b5283d4
Bytes: 4
Done

165:46-165:47
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_2659222b
Bytes: 30
9 -> descriptive constant name

165:46-165:47
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5398a03_2659222b
UUID: d03c51f4_854c66ad
Bytes: 4
Done

179:17-179:36
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5586271_a32d286f
Bytes: 209
this method makes me wonder if you should not choose something different for ref_info_array_ (hash table or so). Since you restrict the # anyway, having a slightly larger size for faster lookup may be worth it

179:17-179:36
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5586271_a32d286f
UUID: d00a915c_756da0c3
Bytes: 341
The order of the references also matters since I use it to test for pre-existence. So a linear array is helpful. Since I limit the size of # of heap locations and the array size is even smaller, so some linear search seems fine to me (average iterations should be even less than half of the total array size since it starts from 0 elements).

238:18-238:19
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d55b5e6b_c29138da
Bytes: 14
move decl down

238:18-238:19
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d55b5e6b_c29138da
UUID: 5061411e_b908b7a6
Bytes: 4
Done

254:50-254:57
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_e9a5d116
Bytes: 29
already and pre- is redundant

254:50-254:57
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15a33681_e9a5d116
UUID: 504861a0_a1dfda36
Bytes: 67
Changed it to:
which already exists at the point of the allocation,

261:19-261:21
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_1e8a6d0d
Bytes: 38
return .... >=
to make it more concise

261:19-261:21
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5526a4f_1e8a6d0d
UUID: d03c51f4_a53b6a06
Bytes: 4
Done

271:4-271:5
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_84d3ccf2
Bytes: 23
else if
else if
else if

271:4-271:5
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1548969f_84d3ccf2
UUID: 105c2963_bc854d99
Bytes: 4
Done

288:93-288:94
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_6917a1e1
Bytes: 13
period at end

288:93-288:94
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15a33681_6917a1e1
UUID: b0435d80_04605a0f
Bytes: 4
Done

324:33-324:35
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_070fbc69
Bytes: 66
I would phrase this the other way:

Different indices do not alias

324:33-324:35
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75439281_070fbc69
UUID: 30592d74_c0df726f
Bytes: 4
Done

336:4-336:7
Fri Oct 02 20:04:21 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9555663b_b9ba72ed
Bytes: 41
introduce a new local (orginal_ref maybe)

336:4-336:7
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9555663b_b9ba72ed
UUID: 5061411e_d9adb3d8
Bytes: 4
Done

365:8-365:31
Wed Sep 30 23:50:49 2015 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_21d8f45d
Bytes: 194
I don't think there's actually a reason to bail on volatile stores, if you just bail on loads.  It's perfectly OK to reuse a value that was stored or loaded before an intervening volatile store.

365:8-365:31
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5526a4f_21d8f45d
UUID: d03c51f4_c56caef8
Bytes: 110
Thanks for the comments. I'll do the volatile/monitor ops in a separate CL so it's easier to review that part.

432:4-432:28
Wed Sep 30 23:50:49 2015 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_4f3d5da3
Bytes: 435
Ditto here.  Monitor entry is a problem.  Reusing results from before monitor entry amounts to moving operations out of the critical section, which is bad.  Reusing results from before monitor exit amounts to moving them in, which is OK.

This assumes you always eliminate the later load or store.
It also assumes you don't optimize volatile operations themselves.

And it ignores the Java memory model bugs that we customarily ignore.

754:24-754:36
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9555663b_fd817f35
Bytes: 47
here and all other visit method, add:

OVERRIDE

754:24-754:36
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9555663b_fd817f35
UUID: 704d65ae_829a9e68
Bytes: 22
Good suggestion. Done.

809:17-809:42
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9555663b_ddd0fb5b
Bytes: 160
this is a rather important constant

perhaps move it in the class, or to top of file, and document what the restriction does, and why this value has been chosen

809:17-809:42
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9555663b_ddd0fb5b
UUID: 105c2963_c285b898
Bytes: 214
Moved to the top of file. And commented:
// A cap for the number of heap locations to prevent pathological time/space consumption.
// The number of heap locations for most of the methods stays below this threshold.

814:54-814:58
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5586271_c31bfc36
Bytes: 127
can't you return here as soon as HasVolatile or HasMonitorOps is true to save wasted work in case you are going to bail anyway?

814:54-814:58
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5586271_c31bfc36
UUID: b0435d80_d24bd440
Bytes: 141
I tried to look for a way to do it before. But didn't find a way. If VisitBasicBlock()/VisitInstruction() return a boolean, it's more doable.

828:31-828:32
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_84c0ea8d
Bytes: 211
For the future, would it be possible to cap the number of load/stores that are considered, rather than bailing out completely (i.e. the first 100 fields are analyzed, all others are assumed to be unoptimizable)?

828:31-828:32
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75439281_84c0ea8d
UUID: d00a915c_fe668d14
Bytes: 270
The aliasing has to be considered among all references. The cap I picked covers most of the methods (something like 97% if I remember correctly). There might be some other optimizations we can try later for the many-location cases, such as group non-singletons together.

File: compiler/optimizing/load_store_elimination.h

34
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d55b5e6b_623caca5
Bytes: 135
typo in name Elimination (not Eliminiation)

also, isn't the convention to keep this field private, since it is passed to super anyway?

34
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d55b5e6b_623caca5
UUID: 105c2963_2260f48c
Bytes: 110
Fixed the typo.
I checked a couple of other passes and this constant is public, so I'll just keep it that way.

File: test/530-checker-lse/src/Main.java

539:29-539:31
Wed Sep 30 21:51:04 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 354d9aaf_622032d8
Bytes: 78
I would recommend

 = { 0.8f } ;

instead of the new/assignment construct (2x)

539:29-539:31
Wed Oct 07 19:34:05 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 354d9aaf_622032d8
UUID: 105c2963_c26e587e
Bytes: 22
Good suggestion. Done.

