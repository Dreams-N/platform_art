Revision: 249b4d1a9132338aeb28fcbfa3d31de3b188d9f2
Patch-set: 1
File: /COMMIT_MSG

10:29-10:68
Thu May 12 19:02:00 2016 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f247b43c_6721c9ee
Bytes: 128
This seems like a workaround to me. Is it a normal exit that causes DCHECK failures? What is the root cause for DCHECK failures?

10:29-10:68
Thu May 12 20:07:39 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f247b43c_6721c9ee
UUID: f247b43c_a2a8ff8a
Bytes: 357
Yes, a normal exit causes a DCHECK failure. The DCHECK asserts that a mutex has no owner (being unlocked) in ~Mutex(). An atexit handler calls the destructor for the global Mutexes if we use the normal exit. But a program calls exit via System.exit() in an arbitrary time. In an arbitrary time, it's possible that one of the mutexes may happen to be locked.

File: runtime/runtime_options.def

135
Thu May 12 06:57:41 2016 +0000
Author: Dimitry Ivanov <1041673@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f247b43c_7308af1f
Bytes: 24
Where is this code used?

134:0-135:75
Thu May 12 09:02:03 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b711ae44_dace856b
Bytes: 9
One line?

134:0-135:75
Thu May 12 17:29:48 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b711ae44_dace856b
UUID: f247b43c_e913d252
Bytes: 116
As it looks like the original format intends to align the beginning of the second parameters, I'll keep it that way.

135
Thu May 12 17:29:48 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f247b43c_7308af1f
UUID: f247b43c_e93cb2d2
Bytes: 75
In Runtime::Init(),

  exit_ = runtime_options.GetOrDefault(Opt::HookExit);

