Revision: c3ef798450bea01f247cd79edc6022f0bd09d10e
Patch-set: 6
File: compiler/optimizing/nodes.h

528:11-528:28
Wed Apr 13 18:44:48 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2bc632da_ebe00544
Bytes: 231
Scratch my comment on the lock errors. That was of course a result of requiring the lock here already. I have "optimized" the lock acquisition in CreateChecked() now that is possible, even though it was just for debug checks.

PTAL

File: compiler/optimizing/reference_type_propagation.cc

433:12-433:49
Wed Apr 13 19:03:32 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b732e96_b495c05e
Bytes: 100
CreateChecked(). We know this class and it should not be errornous, otherwise we're in big troubles.

433:12-433:49
Fri Apr 15 20:16:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b732e96_b495c05e
UUID: c85f5c26_edc86195
Bytes: 156
Ok. Done. I renamed CreateChecked back to Create and added "AndFixError" to my new method so that it is very clear where we are fixing errors and where not.

555:18-555:41
Wed Apr 13 19:03:32 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b5f1ef9_f89f317a
Bytes: 13
CreateChecked

555:18-555:41
Fri Apr 15 20:16:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b5f1ef9_f89f317a
UUID: c85f5c26_ad9b899b
Bytes: 4
Done

566:20-566:43
Wed Apr 13 19:03:32 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b79a672_56af14a7
Bytes: 13
CreateChecked

566:20-566:43
Fri Apr 15 20:16:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b79a672_56af14a7
UUID: c85f5c26_8d98c59f
Bytes: 4
Done

594:22-594:45
Wed Apr 13 19:03:32 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb6dfab4_b395d85e
Bytes: 72
at this point we now that class_rti can't be errornous so CreateChecked.

594:22-594:45
Fri Apr 15 20:16:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb6dfab4_b395d85e
UUID: c85f5c26_0d861543
Bytes: 4
Done

602:24-602:47
Wed Apr 13 19:03:32 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b547ee5_9090b46f
Bytes: 5
ditto

602:24-602:47
Fri Apr 15 20:16:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b547ee5_9090b46f
UUID: c85f5c26_ed7aa1f5
Bytes: 4
Done

717:40-717:58
Wed Apr 13 19:03:32 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6b62eac1_f79f407a
Bytes: 118
this cam never be errornous, right? unless the CommonSuperClass is going wrong and it shouldn't. So let's dcheck that?

717:40-717:58
Fri Apr 15 20:16:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6b62eac1_f79f407a
UUID: c85f5c26_ad74a909
Bytes: 4
Done

