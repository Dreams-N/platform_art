Revision: 7c29db5b11c1a320449329236bceb4ad46c4059d
Patch-set: 27
File: /COMMIT_MSG

0
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_c1fa463c
Bytes: 55
Please describe the high level changes (there are many)

0
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_c1fa463c
UUID: 30d59acf_66327424
Bytes: 4
Done

File: compiler/dex/mir_method_info.cc

89:8-90:25
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_c3156af0
Bytes: 136
You should move that to a dedicated method used by both Quick and Optimizing compilers. It's better to have this code in only one place.

89:8-90:25
Wed Apr 15 16:38:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_c3156af0
UUID: b0926a12_517b6474
Bytes: 39
And PrettyMethod() is pretty expensive.

89:8-90:25
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_517b6474
UUID: 30d59acf_2b86756b
Bytes: 4
Done

164:10-166:65
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_819afe44
Bytes: 63
Please comment why this is not supported by all configurations.

164:10-166:65
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_819afe44
UUID: 30d59acf_17863c6b
Bytes: 4
Done

File: compiler/dex/mir_optimization.cc

1669:27-1669:31
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_62325224
Bytes: 7
nullptr

1669:27-1669:31
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_62325224
UUID: 907ac6a8_e3141cc8
Bytes: 4
Done

1677:12-1677:88
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_219f6a37
Bytes: 118
Your test is slightly different than in compiler/dex/mir_method_info.cc. Having it in a separate method would be nice.

1677:12-1677:88
Wed Apr 15 16:38:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_219f6a37
UUID: 709c722a_24af78e5
Bytes: 56
Even without the signature, PrettyMethod() is expensive.

1694:29-1694:33
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_41a4f684
Bytes: 7
nullptr

1694:29-1694:33
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_41a4f684
UUID: 907ac6a8_63280c05
Bytes: 4
Done

1695:0-1701:68
Wed Apr 15 16:38:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_91efacb4
Bytes: 20
Why do we need this?

1695:0-1701:68
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_91efacb4
UUID: 907ac6a8_8f322621
Bytes: 37
Looks like we don't anymore. Removed.

1712:10-1712:122
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_01a6ee8b
Bytes: 9
Long line

1712:32-1712:47
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_a1b29ac2
Bytes: 36
DCHECK(verified_method != nullptr) ?

1712:10-1712:122
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_01a6ee8b
UUID: 907ac6a8_83ff68e2
Bytes: 4
Done

1712:32-1712:47
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_a1b29ac2
UUID: b07b4aac_0a0cc7ee
Bytes: 4
Done

1713:10-1713:107
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_e3350687
Bytes: 5
ditto

1713:10-1713:107
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_e3350687
UUID: 907ac6a8_23f45403
Bytes: 4
Done

1716:12-1716:30
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_033352a2
Bytes: 19
std::set<uint32_t>&

1716:12-1716:30
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_033352a2
UUID: b07b4aac_4aef1f83
Bytes: 4
Done

1717:12-1717:84
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_82375e11
Bytes: 134
Or you could use a C++11 range-based for loop

  for (uint32_t reg : reg_set) {
    ...
    move_mir->dalvikInsn.vA = reg;
    ...
  }

File: compiler/dex/quick/arm/call_arm.cc

652:6-653:148
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_02234ed4
Bytes: 10
Long lines

652:6-653:148
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_02234ed4
UUID: b07b4aac_0fb0596b
Bytes: 4
Done

File: compiler/dex/quick/arm64/call_arm64.cc

487:6-488:150
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_617c926f
Bytes: 10
Long lines

487:6-488:150
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_617c926f
UUID: b07b4aac_86ef6a82
Bytes: 4
Done

File: compiler/dex/quick/dex_file_method_inliner.cc

306:4-306:109
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_81819ed4
Bytes: 21
Long line (and below)

306:4-306:109
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_81819ed4
UUID: d080bec6_16b0716b
Bytes: 4
Done

File: compiler/dex/quick/dex_file_method_inliner.h

314:26-314:46
Wed Apr 15 16:38:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_65c9fc2b
Bytes: 22
Reuse kProtoCacheDefs.

314:26-314:46
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_65c9fc2b
UUID: 30d59acf_0bf131e0
Bytes: 85
I store them in a particular order and iterate over them. Mind if I keep it separate?

355:32-355:52
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_417b9674
Bytes: 75
Is it thread safe or should it be guarded by lock_ (like inline_methods_) ?

355:32-355:52
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_417b9674
UUID: d080bec6_565349bf
Bytes: 137
The method that populates it, FindStringInits, is guarded by lock_. There's nothing else that can modify it, so it should be thread safe.

355:32-355:52
Thu Apr 16 10:51:34 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d080bec6_565349bf
UUID: 709c722a_2f775152
Bytes: 131
The locking patters here are odd and should be cleaned up. But as long as they remain that way, this needs to be GUARDED_BY(lock_).

File: compiler/dex/quick/gen_invoke.cc

897:0-899:98
Wed Apr 15 16:38:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_c5e330a0
Bytes: 36
This is also subject to b/19918641 .

File: compiler/dex/quick/mips/call_mips.cc

436:6-437:145
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_018d8e03
Bytes: 10
Long lines

436:6-437:145
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_018d8e03
UUID: 907ac6a8_887c67e7
Bytes: 4
Done

File: compiler/dex/quick/x86/call_x86.cc

372:6-373:145
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_a1893af8
Bytes: 10
Long lines

372:6-373:145
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_a1893af8
UUID: 907ac6a8_a88a83b1
Bytes: 4
Done

File: compiler/dex/verified_method.h

117:40-117:63
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_037ef22a
Bytes: 24
Add a description please

117:40-117:63
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_037ef22a
UUID: d080bec6_dfb8d728
Bytes: 4
Done

File: compiler/optimizing/builder.cc

594:21-594:93
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_c186c6e5
Bytes: 85
Another String.<init> detection that should be in a separate function used everywhere

594:21-594:93
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_c186c6e5
UUID: 30d59acf_4b8bb972
Bytes: 4
Done

664:4-664:41
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_426cf605
Bytes: 44
const SafeMap<uint32_t, std::set<uint32_t>>&

664:4-664:41
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_426cf605
UUID: b07b4aac_24253c62
Bytes: 4
Done

File: runtime/class_linker_test.cc

397:5-397:104
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_c277a6ca
Bytes: 9
Long line

397:5-397:104
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_c277a6ca
UUID: d080bec6_5fd3678a
Bytes: 4
Done

File: runtime/interpreter/interpreter_common.cc

487:5-487:11
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_a3937ed3
Bytes: 177
I don't think the cost for non-String init call is too high. But we may want to introduce a special EntryPointFromInterpreter* function to deal with String.<init> in the future.

676:10-676:89
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_83abe2ff
Bytes: 178
I don't understand. You reach this point because

  method_to_string_init_map->find(method_ref) == method_to_string_init_map->end() (lines 673-674)

so how could have it changed?

676:10-676:89
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_83abe2ff
UUID: 907ac6a8_26de9808
Bytes: 313
Some of the threaded tests hit this, where multiple threads end up trying to verify the same method and put an entry into the map. I tried putting a lock around it, but it doesn't look like you can hold locks while calling the verifier. I'll replace it with overwrite for now, since the result should be the same.

677:35-677:38
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_c24ec696
Bytes: 180
Plus, SafeMap::Put checks you do not overwrite an element at the given key (DCHECK). So if you think you may need to update the element at "method_ref", then you must use Overwrite

677:35-677:38
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_c24ec696
UUID: 907ac6a8_a695c817
Bytes: 25
Changed to use Overwrite.

686:8-686:26
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_414dd64c
Bytes: 25
const std::set<uint32_t>&

686:8-686:26
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_414dd64c
UUID: 907ac6a8_a8c0432a
Bytes: 4
Done

File: runtime/mirror/string-inl.h

57:2-57:10
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_c32c8a44
Bytes: 10
Not needed

57:2-57:10
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_c32c8a44
UUID: 907ac6a8_28fbd38e
Bytes: 4
Done

74:2-74:16
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_e22502d9
Bytes: 20
const uint8_t* const

74:2-74:16
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_e22502d9
UUID: b07b4aac_a40e2c36
Bytes: 4
Done

81:2-81:10
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_636d7684
Bytes: 10
Not needed

81:2-81:10
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_636d7684
UUID: 907ac6a8_c80b3f25
Bytes: 4
Done

95:2-95:17
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_83720260
Bytes: 21
const uint16_t* const

95:2-95:17
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_83720260
UUID: 907ac6a8_6818eb76
Bytes: 4
Done

File: runtime/native/java_lang_String.cc

39:27-39:31
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_21d3ead9
Bytes: 7
nullptr

39:27-39:31
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 709c722a_21d3ead9
UUID: d080bec6_bfb95b59
Bytes: 4
Done

File: runtime/native/java_lang_reflect_Constructor.cc

64:2-66:3
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_e2b662ca
Bytes: 88
IIUC, we need this to route the invoke to the right method. It's worth adding a comment.

64:2-66:3
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_e2b662ca
UUID: b07b4aac_69778d03
Bytes: 4
Done

File: runtime/runtime.h

747:2-747:46
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_e3b2e675
Bytes: 100
I think you always allocate this map (in Runtime::Init) so why not just MethodRefToStringInitRegMap?

747:2-747:46
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0926a12_e3b2e675
UUID: d0299e86_8c4f7fc4
Bytes: 4
Done

File: test/004-JniTest/jni_test.cc

567:48-567:52
Wed Apr 15 09:17:43 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90a1e660_02026e0b
Bytes: 7
nullptr

567:48-567:52
Thu Apr 16 05:06:16 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_02026e0b
UUID: 907ac6a8_7d598be0
Bytes: 4
Done

