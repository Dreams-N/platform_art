Revision: 3de2b794a88bb51cf495a2e9dac6a718fe8f9576
Patch-set: 3
File: /COMMIT_MSG

7:22-7:37
Thu Jul 23 16:18:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d538656_5b66b71c
Bytes: 51
as Andreas mentioned, it's either correct or not :)

9:7-9:15
Thu Jul 23 16:18:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d335a20_047a1897
Bytes: 213
I don't see an immediate gain for this and we are more verbose. What's the actual benefit? equal instructions returned and HIntConstant before as well based on the previous implementation of the static evaluation?

File: compiler/optimizing/nodes.cc

1016:5-1016:66
Thu Jul 23 16:18:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d48f2a1_db3c934c
Bytes: 42
how about shift which can be "long << int"

File: compiler/optimizing/nodes.h

2052:2-2052:21
Thu Jul 23 16:18:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cd3e6aec_5dffdbda
Bytes: 4
why?

2063:11-2063:33
Thu Jul 23 16:18:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d335a20_c4983087
Bytes: 68
DCHECK, otherwise we get might get a sigsegv which is less readable.

2261:30-2261:42
Thu Jul 23 16:18:19 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d538656_9b67af15
Bytes: 24
why not HConstant  then?

