Revision: 914293941d54a609f2504c715b46f7f9854c7a8c
Patch-set: 2
File: /COMMIT_MSG

7:57-7:76
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0db87d3c_5050ec2f
Bytes: 56
StaticFieldGet. Line's too long: Instance/StaticFieldGet

7:57-7:76
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0db87d3c_5050ec2f
UUID: 0db87d3c_70d9b01b
Bytes: 4
Done

9:69-9:75
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2db1c157_3159f05e
Bytes: 21
75 characters, +below

9:69-9:75
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2db1c157_3159f05e
UUID: 2db1c157_f19da83c
Bytes: 4
Done

File: compiler/optimizing/builder.cc

826:0-828:45
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2db1c157_71ac189a
Bytes: 150
Nicolas, is there anything preventing us from just storing the ArtField pointer inside the instruction? We wouldn't have to copy most of its fields...

826:0-828:45
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2db1c157_71ac189a
UUID: edba4936_2fdfc903
Bytes: 393
One reason used to be that the use of handles is a hack in the reference type propagation, and you don't want that use to be everywhere.

ArtField not being a GC object anymore, we could do it, but then sometimes we cannot get hold of an ArtField at build time (because the field is unresolved). I know we're not handling this case today (we fallback to Quick), but we have to keep it in mind.

826:0-828:45
Fri May 22 09:27:23 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: edba4936_2fdfc903
UUID: edba4936_ef9dc13c
Bytes: 111
Well, if we do start handling that, we will have to set all these arguments to "not available" values anyway...

834:39-834:72
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2db1c157_919b7c71
Bytes: 20
One per line please.

834:39-834:72
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2db1c157_919b7c71
UUID: 2db1c157_d1a2247a
Bytes: 4
Done

File: compiler/optimizing/gvn_test.cc

45:35-45:36
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: edba4936_6fc0b12b
Bytes: 119
Maybe use some obviously invalid idx, like static_cast<uint32_t>(-1), so it definitely fails if it tries to resolve it.

45:35-45:36
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: edba4936_6fc0b12b
UUID: 2db1c157_f190084f
Bytes: 52
And please make it a named constant used everywhere.

45:35-45:36
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2db1c157_f190084f
UUID: edba4936_0f400513
Bytes: 4
Done

File: compiler/optimizing/nodes.h

3116:93-3116:104
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0db87d3c_70ac109a
Bytes: 9
long line

3116:93-3116:104
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0db87d3c_70ac109a
UUID: 2db1c157_f176488c
Bytes: 4
Done

3118:0-3118:30
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0db87d3c_909b7471
Bytes: 19
indentation is off.

3118:0-3118:30
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0db87d3c_909b7471
UUID: edba4936_8fccf53b
Bytes: 4
Done

3137:47-3137:56
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: edba4936_0fdc850b
Bytes: 19
one per line please

3137:47-3137:56
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: edba4936_0fdc850b
UUID: 2db1c157_d17b4472
Bytes: 4
Done

3177:0-3177:57
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: edba4936_6fd9d11b
Bytes: 19
one per line please

3177:0-3177:57
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: edba4936_6fd9d11b
UUID: edba4936_efd141d2
Bytes: 4
Done

3602:0-3602:55
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0db87d3c_f090004f
Bytes: 19
one per line please

3602:0-3602:55
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0db87d3c_f090004f
UUID: edba4936_cfd6fdc7
Bytes: 4
Done

File: compiler/optimizing/reference_type_propagation.cc

197:2-197:15
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: edba4936_0fb3e5db
Bytes: 161
When would this happen? Builder will hand over to Quick if a field cannot be resolved, so field_idx should always be valid and you could turn this into a DCHECK.

197:2-197:15
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: edba4936_0fb3e5db
UUID: 0db87d3c_50af4c5d
Bytes: 4
Done

197:2-197:15
Fri May 22 12:45:59 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0db87d3c_50af4c5d
UUID: edba4936_8f5995e3
Bytes: 99
Actually, it crashes since GetResolvedField sometimes cannot resolve the field. Leaving it for now.

202:0-205:3
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: edba4936_0f2ac577
Bytes: 61
This code is shared with UpdateReferenceTypeInfo, extract it?

202:0-205:3
Fri May 22 10:39:09 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: edba4936_0f2ac577
UUID: 0db87d3c_b07cb86e
Bytes: 4
Done

File: runtime/mirror/dex_cache-inl.h

52:0-52:76
Fri May 22 09:13:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: edba4936_4fd68ded
Bytes: 63
Please don't change this. Something looks wrong if you need to.

55:0-55:75
Fri May 22 09:01:34 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2db1c157_51a91488
Bytes: 64
Again, when would this happen? If it can, you need to test this.

55:0-55:75
Fri May 22 09:57:53 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2db1c157_51a91488
UUID: 0db87d3c_f012c054
Bytes: 1222
I don't know why, but it happens with this command line (executed within build-art-host). What's wrong with this boundaries check?

dex2oatd --runtime-arg -Xms64m --runtime-arg -Xmx64m --image-classes= --dex-file=out/host/common/obj/JAVA_LIBRARIES/core-libart-hostdex_intermediates/javalib.jar --dex-file=out/host/common/obj/JAVA_LIBRARIES/conscrypt-hostdex_intermediates/javalib.jar --dex-file=out/host/common/obj/JAVA_LIBRARIES/okhttp-hostdex_intermediates/javalib.jar --dex-file=out/host/common/obj/JAVA_LIBRARIES/bouncycastle-hostdex_intermediates/javalib.jar --dex-location=out/host/linux-x86/framework/core-libart-hostdex.jar --dex-location=out/host/linux-x86/framework/conscrypt-hostdex.jar --dex-location=out/host/linux-x86/framework/okhttp-hostdex.jar --dex-location=out/host/linux-x86/framework/bouncycastle-hostdex.jar --oat-file=out/host/linux-x86/framework/x86/core-optimizing-pic.oat --oat-location=out/host/linux-x86/framework/x86/core-optimizing-pic.oat --image=out/host/linux-x86/framework/x86/core-optimizing-pic.art --base=0x60000000 --instruction-set=x86 --instruction-set-features=default --host --android-root=out/host/linux-x86 --include-patch-information --compiler-backend=Optimizing --compile-pic

