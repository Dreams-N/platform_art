Revision: ba6596b6051c0d586cee10a85298a9ed860a0d96
Patch-set: 2
File: runtime/art_method-inl.h

241
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_440303eb
Bytes: 55
? this may be resolution methods, IMT conflict, etc....

375:0-375:60
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_640a7ffe
Bytes: 108
Same behavior for both sides, can we only do the IsProxyMethod check for debug builds to avoid the overhead?

478:2-491:3
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6da7ea7_232ec666
Bytes: 16
Why change this?

File: runtime/class_linker.cc

3256:2-3256:39
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b0e2f2a_ba0ced50
Bytes: 46
Is anything other then kJavaLangClass allowed?

3271:2-3271:3
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_4f953163
Bytes: 12
Not required

3271:2-3271:3
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_4f953163
UUID: bb3987d2_60a91c50
Bytes: 69
It scopes 'hash' to just 2 lines because it's not used anywhere else.

3289:33-3289:59
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb2e9f8f_0e5a8b31
Bytes: 52
GetOrCreateAllocatorForClassLoader is probably safer

File: runtime/common_runtime_test.cc

58:5-58:11
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 568ea242_d78636f8
Bytes: 1
?

58:5-58:11
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 568ea242_d78636f8
UUID: 568ea242_c27912d9
Bytes: 34
Thanks, sorry for leaving this in.

File: runtime/dex_file.cc

29:0-29:17
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_53abcedc
Bytes: 1
?

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

1008:33-1008:46
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_2a288771
Bytes: 77
Should this be first_arg_reg * sizeof(uint32_t) since vregs are 4 bytes each?

1008:33-1008:46
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_2a288771
UUID: 16c50ace_bf2640f7
Bytes: 125
shadow_frame_vregs is a uint32_t so when adding first_arg_reg to it, the underlying address advances by first_arg_reg*4 bytes

1010:38-1010:51
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_c4d893a7
Bytes: 8
And here

1017:40-1017:53
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_b257584f
Bytes: 8
And here

1017:40-1017:53
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_b257584f
UUID: 76d4867d_f959f541
Bytes: 69
Looks like 1014 should be uint32_t instead, thanks for catching this.

1019:45-1019:58
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_03fc5d98
Bytes: 8
And here

File: runtime/interpreter/interpreter_common.h

890:24-890:30
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d69a9277_389051c2
Bytes: 33
Why not just use the constructor?

890:24-890:30
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d69a9277_389051c2
UUID: d69a9277_fb8de3e4
Bytes: 81
That is using the constructor, it's pretty much the same thing as doing hs(self).

890:24-890:30
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d69a9277_fb8de3e4
UUID: d683721b_70710878
Bytes: 41
But this way requires the annoying NOLINT

911:10-911:38
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a49abb_56316498
Bytes: 36
Use CHECK instead of log fatal here?

917:10-917:39
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b686fe2b_8f9e59d4
Bytes: 8
And here

929:5-929:12
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a49abb_d64474fa
Bytes: 66
I thought the correct indentation here was 4, is 8 actually right?

929:5-929:12
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96a49abb_d64474fa
UUID: b69d1e72_171c3cf8
Bytes: 19
4 is probably right

930:6-930:40
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d683721b_edb4410f
Bytes: 22
AssertPendingException

File: runtime/lambda/box_class_table.cc

35:2-35:8
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d683721b_6d77711e
Bytes: 78
I think we prefer ATTRIBUTE_UNUSED. Also what do you mean by delete the class?

35:2-35:8
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d683721b_6d77711e
UUID: b69d1e72_970f4cb7
Bytes: 317
I left this boilerplate code just in case I need to call anything else manually to say that it was "now safe to delete the class" (i.e. to drop the reference)

I was initially envisioning it to hold weak reference to the classes, but since it's now storing strong references it probably never needs to worry about it.

86:9-86:13
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d683721b_d0bc74e1
Bytes: 13
That is safe.

106:4-106:15
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69d1e72_1770bce6
Bytes: 105
You don't need to manually free heap objects. Having the destructor be completely empty seems OK with me.

File: runtime/lambda/box_class_table.h

84:36-84:76
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6923665_91eafc99
Bytes: 76
You can just leave this uncommented, it works with NO_THREAD_SAFETY_ANALYSIS

101:22-101:24
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 568ea242_f79fb21c
Bytes: 8
2 spaces

110:19-110:54
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69d1e72_f72c18d6
Bytes: 19
Strange indentation

110:19-110:54
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b69d1e72_f72c18d6
UUID: b69d1e72_5716c4d7
Bytes: 109
Yeah I had them line up (across multiple fields) in another file that I copied/pasted this from. I'll fix it.

File: runtime/lambda/box_table.cc

117:8-117:29
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 36892e3b_536a5cf6
Bytes: 52
This means that class_loader may be a stale pointer.

117:8-117:29
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 36892e3b_536a5cf6
UUID: 36892e3b_93e84414
Bytes: 36
Ok, I'll move this to under line 127

292:26-292:31
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1698aa84_9b11376e
Bytes: 59
Doesn't this erase possibly invalidate the reference above?

292:26-292:31
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1698aa84_9b11376e
UUID: b6da7ea7_7708726f
Bytes: 42
Yeah not sure how that slipped in, thanks.

File: runtime/lambda/box_table.h

145:19-145:61
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69d1e72_3775c0d7
Bytes: 37
Is indenting the GUARDED_BY required?

File: runtime/lambda/shorty_field_type.h

316:3-318:2
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b686fe2b_0fc0a9a0
Bytes: 11
Indentation

File: runtime/mirror/class.h

369:27-369:45
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1698aa84_db581f81
Bytes: 34
What is the point of these parens?

File: runtime/mirror/class_loader.h

89:11-89:30
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_2afd2725
Bytes: 117
Is this safe? Can lambdas escape to other class loaders? In that case the lambda would to keep the class loader live.

89:11-89:30
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_2afd2725
UUID: 3b2597a9_f3584809
Bytes: 119
I suppose they could escape to other class loaders if the parent is shared.

This could probably use some more thought.

89:11-89:30
Thu Nov 12 23:31:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b2597a9_f3584809
UUID: 5b25eb9e_05593c0b
Bytes: 419
After some offline discussion, we have determined that this is sound and boxed lambdas will keep the classloader alive (since they are instances of classes belonging to the classloader).

On the other hand, unboxed lambdas need to get supported added to keep their classloader alive (through visiting Closure::GetTargetMethod()::GetDeclaringClass()) in a future CL when we add GC visitation support for lambda closures.

File: runtime/modifiers.h

53:66-53:67
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6923665_b1953801
Bytes: 12
Extra spaace

53:0-53:87
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_57ba96e3
Bytes: 80
Note that I use 0x00800000 in one of my CLs. We will need to be careful merging.

File: runtime/native/java_lang_reflect_Method.cc

82:97-82:109
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 568ea242_772742a4
Bytes: 18
Line too long now.

