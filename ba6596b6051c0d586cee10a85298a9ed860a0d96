Revision: ba6596b6051c0d586cee10a85298a9ed860a0d96
Patch-set: 2
File: runtime/art_method-inl.h

241
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_440303eb
Bytes: 55
? this may be resolution methods, IMT conflict, etc....

241
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 16c50ace_440303eb
UUID: db271bf3_8d948505
Bytes: 4
Done

375:0-375:60
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_640a7ffe
Bytes: 108
Same behavior for both sides, can we only do the IsProxyMethod check for debug builds to avoid the overhead?

375:0-375:60
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 16c50ace_640a7ffe
UUID: 9b2123e5_ab2fb561
Bytes: 4
Done

478:2-491:3
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6da7ea7_232ec666
Bytes: 16
Why change this?

478:2-491:3
Fri Nov 20 22:18:09 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6da7ea7_232ec666
UUID: 5b1b2bb8_09f36d5d
Bytes: 144
Looks like I only need to change line 451.

I originally thought I might need to have a different version for lambda proxies, but I suppose not.

478:2-491:3
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b1b2bb8_09f36d5d
UUID: 3bed97ca_10db8a10
Bytes: 4
Done

File: runtime/art_method.h

187:4-187:28
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db847bce_e457404e
Bytes: 27
What about runtime methods?

187:4-187:28
Fri Nov 20 22:18:09 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db847bce_e457404e
UUID: 1b153384_8778e8d3
Bytes: 195
Want me to remove these 2? They aren't used anywhere right now.

The thought was to replace most of the "IsProxy" calls with "HasDexMetadata" (or HasDexCodeItem), so I could also do that instead.

File: runtime/asm_support.h

55:0-55:15
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76d4867d_ac3566d5
Bytes: 20
Vertical whitespace.

55:0-55:15
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_ac3566d5
UUID: 3b167790_4881dfb2
Bytes: 4
Done

347:12-347:60
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_35300396
Bytes: 40
? If you want to keep it, put a note on.

347:12-347:60
Fri Nov 20 22:18:09 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb75bfb9_35300396
UUID: 3bed97ca_50fb52a1
Bytes: 142
It's one and the same. But closure_ is private (IIRC) so we can't access it directly.

What note do you want here, can you put it in verbatim?

347:12-347:60
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bed97ca_50fb52a1
UUID: 7b246ff3_aa6e8fd4
Bytes: 4
Done

File: runtime/class_linker.cc

3256:2-3256:39
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b0e2f2a_ba0ced50
Bytes: 46
Is anything other then kJavaLangClass allowed?

3271:2-3271:3
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_4f953163
Bytes: 12
Not required

3271:2-3271:3
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_4f953163
UUID: bb3987d2_60a91c50
Bytes: 69
It scopes 'hash' to just 2 lines because it's not used anywhere else.

3289:33-3289:59
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb2e9f8f_0e5a8b31
Bytes: 52
GetOrCreateAllocatorForClassLoader is probably safer

3289:33-3289:59
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb2e9f8f_0e5a8b31
UUID: 1b153384_c7130041
Bytes: 4
Done

3316:100-3316:102
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_26823db8
Bytes: 14
Line too long.

3316:100-3316:102
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_26823db8
UUID: 3bed97ca_90949a05
Bytes: 4
Done

File: runtime/class_linker.h

443:8-444:40
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_e83cbea5
Bytes: 33
Document why it's an array, then.

443:8-444:40
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_e83cbea5
UUID: 9b2123e5_6b5f7df3
Bytes: 4
Done

File: runtime/common_runtime_test.cc

58:5-58:11
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 568ea242_d78636f8
Bytes: 1
?

58:5-58:11
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 568ea242_d78636f8
UUID: 568ea242_c27912d9
Bytes: 34
Thanks, sorry for leaving this in.

File: runtime/dex_file.cc

29:0-29:17
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_53abcedc
Bytes: 1
?

29:0-29:17
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 16c50ace_53abcedc
UUID: 3b167790_c865cff1
Bytes: 4
Done

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

1008:33-1008:46
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_2a288771
Bytes: 77
Should this be first_arg_reg * sizeof(uint32_t) since vregs are 4 bytes each?

1008:33-1008:46
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_2a288771
UUID: 16c50ace_bf2640f7
Bytes: 125
shadow_frame_vregs is a uint32_t so when adding first_arg_reg to it, the underlying address advances by first_arg_reg*4 bytes

1010:38-1010:51
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16c50ace_c4d893a7
Bytes: 8
And here

1017:40-1017:53
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_b257584f
Bytes: 8
And here

1017:40-1017:53
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_b257584f
UUID: 76d4867d_f959f541
Bytes: 69
Looks like 1014 should be uint32_t instead, thanks for catching this.

1017:40-1017:53
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_f959f541
UUID: bb2a67bd_ec0c2352
Bytes: 4
Done

1019:45-1019:58
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_03fc5d98
Bytes: 8
And here

File: runtime/interpreter/interpreter_common.h

890:24-890:30
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d69a9277_389051c2
Bytes: 33
Why not just use the constructor?

890:24-890:30
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d69a9277_389051c2
UUID: d69a9277_fb8de3e4
Bytes: 81
That is using the constructor, it's pretty much the same thing as doing hs(self).

890:24-890:30
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d69a9277_fb8de3e4
UUID: d683721b_70710878
Bytes: 41
But this way requires the annoying NOLINT

911:10-911:38
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a49abb_56316498
Bytes: 36
Use CHECK instead of log fatal here?

917:10-917:39
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b686fe2b_8f9e59d4
Bytes: 8
And here

929:5-929:12
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a49abb_d64474fa
Bytes: 66
I thought the correct indentation here was 4, is 8 actually right?

929:5-929:12
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96a49abb_d64474fa
UUID: b69d1e72_171c3cf8
Bytes: 19
4 is probably right

929:5-929:12
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b69d1e72_171c3cf8
UUID: 76d4867d_cc3c1ac0
Bytes: 66
Isn't it 4 indent? It's indented in the condition, and |Runt| = 4.

929:5-929:12
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_cc3c1ac0
UUID: 1bfc537c_6f9aed93
Bytes: 393
I think this one's following the indent everything under the ( but then since it's a wrap, it needs to go 4 spaces more to the right.

(or in other words we could just ignore the "if (" part and indent off the first letter where R is).

So 8 spaces seems like it could be right, doesn't really matter to me that much but I found it more intuitive than having the -> at the same level as the R.

930:6-930:40
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d683721b_edb4410f
Bytes: 22
AssertPendingException

930:6-930:40
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d683721b_edb4410f
UUID: 3b167790_a81cd354
Bytes: 4
Done

File: runtime/lambda/art_lambda_method.h

94:31-94:39
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76d4867d_0c2d9285
Bytes: 71
That's not gonna work. You can't have constexpr in assembly code... :-)

94:31-94:39
Fri Nov 20 22:18:09 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_0c2d9285
UUID: 7b246ff3_0adb5b10
Bytes: 96
It's for the TEST_EQ statements in the support asm file, how can I reword to make it more clear?

94:31-94:39
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b246ff3_0adb5b10
UUID: db271bf3_ed3d41bb
Bytes: 4
Done

File: runtime/lambda/box_class_table.cc

35:2-35:8
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d683721b_6d77711e
Bytes: 78
I think we prefer ATTRIBUTE_UNUSED. Also what do you mean by delete the class?

35:2-35:8
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d683721b_6d77711e
UUID: b69d1e72_970f4cb7
Bytes: 317
I left this boilerplate code just in case I need to call anything else manually to say that it was "now safe to delete the class" (i.e. to drop the reference)

I was initially envisioning it to hold weak reference to the classes, but since it's now storing strong references it probably never needs to worry about it.

35:2-35:8
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b69d1e72_970f4cb7
UUID: db271bf3_2d29197a
Bytes: 4
Done

39:100-39:101
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76d4867d_4c278aa3
Bytes: 14
Line too long.

39:100-39:101
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_4c278aa3
UUID: 9b2123e5_8b36318f
Bytes: 4
Done

52:2-52:69
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76d4867d_ac1c4655
Bytes: 1
?

52:2-52:69
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_ac1c4655
UUID: 3b167790_48fd5f24
Bytes: 4
Done

86:9-86:13
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d683721b_d0bc74e1
Bytes: 13
That is safe.

106:4-106:15
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69d1e72_1770bce6
Bytes: 105
You don't need to manually free heap objects. Having the destructor be completely empty seems OK with me.

106:4-106:15
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b69d1e72_1770bce6
UUID: 5b1b2bb8_895f5dbf
Bytes: 31
(Done) Destructor is empty now.

File: runtime/lambda/box_class_table.h

84:36-84:76
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6923665_91eafc99
Bytes: 76
You can just leave this uncommented, it works with NO_THREAD_SAFETY_ANALYSIS

84:36-84:76
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f6923665_91eafc99
UUID: 9b2123e5_0b2b612a
Bytes: 4
Done

101:22-101:24
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 568ea242_f79fb21c
Bytes: 8
2 spaces

101:22-101:24
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 568ea242_f79fb21c
UUID: 3bed97ca_b08556c1
Bytes: 4
Done

110:19-110:54
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69d1e72_f72c18d6
Bytes: 19
Strange indentation

110:19-110:54
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b69d1e72_f72c18d6
UUID: b69d1e72_5716c4d7
Bytes: 109
Yeah I had them line up (across multiple fields) in another file that I copied/pasted this from. I'll fix it.

110:19-110:54
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b69d1e72_5716c4d7
UUID: 1b153384_e739dcae
Bytes: 4
Done

File: runtime/lambda/box_table.cc

117:8-117:29
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 36892e3b_536a5cf6
Bytes: 52
This means that class_loader may be a stale pointer.

117:8-117:29
Thu Nov 05 01:56:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 36892e3b_536a5cf6
UUID: 36892e3b_93e84414
Bytes: 36
Ok, I'll move this to under line 127

117:8-117:29
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 36892e3b_93e84414
UUID: fbf69f9c_0e8feba2
Bytes: 4
Done

292:26-292:31
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1698aa84_9b11376e
Bytes: 59
Doesn't this erase possibly invalidate the reference above?

292:26-292:31
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1698aa84_9b11376e
UUID: b6da7ea7_7708726f
Bytes: 42
Yeah not sure how that slipped in, thanks.

292:26-292:31
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6da7ea7_7708726f
UUID: bb2a67bd_ac6eabd4
Bytes: 4
Done

File: runtime/lambda/box_table.h

145:19-145:61
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69d1e72_3775c0d7
Bytes: 37
Is indenting the GUARDED_BY required?

145:19-145:61
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b69d1e72_3775c0d7
UUID: 3b167790_484b9f3b
Bytes: 69
No, it just looks way more readable. Do you want to make it required?

File: runtime/lambda/shorty_field_type.h

316:3-318:2
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b686fe2b_0fc0a9a0
Bytes: 11
Indentation

316:3-318:2
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b686fe2b_0fc0a9a0
UUID: 1bfc537c_52fb54a1
Bytes: 4
Done

File: runtime/mirror/class-inl.h

746:4-746:46
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_0fdb7045
Bytes: 47
The check on the construction side is a DCHECK.

746:4-746:46
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b6aafda_0fdb7045
UUID: 3b167790_885597d2
Bytes: 4
Done

File: runtime/mirror/class.h

369:27-369:45
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1698aa84_db581f81
Bytes: 34
What is the point of these parens?

369:27-369:45
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1698aa84_db581f81
UUID: 5b1b2bb8_c907959b
Bytes: 49
Guarding against macro expansions

(just kidding)

File: runtime/mirror/class_loader.h

89:11-89:30
Thu Nov 12 19:47:10 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_2afd2725
Bytes: 117
Is this safe? Can lambdas escape to other class loaders? In that case the lambda would to keep the class loader live.

89:11-89:30
Thu Nov 12 21:47:23 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_2afd2725
UUID: 3b2597a9_f3584809
Bytes: 119
I suppose they could escape to other class loaders if the parent is shared.

This could probably use some more thought.

89:11-89:30
Thu Nov 12 23:31:41 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b2597a9_f3584809
UUID: 5b25eb9e_05593c0b
Bytes: 419
After some offline discussion, we have determined that this is sound and boxed lambdas will keep the classloader alive (since they are instances of classes belonging to the classloader).

On the other hand, unboxed lambdas need to get supported added to keep their classloader alive (through visiting Closure::GetTargetMethod()::GetDeclaringClass()) in a future CL when we add GC visitation support for lambda closures.

File: runtime/modifiers.h

53:66-53:67
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6923665_b1953801
Bytes: 12
Extra spaace

53:0-53:87
Wed Nov 11 01:29:11 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_57ba96e3
Bytes: 80
Note that I use 0x00800000 in one of my CLs. We will need to be careful merging.

53:0-53:87
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_57ba96e3
UUID: 3b167790_088fe7a2
Bytes: 4
Done

File: runtime/native/java_lang_reflect_Method.cc

82:97-82:109
Thu Nov 05 00:27:01 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 568ea242_772742a4
Bytes: 18
Line too long now.

82:97-82:109
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 568ea242_772742a4
UUID: 5b1b2bb8_09c7ed93
Bytes: 4
Done

File: runtime/runtime.h

59:2-59:22
Thu Nov 19 05:57:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_4bff341c
Bytes: 23
There's no user here...

59:2-59:22
Fri Nov 20 23:49:35 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_4bff341c
UUID: fbf69f9c_2ed8e7a2
Bytes: 4
Done

