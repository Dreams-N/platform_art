Revision: 4f6da63732dcab5813f4a69fc7bd03cd3bbce79f
Patch-set: 3
File: runtime/image_assistant.h

35:0-48:2
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4700952_3b72bad6
Bytes: 1542
It's not obvious reading the code that these states are disjoint. The reading I have is we have the following states:

A. No Image File Found
B. Image File Found
In the case where an image file is found, the image that is found can have the following properties:
 1. The checksum is or is not up to date.
 2. The image has or has not been relocated (only relevant if the checksum is up to date).
 3. The image is or is not for the preferred abi.

Then we have the following cases:
1. No image file found (kImageUnusable)
2. Preferred image found with up-to-date checksum and relocated (kImageUsable)
3. Preferred image found with up-to-date checksum but not relocated (kImageNeedsRelocation). The comment claims this can only happen for system images. Is that because all other images are assumed to already be relocated? Or is it because you can't relocate the system image? If it's the later, it seems like the real question we are asking is not "what is the state of the image", but rather, "what should we do to make the image up to date". Maybe choosing different names based on that idea would make this more understandable.
4. Preferred image found, but it's not up to date. (kImageOutOfDate? Though presumably an out-of-date image is also unusable?)
5. No preferred image found, but a non-preferred image was found that is up to date and relocated (kImageNotPreferred).
6. No preferred image found, but a non-preferred image was found that is up to date, but not relocated. (kImageNotPreferred? kImageNeedsRelocation? kImageUnusable?)

35:0-48:2
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4700952_3b72bad6
UUID: c42ba915_2c2b55ba
Bytes: 338
They are not totally disjoint. 

kImageUnusable is only returned for images that are corrupt or missing. all other states mean the image could be used but the runtime would not pick it for various reasons.

kImageNeedsRelocation will only be returned for /system images. If the /system image would be preferred we would never return this.

50:6-50:20
Tue Aug 25 22:46:55 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 248c8586_0c61ba2e
Bytes: 62
Did you mean to do this?

  class ImageAssistant : ValueObject

50:6-50:20
Wed Aug 26 16:55:33 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 248c8586_0c61ba2e
UUID: e430ad80_4d9a4fc7
Bytes: 109
There isn't really any need to. I use it like a value object but there is no reason it cannot be on the heap.

53:5-53:49
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c42ba915_c65e42bd
Bytes: 103
Put the constructor implementations in image_assistant.cc instead of in-lining them in the header file.

53:5-53:49
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c42ba915_c65e42bd
UUID: e430ad80_330df4c6
Bytes: 132
If you really want me to I will but these are fairly trivial, keeping them near the declarations seems to be better for readability.

68:2-68:11
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 048f817d_27d9406a
Bytes: 81
Info is a nebulous word. How about 'ImageStatus' instead? And 'GetImageStatus()'?

68:15-68:23
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 048f817d_07bf5cf8
Bytes: 66
What does "Selected" mean? Maybe call this "GetImageInfo" instead?

68:15-68:23
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 048f817d_07bf5cf8
UUID: 849451c2_7bcb1f96
Bytes: 16
Removed selected

68:2-68:11
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 048f817d_27d9406a
UUID: e4750d3f_83dedbd2
Bytes: 105
I think info is better since it includes a lot of other information about the image then just its status.

69:33-69:55
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c42ba915_26313677
Bytes: 416
What does this parameter do?

My interpretation is if relocation_needed is True, this does the same as GetSelectedImageInfo(), otherwise this may return the info for a system image that hasn't been relocated, even if relocation is enabled. In that case, maybe have two distinct functions: 'GetRelocatedImageInfo()' for when relocation_needed is true, and 'GetUpToDateImageInfo()' for when relocation_needed is false.

69:33-69:55
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c42ba915_26313677
UUID: e430ad80_5ebaf7a5
Bytes: 100
Added a comment explaining the parameter. I think that it is better just to leave it as a parameter.

73:7-73:27
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a42a3512_d52a6402
Bytes: 184
Add a comment saying what this function means. Under what conditions would you not be allowed to create the image? Is it because of runtime parameters? File permissions? Other reasons?

73:7-73:27
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a42a3512_d52a6402
UUID: 4485f957_7f3cb146
Bytes: 118
Added. It can only fail because the global /data/dalvik-cache/<isa>/ is special and should not be created by programs.

93:0-95:28
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a42a3512_b519e806
Bytes: 150
If you aren't caching anything, why have an ImageAssistant class? Instead just use static functions, passing the location and isa manually every time.

93:0-95:28
Wed Aug 26 01:00:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a42a3512_b519e806
UUID: 84253145_8eb1417a
Bytes: 493
What's wrong with that? It's pretty common to have classes that are all-const in the fields (in art). Sometimes the functions can have side-effects on the parameters (I suppose in this case it doesn't, beyond regular out-params), or it's just a helper class.

My understanding behind this CL was that the whole intention was to refactor the previous situation of "use static functions and pass parameters every time" into a helper class.

Which this CL seems to have successfully accomplished.

93:0-95:28
Wed Aug 26 22:01:48 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84253145_8eb1417a
UUID: 048f817d_30bbb45f
Bytes: 1239
Given the name of the class "ImageAssistant", I assume the ImageAssistant is meant to be analogous to the OatFileAssistant.

The goal of the OatFileAssistant was to avoid duplicating the  code for checking the status of an oat file. Previously there were multiple copies across the code base of the code for checking the status of an oat file, each with minor variations. The reason the OatFileAssistant is a class, rather than a set of static functions, is because providing static functions without duplicating code would require the same expensive operations to be executed multiple times in many of the use cases. The OatFileAssistant is a cache for those expensive operations. (From a Haskell point of view: lazy evaluation improves modularity; the OatFileAssistant is a localized implementation of lazy evaluation to improve the modularity of getting the status of an oat file).

In the ImageAssistant case, it doesn't appear that you need to introduce a kind of lazy evaluation for modularity, and it would be simpler and easier to understand if you provided static functions instead.

Or maybe the issue is that the ImageInfo class is the cache. Then remove the extra class definition and rename the ImageInfo class ImageAssistant.

93:0-95:28
Wed Aug 26 22:30:30 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 048f817d_30bbb45f
UUID: 048f817d_7b6fdded
Bytes: 2491
Thanks for the interesting viewpoint :). I don't have a strong opinion against this FWIW.

----

If the issue is that it is too similar to ImageAssistant, what if he just renames it to something else like ImageFileHelper, or pretty much anything with +Image -Assistant. That might be the easiest fix.

On the other hand, if it was purely static helpers do you envision every function with 2 extra arguments?

  ImageFileHelper::GetSelectedImageInfo(location, isa)

?

That might be a little verbose for a lot of different calls, and it becomes really tempting to fabricate isa from kRuntimeISA. I suppose if it was one arg that might be fine.

  ImageLocation image_location(location, isa);
  // Option A:
  ImageFileHelper::GetSelectedImageInfo(image_location);
  // Option B: I suppose it could also be a free function,
  GetSelectedImageFileInfo(image_location);


This seems like it could be an OK-ish change, though definitely not the kind of code I would normally write.

Option A is still a few more characters to read though than what it was already doing today. Option B makes it significantly harder to find the source code where the function is actually declared without grepping.

  ImageAssistant image_assistant(location, isa);
  image_assistant.GetSelectedImageInfo();

One thing that might help to note is that ImageAssistant is immutable (perhaps we should even change all the local variables to 'const ImageAssistant image_assistant' to make it more obvious), which is a pretty common design pattern in OO-like languages that lack purity.

In regards to modularity, just separating out code into separate classes usually reduces tight coupling and increases cohesion (think object-oriented design). I'm not sure if lazy evaluation is meant to traditionally affect modularity, it's usually used as a correctness (can't eagerly evaluate if it's too early, e.g. no runtime yet) or as a performance (re-evaluation is expensive, e.g. disk reads) feature.

For statics vs non-static methods that do the same thing, i.e.

  static void foo(Type& t, ... Args);
  void foo(... Args);

There is indeed very little difference other than the syntax, basically the call-site (and declaration) becomes much larger to read/write, hurting code readability. Instance methods (syntactically) are just generally preferred over static methods if their semantics are identical, am happy to explain more offline as this is a more philosophical discussion without a concretely right/wrong answer.

112:26-112:32
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4700952_9b096e39
Bytes: 7
image's

112:52-112:91
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c42ba915_0630ba6e
Bytes: 76
Will it fill in header if the image is not readable or the image is invalid?

112:52-112:91
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c42ba915_0630ba6e
UUID: 4485f957_ffe8a12a
Bytes: 108
Made comment clearer.

If the file is not readable no, otherwise yes. This should not be relied upon though.

112:26-112:32
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4700952_9b096e39
UUID: 248c8586_73d85d98
Bytes: 4
Done

115
Tue Aug 25 22:46:55 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a47f9520_27a61aca
Bytes: 212
Might be helpful to leave a comment here, not really sure what the difference here is between these two. Presumably GetImageState is the same thing as the other one with the parameter set to either true or false?

115:27-115:49
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e430ad80_38171308
Bytes: 58
It's odd that the state of the image depends on our needs.

115
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a47f9520_27a61aca
UUID: e430ad80_5e299738
Bytes: 4
Done

115:27-115:49
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e430ad80_38171308
UUID: e4750d3f_26ab755f
Bytes: 26
added comment explanation.

118:7-118:15
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4750d3f_96a93ede
Bytes: 81
IsImageValid().

Why isn't this part of the ImageState returned by GetImageState?

118:7-118:15
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4750d3f_96a93ede
UUID: e430ad80_9e616f7f
Bytes: 137
It is, if this returns false then the state will be kImageUnusable (or kImageOutOfDate on a cache image if a valid /system image exists).

120
Tue Aug 25 22:46:55 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485f957_840cab48
Bytes: 21
Why not a unique_ptr?

120:2-120:19
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 248c8586_22bb652d
Bytes: 70
Can this fail? Return an error message if so indicating how it failed?

120
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4485f957_840cab48
UUID: 84253145_ff297dbd
Bytes: 4
Done

120:2-120:19
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 248c8586_22bb652d
UUID: 248c8586_2e2b4eba
Bytes: 164
only in the same way that OpenFileForReading does (i.e. it doesn't exist/no perms to read). That doesn't have an error message so I don't thing that this needs one.

127:0-129:32
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84253145_0e4c5117
Bytes: 44
Put the implementation in image_assistant.cc

127:0-129:32
Wed Aug 26 01:00:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84253145_0e4c5117
UUID: a42a3512_55f17407
Bytes: 47
Is this a style rule somewhere? I don't recall.

127:0-129:32
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a42a3512_55f17407
UUID: 849451c2_7bc79faa
Bytes: 184
The google style guide doesn't mention it and this is done in other places in art. Also these are so trivial it is probably better for readability to have them in the class definition.

131:0-136:3
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a42a3512_15da1c97
Bytes: 90
But this already is an ImageInfo. What does it mean to get an ImageInfo from an ImageInfo?

131:0-136:3
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a42a3512_15da1c97
UUID: 84253145_1f547929
Bytes: 147
These are internal function used in the implementation of GetImageState (which depends partly on the contents of both the system and cache images).

142:0-142:30
Wed Aug 26 00:52:39 2015 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 248c8586_e2bd5d1d
Bytes: 9
What for?

142:0-142:30
Wed Aug 26 20:48:18 2015 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 248c8586_e2bd5d1d
UUID: a47f9520_33f89870
Bytes: 82
To allow ImageAssistant (and no-one else) to directly create ImageInfo structures.

