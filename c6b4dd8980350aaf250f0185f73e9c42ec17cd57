Revision: c6b4dd8980350aaf250f0185f73e9c42ec17cd57
Patch-set: 10
File: compiler/optimizing/code_generator_arm.cc

517:0-517:54
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_3b035710
Bytes: 63
indentation is off. Why is this here and not in the assemblers?

517:0-517:54
Fri Apr 10 08:52:46 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_3b035710
UUID: a38a229d_5dd73beb
Bytes: 120
Where in the assemblers should it be?
Do you effectively want to revert changes of "Implement CFI for JNI." Patch Set 2?

517:0-517:54
Fri Apr 10 08:57:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_5dd73beb
UUID: e3617abc_d7d31cda
Bytes: 256
Actually, maybe it's an abstraction you need. This code does not have to know about dwarf. So things like RelOffsetForMany should be internal to the assemblers, and the code here should call a method that will take care of lowering it down to dwarf things.

517:0-517:54
Fri Apr 10 09:22:51 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_d7d31cda
UUID: a38a229d_5d8c9bcb
Bytes: 770
So some of the methods would start with __ cfi(). and some would be part of assembler?  I would not like the inconsistency.  I could wrap all dwarf methods in all assemblers, but that seems like an overkill.  I also can not do it just once in the base class since the register type is platform specific, and I would like to keep it that way.

The old CFI code just used ints for everything helper methods to covert (ART) ints to (DWARF) ints.  The main motivation for existence of those small helper methods is to make sure the correct remapping from ART reg number to DWARF reg number is always done, and it is difficult to omit or use the wrong one.

To be clear, I do not particularly like those small conversion methods, but it is the best solution I could think of.

517:0-517:54
Fri Apr 10 12:32:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_5d8c9bcb
UUID: a38a229d_8026b8ae
Bytes: 38
Is is this bad to pass an int instead?

517:0-517:54
Fri Apr 10 12:34:46 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_8026b8ae
UUID: e3617abc_dab501e4
Bytes: 58
I just want to have some type safety to avoid subtle bugs.

521:0-521:52
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_5b102353
Bytes: 5
ditto

545:37-545:48
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3617abc_3758d85a
Bytes: 12
R0? And why?

545:37-545:48
Fri Apr 10 08:52:46 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_3758d85a
UUID: 6394aac1_bbf7675b
Bytes: 144
The first argument is the "base register" - it is the register that corresponds to bit 0 in the mask.
So mask 00000101 would apply to R0 and R2.

545:37-545:48
Fri Apr 10 08:57:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_bbf7675b
UUID: e3617abc_f7d820f7
Bytes: 40
OK, but you could still write R0, right?

545:37-545:48
Fri Apr 10 09:22:51 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_f7d820f7
UUID: e3617abc_b71ce823
Bytes: 52
Oh, I see what you mean.  Yes, that would be better.

550:39-550:51
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a38a229d_5d83bb05
Bytes: 2
S0

550:39-550:51
Fri Apr 10 08:52:46 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_5d83bb05
UUID: e3617abc_d714fc44
Bytes: 51
whereas here mask 00000101 would apply to S0 and S2

550:39-550:51
Fri Apr 10 08:57:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_d714fc44
UUID: 6394aac1_fba3af22
Bytes: 20
Same here, write S0.

550:39-550:51
Fri Apr 10 09:22:51 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_fba3af22
UUID: 6394aac1_bb0687a0
Bytes: 5
True.

1212:0-1215:50
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3617abc_57554c21
Bytes: 49
Can't you move the cfi here in GenerateFrameExit?

1212:0-1215:50
Fri Apr 10 08:52:46 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_57554c21
UUID: e3617abc_f719007a
Bytes: 123
In this case, I could, but not in general.  Usually the generation of "ret" instruction is not part of GenerateFrameExit().

1212:0-1215:50
Fri Apr 10 08:57:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_f719007a
UUID: 6394aac1_1b993bf8
Bytes: 52
Well then, could we move __ret to GenerateFrameExit?

1212:0-1215:50
Fri Apr 10 09:14:00 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_1b993bf8
UUID: e3617abc_370458cd
Bytes: 150
Please do. (That was my intention here: https://android-review.googlesource.com/#/c/145700/2/compiler/optimizing/optimizing_cfi_test_expected.inc@58 )

1212:0-1215:50
Fri Apr 10 09:22:51 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_1b993bf8
UUID: e3617abc_3709b8dd
Bytes: 263
I agree.  If fact, I initially put the cfi code in GenerateFrameExit as you suggested.  I found later that I need to move it up a level.  Which also introduces replication.  It also make the cfi test slightly more awkward.  I just was not brave enough to move it.

1226:0-1229:50
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_7b0ddf35
Bytes: 5
ditto

1226:0-1229:50
Fri Apr 10 08:52:46 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_7b0ddf35
UUID: a38a229d_7dd4f7e5
Bytes: 5
ditto

File: compiler/optimizing/code_generator_arm64.cc

484
Tue Apr 14 18:45:53 2015 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0926a12_a37a9eb3
Bytes: 23
move to common_arm64.h?

494
Tue Apr 14 18:45:53 2015 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 709c722a_8162fe11
Bytes: 581
Would be nice to add the extra checks that VIXL uses, just in case we abuse this at some point.

1966   VIXL_ASSERT(!(mem.IsPreIndex() || mem.IsPostIndex()));
1967   VIXL_ASSERT(!registers.Overlaps(tmp_list_));
1968   VIXL_ASSERT(!registers.Overlaps(fptmp_list_));
1969   VIXL_ASSERT(!registers.IncludesAliasOf(sp));


Also when the offset cannot be encoded into the immediate field it would be nice to precompute it using BaseMemOperandForLoadStoreCPURegList(). Otherwise this will be computed for each Stp/Ldp. This might be outside the scope of this patch so you can add a TODO.

2453:0-2457:63
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_bb1f675e
Bytes: 21
In GenerateFrameExit?

2453:0-2457:63
Fri Apr 10 08:55:16 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_bb1f675e
UUID: e3617abc_97c9a42c
Bytes: 106
Note that __ Ret() must be before RestoreState(), and therego RestoreState can not be in GenerateFrameExit

File: compiler/optimizing/code_generator_x86.cc

463:0-463:54
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3617abc_97ab6486
Bytes: 11
indentation

1118:0-1122:50
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a38a229d_9df1c3b3
Bytes: 21
In GenerateFrameExit?

1118:0-1122:50
Fri Apr 10 08:55:16 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_9df1c3b3
UUID: 6394aac1_9ba46b30
Bytes: 5
ditto

File: compiler/optimizing/code_generator_x86_64.cc

485:0-485:57
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_db143345
Bytes: 12
indentation.

488:0-488:55
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a38a229d_bdf67fa6
Bytes: 12
indentation.

1144:0-1148:50
Thu Apr 09 21:31:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_fb19ef79
Bytes: 21
In GenerateFrameExit?

1144:0-1148:50
Fri Apr 10 08:55:16 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_fb19ef79
UUID: e3617abc_b7cea82f
Bytes: 5
ditto

