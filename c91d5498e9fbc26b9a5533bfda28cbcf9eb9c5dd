Revision: c91d5498e9fbc26b9a5533bfda28cbcf9eb9c5dd
Patch-set: 2
File: runtime/arch/arm/quick_entrypoints_arm.S

1247:4-1247:7
Fri Aug 12 21:10:42 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dedd6d2d_dce024bf
Bytes: 89
Move this to after .Lart_quick_alloc_object_region_tlab_class_load_read_barrier_marking ?

1247:4-1247:7
Fri Aug 12 22:28:11 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dedd6d2d_dce024bf
UUID: 3ea129ab_f0742063
Bytes: 112
True, the check is redundant now. I'll address this in follow up CL when I add the array allocation entrypoints.

1247:4-1247:7
Fri Aug 12 22:45:27 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ea129ab_f0742063
UUID: 3ea129ab_d3af2674
Bytes: 83
Is it redundant? Don't we still need this check right before checking the mark bit?

1247:4-1247:7
Fri Aug 12 22:48:20 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3ea129ab_d3af2674
UUID: 1e7f05e8_ea7b47c8
Bytes: 161
I mean its redundant in ALLOC_OBJECT_TLAB_FAST_PATH since it checks for null there too. I want to add ALLOC_OBJECT_TLAB_FAST_PATH_RESOLVED and call that instead.

1256:4-1256:7
Fri Aug 12 21:10:42 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dedd6d2d_dcb904bd
Bytes: 48
Is it possible to use an ands and avoid the cmp?

1256:4-1256:7
Fri Aug 12 22:28:11 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dedd6d2d_dcb904bd
UUID: 3ea129ab_d0d1dc56
Bytes: 4
Done

1881:4-1881:7
Fri Aug 12 21:10:42 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dedd6d2d_fc3c002d
Bytes: 19
ands and avoid cmp?

1881:4-1881:7
Fri Aug 12 22:28:11 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dedd6d2d_fc3c002d
UUID: 3ea129ab_1011a40b
Bytes: 4
Done

