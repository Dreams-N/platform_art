Revision: e1d141f195fd9f191ffa0a42765ad9e448fc9bc4
Patch-set: 4
File: compiler/driver/compiler_driver.cc

782:2-782:10
Fri Oct 03 06:05:41 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0fdac73_06322a12
Bytes: 9
unneeded?

782:2-782:10
Sat Oct 04 03:21:24 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0fdac73_06322a12
UUID: 701a9cb5_29a0e9ac
Bytes: 4
Done

798:0-800:3
Fri Oct 03 06:05:41 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0fdac73_e62e06ac
Bytes: 46
is this left over from some lazy init attempt?

865:0-866:34
Fri Oct 03 06:05:41 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0fdac73_466b92e3
Bytes: 10
const now?

865:0-866:34
Sat Oct 04 03:21:24 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0fdac73_466b92e3
UUID: 701a9cb5_29b909f5
Bytes: 4
Done

879:4-879:56
Fri Oct 03 06:05:41 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0fdac73_a67b5eaf
Bytes: 59
hmm I see. but why not just check in constructor and die...

879:4-879:56
Sat Oct 04 03:21:24 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0fdac73_a67b5eaf
UUID: 701a9cb5_69c30165
Bytes: 93
Preparation for a day when we don't abort, but die gracefully. If you want me to remove it...

879:4-879:56
Sat Oct 04 20:50:15 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 701a9cb5_69c30165
UUID: f0268cf7_04986a4d
Bytes: 232
Our idiom for that has been to make the constructor private and have a static Create method that can return null, not have an accessor to check if the constructor had a problem (and has no use for the rest of the objects life cycle)

879:4-879:56
Mon Oct 20 02:54:04 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0268cf7_04986a4d
UUID: 30474440_8ff5f9e9
Bytes: 111
Which means that you cannot allocate on the stack, having more runtime overhead...

But I'll change it to that.

