Revision: 0cf7c08b334bc0b012d7d36ea47eaed4783069ec
Patch-set: 2
File: compiler/dex/frontend.cc

886
Wed Jun 11 23:38:32 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5f6920a1_d9f6f33f
Bytes: 168
Chao-Ying, please to do not enable optimizations by default in AOSP, we need to do more testing in this mode.

Let's enable optimizations itself later by a separate CL.

File: compiler/dex/quick/gen_common.cc

459:23-459:68
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f854c8a_5d0d6c56
Bytes: 15
cu_->target64 ?

459
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f854c8a_5d0d6c56
UUID: 3f854c8a_40e023ac
Bytes: 4
Done

File: compiler/dex/quick/x86/assemble_x86.cc

1275:0-1281:91
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f854c8a_5de64c50
Bytes: 215
This is stupid, can we just do the proper fix and stop passing bases as regs, indexes as bases, yadda yadda. The code is getting all caught up about something trivial. If we need new encoding kinds then that's fine.

1281
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f854c8a_5de64c50
UUID: 1f6328c5_1d6693a8
Bytes: 39
Let me check how to change it.  Thanks!

1281
Wed Jun 11 23:42:34 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f6328c5_1d6693a8
UUID: 3f854c8a_5bb73412
Bytes: 462
Thanks!
Ideally if an encoding is using R, X or B then we just use what's expected by the encoding. If there are RegCond where the Reg isn't Reg but base, then we should have EmitRegCondSpecial where we document which instructions have the special case. The code in GetInsnSize should agree with the code here, that RegCond passes an R or B or whatever. I think we may need to extend ComputeSize so that it considers more parts of the skeleton (such as r8_form).

File: compiler/dex/quick/x86/fp_x86.cc

384:6-384:72
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f6328c5_97152414
Bytes: 14
IsByteRegister

384
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f6328c5_97152414
UUID: ff77347c_9657ec01
Bytes: 4
Done

File: compiler/dex/quick/x86/int_x86.cc

858:5-858:36
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f854c8a_7df3100d
Bytes: 11
For 32-bit,

858
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f854c8a_7df3100d
UUID: 3f854c8a_c040b3c6
Bytes: 4
Done

859:6-859:69
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f8a489d_7c2eb081
Bytes: 121
this is getting sufficiently complicated we should add a IsByteRegister(RegStorage) member function to capture the logic.

859
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f8a489d_7c2eb081
UUID: ff77347c_d651640d
Bytes: 4
Done

1680:5-1680:69
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f854c8a_fdf560ec
Bytes: 8
and here

1680
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f854c8a_fdf560ec
UUID: ff77347c_3669b8c8
Bytes: 4
Done

2159:8-2159:71
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f6328c5_b7f308c1
Bytes: 8
and here

2159
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f6328c5_b7f308c1
UUID: 1f6328c5_7d5dcfca
Bytes: 4
Done

2161:1-2163:5
Wed Jun 11 21:42:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f8a489d_bc3838c1
Bytes: 71
this check should be part of AllocateByteRegister and not repeated here

2163
Wed Jun 11 23:16:46 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f8a489d_bc3838c1
UUID: 3f854c8a_004b7be8
Bytes: 4
Done

