Revision: b5888a4136980c0cbc12297b2cc3238340a8830f
Patch-set: 2
File: compiler/optimizing/induction_var_analysis.cc

23
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca2490af_c15c52c8
Bytes: 69
Isn't this just checking if the instruction is outside of the 'loop'?

23
Fri Jul 31 02:24:53 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca2490af_c15c52c8
UUID: aa33dcf3_f5eeeaf9
Bytes: 47
It is! And that is precisely loop invariant :-)

23
Fri Jul 31 19:01:34 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa33dcf3_f5eeeaf9
UUID: aa33dcf3_6006ba94
Bytes: 104
Is it enough to check instruction's block dominates the loop pre-header? Why the GetEnvironment() check?

23
Fri Jul 31 19:19:53 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa33dcf3_6006ba94
UUID: 0a5ce834_9b66bbc7
Bytes: 275
wrt the environment, I was just being very conservative here (it was inspired on what I saw in licm); if you can give me some more background on when it is set, I may be able to remove (or refine) it.

as for dominating, since it is SSA, both tests yield the same result, yes

23
Fri Jul 31 21:30:44 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5ce834_9b66bbc7
UUID: aa33dcf3_9b3d9747
Bytes: 328
env is for those nodes whose NeedsEnvironment() return true. It's for cases where we need the vreg's to reg's mapping, like for gc maps/debugging/deoptimization. I don't see the check is needed here.

As for loop invariant test, the dominator test is more robust just in case the passed-in instruction is in an unrelated branch.

23
Fri Jul 31 21:42:16 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa33dcf3_9b3d9747
UUID: ea295486_1d8cff3d
Bytes: 208
Ok good. If you are certain, I will remove the test.

As for dom vs. loop, they really should be the same thing as otherwise the def could not reach the use (can you give an example on what you had in mind?).

23
Fri Jul 31 22:57:19 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea295486_1d8cff3d
UUID: ea295486_5d54c7a3
Bytes: 223
if () {
  def1;
} else {
  loop1;
}

IsLoopInvariant(loop1, def1) should return false. It's true def1 shouldn't be used in loop1. But that's what I said just in case, it's not obvious in the api just by this function alone.

23
Fri Jul 31 23:07:19 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea295486_5d54c7a3
UUID: aa33dcf3_66b93266
Bytes: 195
well, we will only call the method for data that is actually used; since this is a locally used method, I still prefer the loop based reasoning over bringing dom relations into the implementation

62
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea523422_6ceb4f6f
Bytes: 106
Aren't SCCs pretty common as well? Would it perhaps make sense to factor it out into a separate algorithm?

62
Fri Jul 31 02:24:53 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea523422_6ceb4f6f
UUID: ea295486_17c17e77
Bytes: 130
I generally agree with factoring out what can be shared, but the actual Tarjan code is so small, that it is probably not worth it.

101
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa33dcf3_32eb689e
Bytes: 235
minor: doing 2 O(logn) lookups here which could be avoided by first constructing state_, df_ and then moving it into the map

e.g. 

  map_[id] = NodeInfo{kOnStack, df};

(I also noticed an access on 112 but it's probably not worth it)

101
Fri Jul 31 02:24:53 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa33dcf3_32eb689e
UUID: aa33dcf3_d5ebeee7
Bytes: 15
Ok, will change

145:13-145:21
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca4d7087_ab400db9
Bytes: 37
nit: looking up the map element twice

145:13-145:21
Fri Jul 31 02:24:53 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca4d7087_ab400db9
UUID: ca2490af_4723d2dd
Bytes: 4
Done

148
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca2490af_1cc1a177
Bytes: 11
nit: kDone?

148
Fri Jul 31 02:24:53 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca2490af_1cc1a177
UUID: 8a2e188f_94e56a16
Bytes: 4
Done

File: compiler/optimizing/induction_var_analysis.h

73
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a2e188f_11b3cc07
Bytes: 34
What is the point of having a nop?

73
Fri Jul 31 03:42:05 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a2e188f_11b3cc07
UUID: 0a5ce834_6dd8f19f
Bytes: 87
Needed in case induction class != invariant
(then fields have other meaning, see below)

103
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca4d7087_cb45891b
Bytes: 111
nit: I think Nicolas would prefer slightly longer variable names

(class, op, info_a, info_b, instruction, etc)

103
Fri Jul 31 03:42:05 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ca4d7087_cb45891b
UUID: 8a2e188f_143e1ae6
Bytes: 4
Done

112
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a5f2428_ed03c1c5
Bytes: 35
SCC = Strongly Connected Component?

112
Fri Jul 31 03:42:05 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a5f2428_ed03c1c5
UUID: 6a5f2428_b0bbe0a9
Bytes: 3
yes

131
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a6260ef_12bd1221
Bytes: 106
nit: I think Nicolas would prefer df to be spelled out to whatever it stands for (descendant-first count?)

131
Fri Jul 31 03:42:05 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a6260ef_12bd1221
UUID: 0a5ce834_4ddd2d8e
Bytes: 4
Done

134
Fri Jul 31 00:13:11 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a59ac45_8ef55f48
Bytes: 112
minor: not sure if this should be std::map or std::unordered_map, especially since the key is so nicely hashable

134
Fri Jul 31 03:42:05 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a59ac45_8ef55f48
UUID: ca2490af_67ffee74
Bytes: 16
Good suggestion.

File: compiler/optimizing/induction_var_analysis_test.cc

400:22-400:23
Fri Jul 31 23:07:19 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a2e188f_e5007abb
Bytes: 191
I am working on my own TODO using regexp to make sure we accept any phi, not just 165 
(the constant ids are under my control, but I suspect the phi number heavily depends on the SSA builder)

