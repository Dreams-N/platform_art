Revision: d1a18e0d7c92ee87b481337e9cb4c74bff947ee7
Patch-set: 1
File: compiler/dex/quick/local_optimizations.cc

138
Tue Aug 19 11:32:25 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9310f93f_400a8288
Bytes: 444
Remove this DCHECK, it doesn't necessarily hold. There can be both core reg and fp reg loads/stores from/to dalvik reg and the insns used for them have different ranges. See ArmMir2Lir::Load/StoreBaseDispBody() and the difference in handling of fp and core regs for kSingle/k32 when 1024 <= displacement < 4092.

(And why is the thum2Form in ArmMir2Lir::Load/StoreBaseDispBody() checking for displacement < 4092 instead of displacement < 4096?)

148
Tue Aug 19 11:32:25 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 13fb2935_a159586d
Bytes: 110
We could eliminate this_lir under some circumstances but let's not complicate the current logic at this point.

148
Tue Aug 19 18:35:45 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 13fb2935_a159586d
UUID: 3344ad56_3856ad09
Bytes: 56
I guess this is effectively disabling the str-str below.

148
Wed Aug 20 09:20:34 2014 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3344ad56_3856ad09
UUID: 33f66d4a_eb94dced
Bytes: 150
This stops the search for:

load value, address

store new_value, address

If the store is storing a different value to the memory location than stop.

157
Tue Aug 19 11:32:25 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9310f93f_60e7c674
Bytes: 99
Why don't we eliminate LDR-STR? (Not that I would actually expect to see it in the generated code.)

157
Tue Aug 19 17:14:11 2014 +0000
Author: Serban Constantinescu <1030338@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9310f93f_60e7c674
UUID: 3344ad56_55837cb3
Bytes: 201
We can do LDR SRT as long as check_lir->operands[0] == native_reg_id. E.g:

ldr value, address
str value, address

Please note that the following can get here:
ldr value, address
str new_value, address

164:0-172:3
Tue Aug 19 11:32:25 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 13fb2935_84d1ca6b
Bytes: 52
Use the helper function IsDalvikRegisterClobbered().

190
Tue Aug 19 11:32:25 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9310f93f_808d3abb
Bytes: 359
This is broken for load/store generated by ArmMir2Lir::Load/StoreBaseDispBody(). If 1024 <= displacement < 4092, we can erroneously get same_offset == false for one fp reg and one core reg load/store despite aliasing. We can also get same_offset == true for the fp reg load/store with displacement >= 1024 and an arbitrary load/store with displacement < 1024.

190
Tue Aug 19 18:35:45 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9310f93f_808d3abb
UUID: 3344ad56_380c6d12
Bytes: 622
I would not say that this means *this* code is broken too much.

We could either clean this up and generalize GetInstructionOffset. For FP load/store instructions, either the displacement is non-zero, in which case the base reg+disp is what we want to look at. Else if it's zero we need to pull the base + too-large disp from the preceding add. We don't optimize this in any way, so this pattern should be the only one.

Of course with the optimizations on Quick dying down, it might just be the easiest thing to adjust GetInstructionOffset to return a negative value and treat it like an indexed store, stopping LSE here.

190
Wed Aug 20 09:54:16 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3344ad56_380c6d12
UUID: 13fb2935_47fd0448
Bytes: 276
Since https://android-review.googlesource.com/97323 , we can't reconstruct the original offset based on zero or non-zero displacement.

We could reuse the alias_info to hold the offset also for heap loads/stores, with some special value indicating it's out of supported range.

190
Wed Aug 20 22:16:33 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 13fb2935_47fd0448
UUID: f34e9581_05c71227
Bytes: 435
How much improvement did that CL give us, actually, out of curiosity?

I was thinking about the alias_info before. It's another horrible overloading, but we can easily use it. I guess 2^17-1 is a decent value, as that static displacement is pretty unlikely. Alternatively, 1 would be fine, too, as objects start with a class reference at 0. Note: I think we should not shift the displacement, as Fred's change might interact with this.

227:56-228:62
Tue Aug 19 12:45:42 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9310f93f_e3b400d3
Bytes: 136
The problem is that ArmMir2Lir::Load/StoreBaseDispBody() cannot stick to this assumption since no indexed load/store exists for fp regs.

227:56-228:62
Tue Aug 19 18:35:45 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9310f93f_e3b400d3
UUID: 3344ad56_239e8251
Bytes: 171
See above comment. I had || check_lir_offset in the condition before, but thought all of those would have been sorted out by the filter. I think that's the easiest change.

