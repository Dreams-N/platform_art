Revision: 8a16d1cb0627d18ebb775f32d6c65a8bfddd4472
Patch-set: 1
File: test/525-checker-arrays-and-fields/src/Main.java

87:28-87:41
Thu Jul 23 22:19:58 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdecaad0_2dc3cd03
Bytes: 55
Where does one find the syntax documentation for these?

87:28-87:41
Thu Jul 23 22:45:08 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdecaad0_2dc3cd03
UUID: ed1a4eb3_66716e55
Bytes: 163
The file art/tools/checker/README had all the documentation I needed to get this simple case going. I suppose one could also read the Python code to learn more :-)

87:28-87:41
Thu Jul 23 23:06:17 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed1a4eb3_66716e55
UUID: 0d2402f2_4a21d3a1
Bytes: 61
Thanks, I took a look, learned something new about art today!

87:28-87:41
Thu Jul 23 23:17:45 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d2402f2_4a21d3a1
UUID: adfbf684_8f675915
Bytes: 4
Done

95:0-96:20
Thu Jul 23 23:06:17 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed1a4eb3_4631d273
Bytes: 158
Just trying to understand this better, why isn't there 3 StaticFieldGet checks here?

Isn't it doing an sget for sArrZ.length, for sArrZ[i], and again for sZ?

95:0-96:20
Thu Jul 23 23:17:45 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed1a4eb3_4631d273
UUID: ed1a4eb3_46ff12db
Bytes: 111
The two sArrZ get fields that were there originally have been optimized into one by GVN  by the time LICM runs.

296:6-296:11
Fri Jul 24 09:17:37 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cda66ad5_9dd88367
Bytes: 633
Nit: You might want to consider using CHECK-DAG as the default for testing the SSA form.

The reason is that basic blocks are dumped in the order of their IDs, i.e. somebody might write a pass that inserts a new block (highest ID) in the reverse post order and moves some instructions in there (unlikely but semantically correct). The order in which the instructions appear in the graph dump might reverse and your second CHECK will fail.

We use CHECK when order matters (e.g. 510/smali/Builder.smali) or for testing number of occurrences ("CHECK: X, CHECK: X, CHECK: X, CHECK-NOT: X" guarantees that X appears exactly three times).

296:6-296:11
Fri Jul 24 16:08:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cda66ad5_9dd88367
UUID: 4d86fa2e_2f272dbb
Bytes: 510
Thanks for the feedback. 

I actually used CHECK on purpose because it was not clear from the doc if using

CHECK-DAG( <x> )
CHECK-DAG( <x> )

where the pattern <x> is the same really checks if two *different* matches occur, or, since the order does not matter, it could match the same pattern. This is why I used CHECK in my before patterns. Can you please confirm or deny if this is the case?

I could, for sure, use CHECK-DAG in the cases where the patterns are not the same to ensure order does not matter.

298
Thu Jul 23 23:06:17 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d0f1278_a6f408c5
Bytes: 63
Does it make sense to check the negation also gets hoisted out?

298
Thu Jul 23 23:17:45 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d0f1278_a6f408c5
UUID: 8df6329c_ce120389
Bytes: 100
note that in this group, hoisting is not allowed (without splitting on the index, which we don't do)

305
Thu Jul 23 23:06:17 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad14d688_27a5b4ba
Bytes: 154
Without having read the optimization code, doesn't this need to do a loop split or similar to handle crossing over 20? Not sure if the tests reflect this?

305
Thu Jul 23 23:17:45 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ad14d688_27a5b4ba
UUID: 0d2402f2_aa04cfce
Bytes: 142
Well, we don't hoist it. If we ever optimize this to split at index 20 (when we really run out of other stuff to do :-), this test will break.

312
Thu Jul 23 23:06:17 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: adfbf684_8ff119d5
Bytes: 71
Does it make sense to check the cast and addition also get hoisted out?

312
Thu Jul 23 23:17:45 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adfbf684_8ff119d5
UUID: ed1a4eb3_2664963d
Bytes: 47
cast cannot be hoisted out (nor the reference!)

410
Thu Jul 23 23:06:17 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed1a4eb3_66e32e4d
Bytes: 64
Does it make sense to check the ==, and ?: are also hoisted out?

