Revision: a131103c2c4e7926a2f42b1ffda42bcbe0c8b544
Patch-set: 1
File: compiler/elf_writer_quick.cc

32:0-32:6
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f33447f_339b9eec
Bytes: 232
again, we typically don't put the inline. if you really need it, we have ALWAYS_INLINE which actually is paid attention to. "inline" itself was just a hint historically as I understand it and even without it the compiler may inline.

135:4-135:17
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_eefb1f59
Bytes: 188
should the caller check for error we just CHECK(!fatal_error_); here?

typically we use some kind of "std::string* error_msg" to return a reason for the error. are we doing that somewhere?

154:2-167:48
Thu Jun 05 21:36:50 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f1c24fb_c1ae3173
Bytes: 103
How about modularizing this too rather than the repeated code?  Likewise for all the similar code below

154:2-167:48
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f1c24fb_c1ae3173
UUID: 7f33447f_7bbedcc3
Bytes: 419
I think the issue is that most of the fields are optional? that said, its odd that we 0 some fields.

that said, I could imagine a program header builder that understands the sections and builds all the above for you in out of line.

ah, the real issue is that that many values aren't know until the bottom. still, here we could just create the builder to old the space and then at the end actually fill out everything?

172:2-172:76
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f33447f_5ba0b897
Bytes: 98
since I wrote this I found that our dynamic linker always does this, so you could remove the TODO.

176:0-176:76
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_d48a740d
Bytes: 5
ditto

181:20-181:23
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_b1cd786a
Bytes: 355
we don't assign std::string. instead we use the constructor like:

std::string dynstr(dynsym_builder_.GenerateStrtab());

apparently this matters for at least some of the compilers we still use.

however, I think this is one of the cases where the string is large, we should consider just

unique_ptr<std::string> dynstr(dynsym_builder_.GenerateStrtab());

202:4-202:46
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_9494ec2c
Bytes: 28
use unique_ptr to avoid copy

227:37-227:45
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f33447f_5b72f867
Bytes: 103
if this is being changed, the convention is not to pass by reference but by pointer (as in "&shstrtab")

228:0-228:51
Thu Jun 05 21:36:50 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf293c21_1d0a5740
Bytes: 48
Modularize this rather than repeated code below?

255:6-255:21
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_7160508a
Bytes: 111
I'd call this something like

IncludingDebugSymbols (vs "real")

unless this somehow relates to your fake stuff

287:2-287:69
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f33447f_9b60808b
Bytes: 42
again, i'd use unique_ptr and avoid a copy

418:47-418:61
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_51aaf461
Bytes: 81
"until now"

but also add for context

",
namely the size and the so_name offset"

561:0-561:22
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f33447f_7bd1fcdb
Bytes: 15
return pointer?

564:7-564:11
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_d4cb5430
Bytes: 6
const?

578:1-578:22
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_74ddc0ec
Bytes: 15
return pointer?

585:7-585:11
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_b1b9f8b8
Bytes: 6
const?

604:0-604:11
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_94006c9b
Bytes: 14
return pointer

616:0-616:6
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_d4f6f471
Bytes: 13
remove inline

644:0-644:20
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f33447f_dbe048ae
Bytes: 14
return pointer

677:2-677:35
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_5455247c
Bytes: 49
why not just use the 32 ids per bucket case then?

690:14-690:21
Sat Jun 07 01:51:03 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_f42c5025
Bytes: 180
would it be easier to use Elf32_Word? as i recall, this is the same even between 32 and 64 bit ELF

PushWord may have come from the x86 CFI code, but I don't think we need it here.

File: compiler/elf_writer_quick.h

20:0-21:22
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df2c3030_069f5a51
Bytes: 19
alphabetical please

21
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df2c3030_069f5a51
UUID: ff749443_6eb40f0d
Bytes: 4
Done

52:4-52:28
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df2c3030_86860a00
Bytes: 141
our style has been to put this in a private: section at the end. also add DISALLOW_ macros as appropriate to prevent accidental constructors.

52
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df2c3030_86860a00
UUID: ff749443_ae2bd771
Bytes: 163
Moved the friend.

At the moment I do actually use the assign constructor in a few places to make lifetimes easier to think about. I can rewrite these if you want.

98:4-98:10
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df4350e0_20c34e72
Bytes: 107
not sure we use inline unless it critical, I'd leave it off by default, it will probably be inlined anyway.

98
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df4350e0_20c34e72
UUID: ff749443_4e3113dd
Bytes: 4
Done

105:0-110:5
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_c8173cd7
Bytes: 30
we try to use just // comments

110
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_c8173cd7
UUID: 7f33447f_85757dde
Bytes: 4
Done

117:4-118:24
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f1b2808_b284a484
Bytes: 180
what is this used for? the x86 info?

could the data be passed at construction time?
could we take ownership rather than copy the data? presumably the caller won't need it anymore?

118
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f1b2808_b284a484
UUID: bf505ca5_4e225599
Bytes: 132
Yeah this is for the x86 intro. We only actually copy a single buffer. The other 3 we just pass the function the ones in this class.

156:27-156:34
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f1b2808_1241d06c
Bytes: 131
are their elf types for these uint8_t values? as I recall, they just get stored into a Elf..._Word, so probably this is fine as is.

156
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f1b2808_1241d06c
UUID: bf505ca5_ae3199df
Bytes: 3
No.

162:44-162:65
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f1b2808_126a30f7
Bytes: 42
style is to have whitespace around ? and :

162
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f1b2808_126a30f7
UUID: 7f33447f_e54fa99f
Bytes: 4
Done

169:4-169:24
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df2c3030_a6e0e6ac
Bytes: 139
this could be big. shouldn't we pass back a pointer to the data that the caller should take ownership of?

similar for the next two methods

169
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df2c3030_a6e0e6ac
UUID: 1f1b2808_bd4c75ac
Bytes: 304
The vector will store its payload on the heap and IIRC the compiler should be able to recognize that no aliasing occurs within this function and should only copy the relatively small (~20 bytes) vector data-structure on return, not the larger payload.

Still I can change these if you think its worth it.

169
Mon Jun 09 05:45:18 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f1b2808_bd4c75ac
UUID: 7f33447f_d439f5ec
Bytes: 192
I think that may only be true with std::move etc in c++11 which we are barely upgraded too. not sure yet if our compilers + STL impl are doing the right thing. the might *just* me.

danalbert?

169
Mon Jun 09 16:24:58 2014 +0000
Author: Dan Albert <1043845@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f33447f_d439f5ec
UUID: df4350e0_54a09f97
Bytes: 327
According to the spec, returning any non-argument local will first try to use the move constructor when returning a non-argument local: http://stackoverflow.com/a/9532647

libc++ supports this behavior. The objdump of a trivial example I whipped up shows that gcc is doing the right thing as well, so I think this code is fine.

186:6-186:29
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df4350e0_2044ae2e
Bytes: 43
should we what it is used for during Write?

186
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df4350e0_2044ae2e
UUID: ff749443_ae42f71f
Bytes: 4
Done

198:8-198:28
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df4350e0_0043b226
Bytes: 258
class doc for purpose? this is probably true for most of the classes.

this almost seems like it is for unit testing.

speaking of which, you probably want to add some unit tests of your new API to elf_writer_test, or actually to a new elf_writer_quick_test.

198
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df4350e0_0043b226
UUID: 7f33447f_08e7444c
Bytes: 175
Removed Entierly.

It currently passes all of the tests for the old ElfWriterQuick. This API is entierly private to ElfWriterQuick. It seems like the old tests should be okay.

215:15-215:36
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df4350e0_00fe5288
Bytes: 18
can this be const?

215
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df4350e0_00fe5288
UUID: bf505ca5_6e895112
Bytes: 4
Done

215
Fri Jun 06 23:37:48 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_6e895112
UUID: 1f1b2808_7d2d7dc8
Bytes: 62
Actually no. It needs to not be because we call write() on it.

255:4-261:5
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df4350e0_60edd6d9
Bytes: 77
can we avoid copy? I assume caller won't want the data after giving it to us.

261
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df4350e0_60edd6d9
UUID: 1f1b2808_7d56dd38
Bytes: 110
Maybe. I put the copy in because it means I don't need to deal with lifetime issues of the passed in sections.

265:1-267:1
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_08a5248f
Bytes: 7
remove?

267
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_08a5248f
UUID: 7f33447f_253cb1ff
Bytes: 4
Done

268:1-268:27
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_28aa6061
Bytes: 7
remove?

268
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_28aa6061
UUID: bf505ca5_4e77b555
Bytes: 4
Done

270:4-270:22
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f33447f_937aaafe
Bytes: 39
perhaps a clearer name. debug_logging_?

270
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f33447f_937aaafe
UUID: 1f1b2808_1d424175
Bytes: 4
Done

281:4-281:46
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_c8ae5c73
Bytes: 117
still unclear what this is for.

is this for the oat related symbols? that is what I assumed symtab_builder_ was for.

281
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_c8ae5c73
UUID: bf505ca5_8e5dbdcd
Bytes: 71
Removed it entierly. It was something I thought I would need but don't.

332:22-332:55
Fri Jun 06 21:17:17 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f162cdd_8a560d36
Bytes: 24
const vector and pieces?

332
Fri Jun 06 23:32:19 2014 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f162cdd_8a560d36
UUID: bf505ca5_6ec3911b
Bytes: 167
Done.

This will write out most of the file (everything except oat file data. Also the comment is lying. It doesn't perform bounds checking, I've removed this comment.

