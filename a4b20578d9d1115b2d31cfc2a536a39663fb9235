Revision: a4b20578d9d1115b2d31cfc2a536a39663fb9235
Patch-set: 5
File: runtime/arch/arm64/quick_entrypoints_arm64.S

333:4-333:26
Thu Aug 04 12:04:03 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 540f9ee2_99b9fb94
Bytes: 67
Is this OK to use STP (and LDP) with a non 16-byte aligned address?

333:4-333:26
Thu Aug 04 13:37:06 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_99b9fb94
UUID: 540f9ee2_99b29b94
Bytes: 142
Yes, see Arm64Assembler::Spill/UnspillRegisters() where we allow non-16B-aligned STP/LDP when spilling/unspilling an even number of registers.

333:4-333:26
Thu Aug 04 15:31:02 2016 +0000
Author: Artem Serov <1089808@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_99b9fb94
UUID: 540f9ee2_199fabf7
Bytes: 143
Store operations that cross a 16-byte boundary ... reduce bandwidth or incur additional latency (from Cortex-A57 software optimization manual).

333:4-333:26
Thu Aug 04 15:31:02 2016 +0000
Author: Artem Serov <1089808@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_99b29b94
UUID: 540f9ee2_39feef07
Bytes: 276
Actually a patch is already in place which fix this.
"  // Since we are operating on register pairs, we would like to align on
  // double the standard size; on the other hand, we don't want to insert
  // an extra store, which will happen if the number of registers is even."

333:4-333:26
Thu Aug 04 16:04:23 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_39feef07
UUID: 540f9ee2_9938dbd7
Bytes: 190
This is exactly the case where we would have to add an extra store. But maybe it's worth it in this particular case where we have exceedingly many stores. Should I do that in a follow-up CL?

333:4-333:26
Thu Aug 04 16:12:17 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_9938dbd7
UUID: 540f9ee2_593f63b8
Bytes: 23
Yes, sounds good to me.

333:4-333:26
Thu Aug 04 16:13:13 2016 +0000
Author: Artem Serov <1089808@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_9938dbd7
UUID: 540f9ee2_9963bbeb
Bytes: 286
There are some others things that can be improved in this patch related to ARM and ARM64 (vpush d instead of s, scratch register) (I was not on time before the patch was merged). Would you like us to continue the review or you prefer to let us tackle them by ourselves in a separate CL?

333:4-333:26
Mon Aug 08 15:08:25 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_9963bbeb
UUID: b94a9396_bcdc213b
Bytes: 122
Vladimir told us he was working on a follow-up CL; maybe we should continue the discussion on that CL when it is uploaded?

333:4-333:26
Mon Aug 08 15:15:08 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b94a9396_bcdc213b
UUID: b9a53384_24255266
Bytes: 348
The first follow-up has already been uploaded but that's just a massive rename and comments clean up: https://android-review.googlesource.com/254090 . Code cleanup will come later.
Note that the saving of scratch registers is deliberate, the entrypoint really preserves everything, so that there are no constraints on register usage by the codegen.

417:47-417:48
Thu Aug 04 12:04:03 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 540f9ee2_f9be3778
Bytes: 17
Nit: extra space?

417:47-417:48
Thu Aug 04 13:37:06 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_f9be3778
UUID: 540f9ee2_5982c3a6
Bytes: 45
Copy-pasted code. May address in a follow-up.

2024:4-2024:33
Thu Aug 04 12:04:03 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 540f9ee2_19c68b13
Bytes: 91
So we're unconditionally calling `artTestSuspendFromCode` now; could you add a comment why?

2024:4-2024:33
Thu Aug 04 13:37:06 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 540f9ee2_19c68b13
UUID: 540f9ee2_b9503f3b
Bytes: 363
The generated code calls this entrypoint only after checking the flags, so the extra check is useless. This this brings the arm64 in line with other architectures.

Note that mips, mips64 and arm with ARM_R4_SUSPEND_FLAG have code to use the SUSPEND_CHECK_INTERVAL, so they do need to check the flags. However, that's obsolete and should be removed in another CL.

