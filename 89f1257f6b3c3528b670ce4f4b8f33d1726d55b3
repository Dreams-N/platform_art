Revision: 89f1257f6b3c3528b670ce4f4b8f33d1726d55b3
Patch-set: 3
File: compiler/optimizing/intrinsics_mips.cc

925:0-925:51
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 274e5eac_75857578
Bytes: 63
Fix the MIPS64 version of this w.r.t. NAN vs number preference.

925:0-925:51
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 274e5eac_75857578
UUID: 676db610_3f591285
Bytes: 4
Done

994:0-997:20
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2752dead_f15eaa2b
Bytes: 13
Drop the l's.

994:0-997:20
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2752dead_f15eaa2b
UUID: 274e5eac_8b91043e
Bytes: 4
Done

1036:40-1036:42
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 27673e34_8c192d0e
Bytes: 7
Period.

1036:9-1036:17
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 676db610_19cef983
Bytes: 5
Drop.

1039:0-1039:42
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2752dead_71737abe
Bytes: 6
Ditto.

1156:0-1156:49
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c75ca266_1087e7cb
Bytes: 213
Fix the MIPS64 version for the case when out = lhs = rhs. Better yet, have the same logic as here:

if (lhs == rhs) {
  if (out != lhs) {
    __ Move(out, lhs);
  }
} else {
  // existing code with slt's and all
}

1156:0-1156:49
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c75ca266_1087e7cb
UUID: 47efd232_40713024
Bytes: 4
Done

1195:0-1199:9
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 07495aa4_c29812f0
Bytes: 85
We want this in the R2 case as well so that we don't generate unnecessary slt's, etc.

1195:0-1199:9
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 07495aa4_c29812f0
UUID: 47efd232_a39e3e79
Bytes: 4
Done

1232:0-1235:9
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c75ca266_509b1f35
Bytes: 85
We want this in the R2 case as well so that we don't generate unnecessary slt's, etc.

1232:0-1235:9
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c75ca266_509b1f35
UUID: 07123a0e_36c39681
Bytes: 4
Done

1381:33-1381:52
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2752dead_f29a2555
Bytes: 181
We can implement the double version for MIPS32R6 because MIPS32R6 has MIPS64R6 underneath and so the FPU is 64-bit and FR=1 (which is what round.l.d needs). But we may add it later.

1381:33-1381:52
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2752dead_f29a2555
UUID: 47efd232_03f292c3
Bytes: 299
If this is doable I would prefer add it later. The IntrinsicLocationsBuilderMIPS::VisitMathRoundDouble method returns void, so it's not immediately obvious to me how this function should signal to the compiler that this intrinsic is only available for MIPS32R6 implementations and not anything else.

1381:33-1381:52
Fri Jan 22 23:02:30 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 47efd232_03f292c3
UUID: 14cb4a3e_ae04b79d
Bytes: 200
OK later.

I think the answer to the question is in the definition of the macro UNIMPLEMENTED_INTRINSIC(). It does nothing: does not create LocationSummary, does not emit instructions into the buffer.

File: compiler/utils/mips/assembler_mips.cc

879:0-879:29
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e759a674_52b4c399
Bytes: 26
Insert:

  CHECK(!IsR6());

879:0-879:29
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e759a674_52b4c399
UUID: 07f95afe_a190fa38
Bytes: 4
Done

884:0-884:29
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 07623a24_8b7d93fe
Bytes: 6
Ditto.

884:0-884:29
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 07623a24_8b7d93fe
UUID: 27fe5ee6_22fb4a2d
Bytes: 4
Done

889:0-889:29
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4768b202_3885af79
Bytes: 6
Ditto.

889:0-889:29
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4768b202_3885af79
UUID: e7ae06f9_38fef11c
Bytes: 4
Done

894:0-894:29
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4768b202_18827370
Bytes: 6
Ditto.

894:0-894:29
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4768b202_18827370
UUID: 671db61a_dcc7e51a
Bytes: 4
Done

896:0-896:1
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4768b202_5827cb5a
Bytes: 66
Move these four Mov's to immediately before/after other Movt/Movf.

896:0-896:1
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4768b202_5827cb5a
UUID: e7ae06f9_f80c6919
Bytes: 4
Done

906:0-912:1
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c75ca266_3b0771a3
Bytes: 19
Move to after Cvt*.

906:0-912:1
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c75ca266_3b0771a3
UUID: c70ca2f0_4252c866
Bytes: 4
Done

914:0-922:1
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 27673e34_cc45e5f6
Bytes: 21
Move to before Class.

914:0-922:1
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 27673e34_cc45e5f6
UUID: 671db61a_5cb47599
Bytes: 4
Done

1192:0-1215:1
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c75ca266_1b8f0d51
Bytes: 31
Move to after all Cmp*/Mov[ft].

1192:0-1215:1
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c75ca266_1b8f0d51
UUID: c7b10259_5768e432
Bytes: 4
Done

File: compiler/utils/mips/assembler_mips.h

252:0-255:60
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 07495aa4_81e8ccd2
Bytes: 49
Move to immediately before/after other Movt/Movf.

252:0-255:60
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 07495aa4_81e8ccd2
UUID: 07f95afe_214fcaba
Bytes: 4
Done

258:0-259:43
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4768b202_18d71374
Bytes: 19
Move to after Cvt*.

258:0-259:43
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4768b202_18d71374
UUID: 87062ace_60cee884
Bytes: 4
Done

260:0-261:61
Wed Jan 20 00:34:31 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e759a674_f28077b6
Bytes: 21
Move to before Class.

260:0-261:61
Thu Jan 21 18:45:06 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e759a674_f28077b6
UUID: c7b10259_971d2cf9
Bytes: 4
Done

