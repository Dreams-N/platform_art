Revision: 46774767fcf7780d1455e755729198648d08742e
Patch-set: 3
File: compiler/image_writer.h

222:13-222:25
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_bc8bae26
Bytes: 46
For consistency, add a comment for this field?

File: patchoat/patchoat.cc

76:5-76:19
Tue Oct 28 03:40:23 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d5bfba8a_9d8ed337
Bytes: 131
These were supposed to match the local var names

location = 
system_filename = 

(and below)

but they clearly already bit rotted.

149:0-151:97
Tue Oct 28 03:40:23 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5594aafe_5ad85481
Bytes: 72
I find it odd to do have all this and run code that seems to do nothing?

149:0-151:97
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5594aafe_5ad85481
UUID: f5359ed2_9c06aa0e
Bytes: 6
Agree.

149:0-151:97
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_9c06aa0e
UUID: 953e22e9_c584ae9d
Bytes: 335
I discussed this with Brian offline, basically it just prints whether the image header is PIC or not in a debug build.

I can rip out this code but then nothing will exercise the image header's PIC field at all, and I was advised by Andreas to leave the field in the image header. Should I then remove the field in ImageHeader as well?

244:0-248:1
Tue Oct 28 03:40:23 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d5bfba8a_bd8b9726
Bytes: 30
even more confused, why twice?

244:0-248:1
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d5bfba8a_bd8b9726
UUID: 75436e81_e4bc4eaf
Bytes: 185
This is in a separate function (overloaded). Only one of the Patch functions gets called per run (depending on command line arguments).

I apologize if I have misunderstood this remark.

290:53-290:60
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75ae0e67_8998dd4e
Bytes: 102
The symlink is in /data and will point to the one in /system Is that temporary? Should you add a TODO?

290:53-290:60
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75ae0e67_8998dd4e
UUID: b5396603_09787130
Bytes: 375
Can you elaborate please? 

It is just as persistent as anything else in the dex cache (and if we are worried about a symlink pointing to a /system oat file that no longer exists, that won't happen since every time there is an OTA the dex cache gets wiped IIUC). Except to avoid changing the code to load boot.art/boot.oat from separate paths, we made a symlink here instead.

290:53-290:60
Tue Oct 28 17:46:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5396603_09787130
UUID: 75ae0e67_cfab3595
Bytes: 216
Yeah, so the symlink is from /data to /system, correct?

My understanding is that we want to be compile PIC only in the future, so this symlink will not be needed: we will use just one boot image, the one in /system.

365:78-365:81
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55abca56_a585be65
Bytes: 10
pic -> PIC

365:78-365:81
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55abca56_a585be65
UUID: 75436e81_c49e723c
Bytes: 208
I originally intentionally left this lowercase to emphasize the *not*, I apologize if there's some style this is violating.

Can you elaborate why this should or should not be lower case for future reference?

365:78-365:81
Tue Oct 28 17:46:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75436e81_c49e723c
UUID: 55abca56_0b8b81ad
Bytes: 71
because you're using PIC in other places. So it's just for consistency.

377:38-377:43
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75ae0e67_6975616f
Bytes: 167
Nit: use const with references, not pointers.

(I know we're not following this in all places, but that's what the style guide suggests for keeping things consistent).

377:38-377:43
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75ae0e67_6975616f
UUID: b5396603_a95345ab
Bytes: 191
I don't understand. It's logically const here, i.e. this function does not mutate the ElfFile in any way.

From what I understand Ian thinks the code base should be const as much as possible.

377:38-377:43
Tue Oct 28 17:46:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5396603_a95345ab
UUID: 55abca56_cb84899d
Bytes: 339
From the C++ style guide:

"So if you choose const T* rather than const T&, do so for a concrete reason; otherwise it will likely confuse readers by making them look for an explanation that doesn't exist."

http://google-styleguide.googlecode.com/svn/trunk/cppguide.html#Reference_Arguments

I personally agree wih the "confusion" comment.

379:36-379:39
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55abca56_45608a2e
Bytes: 11
fie -> file

379:36-379:39
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55abca56_45608a2e
UUID: 75436e81_04997a51
Bytes: 13
Good catch :)

398:81-398:84
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75ae0e67_097aad5e
Bytes: 10
pic -> PIC

398:81-398:84
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75ae0e67_097aad5e
UUID: 75436e81_e4956e17
Bytes: 7
See 365

408:85-408:87
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_3c2e9e80
Bytes: 137
FD -> file descriptor (here and other places below). I don't think it's obvious FD means file descriptor, at least in the error messages.

408:85-408:87
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_3c2e9e80
UUID: 75436e81_847aaa5c
Bytes: 246
The only way it can go down this path is if someone uses --output-oat-fd (fd is in the command line).

That being said, this is a good point and while I can't think of anything else that FD could stand for, it's better to avoid 2 letter acronyms.

908:2-908:7
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55abca56_256f8e1d
Bytes: 112
Not your code, but you're using both kIsDebugBuild and debug. Looks like this variable is just adding confusion.

908:2-908:7
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55abca56_256f8e1d
UUID: 953e22e9_65d32297
Bytes: 168
I can only guess that this was originally here so that the person could write 'const bool debug = true' (instead of doing #define kIsDebugBuild true or using patchoatd)

1225:19-1225:21
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75ae0e67_896d3da2
Bytes: 12
Explain why?

1225:19-1225:21
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75ae0e67_896d3da2
UUID: 953e22e9_c5b78e5c
Bytes: 45
Ian asked to get rid of this in an earlier PS

1225:19-1225:21
Tue Oct 28 17:46:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953e22e9_c5b78e5c
UUID: 55abca56_8b7e9105
Bytes: 183
But there must be some reason. If it ends up taking longer than expected, a co-worker might look at this code and not understand why we should get rid of it. Having the context helps.

1225:19-1225:21
Tue Oct 28 18:46:43 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55abca56_8b7e9105
UUID: 75436e81_521ce48f
Bytes: 83
the cleanup lambda is next to unintelligible, I don't think this needs explanation.

1225:19-1225:21
Wed Oct 29 09:47:53 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75436e81_521ce48f
UUID: 75ae0e67_2fa1a907
Bytes: 183
Don't underestime the c++ readability of your co-workers (that I don't have). But thanks, you just provided the only thing I'm asking which is that the lambda below is unintelligible.

1244:10-1244:14
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_fc3ff6a9
Bytes: 59
Should that be LOG(DEBUG) instead? (here and other places).

1244:10-1244:14
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_fc3ff6a9
UUID: 953e22e9_85e7466d
Bytes: 564
I apologize, in my rush to get this CL out the door, I didn't take the time to learn the differences between LOG and ALOG so I wasn't sure if the log functions do any extra filtering. 

Briefly looking at LogMessageData it seems like it can set any minimum logging level programatically, so it's not obvious what the minimum logging level is at runtime.

I'll have to take a look at that more closely. With that in mind, is it even right to wrap it in a 'if (kIsDebugBuild)' if the other parts of the runtime is already filtering out logs above a certain severity?

1244:10-1244:14
Tue Oct 28 17:46:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953e22e9_85e7466d
UUID: 75ae0e67_6fa6c1cc
Bytes: 175
The logging framework is prior my time, so I'm also unfamiliar with it. I just find it akward to have a kIsDebugBuild and DEBUG logging option, but they may just be unrelated.

1264:29-1264:37
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55abca56_c5531a64
Bytes: 23
promatic -> problematic

File: patchoat/patchoat.h

44:24-44:28
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55abca56_a55a9e73
Bytes: 50
Add '.' at end of comments. Here and other places.

44:24-44:28
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55abca56_a55a9e73
UUID: 953e22e9_45925ebe
Bytes: 63
Good catch, I think we will need to add this rule to the linter

79:6-79:13
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75ae0e67_695ec1e9
Bytes: 21
Too much indentation.

79:6-79:13
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75ae0e67_695ec1e9
UUID: b5396603_6905bd7f
Bytes: 35
Surprised linter didn't catch this.

File: runtime/elf_file.h

46:60-46:97
Tue Oct 28 03:40:23 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d5bfba8a_7d0bdf15
Bytes: 97
in general, optional arguments aren't probably worth the confusion when there are so few callers.

File: runtime/image.h

31:18-31:34
Tue Oct 28 03:40:23 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d5bfba8a_3d156732
Bytes: 88
why this one in this case? This is only used when reinterpretting existing mmap'd pages.

170:15-170:16
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75ae0e67_e9495129
Bytes: 58
Please add a comment why this field can't be typed 'bool'.

170:15-170:16
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75ae0e67_e9495129
UUID: 953e22e9_c5a5ce14
Bytes: 276
This probably needs a larger comment block in general (around line 133?) about what the structure is supposed to look like.

If I had to guess, the offset between every field must be 32bits (i.e. the fields could be smaller but with padding in between).

Does that seem right?

170:15-170:16
Tue Oct 28 17:46:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953e22e9_c5a5ce14
UUID: 354d76af_5c487da6
Bytes: 212
Sure, but the idea is that this is a a class representing data in a file, where we need to be careful about the layout (contrary to regular C++ objects where we usually don't care about the layout of the object).

File: runtime/oat.cc

476:35-476:42
Tue Oct 28 10:30:54 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_bc396ec6
Bytes: 62
Wouldn't it be simpler to be 0 or 1? instead of true or false.

476:35-476:42
Tue Oct 28 16:59:01 2014 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_bc396ec6
UUID: 953e22e9_e5ac52fd
Bytes: 257
Sorry, this code is basically from Andreas' earlier patchset, except that I moved it from OatFile into OatHeader.

I imagine it would still need a string matching of some sort since something could be storing "01.." or "10.." etc instead of just "0" and "1"

476:35-476:42
Tue Oct 28 17:46:33 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953e22e9_e5ac52fd
UUID: 55abca56_0b1941e5
Bytes: 48
Probably. Andreas may give us some context here.

