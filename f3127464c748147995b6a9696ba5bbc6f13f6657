Revision: f3127464c748147995b6a9696ba5bbc6f13f6657
Patch-set: 2
File: test/530-checker-loops/src/Main.java

1192:0-1192:28
Tue Jan 05 11:49:45 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a68ef71_275aba7b
Bytes: 46
How about making this in its own CHECK-START ?

1192:0-1192:28
Wed Jan 06 20:32:54 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a68ef71_275aba7b
UUID: aa3e9347_09e21152
Bytes: 115
Okay, I actually like this idea of doing a CHECK-START for those parts where I don't need the order to be explicit.

1195:0-1195:17
Tue Jan 05 11:49:45 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cae3c748_a12abeb8
Bytes: 44
This looks odd, why would you check it here?

1195:0-1195:17
Tue Jan 05 18:26:50 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cae3c748_a12abeb8
UUID: 0a4ddf0f_9b598b15
Bytes: 182
The new blocks are added to the end (note I have been doing this above as well). I am very open for better ways, but I am not sure how to do CFG related tests in the checker language

1195:0-1195:17
Wed Jan 06 09:01:40 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a4ddf0f_9b598b15
UUID: 6a5f3bcc_86984af0
Bytes: 104
But do you actually care where the new blocks are added? This isn't really what you want to test, is it?

1195:0-1195:17
Wed Jan 06 20:32:54 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a5f3bcc_86984af0
UUID: 4a4357e2_71262094
Bytes: 44
No, you are right, I used your restart idea.

1196:0-1222:21
Tue Jan 05 11:49:45 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a31fb81_f6d780e5
Bytes: 60
Could you scope that and ensure it's before the loop header?

1196:0-1222:21
Tue Jan 05 18:26:50 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a31fb81_f6d780e5
UUID: aa1773d7_b8749965
Bytes: 49
Can you point me to an example on how to do this?

1196:0-1222:21
Wed Jan 06 09:01:40 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa1773d7_b8749965
UUID: 4a2c372e_d5759c64
Bytes: 67
I'll let David chime in to figure out whether that's easily doable.

1196:0-1222:21
Wed Jan 06 12:14:04 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a2c372e_d5759c64
UUID: 6a31fb81_b67a6801
Bytes: 1514
tl;dr: You need more info in the graph dump. Have a look at go/aog/194693.

What you're struggling with is the fact that GraphVisualizer does not print the stuff you want to test. Other tests are typically fine with the def-use chain. They find the instruction of interest by matching instruction IDs against input lists and then test a specific property like "can be null". If you look inside graph_visualizer.cc you'll see all the properties that are printed. People add those as needed and you should feel free to do the same, perhaps only printed for BCE so as to not pollute the dump for others.

In terms of testing block layout, we already have a couple of tests concerning loops. '445-checker-licm' has simple is/isn't in loop assertions, and '485-checker-dce-loop-update' has more complicated loop-membership ones.

I took the liberty of writing a simple example in go/aog/194693. It prints the block ID with every instruction and successors of control-flow instructions. That allows you to very quickly test the block layout and make sure that instructions are where they're supposed to be. After that, you can easily test that NullChecks and BoundChecks were removed from the def-use chain. 

Biggest advantage is that you can now use CHECK-DAG everywhere and rely on dependencies between the instructions rather than the order they are printed in. You also don't need to do -NOT tests (though you can if you want to). Testing that an ArrayGet's index value has no BoundCheck on it should be sufficient.

1196:0-1222:21
Wed Jan 06 20:32:54 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a31fb81_b67a6801
UUID: aa3e9347_a9e68562
Bytes: 352
I had a look at your extended test. Although it may test what you want, now I have a hard time reading what is being done there :-) :-). All the regular expressions make it very hard to read compared to the simplicity of the current checkers syntax. It also seems a lot harder to maintain if something changes for someone not so familiar with the code.

