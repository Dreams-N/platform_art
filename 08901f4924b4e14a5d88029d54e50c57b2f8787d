Revision: 08901f4924b4e14a5d88029d54e50c57b2f8787d
Patch-set: 1
File: /COMMIT_MSG

9
Thu Jul 03 10:03:10 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4c6c9d8_0e7aca94
Bytes: 12
Elimination.

File: compiler/dex/quick/gen_common.cc

464:20-464:37
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4c051c0_66dbb0f9
Bytes: 121
The SP is technically not a ref, but I wonder whether we need to disambiguate between "normal" pointer and ART reference.

464
Thu Jul 03 10:03:10 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4c051c0_66dbb0f9
UUID: 445315fd_507f2cb8
Bytes: 163
Yes, I had the same thought. Disambiguating seems the right thing to do. Maybe, introduce a TargetPtrReg()? Don't mind whether this is done here or in a future CL.

494:32-494:48
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485d588_466a06bd
Bytes: 9
As above.

621:27-621:51
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_677f2cb9
Bytes: 67
r_base is a RefReg, so it seems weird to make this non-wide (=32b).

621:27-621:51
Thu Jul 03 10:04:13 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4c385c9_677f2cb9
UUID: 445eb5fe_38c9a95b
Bytes: 88
r_tmp is used as a register to read 32-bit value to, so it should be 32-bit. Am I wrong?

621:27-621:51
Thu Jul 03 20:28:02 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 445eb5fe_38c9a95b
UUID: a4c051c0_6623b010
Bytes: 39
Yes, sorry, was reading the code wrong.

714:27-714:51
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_477cb0c2
Bytes: 9
As above.

714:27-714:51
Thu Jul 03 10:04:13 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4c385c9_477cb0c2
UUID: a495b1be_bb492749
Bytes: 8
As above

File: compiler/dex/quick/gen_invoke.cc

156:67-156:72
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485d588_86640eef
Bytes: 46
Use arg0 instead of false, as it may be a ref.

195:0-200:5
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485d588_c6c61680
Bytes: 114
We could clean this and similar up by implementing TargetReg(x, true) in the 32b case to build the pair. Opinions?

319:10-320:99
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_875ea853
Bytes: 25
Also remove this, please.

336:10-336:30
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485d588_e6cb1a85
Bytes: 108
Doesn't apply anymore, simplify. But put a DCHECK at the top of the else (for the kArm64 || kX86_64), maybe.

347:8-347:28
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_e7631c22
Bytes: 9
As above.

361:8-361:28
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_c768a0ff
Bytes: 9
As above.

369:10-369:30
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485d588_06d1de33
Bytes: 9
As above.

375:10-375:30
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485d588_26b6e217
Bytes: 9
As above.

399:39-399:53
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4c051c0_86fa2c54
Bytes: 245
Not necessary, IsSameReg will take care of that. If you do it this way, we should remove the IsSameReg.

But Bill has concerns for 32b systems and overlap by pairs, that's why the complicated IsSameReg. I am not sure this applies here, though...

399:39-399:53
Thu Jul 03 09:57:14 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4c051c0_86fa2c54
UUID: a495b1be_7b379fd0
Bytes: 68
The idea is to eliminate usage of TargetReg with only one parameter.

400:41-400:55
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_274ed4a4
Bytes: 5
Same.

526:17-526:34
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4485d588_46b3e626
Bytes: 9
As above.

589:20-589:37
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_6758cc64
Bytes: 9
As above.

594:19-594:36
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4c051c0_c60424b0
Bytes: 24
OK, gonna stop here. :-)

618:27-618:43
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4c385c9_4755d02a
Bytes: 52
Similar to SP - this is a pointer not into the heap.

805:23-805:46
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4c051c0_26ea5885
Bytes: 28
Self is also a full pointer.

File: compiler/dex/quick/x86/codegen_x86.h

407:1-409:10
Thu Jul 03 09:20:22 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4c051c0_06e75cbd
Bytes: 240
Just the private here? :-) Plus indentation is off.

You copied the code from ARM64, which is a good start. If you have ideas about how to streamline it or and make it share-able so it doesn't pollute both backends, I'm very open for ideas.

409
Thu Jul 03 10:03:10 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4c051c0_06e75cbd
UUID: e4c6c9d8_ce6f12d7
Bytes: 651
I would be careful with making this general. The As32BitReg() and As64BitReg() functions where born in the commit below,

  https://android-review.googlesource.com/#/c/96939/

When I created them I wanted them to be shared among the backends, but Bill argued that - in order for them to be shared - there was a need to make them use FindMatchingView(), which I found somewhat heavyweight (see discussion in the CL). The final agreement was to make them local. I later verified that these functions are inlined and produce no more than a couple of A64 instrucions when compiled for Arm64 (in non-debug builds). I would prefer that things stay this way.

