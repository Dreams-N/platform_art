Revision: 1e1b3a110298861bcfc29cc26e96974a1d3dd3da
Patch-set: 7
File: compiler/optimizing/stack_map_stream.h

226:45-226:52
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_6c57332c
Bytes: 16
... map. Add ...

226:45-226:52
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_6c57332c
UUID: 667af834_2e704704
Bytes: 10
rephrased.

305:6-305:10
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_2c513b35
Bytes: 3
:-(

305:6-305:10
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_2c513b35
UUID: 266e407b_8cd4e7c2
Bytes: 32
the alternative is uglier imo...

316:4-316:8
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_2d513935
Bytes: 4
:-((

316:4-316:8
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_2d513935
UUID: 266e407b_acd9abfb
Bytes: 5
ditto

317:0-317:74
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_ced0a382
Bytes: 78
Why is this comment here? What part of the code relates to the adjacent entry?

317:0-317:74
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_ced0a382
UUID: 266e407b_4c2eef8c
Bytes: 72
sorry, this shouldn't be here (probably here because of multiple merges)

320:11-320:42
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_8eda9b9e
Bytes: 20
How can this happen?

320:11-320:42
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_8eda9b9e
UUID: 667af834_8e55bb57
Bytes: 89
Because we search based on the hash, and we always find ourselves in the list of entries.

320:11-320:42
Sat Mar 21 14:26:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_8e55bb57
UUID: c61c8421_76ab5082
Bytes: 219
Ok, that's because you're adding it before looking up. I'm not sure I understand why you have to do this? Why don't you
1) lookup? If found, return
2) If not found add.

Note: Just found out you're doing this in PS8 :-)

369:12-369:29
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_4ca10fa1
Bytes: 73
This kind of looks silly.... !a_loc.Equals(b_loc) is a lot more readable.

369:12-369:29
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_4ca10fa1
UUID: 667af834_ae5af784
Bytes: 24
see the other comment...

387:6-387:44
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_6d9e516a
Bytes: 61
Why don't you just put that hash in the StackMapIndex itself?

387:6-387:44
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_6d9e516a
UUID: 667af834_6e4defc8
Bytes: 37
I guess we can do that :) silly me...

389:2-389:9
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_6c9e536a
Bytes: 12
Explain why.

389:2-389:9
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_6c9e536a
UUID: 266e407b_4cdfcfdd
Bytes: 9
obsolete.

392:2-392:9
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_4ec593b8
Bytes: 5
ditto

392:2-392:9
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_4ec593b8
UUID: 266e407b_6cdc13e8
Bytes: 4
Done

File: runtime/stack_map.h

215:15-215:18
Fri Mar 20 16:12:03 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_cc93bf5b
Bytes: 36
Nit (and strongly prefer :-)) Equals

215:15-215:18
Fri Mar 20 17:25:31 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_cc93bf5b
UUID: 667af834_ae83d74e
Bytes: 109
Me too, but I looked into the "future", and Roland needs this for the hashmap. I found it worse to have both.

215:15-215:18
Fri Mar 20 17:56:29 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_ae83d74e
UUID: 667af834_51b534be
Bytes: 236
Yeah, this is a requirement of art::HashMap.  IMHO operator overloading is not so bad, especially when it follows standard patterns (here, the EqualityComparable concept; see http://en.cppreference.com/w/cpp/concept/EqualityComparable).

215:15-215:18
Sat Mar 21 14:26:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_51b534be
UUID: c61c8421_169e5c68
Bytes: 80
Then please introduce operator!= as well. Writing !(a == b) does not look right.

215:15-215:18
Mon Mar 23 14:55:01 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c61c8421_169e5c68
UUID: 66111809_b374d800
Bytes: 4
Done

