Revision: 924216a4bee438d0b0e91162a81aebe8e8057645
Patch-set: 13
File: compiler/dex/mir_graph.cc

123:19-123:25
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_056b96ee
Bytes: 20
Magic number 999999?

File: compiler/dex/mir_optimization.cc

409:4-409:43
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f384905b
Bytes: 94
Instead of this, we should DCHECK(reg_location_ == nullptr) for kCompilerTempSpecialMethodPtr.

File: compiler/dex/quick/arm64/target_arm64.cc

861:20-861:40
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_d8c7f517
Bytes: 17
UNWIDE(p->opcode)

File: compiler/dex/quick/codegen_util.cc

1301:44-1301:53
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_784a21b3
Bytes: 15
Update comment.

File: compiler/dex/type_inference.h

83:16-83:34
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_934d54cc
Bytes: 117
The name doesn't match the result, the function returns kFlagRef. Maybe we should explicitly name this ArtMethodType.

File: compiler/dex/vreg_analysis.cc

61:0-63:3
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_13b81ed7
Bytes: 90
It is unnecessary to eagerly set this, it will be overwritten by the TypeInference anyway.

File: compiler/image_writer.cc

850:6-850:65
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f38bf06f
Bytes: 38
Remove the TODO, the analysis is done.

984:2-984:7
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_b3e5ea25
Bytes: 27
Avoid non-const references.

990:41-990:68
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_b39178a4
Bytes: 38
bin_slot_previous_sizes_[kBinArtField]

996:41-996:74
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_45fbdeb9
Bytes: 44
bin_slot_previous_sizes_[kBinArtMethodClean]

1004:19-1004:29
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f3d650c7
Bytes: 7
Remove.

1342:0-1349:6
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_53b8dc25
Bytes: 53
Remove or enable (and fix typo: "specia"->"special").

File: compiler/linker/arm64/relative_patcher_arm64.cc

199:62-199:68
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_d3f06c65
Bytes: 6
or 64-

File: compiler/optimizing/code_generator.cc

278:7-278:76
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_6e825304
Bytes: 13
Follow-up CL?

File: compiler/optimizing/code_generator_arm64.cc

2277
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_42af540f
Bytes: 14
Line too long.

File: compiler/optimizing/code_generator_x86.cc

3218
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_4e8b0f21
Bytes: 14
Line too long.

File: compiler/optimizing/optimizing_compiler.cc

635:2-635:76
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_05a3967f
Bytes: 7
Enable.

File: oatdump/oatdump.cc

1405
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_2e2a1b78
Bytes: 14
Line too long.

1442:6-1442:14
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_b3816ad6
Bytes: 13
static_assert

1524:37-1524:42
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_782ea13a
Bytes: 5
first

1527:13-1527:31
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f328103b
Bytes: 13
Follow-up CL?

File: patchoat/patchoat.cc

480:2-480:31
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_4e04af18
Bytes: 7
Remove.

File: runtime/art_method-inl.h

320:2-320:7
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_4eccafb7
Bytes: 33
DCHECK here and many times below.

File: runtime/asm_support.h

72:51-72:52
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_ceb71f1a
Bytes: 46
Is this really 8 even on 32-bit architectures?

File: runtime/class_linker.cc

1192:10-1192:11
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_a5ad8a9d
Bytes: 7
Remove.

4658:23-4658:32
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_73afe25d
Bytes: 67
You can use this allocator also for miranda_methods and move_table.

4767:14-4767:74
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_d8fa55f2
Bytes: 7
Remove?

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

329:0-330:27
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_d354ecac
Bytes: 51
What's the purpose of the GetDeclaringClass() here?

File: runtime/fault_handler.cc

335:2-335:40
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_0e911751
Bytes: 5
TODO?

File: runtime/gc/accounting/mod_union_table_test.cc

240
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_13e5bed2
Bytes: 58
Why are we not comparing oss.str() and oss2.str() anymore?

File: runtime/mirror/class-inl.h

884:77-884:79
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_73340058
Bytes: 12
pointer_size

File: runtime/mirror/class.cc

804:41-804:60
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_339e08ae
Bytes: 42
Why not "ArtMethod* (&methods)[kImtSize]"?

File: runtime/thread.cc

1619:0-1621:27
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_38ec193a
Bytes: 71
I don't like mixing the method pointers with dex pcs in the same array.

File: test/001-HelloWorld/src/Main.java

21:4-21:22
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_05447678
Bytes: 84
Why is this in the HelloWorld? If you want a test with this GC, create another test.

