Revision: 924216a4bee438d0b0e91162a81aebe8e8057645
Patch-set: 13
File: /COMMIT_MSG

11:0-11:67
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_f7f0ec64
Bytes: 45
Is this a TODO or something that's been done?

11:0-11:67
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_f7f0ec64
UUID: 4d0995dc_e374a7fa
Bytes: 12
In progress.

File: compiler/dex/mir_graph.cc

123:19-123:25
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_056b96ee
Bytes: 20
Magic number 999999?

123:19-123:25
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_056b96ee
UUID: 0d031dc0_b78e66fd
Bytes: 4
Done

File: compiler/dex/mir_optimization.cc

409:4-409:43
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f384905b
Bytes: 94
Instead of this, we should DCHECK(reg_location_ == nullptr) for kCompilerTempSpecialMethodPtr.

409:4-409:43
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_f384905b
UUID: 4d0995dc_71506c62
Bytes: 4
Done

File: compiler/dex/quick/arm64/call_arm64.cc

539:25-539:69
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_41fbd6b9
Bytes: 45
Does this mean that arg0_ref is a long array?

539:25-539:69
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_41fbd6b9
UUID: 0d5f9dfa_29e4d9a8
Bytes: 68
It is a pointer array which happens to be a long array in this case.

File: compiler/dex/quick/arm64/target_arm64.cc

861:20-861:40
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_d8c7f517
Bytes: 17
UNWIDE(p->opcode)

861:20-861:40
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_d8c7f517
UUID: 0d031dc0_f761feba
Bytes: 4
Done

File: compiler/dex/quick/codegen_util.cc

1301:44-1301:53
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_784a21b3
Bytes: 15
Update comment.

1301:44-1301:53
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_784a21b3
UUID: 4d0995dc_5cc9ffa5
Bytes: 4
Done

File: compiler/dex/quick/x86/target_x86.cc

747:25-747:26
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_e1e4e2d8
Bytes: 24
Append an error message?

747:25-747:26
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_e1e4e2d8
UUID: 6d9499c1_78679850
Bytes: 4
Done

File: compiler/dex/quick/x86/x86_lir.h

85:14-85:21
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d99cdfb_85ec080a
Bytes: 23
Method* -> ArtMethod* ?

85:14-85:21
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d99cdfb_85ec080a
UUID: 0d5f9dfa_a9f0e960
Bytes: 4
Done

File: compiler/dex/type_inference.cc

688:5-688:43
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_81887ef2
Bytes: 37
Does this comment need to be updated?

688:5-688:43
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_81887ef2
UUID: 4d0995dc_6359b78f
Bytes: 4
Done

File: compiler/dex/type_inference.h

83:16-83:34
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_934d54cc
Bytes: 117
The name doesn't match the result, the function returns kFlagRef. Maybe we should explicitly name this ArtMethodType.

83:16-83:34
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_934d54cc
UUID: cd8f45ac_04547aa6
Bytes: 4
Done

File: compiler/dex/vreg_analysis.cc

61:0-63:3
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_13b81ed7
Bytes: 90
It is unnecessary to eagerly set this, it will be overwritten by the TypeInference anyway.

61:0-63:3
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_13b81ed7
UUID: 0d031dc0_b7d946f7
Bytes: 4
Done

File: compiler/driver/compiler_driver.cc

1479:2-1479:31
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d99cdfb_e576ac8c
Bytes: 27
Is this worth handlerizing?

1479:2-1479:31
Wed May 27 11:08:48 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d99cdfb_e576ac8c
UUID: ed6169bc_378e1800
Bytes: 134
Or, going the other way, change IsFastInvoke() parameters to plain pointers to make it easier to conclude that we don't need a handle.

1479:2-1479:31
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d99cdfb_e576ac8c
UUID: 4d0995dc_1eb81409
Bytes: 4
Done

File: compiler/driver/compiler_driver_test.cc

224:67-224:80
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_82596c60
Bytes: 40
Is this ok? Should this be pointer_size?

224:67-224:80
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_82596c60
UUID: 6d9499c1_b84a00b0
Bytes: 4
Done

File: compiler/image_writer.cc

335:61-335:79
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_6fc279a5
Bytes: 78
Does this mean that we assume the resolved method arrays will be mostly clean?

335:61-335:79
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_6fc279a5
UUID: 0d5f9dfa_a97b893a
Bytes: 76
No, I just needed a value so I picked clean arbitrarily. I'll add a comment.

850:6-850:65
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f38bf06f
Bytes: 38
Remove the TODO, the analysis is done.

850:6-850:65
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_f38bf06f
UUID: 4d0995dc_7ca203ab
Bytes: 4
Done

984:2-984:7
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_b3e5ea25
Bytes: 27
Avoid non-const references.

984:2-984:7
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_b3e5ea25
UUID: 4d0995dc_3c140b78
Bytes: 4
Done

990:41-990:68
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_b39178a4
Bytes: 38
bin_slot_previous_sizes_[kBinArtField]

990:41-990:68
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_b39178a4
UUID: cd8f45ac_c4ab72fe
Bytes: 4
Done

996:41-996:74
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_45fbdeb9
Bytes: 44
bin_slot_previous_sizes_[kBinArtMethodClean]

996:41-996:74
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_45fbdeb9
UUID: cd8f45ac_04cd5a04
Bytes: 4
Done

1004:19-1004:29
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f3d650c7
Bytes: 7
Remove.

1004:19-1004:29
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_f3d650c7
UUID: 0d031dc0_57438a05
Bytes: 4
Done

1029:24-1029:31
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_a22e3037
Bytes: 11
ArtMethods?

1085:32-1085:37
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_0442bcfe
Bytes: 39
Update this comment to include methods?

1105:10-1105:11
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d99cdfb_03246d65
Bytes: 55
Add a check that asserts the array_type is a field bin?

1342:0-1349:6
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_53b8dc25
Bytes: 53
Remove or enable (and fix typo: "specia"->"special").

1342:0-1349:6
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_53b8dc25
UUID: 0d031dc0_d7b2fa76
Bytes: 4
Done

1367:0-1368:91
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_ea13d78f
Bytes: 63
Would it make sense to break out of the loop once it finds one?

File: compiler/image_writer.h

143:62-143:68
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_82432c21
Bytes: 29
Elaborate how this is useful?

143:62-143:68
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_82432c21
UUID: 0d5f9dfa_4943cd05
Bytes: 23
This is stale, deleted.

205:4-205:39
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_446da4fd
Bytes: 22
Why remove this check?

205:4-205:39
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_446da4fd
UUID: 4d0995dc_5edbac68
Bytes: 19
The check is added.

324:5-324:44
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_2229803d
Bytes: 94
Examples of these include dex cache arrays and vtables? Worth mentioning them in this comment?

324:5-324:44
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_2229803d
UUID: 6d9499c1_73c97ba6
Bytes: 4
Done

373:0-374:26
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_22750078
Bytes: 30
Add comment on what these are?

373:0-374:26
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_22750078
UUID: 6d9499c1_d3e08f17
Bytes: 4
Done

File: compiler/jni/quick/calling_convention.h

199:19-199:28
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_fdbd6d4a
Bytes: 66
This comment ambiguous. Is this always 32 bit or the pointer size?

199:19-199:28
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_fdbd6d4a
UUID: 4d0995dc_be05a843
Bytes: 4
Done

323:58-323:77
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_eaf91795
Bytes: 22
See the above comment.

323:58-323:77
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_eaf91795
UUID: 6d9499c1_53271fe1
Bytes: 4
Done

File: compiler/jni/quick/jni_compiler.cc

141:7-141:72
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_bd37755c
Bytes: 177
Since this declaring class is a GC root, we don't need heap poisoning negation here. Can you update this comment? And if we add "bool poison_reference" to LoadRef(), pass false?

141:7-141:72
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_bd37755c
UUID: 4d0995dc_3e44f878
Bytes: 4
Done

File: compiler/linker/arm64/relative_patcher_arm64.cc

199:62-199:68
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_d3f06c65
Bytes: 6
or 64-

199:62-199:68
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_d3f06c65
UUID: 0d031dc0_17bd9243
Bytes: 4
Done

File: compiler/oat_writer.cc

875:23-875:44
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_6a6427cb
Bytes: 56
Does this mean we always place ArtMethods in the low 4g?

875:23-875:44
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_6a6427cb
UUID: 0d5f9dfa_e9eca13c
Bytes: 100
No, but when we are creating the image, but we only patch to low 4gb since thats where the image is.

File: compiler/optimizing/code_generator.cc

278:7-278:76
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_6e825304
Bytes: 13
Follow-up CL?

278:7-278:76
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_6e825304
UUID: 4d0995dc_fcef33ca
Bytes: 46
Maybe, have a lot of other stuff to do though.

File: compiler/optimizing/code_generator_arm64.cc

2277
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_42af540f
Bytes: 14
Line too long.

2277
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_42af540f
UUID: 4d0995dc_1cff8778
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.cc

3218
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_4e8b0f21
Bytes: 14
Line too long.

3218
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_4e8b0f21
UUID: 0d031dc0_d714bac8
Bytes: 4
Done

File: compiler/optimizing/optimizing_compiler.cc

635:2-635:76
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_05a3967f
Bytes: 7
Enable.

635:2-635:76
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_05a3967f
UUID: 0d031dc0_97dc0299
Bytes: 4
Done

File: compiler/utils/arm/assembler_arm.cc

537:0-539:3
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_bdd0157a
Bytes: 166
Can you turn this into a parameter (eg "bool poison_reference") as we don't need this negation in the call site in jni_compiler.cc?

Same for the other architectures.

537:0-539:3
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_bdd0157a
UUID: 6d9499c1_33961349
Bytes: 4
Done

File: compiler/utils/arm64/assembler_arm64.cc

304:6-304:27
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_2a43ff22
Bytes: 5
Same.

304:6-304:27
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_2a43ff22
UUID: 0d5f9dfa_09eab51e
Bytes: 4
Done

File: compiler/utils/x86/assembler_x86.cc

1757:68-1757:85
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_8ae333a2
Bytes: 42
Add a comment that this is for the method?

1757:68-1757:85
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_8ae333a2
UUID: 4d0995dc_5e91ec4f
Bytes: 4
Done

File: compiler/utils/x86_64/assembler_x86_64.cc

2604:6-2604:27
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_2fb84809
Bytes: 5
same.

2604:6-2604:27
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_2fb84809
UUID: ad73f192_98ef19cc
Bytes: 4
Done

File: oatdump/oatdump.cc

1405
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_2e2a1b78
Bytes: 14
Line too long.

1405
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_2e2a1b78
UUID: 4d0995dc_7cdfa302
Bytes: 4
Done

1442:6-1442:14
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_b3816ad6
Bytes: 13
static_assert

1442:6-1442:14
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_b3816ad6
UUID: 4d0995dc_9cd6f7ea
Bytes: 4
Done

1524:37-1524:42
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_782ea13a
Bytes: 5
first

1524:37-1524:42
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_782ea13a
UUID: 0d031dc0_77fa0ef1
Bytes: 4
Done

1527:13-1527:31
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_f328103b
Bytes: 13
Follow-up CL?

1527:13-1527:31
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_f328103b
UUID: 8d99cdfb_5cd65d46
Bytes: 3
Yes

File: patchoat/patchoat.cc

480:2-480:31
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_4e04af18
Bytes: 7
Remove.

480:2-480:31
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_4e04af18
UUID: 4d0995dc_9c88b7f2
Bytes: 4
Done

File: patchoat/patchoat.h

146:43-146:44
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_95d35454
Bytes: 17
sizeof(uint32_t)?

146:43-146:44
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_95d35454
UUID: ad73f192_b8f4d59e
Bytes: 4
Done

File: runtime/arch/arm64/quick_entrypoints_arm64.S

562:18-562:35
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_8fb354da
Bytes: 13
Drop MIRROR_?

562:18-562:35
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_8fb354da
UUID: 0d5f9dfa_f4055142
Bytes: 4
Done

File: runtime/arch/x86_64/quick_entrypoints_x86_64.S

921:4-921:61
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_5d00eb6f
Bytes: 25
This needs to be updated?

921:4-921:61
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_5d00eb6f
UUID: 0d5f9dfa_9427b5e0
Bytes: 74
I dont think so, since the resolved types is still a compressed reference.

File: runtime/art_method-inl.h

320:2-320:7
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_4eccafb7
Bytes: 33
DCHECK here and many times below.

320:2-320:7
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_4eccafb7
UUID: 4d0995dc_1c75c777
Bytes: 59
Sorry had left these as CHECK to find proxy bugs, will fix.

320:2-320:7
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_1c75c777
UUID: 6d9499c1_550b8cd7
Bytes: 84
If you haven't already, it may be worth running the CTS test to look for proxy bugs.

320:2-320:7
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_550b8cd7
UUID: ad73f192_d8e431d9
Bytes: 24
Good idea, I'll do that.

File: runtime/art_method.cc

509:75-509:76
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_6f76c056
Bytes: 66
is it worth leaving "- sizeof(void*) + sizeof(void*)" for clarity?

509:75-509:76
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_6f76c056
UUID: 6d9499c1_6d69976b
Bytes: 4
Done

File: runtime/art_method.h

529:7-529:45
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_585ab40b
Bytes: 23
Is this still relevant?

529:7-529:45
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_585ab40b
UUID: ad73f192_58d9011b
Bytes: 72
Yes, still need that since we need to have aligned entrypoints on 64bit.

529:7-529:45
Wed May 27 20:01:36 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ad73f192_58d9011b
UUID: cd782572_ffe9d3ad
Bytes: 91
But since you removed MANAGED, i.e. PACKED(4), the compiler should add this padding for us.

529:7-529:45
Wed May 27 21:58:35 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cd782572_ffe9d3ad
UUID: cd3d85a0_75ac179a
Bytes: 129
Some cases still need handling i.e. 32 bit dex2oat for 64 bit target. I changed it to RoundUp in latest PS which is much cleaner.

543:4-543:10
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_25298708
Bytes: 240
This is read barrier unsafe (reading references without read barrier.) Note holding a shared mutator lock does not make this safe.

Is there some code that copies ArtMethod without using this function? That would need read barriers as well.

543:4-543:10
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_25298708
UUID: 6d9499c1_0d48131e
Bytes: 132
Hmm, I'd think that it would be OK to copy the GcRoots over without doing a read barrier. Wouldn't have the same behavior as memcpy?

609:24-609:25
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_48ecb03a
Bytes: 17
sizeof(uint32_t)?

609:24-609:25
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_48ecb03a
UUID: 6d9499c1_ad8abfb0
Bytes: 4
Done

622:24-622:25
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_8e2ee337
Bytes: 17
sizeof(uint32_t)?

622:24-622:25
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_8e2ee337
UUID: 0d5f9dfa_34b34900
Bytes: 4
Done

File: runtime/asm_support.h

72:51-72:52
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_ceb71f1a
Bytes: 46
Is this really 8 even on 32-bit architectures?

72:51-72:52
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_ceb71f1a
UUID: 8d99cdfb_dcf98d95
Bytes: 99
Yes, I made that way since its easier to manage. Not a huge deal since there is only 3 per runtime.

184:8-184:50
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_f0dae663
Bytes: 13
Drop MIRROR_?

184:8-184:50
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_f0dae663
UUID: ad73f192_18430923
Bytes: 4
Done

File: runtime/base/arena_allocator.h

240:4-240:10
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_730ed0e9
Bytes: 75
Should we need to free ptr before returning? If not, don't call it realloc?

240:4-240:10
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_730ed0e9
UUID: ad73f192_583d818a
Bytes: 61
Well, linear alloc doesn't support free yet. I'll add a TODO.

260:28-260:29
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_b3e6a8b1
Bytes: 6
const?

260:28-260:29
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_b3e6a8b1
UUID: 6d9499c1_ad1e3fe2
Bytes: 4
Done

File: runtime/class_linker.cc

425:62-425:83
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_b2ccbfb8
Bytes: 35
Where do we set up the default imt?

425:62-425:83
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_b2ccbfb8
UUID: 0d5f9dfa_341ee961
Bytes: 18
Fixed the comment.

1192:10-1192:11
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_a5ad8a9d
Bytes: 7
Remove.

1192:10-1192:11
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_a5ad8a9d
UUID: 8d99cdfb_9c18e577
Bytes: 4
Done

2338:8-2338:29
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_a4a9038b
Bytes: 57
Use ScopedAssertNoThreadSuspension around the above code?

2640:4-2640:86
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_c82ee238
Bytes: 28
Does this need read barrier?

3281:12-3281:39
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_c47c4f70
Bytes: 75
ArtMethod arrays are no longer allocated in the heap. So, this isn't right?

3281:12-3281:39
Wed May 27 11:08:48 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_c47c4f70
UUID: ed8889a6_9450b231
Bytes: 190
Native allocations abort on failure. (Though, the abort can be either abort() from ::operator new, or Runtime::Abort() from a failed CHECK() or even an uncaught std::bad_alloc (host only?).)

3281:12-3281:39
Wed May 27 21:58:35 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_9450b231
UUID: 6d9499c1_e1093065
Bytes: 140
I'm leaving these here in case we want to bound linear alloc and throw OOM if it gets too full or something. It can't return null currently.

3297:10-3297:35
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_e46a2b9b
Bytes: 5
Same.

3921:2-3921:84
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_a880ce95
Bytes: 28
Does this need read barrier?

4539:18-4539:38
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_68008f70
Bytes: 292
The roots in ArtMethods are only reachable from GC only when they are reachable from the declaring classes. In this function, are there ArtMethods that may be at least temporarily not reachable from their declaring classes?

Is this function moving GC safe with regard to the ArtMethod roots?

4658:23-4658:32
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_73afe25d
Bytes: 67
You can use this allocator also for miranda_methods and move_table.

4658:23-4658:32
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_73afe25d
UUID: 6d9499c1_7b24ffa9
Bytes: 4
Done

4713:6-4713:15
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_c577ebca
Bytes: 23
Can this be ArtMethod*?

4767:14-4767:74
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_d8fa55f2
Bytes: 7
Remove?

4767:14-4767:74
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_d8fa55f2
UUID: 6d9499c1_bb492795
Bytes: 4
Done

4816:82-4816:89
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_bd7027d8
Bytes: 61
This implicit copying of ArtMethod isn't read barrier unsafe.

File: runtime/entrypoints/entrypoint_utils-inl.h

580:83-580:96
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_28331e29
Bytes: 114
Is it ok not use the image pointer size in this function?

When do we use sizeof(void*) or the image pointer size?

580:83-580:96
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_28331e29
UUID: ad73f192_58e661b4
Bytes: 161
If it is only called by the runtime, its OK to use sizeof(void*). That is a bit faster. I tried to add enough DCHECKs to guard if there is errors regarding this.

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

329:0-330:27
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_d354ecac
Bytes: 51
What's the purpose of the GetDeclaringClass() here?

329:0-330:27
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_d354ecac
UUID: 4d0995dc_5c661f9d
Bytes: 8
Deleted.

623:10-623:19
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_08c73a49
Bytes: 27
Spell out non_proxy_method?

623:10-623:19
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_08c73a49
UUID: 0d5f9dfa_54cc3d69
Bytes: 4
Done

File: runtime/fault_handler.cc

335:2-335:40
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_0e911751
Bytes: 5
TODO?

335:2-335:40
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_0e911751
UUID: 4d0995dc_9c60b77f
Bytes: 19
Yes, its not vital.

344:5-345:65
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_9ab9bc59
Bytes: 103
This comment needs to be updated?

Should we disable the read barrier for the GetDeclaringClass() call?

344:5-345:65
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_9ab9bc59
UUID: ad73f192_58ff412c
Bytes: 4
Done

File: runtime/gc/accounting/mod_union_table_test.cc

240
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_13e5bed2
Bytes: 58
Why are we not comparing oss.str() and oss2.str() anymore?

240
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_13e5bed2
UUID: 6d9499c1_7bd6bfed
Bytes: 80
It was failing since there ends up being dirty cards caused by the class linker.

File: runtime/globals.h

71:22-71:38
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_08829ad8
Bytes: 24
Could this go away, too?

71:22-71:38
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_08829ad8
UUID: 6d9499c1_8db50330
Bytes: 4
Done

File: runtime/handle_scope.h

163:17-163:18
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_e89f3f5f
Bytes: 7
const ?

163:17-163:18
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_e89f3f5f
UUID: 0d5f9dfa_f4d631eb
Bytes: 4
Done

File: runtime/image.cc

27:27-27:40
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_c8043b1b
Bytes: 24
Bump the version number?

27:27-27:40
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_c8043b1b
UUID: ad73f192_380b65d9
Bytes: 4
Done

File: runtime/image.h

133:4-133:22
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_822dec91
Bytes: 40
This is a sentinel value. Add a comment?

133:4-133:22
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_822dec91
UUID: 6d9499c1_0d92d3a6
Bytes: 4
Done

147:4-147:17
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_4213d459
Bytes: 40
This is a sentinel value. Add a comment?

147:4-147:17
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_4213d459
UUID: 6d9499c1_2d878f68
Bytes: 4
Done

File: runtime/interpreter/unstarted_runtime.cc

764:31-764:33
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_4829323c
Bytes: 68
Does this operator need SHARED_LOCKS_REQUIRED(Locks::mutator_lock_)?

764:31-764:33
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_4829323c
UUID: 0d5f9dfa_348269d9
Bytes: 23
Its in header file now.

File: runtime/jit/jit_code_cache.h

125:5-125:45
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_1a5e8c77
Bytes: 7
Remove.

125:5-125:45
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_1a5e8c77
UUID: ad73f192_d83c3176
Bytes: 4
Done

File: runtime/linear_alloc.cc

26:19-26:26
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_a829c73e
Bytes: 24
Will ptr be deallocated?

26:19-26:26
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_a829c73e
UUID: ad73f192_38344589
Bytes: 61
No, its only supposed to be in linear alloc or image anyways.

File: runtime/mirror/abstract_method.h

64:11-64:22
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d0995dc_08c3badd
Bytes: 73
Is it possible to have a static_assert about the alignment of this field?

64:11-64:22
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d0995dc_08c3badd
UUID: ad73f192_58310198
Bytes: 91
Not sure if you can do that, we have class linker test which verifies, is that good enough?

File: runtime/mirror/array-inl.h

374:0-374:2
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_aad1cf84
Bytes: 83
Is there already an assert that this is indeed a long/int array if ptr_size == 8/4?

374:0-374:2
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_aad1cf84
UUID: 0d5f9dfa_7475c176
Bytes: 24
AsLongArray checks this.

384:26-384:43
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_fd655a1b
Bytes: 10
Same here.

384:26-384:43
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_fd655a1b
UUID: ad73f192_782ebd3a
Bytes: 4
Done

File: runtime/mirror/class-inl.h

632:70-632:72
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_79ac079a
Bytes: 19
8u -> pointer_size?

884:77-884:79
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_73340058
Bytes: 12
pointer_size

884:77-884:79
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_73340058
UUID: 4d0995dc_5caf3f0f
Bytes: 4
Done

File: runtime/mirror/class.cc

804:41-804:60
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d0c61ed_339e08ae
Bytes: 42
Why not "ArtMethod* (&methods)[kImtSize]"?

804:41-804:60
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d0c61ed_339e08ae
UUID: 6d9499c1_5b64a3ca
Bytes: 4
Done

File: runtime/mirror/class.h

1045:49-1045:67
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_6338b001
Bytes: 65
Is there a difference between image_pointer_size vs pointer_size?

1045:49-1045:67
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_6338b001
UUID: 0d5f9dfa_b4403915
Bytes: 16
No, I'll rename.

1219:30-1219:37
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_037b74b9
Bytes: 33
Does this need to be in the heap?

1219:30-1219:37
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_037b74b9
UUID: 6d9499c1_f009fc64
Bytes: 32
No, but I left it there for now.

1226:11-1226:26
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_c3597c5f
Bytes: 55
Is this a pointer to an ArtMethod array? Leave comment?

1226:11-1226:26
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_c3597c5f
UUID: 6d9499c1_d0ec000b
Bytes: 4
Done

File: runtime/mirror/object-inl.h

359:0-361:92
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_8e2debc3
Bytes: 24
DCHECK(IsFloatArray()) ?

359:0-361:92
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_8e2debc3
UUID: ad73f192_f853adbe
Bytes: 4
Done

374:0-376:93
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_6e61770f
Bytes: 24
DCHECK(IsDoubleArray())?

374:0-376:93
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_6e61770f
UUID: 0d5f9dfa_f4fc7138
Bytes: 4
Done

964:69-964:90
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_3db8a225
Bytes: 61
For static fields, there's no reference map and no fast path?

964:69-964:90
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_3db8a225
UUID: 6d9499c1_30660428
Bytes: 38
I guess not, I think there used to be.

File: runtime/mirror/object.cc

96:6-96:25
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_0ead5b95
Bytes: 35
Why is this necessary? Add comment?

96:6-96:25
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_0ead5b95
UUID: ad73f192_d8c7d1e5
Bytes: 8
Deleted.

File: runtime/native/dalvik_system_VMStack.cc

93:6-93:39
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d5f9dfa_0e28fb7c
Bytes: 21
Can this be asserted?

93:6-93:39
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d5f9dfa_0e28fb7c
UUID: 0d5f9dfa_544fdd15
Bytes: 27
Added to GetDeclaringClass.

File: runtime/stack.cc

719:4-719:5
Wed May 27 01:05:31 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d9499c1_1813f45a
Bytes: 61
Also check the method is within a linear alloc address range?

719:4-719:5
Wed May 27 18:30:11 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d9499c1_1813f45a
UUID: 0d5f9dfa_f4e63159
Bytes: 4
Done

File: runtime/thread.cc

1619:0-1621:27
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdf3c519_38ec193a
Bytes: 71
I don't like mixing the method pointers with dex pcs in the same array.

1619:0-1621:27
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdf3c519_38ec193a
UUID: 8d99cdfb_9cfaa5f1
Bytes: 98
What do you suggest, an object array fo size 2 with a long/int method array + an int dex pc array?

1619:0-1621:27
Tue May 26 20:59:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8d99cdfb_9cfaa5f1
UUID: cdf3c519_c859e0e2
Bytes: 261
Oh, I missed the fact that previously the last element of method_trace_ was a reference to the dex_pc_trace_. If it's necessary to have a single mirror object hold all the data, then this inevitably has to be messy. In that case I'm OK with this implementation.

File: test/001-HelloWorld/src/Main.java

21:4-21:22
Tue May 26 13:08:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8889a6_05447678
Bytes: 84
Why is this in the HelloWorld? If you want a test with this GC, create another test.

21:4-21:22
Tue May 26 20:45:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8889a6_05447678
UUID: 6d9499c1_db75134a
Bytes: 22
Forgot to revert this.

