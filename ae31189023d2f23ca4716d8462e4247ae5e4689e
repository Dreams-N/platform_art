Revision: ae31189023d2f23ca4716d8462e4247ae5e4689e
Patch-set: 22
File: compiler/optimizing/register_allocator_graph_color.cc

26:0-26:41
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_fb89cd85
Bytes: 69
Comment. I assume that's the highest of all the platforms we support?

26:0-26:41
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_fb89cd85
UUID: af44013b_b24138f8
Bytes: 4
Done

33:72-33:73
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_1b7f8177
Bytes: 1
&

33:0-33:91
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_3b84456b
Bytes: 32
Put this method in LiveInterval?

33:0-33:91
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_3b84456b
UUID: af44013b_811b0881
Bytes: 4
Done

33:72-33:73
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_1b7f8177
UUID: af44013b_611e1c74
Bytes: 4
Done

84:18-84:46
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_5b79f98e
Bytes: 48
Add a IsBlockedCoreRegister(i) to CodeGenerator.

84:18-84:46
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_5b79f98e
UUID: af44013b_d236c49a
Bytes: 4
Done

94:18-94:50
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_7b76bda1
Bytes: 5
ditto

94:18-94:50
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_7b76bda1
UUID: af44013b_f23bc07f
Bytes: 4
Done

104:19-106:29
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_9b7371af
Bytes: 9
One line?

104:19-106:29
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_9b7371af
UUID: af44013b_322e283e
Bytes: 4
Done

108:10-108:14
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_bb7035a3
Bytes: 72
adjacent_nodes_

If too long, consider neighboors_ or something similar.

108:10-108:14
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_bb7035a3
UUID: af44013b_522bb42c
Bytes: 4
Done

133
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_fbae2de8
Bytes: 16
Missing new line

133
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_fbae2de8
UUID: af44013b_b2e69818
Bytes: 4
Done

136
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_1bb4e139
Bytes: 5
ditto

136
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_1bb4e139
UUID: af44013b_d2eb24df
Bytes: 4
Done

139
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_3bb9a531
Bytes: 5
ditto

139
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_3bb9a531
UUID: af44013b_12f68cc9
Bytes: 4
Done

157:0-158:33
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_5bbe5919
Bytes: 109
Looks off. Can you comment what degree is for, and then your constraints (like what you're currently saying?)

157:0-158:33
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_5bbe5919
UUID: af44013b_f54f2abd
Bytes: 70
Yes, added a detailed comment about the interference graph in general.

161:0-161:39
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_9bc8d1bd
Bytes: 56
Only used to avoid pointer comparisons in the set right?

161:0-161:39
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_9bc8d1bd
UUID: af44013b_b2cf7880
Bytes: 31
Yes; I've extended the comment.

164:2-164:61
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_fb970d92
Bytes: 29
Why? Please add more context.

164:2-164:61
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_fb970d92
UUID: af44013b_72d6f01b
Bytes: 4
Done

236:0-239:72
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_9ba1b1ef
Bytes: 77
Looks odd, how are we making sure we're successful before such many attempts?

236:0-239:72
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_9ba1b1ef
UUID: af44013b_b53be2d2
Bytes: 363
I've removed the CHECK, and added a comment at the top of the file explaining how we guarantee forward progress. (Essentially, we ensure that live intervals are split on every attempt, so that eventually the interference graph is sparse enough to color.)
I'll keep the DCHECK, though, since we want to catch changes that undermine the forward progress guarantees.

260:14-260:15
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_bb9e75a7
Bytes: 5
avoid

260:14-260:15
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_bb9e75a7
UUID: af44013b_b5e5a237
Bytes: 28
Done (replaced with pointer)

318:27-318:46
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_dbf7a9f7
Bytes: 22
new line for this one.

318:27-318:46
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_dbf7a9f7
UUID: af44013b_d5da2e72
Bytes: 4
Done

336:34-336:52
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_9bf611f6
Bytes: 137
Please upload a change where ProcessInstruction is shared between LinearScan and GraphColoring. The code involved looks awfully the same.

342:0-347:11
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_fbfc6ddc
Bytes: 53
So did this solve your problem with the SuspendCheck?

342:0-347:11
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_fbfc6ddc
UUID: af44013b_9545061d
Bytes: 406
Not exactly. This is what linear scan did, but the issue is that the suspect check remains in the list of instructions contained in liveness analysis. So, the suspend check is encountered again during SSA resolution, even though its state is no longer valid. Like linear scan, graph coloring doesn't run into issues in tests due to this, but I still would like to change it just in case (in a separate CL).

363:0-366:3
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_1b0221da
Bytes: 14
Add a comment.

363:0-366:3
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_1b0221da
UUID: af44013b_93299b8d
Bytes: 4
Done

380:6-383:19
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_3b07e5e9
Bytes: 111
Add a comment that the HasSpillSlot is at this stage equivalent to being a parameter (or the ArtMethod, right?)

380:6-383:19
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_3b07e5e9
UUID: af44013b_3580d225
Bytes: 4
Done

419
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_7be95d14
Bytes: 40
Top level comment like the method above.

419
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_7be95d14
UUID: af44013b_b5e68218
Bytes: 4
Done

662:6-664:56
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_bbf3d505
Bytes: 153
Memory wise, this looks scary, since we can do many attemps to build the interference graph. Consider creating a ArenaAllocator dedicated for each round.

662:6-664:56
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_bbf3d505
UUID: af44013b_4042fe97
Bytes: 4
Done

689:2-689:16
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_5bd5793f
Bytes: 20
What does that mean?

689:2-689:16
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_5bd5793f
UUID: af44013b_20f33273
Bytes: 53
I've added some clarifying comments in this function.

693:0-693:58
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_7bd23d5a
Bytes: 49
English comment please on what you're doing here.

693:0-693:58
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_7bd23d5a
UUID: af44013b_40f03e64
Bytes: 4
Done

703:11-703:27
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_9bcff1ab
Bytes: 48
Move this to else body, and say // end of range.

703:11-703:27
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_9bcff1ab
UUID: af44013b_404cbe98
Bytes: 4
Done

711:54-712:12
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_bbccb5b7
Bytes: 47
Expand. I assume that's to avoid infinite loop?

711:54-712:12
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_bbccb5b7
UUID: af44013b_c00d0e42
Bytes: 26
Yes; expanded the comment.

764:21-764:36
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_db45e91b
Bytes: 12
one per line

764:21-764:36
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_db45e91b
UUID: af44013b_80f4e626
Bytes: 4
Done

770:27-770:30
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_fb4aad28
Bytes: 8
adjacent

770:27-770:30
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_fb4aad28
UUID: af44013b_a00d623b
Bytes: 4
Done

781:10-781:65
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_1b5061da
Bytes: 62
You never introduced the notion of high degree and low degree.

781:10-781:65
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_1b5061da
UUID: af44013b_003636ea
Bytes: 59
I've added a comment about this at the top of the function.

835:8-835:9
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_3b5525ca
Bytes: 5
avoid

835:8-835:9
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_3b5525ca
UUID: af44013b_e07e8a79
Bytes: 78
Realized I didn't need to reference this variable at all, so removed entirely.

File: compiler/optimizing/register_allocator_graph_color.h

61:18-61:25
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_78596392
Bytes: 8
requires

61:18-61:25
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_78596392
UUID: af44013b_e08cca85
Bytes: 4
Done

98:54-98:57
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_7b579dd0
Bytes: 105
As a rule, please make reference const, and what you cannot make const, make it '*'. It avoids confusion.

98:54-98:57
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_7b579dd0
UUID: af44013b_40a11ea5
Bytes: 4
Done

102:66-104:16
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_1b66a1f9
Bytes: 34
Why is that not the returned type?

102:66-104:16
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_1b66a1f9
UUID: af44013b_0098f66f
Bytes: 42
Done. (Forgot to change the comment here.)

119:40-119:46
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_bb5755fd
Bytes: 34
avoid, make that the return value.

119:40-119:46
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_bb5755fd
UUID: af44013b_db87bf07
Bytes: 4
Done

150:0-150:72
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_db840971
Bytes: 70
Say that it's either one or two depending on whether 32bits or 64bits.

150:0-150:72
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_db840971
UUID: af44013b_fb8c7b2c
Bytes: 4
Done

File: compiler/optimizing/ssa_liveness_analysis.h

510:24-510:35
Sat Jul 30 16:00:47 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6f34c9be_5b5ad9f9
Bytes: 10
definition

510:24-510:35
Tue Aug 02 00:41:45 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f34c9be_5b5ad9f9
UUID: af44013b_80c5c6a5
Bytes: 4
Done

