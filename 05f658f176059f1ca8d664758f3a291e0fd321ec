Revision: 05f658f176059f1ca8d664758f3a291e0fd321ec
Patch-set: 3
File: /COMMIT_MSG

7:0-7:8
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9502fa6_8544c868
Bytes: 148
"Clean up" as "Refactor" would imply no behavior changes? Or, making "CMS as the pre-fork collector" as the main CL description, with other cleanup?

11:49-11:52
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9921f333_bfcf9f44
Bytes: 5
Nice.

21:5-21:12
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9fbcfcb_99dc0758
Bytes: 35
This seems to point to a wrong bug.

File: runtime/gc/heap.cc

169:4-169:30
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9fbcfcb_59d32f27
Bytes: 540
background_collector_type_ defaults to post_zygote_collector_type_ (at the bottom of ParsedOptions::Parse()) if -XX:BackgroundGC is not specified.

Not that background GC means anything right now for the command line case, maybe it's a tiny bit more general if we don't overwrite background_collector_type_ here? Or, if we want to overwrite it, would it be cleaner if we complain/exit at the flag/option parsing time if background_collector_type_ != post_zygote_collector_type_ and a command line case (!is_zygote)?

This is a subtle point.

171:18-171:41
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9502fa6_05a2f894
Bytes: 255
Shouldn't this be always CMS if the zygote case (is_zygote = true) as, I assume, we hardcode CMS as the pre-fork collector, correct?

For the command line case (is_zygote = false), this looks fine as desired_collector_type_ == post_zygote_collector_type_.

171:18-171:41
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9502fa6_a596a437
Bytes: 259
Shouldn't this be always CMS if zygote case (is_zygote == true)? I assume this change hardcodes CMS as the pre-fork collector, correct?

For the command line case (is_zygote == false), this is correct as desired_collector_type_ == post_zygote_collector_type_.

196:32-196:44
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39d4872d_42143f9b
Bytes: 291
I think this should specify the base address (pass non_moving_space_->Limit() instead of nullptr as the second argument) so that this comes right after the non-moving space with no gap. Otherwise, the immune region thing may subtly break (eg a LOS object could be allocated between the gap).

213:46-213:96
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39d4872d_2284a38b
Bytes: 169
This could be more precise, I think. The background compaction is not the only reason/case. What if post_zygote_collector_type_ is a compacting one? The code looks fine.

221:49-221:51
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 793d1f4c_a0853a48
Bytes: 265
Could we combine the two if statement so that we need to check IsCompactingGC(post_zygote_collector_type) once?

This seems to imply that we hardcode CMS as pre-fork collector (that is, no SS as pre-fork) as otherwise we would need two bump pointer spaces. Correct?

1416:8-1416:19
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9921f333_1ff9eb97
Bytes: 51
Which space does temp_space point to at this point?

1419:41-1419:61
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39d4872d_c264cf2f
Bytes: 507
Is the reason to do so that we can save some address space?

I think there could be some downsides though:

First the three mem maps (bump pointer space 1 & 2 and the main space) need to be of the same size (which was the case before and after this change, however.)

The ashmem names would probably sometimes look wrong as they are not updatable.

Also, not that a transition currently works for GSS, but GSS uses the three spaces at the same time. This change would make it harder to add support for that.

1437:16-1437:23
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f9502fa6_25f61402
Bytes: 603
Is this guaranteed to be the mem map that used to be the main space when we transitioned from CMS -> SS last time? Otherwise, as we don't specify where the bump pointer spaces are in the address space, the main space could be the "wrong" one that's not adjacent to the image/zygote/non-moving spaces, and the immune regions break with regard to the LOS objects which could be in the gaps anywhere?

At the minimum, if we do this, as the enforcing gapless immune region is error-prone, do you mind adding an assert that checks that whatever is put into the immune region is actually contiguous (gapless)?

1438:43-1438:56
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 793d1f4c_402b0e62
Bytes: 56
Is there a reason that kDefaultInitialSize doesn't work?

1447:8-1447:37
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39d4872d_a41b2085
Bytes: 203
Also, shouldn't temp_space be updated to point to the the mem map that bump_pointer_space_ points to here? Otherwise, I'm not sure what temp_space_ points to  in the CMS->SS transition (line 1416) above?

1642:34-1642:41
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d94d2b11_644d005b
Bytes: 23
Is this call necessary?

1656:23-1656:46
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9921f333_390c0f54
Bytes: 299
Is this meant to refer to the collector type used pre-fork?

If so, isn't the pre-fork collector always CMS (is the true block of this if statement reachable?)

Can you remind where desired_collector_type_ is set? Isn't desired_collector_type_ set to the post_zygote_collector_type_ in Heap::Heap()?

1673:37-1673:43
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9921f333_99b0bb0a
Bytes: 24
Use kDefaultInitialSize?

2469:9-2470:55
Thu Apr 10 00:02:18 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9921f333_dc08618a
Bytes: 192
What if background_collector_type_ == SS and post_zygote_collector_type_ == SS?

What if background_collector_type_ == GSS and post_zygote_collector_type_ == GSS? Note GSS uses the main space.

