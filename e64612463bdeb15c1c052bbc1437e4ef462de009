Revision: e64612463bdeb15c1c052bbc1437e4ef462de009
Patch-set: 1
File: compiler/optimizing/register_allocator.cc

1116:24-1116:25
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 507cce56_42daf2eb
Bytes: 2
at

1116:24-1116:25
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 507cce56_42daf2eb
UUID: 90c486d3_c4eede85
Bytes: 4
Done

1128:42-1128:47
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70bf1233_a3c8fa29
Bytes: 6
before

1128:42-1128:47
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70bf1233_a3c8fa29
UUID: 90c486d3_240412cf
Bytes: 4
Done

1130:35-1130:41
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90c486d3_64656ac5
Bytes: 6
chance

1130:35-1130:41
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90c486d3_64656ac5
UUID: 90c486d3_a44122fe
Bytes: 4
Done

1131:35-1131:39
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70bf1233_83cdfe39
Bytes: 2
as

1131:61-1131:69
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90c486d3_a44da252
Bytes: 12
just "avoid"

1131:61-1131:69
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90c486d3_a44da252
UUID: 70bf1233_a36c7a89
Bytes: 4
Done

1131:35-1131:39
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70bf1233_83cdfe39
UUID: 90c486d3_040116bf
Bytes: 4
Done

1136:17-1136:67
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90c486d3_845226ec
Bytes: 49
dominated blocks are not sorted in liveness order

1136:17-1136:67
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90c486d3_845226ec
UUID: 90c486d3_64fe0a33
Bytes: 4
Done

1138:11-1138:47
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70bf1233_23dd2ae3
Bytes: 48
You use this three times, turn into a local var?

1138:11-1138:47
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70bf1233_23dd2ae3
UUID: 507cce56_e224e667
Bytes: 4
Done

1139:14-1139:23
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70bf1233_03daaeea
Bytes: 69
Explain what this is or give it a better name, 'first_sibling_start'?

1139:14-1139:23
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70bf1233_03daaeea
UUID: 90c486d3_a41ac225
Bytes: 51
Actually the variable duplicates block_to. Removed.

1140
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70bf1233_43fb0641
Bytes: 153
How about a DCHECK that block_to != block_from. It's guaranteed by the strict greater-than on 1138 but it would be nice to write that written explicitly.

1140
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70bf1233_43fb0641
UUID: 507cce56_220faee6
Bytes: 4
Done

File: compiler/optimizing/ssa_liveness_analysis.cc

339:6-339:37
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70bf1233_e324b267
Bytes: 40
Isn't this just !IsParent() = IsSplit()?

339:6-339:37
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70bf1233_e324b267
UUID: 507cce56_e23b067c
Bytes: 4
Done

File: compiler/optimizing/ssa_liveness_analysis.h

1119:0-1119:57
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90c486d3_a4c8022a
Bytes: 75
Sounds like it would be useful to document what `index` is in this context.

1119:0-1119:57
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90c486d3_a4c8022a
UUID: 70bf1233_2381aa98
Bytes: 64
Yeah, this index/position is a mess. I'll cleanup in another CL.

File: test/484-checker-register-hints/src/Main.java

23
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 507cce56_a21ade25
Bytes: 135
Might be worth doing a 'CHECK-NOT: end_block' between the name and the If, just to make sure it is in B1. Same with the ArraySet below.

23
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 507cce56_a21ade25
UUID: 70bf1233_638ba2b8
Bytes: 4
Done

24
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90c486d3_64e72aaf
Bytes: 33
Different indentation, more below

24
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90c486d3_64e72aaf
UUID: 70bf1233_438826ba
Bytes: 4
Done

104:11-105:5
Fri May 01 15:57:26 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 70bf1233_e33b127c
Bytes: 41
Does this actually create an empty block?

104:11-105:5
Fri May 01 16:23:56 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70bf1233_e33b127c
UUID: 70bf1233_a353dac1
Bytes: 52
Yes. I added instructions though to ensure it's not.

