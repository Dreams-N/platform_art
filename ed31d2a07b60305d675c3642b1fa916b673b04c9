Revision: ed31d2a07b60305d675c3642b1fa916b673b04c9
Patch-set: 6
File: compiler/dwarf/debug_info_entry_writer.h

141
Mon Nov 23 14:54:24 2015 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bbb8a7d5_59234399
Bytes: 76
I think we don't need this comment as all information you generate is dwarf4

141
Tue Nov 24 02:31:08 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bbb8a7d5_59234399
UUID: 5bc96b78_79ad63aa
Bytes: 64
Fair enough.  I do not envision we might need to support dwarf3.

File: compiler/elf_writer_debug.cc

322:6-322:48
Mon Nov 23 14:57:50 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bc4b760_358db019
Bytes: 39
"Can"? Is there an ambiguity in DWARF4?

322:6-322:48
Mon Nov 23 15:27:37 2015 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bc4b760_358db019
UUID: 9baf638f_18ee2573
Bytes: 211
It allows both format. If you specify the value with class address (DW_FORM_addr) then it is an absolute address and if you specify it with class constant (e.g. DW_FORM_data4) then it is the size of the function

322:6-322:48
Mon Nov 23 15:39:01 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9baf638f_18ee2573
UUID: 9b7da3ef_4830df96
Bytes: 79
I see, the subtle change from WriteAddr() to WriteUdata() makes the difference.

377
Mon Nov 23 14:54:24 2015 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bc4b760_75e568cb
Bytes: 55
I think "this" will be a 64 bit value on 64 bit systems

377
Mon Nov 23 15:04:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bc4b760_75e568cb
UUID: 5bc96b78_565f94f2
Bytes: 76
No, Java heap references are (for the moment) 32-bit even on 64-bit systems.

394
Mon Nov 23 14:54:24 2015 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b7da3ef_088a6792
Bytes: 181
Are we storing a 64 bit value in 2 virtual register on 64 bit systems also? (Please check all location where you special case 64 bit values to make sure they work on 64 bit systems)

394
Mon Nov 23 15:04:21 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b7da3ef_088a6792
UUID: 7bb2aff7_175b5439
Bytes: 36
vreg refers to 32-bit dex registers.

425:11-425:22
Mon Nov 23 14:57:50 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb921f65_abe6a9d4
Bytes: 4
typo

425:11-425:22
Tue Nov 24 02:31:08 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb921f65_abe6a9d4
UUID: 7bb2aff7_17d8b4a2
Bytes: 4
Done

467:49-467:57
Mon Nov 23 14:57:50 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7bb2aff7_377778ba
Bytes: 4
typo

467:49-467:57
Tue Nov 24 02:31:08 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7bb2aff7_377778ba
UUID: fb921f65_6b9921ec
Bytes: 4
Done

470
Mon Nov 23 14:54:24 2015 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5bc96b78_b62c686e
Bytes: 84
(nit): I would suggest to initialize it to true and then remove the else from the if

470
Tue Nov 24 02:31:08 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5bc96b78_b62c686e
UUID: bbb8a7d5_b90d3fbf
Bytes: 78
It is intentional.  If any path fails to set it, we will get compiler warning.

512:14-512:17
Mon Nov 23 14:57:50 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb921f65_4bf9c570
Bytes: 9
uint32_t?

512:14-512:17
Tue Nov 24 02:31:08 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb921f65_4bf9c570
UUID: 5bc96b78_99b15f0b
Bytes: 4
Done

513:0-518:15
Mon Nov 23 14:57:50 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb921f65_6bfe815b
Bytes: 16
Helper function?

513:0-518:15
Tue Nov 24 02:31:08 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb921f65_6bfe815b
UUID: bbb8a7d5_d90af3a3
Bytes: 4
Done

522
Mon Nov 23 14:54:24 2015 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9baf638f_b819b964
Bytes: 274
It would be nice if we can properly handle the case when a 64 bit (float) value is in a 64 bit (float) register.
If I understand correctly then currently you will say it is split between two S<n> register instead of saying it is in a D<n> register (with arm register names).

522
Tue Nov 24 02:31:08 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9baf638f_b819b964
UUID: fb921f65_8b9d6dda
Bytes: 144
Good point, but it does not seem exactly trivial.
I have added TODO and I will do it with local variables when I have more data to test it with.

534:14-534:43
Mon Nov 23 14:57:50 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9baf638f_d8166d33
Bytes: 20
What does this mean?

534:14-534:43
Mon Nov 23 15:27:37 2015 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9baf638f_d8166d33
UUID: fbbdbfca_f321907c
Bytes: 186
DW_OP_consts will push the SLEB128 value after it to the dwarf stack and then DW_OP_stack_value is the operation what says that the value of the variable is at the top of the dwarf stack

