Revision: 5358ae7f283068ca3abae08f0dbf6f10cefc8a19
Patch-set: 7
File: compiler/dex/mir_annotations.h

33:0-33:36
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cff9d9ff_dec40152
Bytes: 40
comment adds nothing to the declaration.

33:0-33:36
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cff9d9ff_dec40152
UUID: 6f646d9a_1c9ca59c
Bytes: 8
Removed.

36:0-36:21
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0ff0510e_c053805c
Bytes: 16
The index in ???

36:0-36:21
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0ff0510e_c053805c
UUID: 6f646d9a_bc8c796f
Bytes: 4
Done

37:0-37:24
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: effcddee_1ff30756
Bytes: 10
what am I?

37:0-37:24
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: effcddee_1ff30756
UUID: 8f860164_85c7d251
Bytes: 4
Done

38:0-38:24
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0ff0510e_a058f477
Bytes: 10
what am I?

38:0-38:24
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0ff0510e_a058f477
UUID: 8f860164_25d4e6fd
Bytes: 4
Done

39:0-39:27
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cff9d9ff_9eba79c2
Bytes: 85
we should comment that we can't possibly know this in the case of an unresolved field

39:0-39:27
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cff9d9ff_9eba79c2
UUID: 8f860164_45d1ea0c
Bytes: 4
Done

41:0-41:19
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0ff0510e_005e0862
Bytes: 71
MemberOffset should be a POD type. What the value here when unresolved?

41:0-41:19
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0ff0510e_005e0862
UUID: af81054e_6692f68f
Bytes: 176
MemberOffset doesn't have a default ctor, so it's not a POD.

Nevertheless, I changed this to MemberOffset. (I lost my favorite constexpr modifier on Unresolved() as a result.)

42:0-42:69
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cff9d9ff_5ef471a1
Bytes: 102
The dex file that defines the class containing the field and the field. For unresolved fields nullptr.

42:0-42:69
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cff9d9ff_5ef471a1
UUID: af81054e_e60826f8
Bytes: 4
Done

44:5-44:19
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0ff0510e_807df8c7
Bytes: 80
The type index of the class declaring the field or 0 if the field is unresolved.

44:5-44:19
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0ff0510e_807df8c7
UUID: 8f860164_05a4429c
Bytes: 4
Done

46:0-46:40
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: effcddee_3ff6c345
Bytes: 87
// The field index in the dex file that defines field, or 0 is the field is unresolved.

46:0-46:40
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: effcddee_3ff6c345
UUID: 8f860164_a598d666
Bytes: 4
Done

53:0-53:2
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0ff0510e_e062fc1f
Bytes: 114
why is there no "bool IsUnresolved()" method? Why are the barely documented guts of this laid bare for use/misuse?

53:0-53:2
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0ff0510e_e062fc1f
UUID: 8f860164_65266e9d
Bytes: 132
Because it doesn't make sense to add tons of boilerplate code to a simple struct. You could ask the same question about MIR and LIR.

53:0-53:2
Wed Feb 19 19:52:26 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f860164_65266e9d
UUID: cff9d9ff_e45cd0ba
Bytes: 434
Please don't follow MIR or LIR for examples of our coding style. This code is the worst example and fixing it up is an ongoing process. The origin of the code was Dalvik and you'll find vestiges of 80 character column wraps as well as just poor OO style, take the ongoing SlowPath clean-up as an example. The reason for adding accessors is it encapsulates meaning in a single place rather than distributing it over the implementation.

59:0-59:21
Wed Feb 19 15:24:39 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cff9d9ff_3eca455b
Bytes: 15
repeat as above

59:0-59:21
Wed Feb 19 19:42:01 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cff9d9ff_3eca455b
UUID: af81054e_269cee9c
Bytes: 4
Done

