Revision: d16e7bb8f5e35ed9a97338e126de37e3c783520d
Patch-set: 3
File: compiler/optimizing/code_generator_arm.cc

3240:19-3240:65
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb36e7c5_696605fe
Bytes: 49
CodeGenerator::GetInt32ValueOf(rhs.GetConstant())

3240:19-3240:65
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb36e7c5_696605fe
UUID: 80dff0f1_af8599ee
Bytes: 4
Done

3242:11-3242:15
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c0eba861_81ed3a7b
Bytes: 18
kMaxLongShiftValue

3242:11-3242:15
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c0eba861_81ed3a7b
UUID: 20d004e4_4c72ffef
Bytes: 4
Done

3246:15-3246:19
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e0e8ac67_c25342e7
Bytes: 22
Maybe kArmBitsPerWord?

3246:15-3246:19
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e0e8ac67_c25342e7
UUID: 80dff0f1_4f72edef
Bytes: 4
Done

3270:4-3270:39
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e0e8ac67_e26886cd
Bytes: 55
Please rename the variables above to avoid this swap().

3270:4-3270:39
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e0e8ac67_e26886cd
UUID: 60c67c32_ee339feb
Bytes: 189
I can't see how to do this without breaking something.

A swap is needed somewhere here - when distance > kArmBitsPerWord, we flip direction and invert distance to simplify things on ARM32.

3270:4-3270:39
Tue Dec 08 15:36:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 60c67c32_ee339feb
UUID: 00106094_0677dcde
Bytes: 243
The swap() was needed when we had to distinguish rotateLeft() and rotateRight() and we did the swap() only in one branch of an if-block.

Now you can rename shift_left<->shift_right above and keep the names below and the swap() will disappear.

3270:4-3270:39
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 00106094_0677dcde
UUID: 403978b3_edfa0564
Bytes: 4
Done

File: compiler/optimizing/instruction_simplifier.cc

198:63-198:67
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c0eba861_81ce5a38
Bytes: 35
HInstruction for better code reuse.

198:63-198:67
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c0eba861_81ce5a38
UUID: 80b8d0a7_e768a2cd
Bytes: 4
Done

201:72-201:73
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b21b386_64d38a83
Bytes: 21
Add space before "1".

201:72-201:73
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b21b386_64d38a83
UUID: 60c67c32_8e40db36
Bytes: 4
Done

204:0-221:1
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb421f2f_2b56b9dc
Bytes: 23
Unnecessary, see below.

204:0-221:1
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb421f2f_2b56b9dc
UUID: 40c17818_cde829a7
Bytes: 4
Done

224:56-224:61
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e0e8ac67_e22f6663
Bytes: 12
Indentation.

224:56-224:61
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e0e8ac67_e22f6663
UUID: e0bb4c9e_4a2093df
Bytes: 4
Done

226:61-226:79
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb1bff58_23d34a56
Bytes: 54
This is always ushr->GetRight(), so it can be removed.

226:61-226:79
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb1bff58_23d34a56
UUID: 00cb003e_eb971104
Bytes: 4
Done

229:54-229:58
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb421f2f_4b5305ec
Bytes: 12
Indentation.

229:54-229:58
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb421f2f_4b5305ec
UUID: 80dff0f1_ef62c11a
Bytes: 4
Done

232:2-232:44
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e0e8ac67_626b569d
Bytes: 145
Either assert that there are no other uses, or do this only conditionally (if you choose to relax the HasOnlyOneNonEnvironmentUse() check below).

232:2-232:44
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e0e8ac67_626b569d
UUID: e0bb4c9e_0a1a9ba9
Bytes: 4
Done

236:2-236:42
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb421f2f_eb9831eb
Bytes: 5
ditto

236:2-236:42
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb421f2f_eb9831eb
UUID: a0b5d4ad_a8b27b1d
Bytes: 4
Done

261:8-262:42
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db339bd5_cdf53db0
Bytes: 29
Should we perhaps relax this?

261:8-262:42
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db339bd5_cdf53db0
UUID: c0be4890_49ce613b
Bytes: 4
Done

320:74-320:79
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db339bd5_4dbceddd
Bytes: 12
Indentation.

320:74-320:79
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db339bd5_4dbceddd
UUID: 20d004e4_6c77bbde
Bytes: 4
Done

332:42-332:45
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a0f23453_00280663
Bytes: 83
This is also ushr->GetRight(), so you don't need to differentiate the two branches.

332:42-332:45
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a0f23453_00280663
UUID: 80b8d0a7_a73dcab9
Bytes: 4
Done

356:74-356:79
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c0eba861_e11ac655
Bytes: 12
Indentation.

356:74-356:79
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c0eba861_e11ac655
UUID: 20d004e4_0c6cf711
Bytes: 4
Done

363:0-386:3
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a0f23453_2080aaaf
Bytes: 546
What about

    HInstruction* shl_shift = shl->GetRight();
    HInstruction* ushr_shift = ushr->GetRight();
    if ((shl_shift->IsSub() && IsSubRegBitsMinusOther(shl_shift->AsSub(), reg_bits, shr_shift)) ||
        (ushr_shift->IsSub() && IsSubRegBitsMinusOther(ushr_shift->AsSub(), reg_bits, shl_shift)) {
      ReplaceRotateWithRor(op, ushr, shl, ushr_shift);
    }

The extra replacement of Sub(k*reg_bits,x) with Neg(x) that you are doing with ReplaceRotateWithNegRor() should be done only if there are no other uses of the Sub(k*reg_bits,x).

363:0-386:3
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a0f23453_2080aaaf
UUID: a0b5d4ad_6898039a
Bytes: 4
Done

1349:0-1359:1
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb1bff58_a3949a68
Bytes: 271
This is a really unnecessary indirection. If it's an intrinsic, you should not check any further that it IsInvokeStaticOrDirect(). If you want, you can DCHECK() that and also DCHECK() that it's actually static. But those DCHECK()s should be in the SimplifyRotate() above.

1349:0-1359:1
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb1bff58_a3949a68
UUID: c0be4890_a9a11d66
Bytes: 4
Done

1431:0-1436:36
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb421f2f_4b814568
Bytes: 101
We should aim at not having these intrinsics at all and rely on inlining and the pattern recognition.

1431:0-1436:36
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb421f2f_4b814568
UUID: 00cb003e_2bb679b0
Bytes: 131
We should. But so long as the intrinsics exist HInliner::Run will refuse to inline those methods, so I have to handle them here(?).

File: compiler/optimizing/nodes.h

4156:6-4156:13
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db339bd5_8dc6e56d
Bytes: 45
I'm wondering if HRor would be a better name.

4156:6-4156:13
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db339bd5_8dc6e56d
UUID: 80b8d0a7_672fd281
Bytes: 4
Done

4169:61-4169:101
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e0e8ac67_a2627ee7
Bytes: 96
If (y & max_shift_value) == 0, you're shifting T by reg_bits which is undefined behavior in C++.

4169:61-4169:101
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e0e8ac67_a2627ee7
UUID: 20d004e4_ec62cb1a
Bytes: 4
Done

File: test/541-checker-instruction-simplifier-rotate-arm/src/Main.java

34:44-34:64
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b2da379_68ac43f3
Bytes: 60
At the moment you should add intrinsic:IntegerRotateRight...

34:44-34:64
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b2da379_68ac43f3
UUID: 20672434_3458303a
Bytes: 4
Done

36:61-36:91
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e0e8ac67_426a9288
Bytes: 115
... but the aim is to get rid of the intrinsic and then this test will need to be rewritten with "inliner (after)".

36:61-36:91
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e0e8ac67_426a9288
UUID: 00f7809a_ebbb718b
Bytes: 105
The invoke is currently removed by instruction_simplifier. Do you want them marked "inliner (after)" now?

36:61-36:91
Tue Dec 08 15:36:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 00f7809a_ebbb718b
UUID: 601bdcb8_093ecd0a
Bytes: 85
No, not yet. This was just a remark about getting rid of the intrinsic in the future.

36:61-36:91
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 601bdcb8_093ecd0a
UUID: 403978b3_2d0ded4f
Bytes: 3
Ok.

54:44-54:64
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb1bff58_e39e9284
Bytes: 27
intrinsic:IntegerRotateLeft

54:44-54:64
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb1bff58_e39e9284
UUID: 20156484_84974605
Bytes: 4
Done

75:44-75:64
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db339bd5_ad19e9c8
Bytes: 25
intrinsic:LongRotateRight

75:44-75:64
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db339bd5_ad19e9c8
UUID: 802450f4_8783c62a
Bytes: 4
Done

95:44-95:64
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a0f23453_40604eb5
Bytes: 24
intrinsic:LongRotateLeft

95:44-95:64
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a0f23453_40604eb5
UUID: 20fc847c_4ce45fd1
Bytes: 4
Done

141
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb421f2f_ebe67167
Bytes: 46
Add the CHECK-NOTs as for ror_int_constant_c_c

141
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb421f2f_ebe67167
UUID: e027ccf2_0ad35bde
Bytes: 4
Done

193
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb1bff58_a37d7a00
Bytes: 15
Add CHECK-NOTs.

193
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb1bff58_a37d7a00
UUID: 802450f4_277ada07
Bytes: 4
Done

214
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb421f2f_0bcc9de0
Bytes: 15
Add CHECK-NOTs.

214
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb421f2f_0bcc9de0
UUID: c02ac8be_c9a3111c
Bytes: 4
Done

283
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e0e8ac67_a27a7e4e
Bytes: 13
CHECK: Rotate

283
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e0e8ac67_a27a7e4e
UUID: 20fc847c_ccefafa9
Bytes: 4
Done

347
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 80f5303f_1fa2a3cd
Bytes: 15
Add CHECK-NOTs.

347
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 80f5303f_1fa2a3cd
UUID: 00f7809a_6bc8212b
Bytes: 4
Done

405
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db339bd5_ad3e4909
Bytes: 15
Add CHECK-NOTs.

405
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db339bd5_ad3e4909
UUID: 20672434_7452a819
Bytes: 4
Done

444
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c0eba861_813f7a97
Bytes: 12
CHECK:Rotate

444
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c0eba861_813f7a97
UUID: 802450f4_aab04f02
Bytes: 4
Done

493
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb1bff58_c372762f
Bytes: 15
Add CHECK-NOTs.

493
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb1bff58_c372762f
UUID: 20fc847c_0c01b71e
Bytes: 4
Done

515
Thu Dec 03 16:10:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db339bd5_cd437d94
Bytes: 15
Add CHECK-NOTs.

515
Tue Dec 08 13:28:19 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db339bd5_cd437d94
UUID: a02154e4_e88ed3e2
Bytes: 4
Done

