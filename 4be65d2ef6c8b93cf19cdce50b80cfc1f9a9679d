Revision: 4be65d2ef6c8b93cf19cdce50b80cfc1f9a9679d
Patch-set: 8
File: compiler/optimizing/nodes.h

5445:28-5445:49
Mon Apr 18 09:21:11 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b732e96_daec25e1
Bytes: 254
Hmmm, don't we have a problem if we start saying Foo.class is the Object class if Foo is erroneous? For example:

if (a instanceof Foo) ...

Won't optimizing the instanceof say always true?

So maybe we can live with an invalid ReferenceTypeInfo instead?

5445:28-5445:49
Mon Apr 18 16:53:03 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b732e96_daec25e1
UUID: 287c78a3_58094112
Bytes: 139
does that optimization look at exactness?

are you proposing now to go back to the erroneous type, or make this invalid?

Calin, any input?

5445:28-5445:49
Mon Apr 18 17:02:34 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 287c78a3_58094112
UUID: 0b732e96_7aa07115
Bytes: 317
We discussed this quite a bit with Calin. We already special case the LoadedClassRti to check invalid if the class is unresolved.

So I'd suggest special casing the HLoadClass to either get a) an invalid RTI if the class is erroneous/unresolved, or b) a boolean flag in HLoadClass. I think I have a preference for a).

5445:28-5445:49
Mon Apr 18 17:31:59 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b732e96_7aa07115
UUID: 0b732e96_da6505ab
Bytes: 146
Yes, I also prefer to make it invalid (option a). We already have a special handling for LoadedClass and it's easier than creating a special case.

5445:28-5445:49
Mon Apr 18 17:51:47 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b732e96_da6505ab
UUID: 287c78a3_1b58a32a
Bytes: 294
I am not sure I follow. After suggestions, we only have two cases of "CreateReferenceTypeInfoAndFixError" left. So now you are saying that one of these should be "CreateReferenceTypeInfoAndFixErrorToInvalid" (while the other will remain the "CreateReferenceTypeInfoAndFixErrorToInexactObject")?

5445:28-5445:49
Mon Apr 18 17:56:53 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 287c78a3_1b58a32a
UUID: 0b732e96_dae0a544
Bytes: 283
I'll leave it up to you if you want to have the helpers. I don't think they are really needed as it's easy to test locally if the class is erroneous or not.

for e.g. in VisitLoadClass()

the check to set it  will be:
if (resolved_class != nullptr && !resolved_class->IsErroneous()).

5445:28-5445:49
Mon Apr 18 18:03:23 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b732e96_dae0a544
UUID: 287c78a3_db978bc2
Bytes: 130
No, if it is just these two, I will remove the helper(s). But can you confirm this is the situation both you and Nicolas want now?

File: compiler/optimizing/reference_type_propagation.cc

253:39-253:81
Mon Apr 18 17:31:59 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b732e96_5a7ad546
Bytes: 68
you can keep Create here. We know that object will not be erroneous.

253:39-253:81
Mon Apr 18 17:51:47 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b732e96_5a7ad546
UUID: 287c78a3_7b7437ce
Bytes: 4
Done

544:6-544:53
Mon Apr 18 17:31:59 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0b732e96_3a7d193e
Bytes: 6
ditto.

544:6-544:53
Mon Apr 18 17:51:47 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0b732e96_3a7d193e
UUID: 287c78a3_db622b11
Bytes: 4
Done

