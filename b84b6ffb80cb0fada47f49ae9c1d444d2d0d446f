Revision: b84b6ffb80cb0fada47f49ae9c1d444d2d0d446f
Patch-set: 1
File: compiler/jit/jit_compiler.cc

71:2-71:22
Thu Oct 29 20:11:18 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6195673_13ae2ca9
Bytes: 91
This isn't safe, is it? The parsing code is written in a way that assumes Usage terminates.

71:2-71:22
Thu Oct 29 21:41:08 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f6195673_13ae2ca9
UUID: 968f39ad_fe82c195
Bytes: 83
You'd rather LOG(FATAL)? And where is the code taking advantage that it terminates?

71:2-71:22
Thu Oct 29 21:44:36 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 968f39ad_fe82c195
UUID: 562a227b_6ec0efa1
Bytes: 233
The one that is writing values into the options?

The style is:

 if (invalid case) {
   Usage();
 }
 options := value

This only works because you assume Usage never returns. Otherwise you get *no* warning that your values are BS...

File: runtime/utils.h

337:29-337:64
Thu Oct 29 20:56:46 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d63612de_327db097
Bytes: 107
Thats a dangling pointer isn't it? I think the substr result goes out of scope at the end of the statement.

337:29-337:64
Thu Oct 29 21:38:55 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d63612de_327db097
UUID: b6399ed2_519034c2
Bytes: 37
Nevermind, thought it was std::string

339:2-345:57
Thu Oct 29 21:45:28 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96401a44_d06adcc1
Bytes: 20
Here, for example...

