Revision: 0984097620f322a7ddda74c79b7def31c638e44e
Patch-set: 1
File: compiler/optimizing/code_generator_x86.cc

4321:0-4322:51
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_78a64173
Bytes: 221
Nit: I believe we prefer this style:

  Location CodeGeneratorX86::GenerateCalleeMethodStaticOrDirectCall(HInvokeStaticOrDirect* invoke,
                                                                    Location temp) {

4321:0-4322:51
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_78a64173
UUID: f2fb3484_4f057168
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.h

401:0-402:52
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_389cc91d
Bytes: 27
Nit: fits on a single line.

401:0-402:52
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_389cc91d
UUID: 722104e2_e81a535c
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.cc

765:0-766:51
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_b887f9c6
Bytes: 6
Ditto.

765:0-766:51
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_b887f9c6
UUID: b227fcf3_2a357f96
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.h

397:0-398:52
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_988a35d0
Bytes: 6
Ditto.

397:0-398:52
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_988a35d0
UUID: 92b838d6_d9e83325
Bytes: 4
Done

File: compiler/optimizing/intrinsics_x86.cc

2633
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_b871b9ce
Bytes: 383
This intrinsic probably won't work as-is with the read barrier configuration, so you should add something like this:

  if (kEmitCompilerReadBarrier) {
    // Do not intrinsify this call with the read barrier configuration.
    return;
  }

Note that we are safe for now as intrinsics that may use a slow path are currently disabled with the read barrier configuration (see line 63).

2633
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_b871b9ce
UUID: 72af4490_d852edcb
Bytes: 218
Yes, we are safe now. My point was that if that changes we get an error and will need to handle this properly in this intrinsic, while if add the check you propose we will just miss that.

But I'm ok to add this check.

2642
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_f87b31aa
Bytes: 86
Likewise, ensure we are not using read barriers:

  DCHECK(!kEmitCompilerReadBarrier);

2642
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_f87b31aa
UUID: b227fcf3_0a3a3b86
Bytes: 4
Done

2654:2-2654:24
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_58b89d84
Bytes: 33
DCHECK(invoke_direct != nullptr);

2654:2-2654:24
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_58b89d84
UUID: d2f6309d_4bb72504
Bytes: 4
Done

2665:0-2666:56
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_d8abcd2d
Bytes: 164
Please split the assertions:

  DCHECK_NE(slow_path_flag_offset, 0u);
  DCHECK_NE(disable_flag_offset, 0u);
  DCHECK_NE(slow_path_flag_offset, disable_flag_offset);

2665:0-2666:56
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_d8abcd2d
UUID: f2c25456_f4eb38ec
Bytes: 4
Done

2668:5-2668:10
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_f8a89133
Bytes: 5
Check

2668:5-2668:10
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_f8a89133
UUID: 72af4490_3861299b
Bytes: 4
Done

2670:7-2670:61
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_f8525122
Bytes: 50
Is there any alignment condition to use CMPW here?

2670:7-2670:61
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_f8525122
UUID: b227fcf3_6a3f7776
Bytes: 25
No alignment is required.

File: compiler/optimizing/intrinsics_x86_64.cc

2721
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_384da98c
Bytes: 9
Likewise.

2721
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_384da98c
UUID: 72af4490_f84fb124
Bytes: 4
Done

2730
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_58425d5b
Bytes: 9
Likewise.

2730
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_58425d5b
UUID: 722104e2_c8178f32
Bytes: 4
Done

2742:2-2742:24
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_7847216a
Bytes: 9
Likewise.

2742:2-2742:24
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_7847216a
UUID: f2c25456_14b8b4f5
Bytes: 4
Done

2753:0-2754:56
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_b858d946
Bytes: 9
Likewise.

2753:0-2754:56
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_b858d946
UUID: 12ed28ca_6ddb155e
Bytes: 4
Done

2756:5-2756:10
Mon May 09 14:44:38 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72af4490_d8558d0d
Bytes: 5
Check

2756:5-2756:10
Tue May 10 05:35:24 2016 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 72af4490_d8558d0d
UUID: 72af4490_185c65de
Bytes: 4
Done

