Revision: 1521d54ebc88b59321602a9136d9680b20c847ba
Patch-set: 2
File: compiler/optimizing/context.h

20:0-21:17
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_a353c8eb
Bytes: 43
Nit: sort this list of #include directives.

25
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_67a46000
Bytes: 56
Nit: Typically we stick with 80-char width for comments.

26:70-26:71
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_07955c94
Bytes: 2
an

39:3-39:59
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_2a9e1f45
Bytes: 116
Maybe say

  This class is intended to be used as a base class for
  concrete context-based optimizations.

instead?

44:22-44:28
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a21ace2_28dbcb65
Bytes: 6
merges

47:35-47:42
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d9472c2_e485d014
Bytes: 72
Are there cases where we inherit from something else than HGraphVisitor?

48:0-48:1
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_6aa81760
Bytes: 16
Move to line 47.

52:10-52:17
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea1a34b3_06051a4e
Bytes: 178
Please use ArenaSafeMap. It's a bit of a hassle but you'll get better performance, won't need the destructor and the memory management will be consistent with other parts of ART.

52:18-52:31
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_8ad2abca
Bytes: 26
Why not use HInstruction*?

53:18-53:25
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_eadfe7d0
Bytes: 25
Why not use HBasicBlock*?

70
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d7fda4c_6aeeeb2a
Bytes: 8
OVERRIDE

70:3-70:22
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_ca3f838c
Bytes: 50
also virtual if this class is to be inherited from

80:2-80:45
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_87b08c76
Bytes: 34
Already provided by HGraphVisitor.

83:14-83:19
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea1a34b3_c6e5c215
Bytes: 5
these

88:22-88:27
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_a79bc8fc
Bytes: 7
`instr`

92:0-93:56
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_e795d0c6
Bytes: 26
Nit: break line after `=`.

101:54-101:65
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_698145d8
Bytes: 13
given `instr`

102:61-102:63
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_c968e914
Bytes: 1
?

109:54-109:65
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_50455c17
Bytes: 6
Ditto.

110:61-110:63
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_4aad536e
Bytes: 1
?

114:0-115:50
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d9472c2_048b9c29
Bytes: 26
Nit: break line after `=`.

117:0-117:28
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_101af4fe
Bytes: 189
Please add some comments around this. One has to look into the C++ reference to find out that `old_value.second` is false if the `instr_id` slot was already filled and the insertion failed.

123:4-123:26
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_6acc9730
Bytes: 37
BlockProperties? You do use it on 159

126:4-126:6
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_8382449e
Bytes: 58
Nit: Rewrite either using the ternary operator or if/else.

133:0-142:3
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_d0c7ac0b
Bytes: 34
Already provided by HGraphVisitor.

144
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d7fda4c_4af1270a
Bytes: 25
Nit: 1-space indentation.

152:8-152:25
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_8787ac96
Bytes: 15
preds.IsEmpty()

158:4-158:45
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_e34dc045
Bytes: 81
Hoist preds.Size():

  for (size_t i = 0, e = preds.Size(); i < e; ++i) {  // ...

168:31-168:36
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_89fbd93a
Bytes: 8
block_id

175:2-175:27
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d7fda4c_cab37756
Bytes: 57
Turn into a

  void VisitPhi(HPhi* phi) OVERRIDE

method.

177:4-177:50
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_a70ae8ad
Bytes: 34
Likewise, hoist phi->InputCount().

181:4-181:12
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d9472c2_447da48e
Bytes: 24
HGraphVisitor::VisitPhi?

184:32-184:49
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_aad5efb6
Bytes: 55
Use a pointer for non-const as per our C++ style guide.

184:2-184:18
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_501c7cf7
Bytes: 40
Isn't this your BlockProperties typedef?

194:2-194:17
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_e95dad77
Bytes: 34
Already provided by HGraphVisitor.

195:9-195:19
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_c781b452
Bytes: 51
current_block_id_ or store the actual block pointer

201
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_9091a427
Bytes: 38
Nit: add a blank line before line 201.

File: compiler/optimizing/nodes.cc

1239:0-1246:31
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d7fda4c_0abe3f1e
Bytes: 96
DCHECK this to prevent the use of this method on blocks which do not have an HIf as predecessor?

1251:0-1258:32
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_50d47cb6
Bytes: 6
Ditto?

File: compiler/optimizing/nodes.h

862:7-862:19
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_e714f0d3
Bytes: 28
IsTrueBranchOfIfInstruction?

862:7-862:19
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d7fda4c_15d9046a
Bytes: 125
Hmm, this is a property very specific to your ranges analysis. How about you just make it a static function in the ranges.cc?

863:7-863:20
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_498601f2
Bytes: 29
IsFalseBranchOfIfInstruction?

862:0-863:29
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_c70ff4bc
Bytes: 30
Please document these methods.

File: compiler/optimizing/ranges.cc

21:0-21:52
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_c3b99c69
Bytes: 87
This is, presumably, called quite often. Consider optimizing the number of comparisons?

29:4-29:28
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_10311475
Bytes: 67
You don't need to construct a new range, just return either a or b.

35:0-35:39
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_8a5f4bbb
Bytes: 52
As discussed, please make the Range class immutable.

36:6-36:16
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_6ae5b798
Bytes: 39
Would it be worth making this UNLIKELY?

61
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_095a49ff
Bytes: 108
Maybe add

  DCHECK(block->GetSinglePredecessor()->GetLastInstruction()->IsIf());

to make debugging easier?

70:30-70:43
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a21ace2_28290bbe
Bytes: 26
What about long constants?

70:18-70:27
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_e98a559f
Bytes: 98
Please use condition->GetConstantRight rather than relying on the constant being the second input.

81:0-96:5
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_694f853d
Bytes: 50
Replace with a switch on condition.GetCondition().

99:0-99:57
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_70525864
Bytes: 119
Please add a comment why you're doing this? I'm not entirely sure what the purpose is - can we talk about this offline?

102:6-106:7
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_23c338a0
Bytes: 117
This looks like something you could do separately, once the analysis is finished (including fix-point in the future).

108:4-108:38
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_e3e30093
Bytes: 68
Replace with

 else {
   DCHECK(block->IsFalseBranch())
   // ...

?

109:0-121:4
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_ea940719
Bytes: 23
Likewise, use a switch.

129:38-129:44
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_700fb8e9
Bytes: 8
estimate

131:0-133:22
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a21ace2_082ec7c5
Bytes: 26
Nit: put on a single line.

136:13-136:60
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_495441d2
Bytes: 178
Replace with

  !block->GetPredecessors().Empty()
      && block->GetSinglePredecessor()->GetLastInstruction()->IsIf()

? (Or better, wrap this logic in a method of HBasicBlock.)

136:13-136:60
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a2a60c0_495441d2
UUID: 6d657ec3_63cd30c8
Bytes: 228
Careful with GetSinglePredecessor - it DCHECKs that there is precisely one predecessor, so the first condition would have to be block->GetPredecessors().Size() == 1 (which you could add to HBasicBlock as HasSinglePredecessor()).

File: compiler/optimizing/ranges.h

16
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d7fda4c_2ac303a0
Bytes: 31
Add preprocessor header guards.

17:0-19:25
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_071abcfe
Bytes: 43
Nit: sort this list of #include directives.

23:0-23:6
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a2a60c0_a99a1d42
Bytes: 6
class?

23:7-23:12
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a21ace2_c8e5cf15
Bytes: 202
Turn `Range` into a template:

  template <typename T>
  class Range

and introduce an alias for 32- and 64-bit integer ranges:

  typedef Range<int32_t> IntRange;
  typedef Range<int64_t> LongRange;

?

23:0-23:6
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a2a60c0_a99a1d42
UUID: 2d862697_74941016
Bytes: 101
How about some explanation how this behaves? For example, that Merge does a union of the ranges, etc.

25:17-25:24
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d9472c2_647aa099
Bytes: 73
std::numeric_limits<int>::min() (Maybe introduce a static min() routine?)

25:26-25:33
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_271fb8ee
Bytes: 73
std::numeric_limits<int>::max() (Maybe introduce a static max() routine?)

28:31-28:33
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_471cc4f7
Bytes: 27
Why `ni`?  Maybe use `rhs`?

28:7-28:17
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_4955b949
Bytes: 25
Prefer and Equals method.

45:0-47:3
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ad9936fb_d0eecc7d
Bytes: 79
This may be dangerous, as `int` may not be able to represent all `long` values.

49:7-49:23
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ea1a34b3_c6fae2ac
Bytes: 115
Comments, please. "Narrow" can be a noun here and it's not clear what this does. Maybe consider "ReduceUpperBound"?

53
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_eabb67a8
Bytes: 5
const

61:40-61:47
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_d4b79c21
Bytes: 31
std::numeric_limits<int>::max()

61:49-61:56
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_e72b1004
Bytes: 31
std::numeric_limits<int>::min()

61:15-61:22
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_b4b21833
Bytes: 19
Where is this used?

63:7-63:17
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_a731087a
Bytes: 19
Where is this used?

63:7-63:17
Tue Aug 04 11:43:14 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed8faeab_a731087a
UUID: ad9936fb_f02bc803
Bytes: 29
It's used in NarrowUpperBound

64:16-64:23
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4d7fda4c_4ac04791
Bytes: 31
std::numeric_limits<int>::max()

65:16-65:23
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed8faeab_c736146f
Bytes: 31
std::numeric_limits<int>::min()

84
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_f4bca008
Bytes: 8
OVERRIDE

99:31-99:51
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8d9472c2_c4fff472
Bytes: 22
kRangePropagationName?

File: runtime/safe_map.h

89:2-89:57
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_63f8d03f
Bytes: 32
Please document this new method.

123:2-123:58
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a2724f5_0a719b87
Bytes: 6
Ditto.

File: test/524-checker-range-propagation/src/Main.java

20:0-58:3
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a21ace2_a81cdba0
Bytes: 44
Please decompose this in multiple sub-tests.

60:0-82:3
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_f4602002
Bytes: 9
Likewise.

120:12-120:17
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6d657ec3_e31a202f
Bytes: 17
Nit: indentation.

129:2-129:18
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d862697_1466641b
Bytes: 7
Remove?

130
Mon Aug 03 17:08:15 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a21ace2_881917b1
Bytes: 43
Please call the above routines from main().

