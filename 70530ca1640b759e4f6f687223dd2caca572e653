Revision: 70530ca1640b759e4f6f687223dd2caca572e653
Patch-set: 11
File: runtime/native/dalvik_system_InMemoryDexClassLoader_DexData.cc

101
Wed Aug 31 17:01:13 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 116e1d0e_0b36ad3e
Bytes: 226
Do we have any collective thoughts over using Thread::Current()->IsExceptionPending() over the JNIENv version here?

It does the same thing but I just thought this was confusing since AllocateDexMemory is *not* a jni function.

101
Wed Aug 31 17:13:42 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 116e1d0e_0b36ad3e
UUID: 116e1d0e_0bfeadff
Bytes: 284
We have a lot of code that does things through JNI, just to make it trivially GC-safe.

However, there's a SOA at the top - which normally indicates to use internals.

Which reminds me:

Nested SOAs not necessary. Annotate CreateDexFile with SHARED_REQUIRES, as you already hold it...

101
Wed Aug 31 17:40:54 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 116e1d0e_0bfeadff
UUID: 51a175a9_50e6ccd9
Bytes: 117
So if there's SOA it sounds like we should use the Thread::IsExceptionPending instead of the JNIEnv::ExceptionCheck ?

