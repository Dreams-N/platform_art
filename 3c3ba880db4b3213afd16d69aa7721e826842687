Revision: 3c3ba880db4b3213afd16d69aa7721e826842687
Patch-set: 3
File: compiler/dex/mir_graph.cc

1274:9-1274:18
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a346007_e3128178
Bytes: 10
high_const

1274:9-1274:18
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a346007_e3128178
UUID: 8aba749a_a11da2fd
Bytes: 46
Done (Actually rewrote it to use 64-bit value)

1275:9-1275:18
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_982b370a
Bytes: 4
wide

1275:9-1275:18
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8aba749a_982b370a
UUID: 6a346007_14223d08
Bytes: 4
Done

File: compiler/dex/mir_graph.h

272:21-272:24
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a3ee8ea_f3fff877
Bytes: 110
prefer int32_t to be explicit on the size, but given you define low and high, why not int64_t and just 2 outs?

272:21-272:24
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a3ee8ea_f3fff877
UUID: 8aba749a_81fdfe1e
Bytes: 4
Done

276:9-276:19
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a346007_43524d25
Bytes: 34
document, in particular old_to_new

276:44-276:46
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_5825bf33
Bytes: 8
s/ &/& /

276:9-276:19
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a346007_43524d25
UUID: 2a3ee8ea_08e7c6f9
Bytes: 4
Done

277:9-277:19
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_789f630a
Bytes: 8
document

277:44-277:46
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_782a0305
Bytes: 8
s/ &/& /

277:9-277:19
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8aba749a_789f630a
UUID: 6a346007_6f5bf030
Bytes: 4
Done

291:0-291:28
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a346007_a32eb9ae
Bytes: 3
vc?

299:0-299:27
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a346007_4329ada7
Bytes: 8
document

299:0-299:27
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a346007_4329ada7
UUID: 2a3ee8ea_488d4e20
Bytes: 4
Done

File: runtime/dex_instruction.h

128:0-128:49
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a346007_2322a9c1
Bytes: 127
can we lose Expression, we don't have it in other cases and expression to me implies multiple instructions (well terms really).

128:0-128:49
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a346007_2322a9c1
UUID: 8aba749a_ccf32d0e
Bytes: 4
Done

140:0-140:54
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_f8359362
Bytes: 151
store rather than setter? Setter in this context is overloaded, we use it to me a trivial setter method to inline. A store is more intention revealing.

140:0-140:54
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8aba749a_f8359362
UUID: 8aba749a_81409e68
Bytes: 4
Done

141:4-141:11
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_989017fe
Bytes: 15
similarly, load

141:4-141:11
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8aba749a_989017fe
UUID: 2a3ee8ea_8870f65e
Bytes: 4
Done

142:0-142:88
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8aba749a_b895dbed
Bytes: 15
memory barrier?

142:0-142:88
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8aba749a_b895dbed
UUID: 6a346007_ef854048
Bytes: 769
it isn't really a memory barrier is it? It is more a question of non-punctual memory change making any assumption on memory consumption impossible when crossing such an instruction.

It is more a question of instructions that are changing the layout by doing either some allocation, or doing a memory barrier so who knows what happens in between. Basically, it is important to know that these instructions exist when doing some kind of memory related optimizations: ie if I know that an object might be reallocated, removed, or there is a barrier somewhere, I can't automatically assume that from one read to another, it provides the same result.

Clobber is the best name I can come up with. Barrier works for the monitor opcodes but not for the array allocation ones.

143:41-143:60
Tue May 06 06:09:41 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a3ee8ea_930f8c00
Bytes: 101
Not clear what this means, on the face of it would be that vC holds a constant. Improve name/comment.

143:41-143:60
Tue May 06 18:55:45 2014 +0000
Author: Jean Christophe Beyler <1016743@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a3ee8ea_930f8c00
UUID: 6a346007_4f8f0caa
Bytes: 4
Done

