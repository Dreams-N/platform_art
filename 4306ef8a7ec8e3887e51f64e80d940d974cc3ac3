Revision: 4306ef8a7ec8e3887e51f64e80d940d974cc3ac3
Patch-set: 3
File: runtime/verifier/method_verifier.cc

354:36-354:52
Wed Jan 07 00:02:26 2015 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e941dff_31ea5804
Bytes: 134
Loading classes implies that thread suspension is possible, I'd assert that if this is true then allow thread suspension is also true.

354:36-354:52
Wed Jan 07 00:04:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e941dff_31ea5804
UUID: 0e9ea522_01b4ae4f
Bytes: 237
I was thinking about this before, but is that really true? I mean this worked before you added thread suspension. Isn't it more like: when one verifier does something that allows to load classes, then every other should allow suspension?

354:36-354:52
Wed Jan 07 00:11:25 2015 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e9ea522_01b4ae4f
UUID: 0e9ea522_6167b245
Bytes: 411
The motivation to add the thread suspension was so that the verifier allowed suspension so that the lock word for the mirror::Class being verified could be inflated, it wasn't tied into loading classes. Class resolution is the most obvious place where suspension occurs there are likely others. It'd be better if allow_thread_suspension_ were always true as otherwise the invariant isn't being checked properly.

