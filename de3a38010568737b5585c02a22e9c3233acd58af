Revision: de3a38010568737b5585c02a22e9c3233acd58af
Patch-set: 7
File: compiler/optimizing/inliner.cc

188:4-190:69
Wed Nov 25 16:44:08 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b80ef13_2a41df1d
Bytes: 54
Isn't this already there? Why do you need to added it?

188:4-190:69
Wed Nov 25 17:13:31 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b80ef13_2a41df1d
UUID: 3bc4b760_980159e5
Bytes: 501
No, you cannot guarantee it's there. I need to add it because the generated code will not check if it's there.

You cannot guarantee it's there, as you may have been called by another dex file, that passes an object defines in the current dex file, but that current dex file did not have a chance to acutally fill its dex cache.

We may fix this by ensuring a resolved class always sets the dex cache entry when it gets resolved, but doing an unconditional set here is making it safe for the compiler.

188:4-190:69
Wed Nov 25 17:19:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bc4b760_980159e5
UUID: 9b7da3ef_0ecd0f3a
Bytes: 57
Thanks. Could you please add the example you just gave :)

188:4-190:69
Tue Dec 01 14:43:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b7da3ef_0ecd0f3a
UUID: 7b0c6fc0_472d8e67
Bytes: 113
Done, and I also now check if it's already there, to avoid doing the write barrier in the SetResolvedType method.

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

689:63-689:74
Mon Nov 30 21:39:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b0923b2_0b3b21c7
Bytes: 73
nit: out parameters should be commented such as:
 
  /*out*/&from_code

.

689:63-689:74
Tue Dec 01 14:43:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b0923b2_0b3b21c7
UUID: 5b032b91_2625f688
Bytes: 4
Done

File: runtime/interpreter/interpreter.cc

432
Mon Nov 30 21:39:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bd59733_90273aa4
Bytes: 32
What happens if it's from_code ?

432
Tue Dec 01 14:43:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bd59733_90273aa4
UUID: 7b0c6fc0_673092c5
Bytes: 72
Nothing, it deopts at the point the deopt is requested. Added a comment.

File: runtime/interpreter/interpreter.h

40
Mon Nov 30 21:39:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b0923b2_0b6681fc
Bytes: 70
What's the difference between explicitly and implicitly triggering it?

40
Tue Dec 01 14:43:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b0923b2_0b6681fc
UUID: db347b68_c2a962b8
Bytes: 314
explicit = there is a call in the compile code to explicitly deoptimize the current frame.

non-explicit = debugger requested a deopt.

We could also name them synchronous/asynchronous, but it hasn't much to do with synchronization.

You can also compare it to runtime exceptions with checked/unchecked exceptions.

40
Tue Dec 01 18:08:31 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db347b68_c2a962b8
UUID: 1be45325_c06ccea1
Bytes: 71
Explicit/implicit sounds fine, is this explanation documented anywhere?

40
Wed Dec 02 23:06:01 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1be45325_c06ccea1
UUID: bb36e7c5_29ffad1c
Bytes: 124
Not sure, though it'd be a shame if we had to, as there must be a way to make it obvious. Maybe explicit is not good enough?

