Revision: f15ec05896ddc5fec1f224ef97bdfebb72b5a855
Patch-set: 1
File: runtime/debugger.cc

4103:24-4103:35
Mon Aug 22 17:58:01 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c89e9321_c697b3df
Bytes: 129
Is this moving GC safe? ObjectRegistery::Add() may cause a suspend point in ObjectRegistery::InternalAdd() -> IdentityHashCode().

4103:24-4103:35
Mon Aug 22 18:00:38 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c89e9321_c697b3df
UUID: c89e9321_6636dffd
Bytes: 121
The original code was already calling ObjectRegistery::Add(). I've only changed the object that's being added and tagged.

4103:24-4103:35
Mon Aug 22 18:07:32 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c89e9321_6636dffd
UUID: c89e9321_8609ab36
Bytes: 197
Could this new local var decoded_ref become stale across the Add call and is used by TagFromObject()? We didn't have this raw mirror::Object* in a local variable in the original code. Is this safe?

4103:24-4103:35
Mon Aug 22 18:13:04 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c89e9321_8609ab36
UUID: c89e9321_e69e6fac
Bytes: 340
I don't see a difference with a local variable, honestly. If it is moving-GC unsafe now, it was so before, and the object registry API needs to be overhauled.

Are we running JDWP tests with CC in some stressful environment to test such things? (This code seems to hold the mutator lock, so at least before there shouldn't have been issues)

4103:24-4103:35
Mon Aug 22 18:38:46 2016 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c89e9321_e69e6fac
UUID: c89e9321_f91a9082
Bytes: 105
I've created a fix to address Hiroshi's comment here: https://android-review.googlesource.com/#/c/260191/

