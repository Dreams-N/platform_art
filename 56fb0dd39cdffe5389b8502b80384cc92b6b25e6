Revision: 56fb0dd39cdffe5389b8502b80384cc92b6b25e6
Patch-set: 1
File: compiler/optimizing/code_generator_x86.cc

6002:0-6012:3
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6417f7a_dd676bdf
Bytes: 155
Remove. These are image classes and if they don't need a read barrier anymore (the intent of this CL) then we can just go with the existing implementation.

6002:0-6012:3
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f6417f7a_dd676bdf
UUID: 765f4f59_9fc95ba3
Bytes: 4
Done

6101:6-6101:40
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16fd3327_1e150d4a
Bytes: 31
DCHECK(!requires_read_barrier);

6101:6-6101:40
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 16fd3327_1e150d4a
UUID: 765f4f59_ffc69790
Bytes: 4
Done

6107:6-6107:40
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b11ab155_c6ce0455
Bytes: 5
ditto

6107:6-6107:40
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b11ab155_c6ce0455
UUID: 765f4f59_7f58c7f9
Bytes: 4
Done

6114:6-6114:40
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 318881a4_a243c0f5
Bytes: 5
ditto

6114:6-6114:40
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 318881a4_a243c0f5
UUID: 765f4f59_bf61bfa8
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.cc

5436:0-5446:3
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 36b797b7_07aff635
Bytes: 7
Remove.

5436:0-5446:3
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 36b797b7_07aff635
UUID: 765f4f59_9f35db96
Bytes: 4
Done

5527:6-5527:40
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 36b797b7_073db6ed
Bytes: 31
DCHECK(!requires_read_barrier);

5527:6-5527:40
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 36b797b7_073db6ed
UUID: 765f4f59_5f76a36b
Bytes: 4
Done

5532:6-5532:40
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 36b797b7_27423a61
Bytes: 5
ditto

5532:6-5532:40
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 36b797b7_27423a61
UUID: 765f4f59_bf8a5f4c
Bytes: 4
Done

File: compiler/optimizing/sharpening.cc

200:12-200:31
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b11ab155_86c40c37
Bytes: 17
Move to line 194?

200:12-200:31
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b11ab155_86c40c37
UUID: 765f4f59_ff3217aa
Bytes: 89
What do you mean? Currently is_in_dex_cache isnt set for the non boot-image non jit case.

200:12-200:31
Wed Sep 07 10:07:47 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 765f4f59_ff3217aa
UUID: d66d5b44_64eceab7
Bytes: 279
In PS3 you have completely removed the "klass != nullptr" check. That means you now absolutely rely on the --compiled-classes being all resolved. I prefer a conservative approach where we do check if "klass != nullptr" before even checking with compiler_driver_->IsImageClass(.).

201:12-202:88
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16453384_3e12c9c5
Bytes: 16
is_in_boot_image

201:12-202:88
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 16453384_3e12c9c5
UUID: 765f4f59_df2f533e
Bytes: 4
Done

235:10-235:31
Mon Sep 05 13:05:11 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7182f983_64954435
Bytes: 17
Move to line 233?

235:10-235:31
Tue Sep 06 20:38:55 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7182f983_64954435
UUID: 765f4f59_02dcd0d8
Bytes: 68
I refactored this let me know if it matches what you were intending.

235:10-235:31
Wed Sep 07 10:07:47 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 765f4f59_02dcd0d8
UUID: 769e6f7e_a1479e9f
Bytes: 134
The refactoring in PS3 was unnecessary and didn't address the fact that you allow calling Heap::ObjectIsInBootImageSpace(.) with null.

