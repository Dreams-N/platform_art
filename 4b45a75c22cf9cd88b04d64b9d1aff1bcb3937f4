Revision: 4b45a75c22cf9cd88b04d64b9d1aff1bcb3937f4
Patch-set: 12
File: compiler/optimizing/constant_propagation.cc

22:29-22:47
Wed Sep 17 16:44:00 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90c0ef69_4e47c589
Bytes: 201
This traversal won't capture loop phi nodes that have constant inputs with the same constant. Though you may not want to fold those anyway since it will push a constant initialization at entry to loop.

22:29-22:47
Wed Sep 17 16:46:24 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90c0ef69_4e47c589
UUID: 70c53b78_02ead0c4
Bytes: 151
Phis are handled in the SsaRedundantPhiElimination and SsaDeadPhiElimination passes. A loop phi that has the same constant inputs will just be removed.

22:29-22:47
Wed Sep 17 16:55:50 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 70c53b78_02ead0c4
UUID: 90c0ef69_51af68b4
Bytes: 151
Cool. Thanks for the clarification. You might still have an ordering problem since only after constant propagation you can identify inputs as constant.

22:29-22:47
Wed Sep 17 17:03:25 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90c0ef69_51af68b4
UUID: 70c53b78_22fef477
Bytes: 192
Yes, and that's true for any optimization ordering we'll decide: some phase might open some room for previous optimization phases. Probably popular optimizations will be run a couple of times.

File: compiler/optimizing/nodes.h

1433:4-1433:12
Wed Sep 17 16:44:00 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 300d83bc_3609a6be
Bytes: 35
Very clean approach. I like this :)

