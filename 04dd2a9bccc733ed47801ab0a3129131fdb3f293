Revision: 04dd2a9bccc733ed47801ab0a3129131fdb3f293
Patch-set: 2
File: runtime/class_linker.cc

2676:6-2676:35
Wed Mar 16 15:59:07 2016 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b76525c6_a3e4a88c
Bytes: 364
I have removed the condition on JitAtFirstUse and replaced with IsNativeDebuggable.

This means JitAtFirstUse has its pure meaning again - instead for waiting for method to get hot in the interpreter, it will JIT it when it is used for first time, and it will wait for this compilation to complete.

JitAtFirstUse no longer affects decisions about AOT vs JIT code.

2682:4-2682:8
Wed Mar 16 17:30:46 2016 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b74a8540_5bc4af09
Bytes: 85
Remove the else and place the if statement on the next line to follow the style here.

2685:4-2685:10
Wed Mar 16 15:59:07 2016 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b76525c6_c3e99c65
Bytes: 74
This is counter-part to the code in Debugger:GoActive. I missed it in PS1.

File: runtime/debugger.cc

629:75-629:93
Wed Mar 16 17:30:46 2016 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b76525c6_a35d88f4
Bytes: 390
In what circumstances an app is considered "native debuggable"? Is it limited to a specific config or is it true when running under Android Studio, ... ?

I'm asking the question because it impacts the debuggability of Java stack frames in the boot image. So if "native debuggable" is something that will be true quite often, we won't "deoptimize" boot image methods for the Java debugging.

