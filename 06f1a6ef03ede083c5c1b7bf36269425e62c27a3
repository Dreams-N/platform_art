Revision: 06f1a6ef03ede083c5c1b7bf36269425e62c27a3
Patch-set: 19
File: compiler/optimizing/bounds_check_elimination.cc

1489:16-1489:41
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 569062ca_47bda482
Bytes: 218
Are we using this function anywhere else? The reason why I'm asking is that it internally refers to the branches in the opposite manner - deopt is the false block and vice versa. Could you rename it to stay consistent?

1489:16-1489:41
Wed Nov 18 19:18:51 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 569062ca_47bda482
UUID: 3b2597a9_f5d5ba67
Bytes: 225
No it does not, see nodes.cc in this CL. I renamed everything in TransformLoopHeaderforBCE to be more generic (true, false etc, see nodes.cc), so that others could potentially use it too without the implied position of deopt.

1504:97-1504:103
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 569062ca_07cb9c25
Bytes: 93
There are at least twenty long lines in this file, please stick to 100 characters everywhere.

1504:97-1504:103
Wed Nov 18 19:18:51 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 569062ca_07cb9c25
UUID: 5b816bc7_d013e440
Bytes: 171
Apologies. I have become pretty could at keeping this border, but it seems in the last edits my eclipse border was set wrong. I went over the full file to find long lines.

1530:19-1530:24
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b8e83ee_a6a71229
Bytes: 159
Please keep the names consistent throughout your code, it is incredibly confusing if you don't. This is `true_block` in TransformLoopForDeoptimizationIfNeeded.

1530:19-1530:24
Wed Nov 18 19:18:51 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b8e83ee_a6a71229
UUID: 1b3453db_f8a12f65
Bytes: 167
Yes, of course. I honestly don't know how I managed to get these names wrong. Must have been a back and forth edit after which I forgot to fix. Apologies. All renamed.

1531:32-1531:58
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d67c5259_a8771f1f
Bytes: 172
Replace with block->GetSingleSuccessor(). It contains a DCHECK that there's only one successor and makes it more obvious that you're not selecting from multiple successors.

1531:19-1531:29
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56278298_0c859b2d
Bytes: 24
This is `new_preheader`.

1531:32-1531:58
Wed Nov 18 19:18:51 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d67c5259_a8771f1f
UUID: 1b3453db_d89e7321
Bytes: 4
Done

1534:0-1534:89
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 368beea4_e36b0688
Bytes: 676
Okay, so this iterates over instructions the true branch and inserts a phi in the new preheader if they're used outside.

I haven't really delved into InductionRange::GenerateCode too much, so please correct me if I'm making wrong assumptions here, but could you explain this to me in more detail?

What kind of instructions can you expect here? I gather from your diagrams that this is used purely for ArrayLength and setting it to zero if the false branch is taken. So then why do you need MakePhi to handle all primitive types? Could you just DCHECK that it's an int?

Also, how did the ArrayLength get there so it has uses in the loop? Was it moved from the old preheader?

1534:0-1534:89
Wed Nov 18 19:22:55 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 368beea4_e36b0688
UUID: 96d1fa8e_f52c4d8b
Bytes: 264
Oops, missed this question. No, it applies to anything hoisted out of the loop, so we must be able to deal with all types. Note that this is one of the important factors in getting performance improvements, since it hoists what we otherwise could not hoist at all.

1553:59-1553:65
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 569062ca_67a3806d
Bytes: 165
I don't think we enforce (non-catch) phis having different vreg numbers. You should be able to give kNoRegNumber to all of them. Or did you find a problem with that?

1553:59-1553:65
Wed Nov 18 19:18:51 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 569062ca_67a3806d
UUID: 1b3453db_98a90b53
Bytes: 244
Of course I started with just kNoRegNumbers. But this crashes the verifier as I mention in the comments. I hate this as much as the next person, and am open for other suggestions. For example, we could not verify synthetic phis in the same way.

1553:59-1553:65
Wed Nov 18 21:40:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_98a90b53
UUID: 9b8e83ee_693a3d1a
Bytes: 80
Sounds to me we could relax the graph checker and just discard the kNoRegNumber.

1553:59-1553:65
Wed Nov 18 21:52:29 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b8e83ee_693a3d1a
UUID: 1b3453db_b3ff4858
Bytes: 155
sounds good to me too; do you want this as part of this CL or as follow up? either way is fine with me, although it would make this CL more risky again....

1553:59-1553:65
Wed Nov 18 21:57:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_b3ff4858
UUID: 96865a95_2f4f95b8
Bytes: 91
Maybe part of this CL? Or were we already doing this kNoVRegNumber-- logic in the old code?

1553:59-1553:65
Wed Nov 18 22:06:03 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96865a95_2f4f95b8
UUID: 5b816bc7_abd59968
Bytes: 307
yes, the old code already used kNoVRegNumber for the synthetic phi, but since it was always for a single type, it never hit the ssa checker issue (although it was arguably a bit dirty to treat this as a real register).

but I made it worse by needing more than one undefined register.

just say the word....

1555:12-1557:62
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b8e83ee_e6867a83
Bytes: 79
Looks like a good candidate for a ReplaceInput helper function on HEnvironment.

1569:29-1569:39
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96865a95_d4687ca0
Bytes: 13
new_preheader

1569:29-1569:39
Wed Nov 18 19:18:51 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96865a95_d4687ca0
UUID: 3b2597a9_15e5e639
Bytes: 4
Done

1578:70-1578:71
Wed Nov 18 12:03:38 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56278298_8c77cb1f
Bytes: 86
Prepend with /* number_of_inputs */ so readers don't need to refer to the constructor.

1578:70-1578:71
Wed Nov 18 19:18:51 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 56278298_8c77cb1f
UUID: db847bce_0e3048c3
Bytes: 4
Done

