Revision: d45c0dd484b2952192ea8fd8f86888dbd6011ac1
Patch-set: 2
File: compiler/optimizing/builder.cc

1306:0-1307:68
Fri Oct 09 09:43:44 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_0afb5baa
Bytes: 47
If it's null, how can the is outermost succeed?

1306:0-1307:68
Fri Oct 09 11:38:24 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a27faf5_0afb5baa
UUID: cad81e3d_5f4a4b93
Bytes: 644
It can't. Null can happen when compile unresolved classes (e.g. if the super class is unresolved).

We have a lacking design here because:
- technically we can't assume anything if we get back a null here
- but because we don't inline we still know that this should return true.

This creates an implicit assumption about how things work... so I preferred to eliminate it and return false.

IsOutermostCompilingClass is only used for optimizing invokes if we are the referrer. We don't use that info anyway when we need access checks since we go to the runtime. 


We can continue the discussion offline, as it will be more efficient I think :)

1306:0-1307:68
Fri Oct 09 14:32:16 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cad81e3d_5f4a4b93
UUID: 4a0fce78_237beab3
Bytes: 169
OK, so I guess the main problem is that GetOuterMethodClass can be null right? Which sounds bogus knowing that we're compiling it. Should you also add that as a comment?

1306:0-1307:68
Fri Oct 09 15:37:39 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a0fce78_237beab3
UUID: 6afbb286_2c5ab312
Bytes: 77
yea, that's because it uses the usual resolution method.

I'll add a comment.

