Revision: 90443477f9a0061581c420775ce3b7eeae7468bc
Patch-set: 6
File: runtime/barrier.h

54:59-54:60
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4acfc072_50715a86
Bytes: 18
Double semicolons.

54:59-54:60
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4acfc072_50715a86
UUID: 2ad60c0d_8f64a13d
Bytes: 4
Done

File: runtime/base/mutex.h

232:47-232:64
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6acc847d_16d34c7f
Bytes: 77
I assume this makes the assert statically checked in addition to dynamically?

232:47-232:64
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6acc847d_16d34c7f
UUID: 2ad60c0d_9ac13d7a
Bytes: 28
Yes, that is a static check.

335:47-335:48
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eadf9421_b8e449cc
Bytes: 22
Use ASSERT_CAPABILITY?

335:47-335:48
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eadf9421_b8e449cc
UUID: 6acc847d_d7339efa
Bytes: 4
Done

340:44-340:45
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a0ff877_ec309ff0
Bytes: 5
Same.

340:44-340:45
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a0ff877_ec309ff0
UUID: aa14bc88_ba66ce18
Bytes: 4
Done

343:50-343:51
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6acc847d_b6c1c098
Bytes: 28
Use ASSERT_CAPABILITY(!...)?

343:50-343:51
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6acc847d_b6c1c098
UUID: 6acc847d_172ee68f
Bytes: 4
Done

348:47-348:48
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6acc847d_d6be441b
Bytes: 5
Same.

348:47-348:48
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6acc847d_d6be441b
UUID: 4acfc072_4adb6264
Bytes: 4
Done

354:44-354:45
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eadf9421_98f06d8b
Bytes: 29
Use ASSERT_SHARED_CAPABILITY?

354:44-354:45
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eadf9421_98f06d8b
UUID: 4acfc072_6ae0260a
Bytes: 4
Done

360:44-360:45
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aae91cd1_f07a6895
Bytes: 5
Same.

360:44-360:45
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aae91cd1_f07a6895
UUID: 8a0ff877_f7a4e802
Bytes: 4
Done

364:41-364:42
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a0ff877_8c33ebfb
Bytes: 35
Use ASSERT_SHARED_CAPABILITY(!...)?

364:41-364:42
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a0ff877_8c33ebfb
UUID: 4acfc072_caee92fa
Bytes: 4
Done

File: runtime/interpreter/interpreter_common.cc

887:90-887:91
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aae91cd1_70fbb8ee
Bytes: 10
misaligned

887:90-887:91
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aae91cd1_70fbb8ee
UUID: ca157084_1ab72926
Bytes: 4
Done

900:90-900:91
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ad60c0d_f4dee0fd
Bytes: 5
same.

900:90-900:91
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ad60c0d_f4dee0fd
UUID: cadad034_57b95465
Bytes: 4
Done

914:92-914:93
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aae91cd1_90004475
Bytes: 4
same

914:92-914:93
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aae91cd1_90004475
UUID: 0ad9483e_74cc8e30
Bytes: 4
Done

File: runtime/jdwp/jdwp.h

133:38-133:63
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4acfc072_7b047f21
Bytes: 8
Say why?

133:38-133:63
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4acfc072_7b047f21
UUID: 0ad9483e_b4d536b7
Bytes: 4
Done

File: runtime/thread.h

454:31-454:32
Tue Aug 04 20:46:21 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a0ff877_b769d0eb
Bytes: 40
BTW, why do we need a '*' after the '!'?

454:31-454:32
Tue Aug 04 22:40:24 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a0ff877_b769d0eb
UUID: 2ad60c0d_7a39d9fc
Bytes: 107
That is required otherwise the analysis thinks it is a bool. It seems to only be required for member locks.

