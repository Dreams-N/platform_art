Revision: d14438f0c5071962be7fab572b54687d32d9d087
Base-for-patch-set: 38
File: runtime/interpreter/interpreter_common.cc

494
Tue Apr 28 21:52:30 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f222e5_5b81d9fb
Bytes: 27
Why was this check removed?

494
Tue Apr 28 22:59:43 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f222e5_5b81d9fb
UUID: f0f222e5_d60fe0b4
Bytes: 232
In the case of string_init, these values will be off by one because the method being called is changed. I think I removed the check just to make things work, but the check can be put back with special logic for the string_init case.

494
Tue Apr 28 23:18:42 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f222e5_d60fe0b4
UUID: f0f222e5_ea58b85c
Bytes: 149
I am confused, the string_init case only happens when code_item == nullptr right?

Otherwise why isn't the extra code on line 507 hoisted out to 512?

494
Wed Apr 29 01:17:21 2015 +0000
Author: Jeff Hao <1010108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f222e5_ea58b85c
UUID: b0d42a38_69627c15
Bytes: 284
No, the string_init case can happen whether or not code_item is null. If code_item != null, num_regs will be adjusted because the called_method will have been changed. If code_item == null, then num_regs needs to be adjusted since it won't pick up on any changes to the called_method.

