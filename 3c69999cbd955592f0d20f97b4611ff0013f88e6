Revision: 3c69999cbd955592f0d20f97b4611ff0013f88e6
Patch-set: 16
File: compiler/optimizing/inliner.cc

701:8-703:91
Fri Dec 11 11:22:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 251f3657_d71bfe57
Bytes: 19
indentation is off.

701:8-703:91
Fri Dec 11 13:56:53 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 251f3657_d71bfe57
UUID: 251f3657_971fc633
Bytes: 4
Done

716:35-716:47
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c5701ac6_d96eb348
Bytes: 4
test

716:35-716:47
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5701ac6_d96eb348
UUID: 251f3657_777b0a0b
Bytes: 48
Are you not happy with the tests I added in 450?

716:35-716:47
Mon Dec 14 12:20:47 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 251f3657_777b0a0b
UUID: e5835e1b_cabcc386
Bytes: 97
I'm sorry. This was a marker for me to look for a test. I forgot to delete it after I found it :)

File: compiler/optimizing/licm_test.cc

171:40-171:51
Fri Dec 11 11:22:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65c68e32_ae01174b
Bytes: 16
why this change?

171:40-171:51
Fri Dec 11 13:56:53 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65c68e32_ae01174b
UUID: 0576b2c5_731a204b
Bytes: 333
Frankly, to get around the typing... :/ 
`parameter_` has an invalid type, therefore ArrayGet on it would fail. By constructing it as float/double, SsaBuilder will not consider it an ambiguous aget. Maybe I should use byte and short here instead and DCHECK in SsaBuilder that float/double is not in the original bytecode (done that).

File: compiler/optimizing/nodes.h

219:46-221:15
Fri Dec 11 11:22:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0576b2c5_f31b9057
Bytes: 15
Update comment.

219:46-221:15
Fri Dec 11 13:56:53 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0576b2c5_f31b9057
UUID: 2506560b_1f72a7ec
Bytes: 43
Done. And renamed the constants a little...

4629:0-4630:59
Fri Dec 11 11:22:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65c68e32_4e38b31d
Bytes: 130
This is weird, a->IsEquivalentOf(b) would say yes and pass this check, but b->IsEquivalentOf(a) would say yes and fail this check?

4629:0-4630:59
Fri Dec 11 13:56:53 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65c68e32_4e38b31d
UUID: 0576b2c5_f325d08c
Bytes: 25
Made it pass both ways...

File: compiler/optimizing/reference_type_propagation.cc

173:10-173:23
Fri Dec 11 11:22:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c03648c7_6cea93cc
Bytes: 48
Add a comment why checking if live is important.

173:10-173:23
Fri Dec 11 13:56:53 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c03648c7_6cea93cc
UUID: 65c68e32_0e94eb23
Bytes: 4
Done

379:20-379:37
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2506560b_7fd40bdf
Bytes: 54
document the HInstruction* sequences that are matched.

379:20-379:37
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2506560b_7fd40bdf
UUID: 45c18a18_4dcf5935
Bytes: 4
Done

385:44-385:64
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5f24653_c33b48a3
Bytes: 78
not related to your change: ...what a terrible name. This is not a constant...

385:44-385:64
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5f24653_c33b48a3
UUID: 65c68e32_aeb91794
Bytes: 47
Yep... I thought you wrote that, didn't you? :P

385:44-385:64
Mon Dec 14 12:20:47 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65c68e32_aeb91794
UUID: e59a7e77_12fd2c5e
Bytes: 7
Nope...

408:20-408:40
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c03648c7_ac248bf3
Bytes: 57
a lot of redundant code. Can you merge with the previous?

408:20-408:40
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c03648c7_ac248bf3
UUID: a5f24653_43005892
Bytes: 4
Done

604:0-620:3
Fri Dec 11 11:22:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e5d27ee6_b207402e
Bytes: 32
Why did you have to change this?

604:0-620:3
Fri Dec 11 13:56:53 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e5d27ee6_b207402e
UUID: 0576b2c5_5367e4d1
Bytes: 636
Gtests use this kUnknownFieldIndex constant to prevent typing (actually haven't seen a gtest run RTP, so not sure why it was here in the first place). With RTP inside SsaBuilder, this method would leave the FieldGet untyped and SetUntypedInstructionsToObject would later try to type it to Object.

No problem with that, only Calin and I tried to make sure that SetUntypedInstructionsToObject only fixes up instructions left untyped because of a loop phi with first input null (b/25899441). So this change explicitly types these gtest FieldGets to Object and allows us to keep that DCHECK in SetUntypedInstructionsToObject for real code.

File: compiler/optimizing/ssa_builder.cc

153:4-153:6
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 251f3657_5776ce73
Bytes: 157
nit: I'd separate the false branches and the true branches to make it easier to read.

i.e.

if (not the same size || combine wrong types) {return false} ...

153:4-153:6
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 251f3657_5776ce73
UUID: 0576b2c5_531fe4ea
Bytes: 112
I'd rather not touch this any more. The order matters and I was very careful to cover all possible combinations.

290:6-290:40
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c5701ac6_b9097fb2
Bytes: 103
why do you test for dead phis in AddDependentInstructionsToWorklist if you only call it with live phis?

290:6-290:40
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5701ac6_b9097fb2
UUID: 45c18a18_6d7575ad
Bytes: 76
UpdatePrimitiveType will make it dead at this point if there was a conflict.

298:2-298:23
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5f24653_e3576cd5
Bytes: 55
ReferenceTypeInfo::TypeHandle (and in the other places)

298:2-298:23
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5f24653_e3576cd5
UUID: c03648c7_6c3e13b6
Bytes: 39
Done but did not find any other places?

303:28-303:89
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c5701ac6_59c0637c
Bytes: 88
this test and the one bellow seem wrong. What if the array is object of byte/char etc...

303:28-303:89
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5701ac6_59c0637c
UUID: c03648c7_8c29877f
Bytes: 240
Never gonna happen. This function is only called on int/long ArrayGets (there are DCHECKs at call sites of this function which test that the parameter is in `ambiguous_gets_`), hence the array can be only int[], float[], long[] or double[].

303:28-303:89
Mon Dec 14 12:20:47 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c03648c7_8c29877f
UUID: e59a7e77_52f7b47d
Bytes: 109
ack. Not obvious. I wouldn't mind mentioning that this function can be called only for int[]/float[].... etc.

808:0-814:37
Fri Dec 11 11:22:54 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 251f3657_77154a1a
Bytes: 57
Why is that not being done in GetFloatOrDoubleEquivalent?

808:0-814:37
Fri Dec 11 13:56:53 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 251f3657_77154a1a
UUID: 0576b2c5_d3cd34e1
Bytes: 459
Great question. And you are right that this is pretty eager. The code is pretty complex as it is, so I went for simplicity...

If this is a float array access, there should be a float use (perhaps through a phi) which calls GetFloatOrDoubleEquivalent. Unfortunately that's not true if the only use is ArraySet so we could end up missing some.

I've changed this in the latest PS, have a look. I still put them in the vector here but create equivalents lazily.

File: compiler/optimizing/ssa_builder.h

86:7-86:28
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c03648c7_ecfa0364
Bytes: 20
document the return.

86:7-86:28
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c03648c7_ecfa0364
UUID: a5f24653_e30f6cb6
Bytes: 4
Done

89:1-90:68
Fri Dec 11 14:36:29 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c03648c7_ec1e839b
Bytes: 8
Document

89:1-90:68
Fri Dec 11 16:26:50 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c03648c7_ec1e839b
UUID: 0576b2c5_13cacc9a
Bytes: 183
They are extensively documented in the code, is that not enough? That has been the general approach in SsaBuilder so far - explaining the purpose of individual steps in their context.

89:1-90:68
Mon Dec 14 12:20:47 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0576b2c5_13cacc9a
UUID: e5835e1b_8a83abbc
Bytes: 210
Somehow. I don't know what the returned bool value means. It's not that clear from here. I can read the implementation and figure it out, but I shouldn't be force to do that to understand the general algorithm.

