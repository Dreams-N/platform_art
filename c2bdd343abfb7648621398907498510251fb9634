Revision: c2bdd343abfb7648621398907498510251fb9634
Patch-set: 2
File: runtime/gc/accounting/bitmap-inl.h

32
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2240e774_dd3bebbd
Bytes: 162
Since it looks like a fair amount of copy-and-paste of code from space_bitmap-inl.h, it seems desirable to de-duplicate the code. Do you want to do it in this CL?

32
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2240e774_dd3bebbd
UUID: a25db761_b9c39f10
Bytes: 90
There is already a comment for that in bitmap.h, I think doing it in another CL is better.

File: runtime/gc/accounting/bitmap.cc

39:55-39:67
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e2496fa5_fb286fa7
Bytes: 236
Should this be better rounded by kBitsPerBitmapWord? Maybe,

RoundUp((RoundUp(num_bits, kBitsPerBitmapWord) / kBitsPerBitmapWord) * sizeof(uintptr_t), kPageSize)

though it may not matter as kPageSize is a multiple of sizeof(uintptr_t)?

39:55-39:67
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e2496fa5_fb286fa7
UUID: 426cfb14_d6b0e405
Bytes: 4
Done

File: runtime/gc/accounting/bitmap.h

38:6-38:12
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2240e774_7d99f78e
Bytes: 22
Add a test for Bitmap?

38:6-38:12
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2240e774_7d99f78e
UUID: a25db761_59d883f2
Bytes: 137
Most of the stuff is already tested in space_bitmap_test, I just need to move most of the logic to bitmap_test in another CL, is that OK?

72:47-72:53
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2240e774_fd2867a7
Bytes: 14
marked -> set?

72:47-72:53
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2240e774_fd2867a7
UUID: c258eb71_da792510
Bytes: 4
Done

105:0-107:1
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42431b81_fe2ea101
Bytes: 72
Should this comment be updated? heap_end_ does not appear in this class.

105:0-107:1
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42431b81_fe2ea101
UUID: c258eb71_3af82119
Bytes: 4
Done

128:3-128:8
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42431b81_7e257152
Bytes: 32
Does this mean "One bit per.." ?

128:3-128:8
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42431b81_7e257152
UUID: a25db761_5911a3fe
Bytes: 4
Done

149:4-149:10
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42431b81_5e3cf55a
Bytes: 91
How about putting DCHECK_EQ(BitIndexFromAddr(AddrFromBitIndex(bit_index)), bit_index) here?

149:4-149:10
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42431b81_5e3cf55a
UUID: 426cfb14_56e85400
Bytes: 4
Done

152:5-152:52
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2240e774_1dc55398
Bytes: 26
This should be in reverse?

152:5-152:52
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2240e774_1dc55398
UUID: e2496fa5_7b373f7a
Bytes: 4
Done

170:21-170:25
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42431b81_1e070dca
Bytes: 44
I see that addr does not have to be aligned.

170:21-170:25
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42431b81_1e070dca
UUID: e2496fa5_5b3c035b
Bytes: 72
Yes, for the card table, there can be multiple objects on the same card.

174:47-174:53
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42431b81_3ef80919
Bytes: 14
marked -> set?

174:47-174:53
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42431b81_3ef80919
UUID: 2269c706_35c03088
Bytes: 4
Done

File: runtime/gc/accounting/mod_union_table.cc

61:6-61:36
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 02a8435a_84f686e0
Bytes: 288
This is a side question: ModUnionClearCardSetVisitor ModUnionClearCardBitmapVisitor and ModUnionClearCardVisitor do not "clear card" (as in, overwrite kCardDirty with kCardClean). They instead set the corresponding entry in the mod union table for each dirty card. Are there better names?

61:6-61:36
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 02a8435a_84f686e0
UUID: e2624f23_33c04888
Bytes: 4
Done

61:6-61:36
Thu Feb 26 20:51:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 02a8435a_84f686e0
UUID: c2e54b1d_d2a0240e
Bytes: 7
Thanks.

352:6-352:22
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 82b433b1_68300392
Bytes: 28
When could space be nullptr?

352:6-352:22
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 82b433b1_68300392
UUID: e2624f23_1340ac5e
Bytes: 61
If we don't have an image. Moved the logic into heap however.

357:8-357:83
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 62b9ffa9_a7570a10
Bytes: 452
I remember that the image space's limit isn't necessarily aligned by the card size. Is this handling that case?

Is it worth asserting that if it's not aligned, it should be the image space? While the image space has the oat file (has no objects in it) right after it and is fine, I'd worry a hypothetical case where a space's limit isn't aligned and the card at the end may be "shared" between the this space's end and the beginning of the next space.

357:8-357:83
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 62b9ffa9_a7570a10
UUID: 02668336_34083027
Bytes: 4
Done

376:4-376:65
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42aebb66_66eeee11
Bytes: 334
I thought there's a bit per card and there shouldn't be more than one bit to be visited by VisitMarkedRange here unlike what the name would normally suggest. Maybe it's equivalent, but maybe would it be clearer if we rewrite this to just check the bit rather than calling VisitMarkedRange() and call scan_visitor directly if it's set?

376:4-376:65
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42aebb66_66eeee11
UUID: 02668336_74fd886f
Bytes: 156
This is a space bitmap, which doesn't use bit indexes, but addresses, in the visit function. I'll try to clean this up by fixing the name in the cleanup CL.

420:55-420:68
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 22ab8758_453dea58
Bytes: 40
Is it ok not to cover up to the Limit()?

420:55-420:68
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 22ab8758_453dea58
UUID: 02668336_94f304a2
Bytes: 196
Yes, this is an optimization since there can't be any objects past the end of the space. I suppose it doesn't matter currently since we never have any mod-union tables on spaces which are growing.

431:55-431:68
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e2a40f89_a33b7abe
Bytes: 5
Same.

431:55-431:68
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e2a40f89_a33b7abe
UUID: 02668336_b4bf20a6
Bytes: 4
Done

File: runtime/gc/accounting/mod_union_table.h

174:18-174:23
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c2baab9b_aac6ef3c
Bytes: 16
array -> bitmap?

174:18-174:23
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c2baab9b_aac6ef3c
UUID: 426cfb14_7612b056
Bytes: 4
Done

File: runtime/gc/accounting/mod_union_table_test.cc

60:9-60:54
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 02a8435a_e4a5fa90
Bytes: 248
Why?

The java_lang_object_array_ field does not look set up per space or per mod union table type. We may not be using the class that's in the same as the object array we're going to allocate in AllocObjectArray() unlike what the comment suggests?

60:9-60:54
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 02a8435a_e4a5fa90
UUID: 626bbfdd_b778a853
Bytes: 282
Since the test doesn't have an image, the class of the object array keeps cards live inside the card cache mod-union table and causes the check

ASSERT_FALSE(table->ContainsCardFor(reinterpret_cast<uintptr_t>(obj3))) << type;

to fail since the class ends up keeping the card dirty.

60:9-60:54
Thu Feb 26 20:51:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 626bbfdd_b778a853
UUID: a2ea17ed_51ad54fd
Bytes: 36
Can you mention this in the comment?

139:17-139:45
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c22f0bb4_e23ba6bd
Bytes: 160
Why subclass ModUnionTableReferenceCache and added the target space field to it for the kTableTypeReferenceCache case, but not for the kTableTypeCardCache case?

139:17-139:45
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c22f0bb4_e23ba6bd
UUID: e2cb2f3b_ab22699c
Bytes: 184
The card cache implementation doesn't really support a target space currently, just 2 avoid spaces, which are usually the source space and the image space. Should I change this, ideas?

139:17-139:45
Thu Feb 26 20:51:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e2cb2f3b_ab22699c
UUID: 82efd3fe_90b4d47c
Bytes: 87
I guess you mean the reference cache implementation rather than the card cache one. OK.

198:23-198:69
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a234d707_e1c6063e
Bytes: 161
I thought so far ContainsCard() expects a card size aligned address only. Can you add a comment to ContainsCard() to clarify. Maybe rename it to ContainsCardFor?

198:23-198:69
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a234d707_e1c6063e
UUID: 02668336_94c02405
Bytes: 4
Done

215:43-215:55
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a234d707_2183ceed
Bytes: 39
Do we need to align up the end address?

215:43-215:55
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a234d707_2183ceed
UUID: e2624f23_330208ba
Bytes: 27
No, but I'll do it anyways.

225:0-241:41
Thu Feb 26 01:32:42 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 82399303_40a6ce5a
Bytes: 152
Would it make sense to split this MainTest for each mod union type and factor out the main test logic into a function? Would it avoid this cleanup work?

225:0-241:41
Thu Feb 26 02:17:45 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 82399303_40a6ce5a
UUID: 02668336_9464a485
Bytes: 260
I was under the impression that we couldn't factor the main logic since we can only call the EXPECT_ functions within the main test body? One option is to use CHECK but I don't like this since CHECK failures often deadlock and print a bunch of lock violations.

225:0-241:41
Thu Feb 26 20:51:23 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 02668336_9464a485
UUID: a2ea17ed_f4d9d632
Bytes: 99
OK though I see some EXPECT_ function calls that are not in the main test function in space_test.h.

