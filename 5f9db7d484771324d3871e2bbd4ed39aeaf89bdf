Revision: 5f9db7d484771324d3871e2bbd4ed39aeaf89bdf
Patch-set: 3
File: compiler/driver/compiler_driver.h

307:0-314:50
Fri Oct 24 01:28:14 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 35a1f65e_f6e1402f
Bytes: 46
Two of something is bad, please don't do this.

307:0-314:50
Fri Oct 24 09:30:15 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35a1f65e_f6e1402f
UUID: f5359ed2_e6988608
Bytes: 182
So would you prefer adding a Primitive::Type pointer to ComputeStaticFieldInfo? Because that's the only thing missing from the existing ComputeStaticFieldInfo that the builder needs.

File: compiler/optimizing/builder.cc

31:0-31:39
Fri Oct 24 01:28:14 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9592a210_beeab0ae
Bytes: 109
remove this and place logic that's dependent on the runtime in the compiler driver (to be known as interface)

31:0-31:39
Fri Oct 24 09:30:15 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9592a210_beeab0ae
UUID: 351e565a_48c86f2f
Bytes: 118
What's the reason for it?

This is to get ScopedObjectAccess, which is an argument to lots of compiler driver methods.

File: compiler/optimizing/code_generator_arm.cc

187:4-189:15
Thu Oct 23 16:43:17 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_fbe02354
Bytes: 101
Is it always the same pattern when calling a runtime helper? If yes, we should move that to a helper.

187:4-189:15
Fri Oct 24 09:30:15 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_fbe02354
UUID: 7597ee02_8490ca2c
Bytes: 4
Done

2042:11-2042:13
Thu Oct 23 16:43:17 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_9bac77fc
Bytes: 77
Not really reader friendly. I'd rename to "class_reg" which has more meaning.

File: compiler/optimizing/code_generator_x86.cc

2106:4-2108:50
Thu Oct 23 16:43:17 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_1b7ac7e5
Bytes: 131
This should be shared to each backend with a helper to avoid duplicating this code. I believe it's also the same in Quick compiler?

2106:4-2108:50
Fri Oct 24 09:30:15 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_1b7ac7e5
UUID: f5359ed2_c61342ca
Bytes: 4
Done

File: compiler/optimizing/nodes.h

2016:16-2016:17
Fri Oct 24 01:28:14 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d5717ac8_b96adf85
Bytes: 16
FINAL? and below

2016:16-2016:17
Fri Oct 24 09:30:15 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d5717ac8_b96adf85
UUID: 7597ee02_e49e6e3c
Bytes: 63
Will do in another CL (lots of HInstruction can be made FINAL).

File: compiler/utils/arm/constants_arm.h

50
Fri Oct 24 01:28:14 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 35a1f65e_eb539d63
Bytes: 94
Describe why the numbering on the principal that arbitrary constants deserve some explanation.

50
Fri Oct 24 09:30:15 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35a1f65e_eb539d63
UUID: 7597ee02_049cba41
Bytes: 115
Is it good enough for you to reference the ARM manual for the ordering? (Note that this was also taken from Quick).

