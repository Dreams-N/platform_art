Revision: 37a66295f67c26d80f996b29da85c14d27e40c14
Patch-set: 2
File: /COMMIT_MSG

21:0-21:7
Thu Apr 24 02:48:53 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_32e4ce71
Bytes: 210
BTW, did this portion (the dedicated_full_run thing) of the change have a  performance improvement? It's good in general to evaluate the benefit (eg speedup) against the cost (eg additional RAM/LOC/complexity).

21
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_32e4ce71
UUID: 85b427df_008eaa68
Bytes: 246
Not sure, I presume it removed 1 compare and 1 conditional branch from each allocation. That should be a speedup, but it should also be hard to measure. Since its implemented, I propose we keep it. I think I have a way of reducing the complexity.

21
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85b427df_008eaa68
UUID: 2581bb17_e72aa2af
Bytes: 190
My view leans toward that a speedup must be measurable by definition (that is, a non-measurable speedup isn't a speedup) just like Key Results must be measurable. Anyhow, yes, let's keep it.

45:14-45:16
Thu Apr 24 02:48:53 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65d01310_64e14437
Bytes: 13
Nice speedup.

File: runtime/gc/allocator/rosalloc.cc

45:47-45:54
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_59825340
Bytes: 104
Is it possible to initialize dedicated_full_runs_ to point to dedicated_full_run_storage_ at this point?

45
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_59825340
UUID: 85b427df_6054c6fe
Bytes: 4
Done

69:4-69:27
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_46455426
Bytes: 87
Nice as it's now possible to see the bracket index in the lock names in the mutex dump.

69
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_46455426
UUID: c5e8dfcd_02094e47
Bytes: 75
Agreed, this is mostly for figuring out which bracket locks are contending.

69
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5e8dfcd_02094e47
UUID: 2581bb17_6a34b701
Bytes: 6
Right.

99:2-99:46
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_b96d47d5
Bytes: 76
Move this to the end of Initialize() where its other fields are initialized?

99
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_b96d47d5
UUID: c5e8dfcd_6524dc38
Bytes: 4
Done

320:8-320:21
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_26781808
Bytes: 64
Should this be kCheckZeroMemory (which is currently equivalent)?

320
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_26781808
UUID: a5e5abf4_1ebd2959
Bytes: 4
Done

368:13-368:18
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_c5b76cc2
Bytes: 11
Good point.

449:9-449:18
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_19fa9b58
Bytes: 70
Note to self: now it returns the byte size instead of number of pages.

475:11-475:16
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_e6656059
Bytes: 108
Nice that the debug build is probably somewhat faster.

Paranoid: DCHECK_EQ(total_bytes % sizeof(uword), 0)?

475
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_e6656059
UUID: a5e5abf4_5ec7b1d8
Bytes: 4
Done

541:20-541:72
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_a316a5dc
Bytes: 126
This is probably intended to be (note the location of the parentheses): 

reinterpret_cast<byte*>(new_run) + headerSizes[idx];

541
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_a316a5dc
UUID: 85b427df_80d0fa31
Bytes: 11
Nice catch.

542:29-542:39
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_461554a0
Bytes: 76
numOfSlots[idx] and bracketSizes[idx] can be cached/hoisted out of the loop.

542
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_461554a0
UUID: a5e5abf4_1ee44971
Bytes: 4
Done

543:8-543:26
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_c3ff6913
Bytes: 159
I'm not sure, but is prefetching beneficial for all the slots which can be up to > 200, given the cost of this loop? Did you try limiting it to a fixed number?

543
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_c3ff6913
UUID: a5e5abf4_043a3cba
Bytes: 46
It is certainly worth investigating this more.

551:0-551:4
Thu Apr 24 17:51:17 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c5e8dfcd_652f7cae
Bytes: 245
We rely on the zero'ed header for some of the fields' initial value here. Can you add DCHECKs that check that the fields have zero initial values for the purpose of verification and documentation? For example,

DCHECK(!new_run->IsThreadLocal());

551
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5e8dfcd_652f7cae
UUID: a5e5abf4_2f2ab107
Bytes: 4
Done

561:18-561:23
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_432ff916
Bytes: 46
So, lower_bound() wasn't necessary, I take it.

561
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_432ff916
UUID: c5e8dfcd_c25686e3
Bytes: 39
Its sorted by increasing order already.

599:28-599:67
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_037df1c1
Bytes: 100
Note to self: is it safe to pass in dedicated_full_run_ to MergeThreadLocalFreeBitMapToAllocBitMap()

599
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_037df1c1
UUID: 85b427df_60c84631
Bytes: 42
The free bitmap of the dedicated full run.

599
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85b427df_60c84631
UUID: a593eb68_6bd04131
Bytes: 90
This looks safe as the thread-local free bit map of the dedicated full run is always zero?

599
Fri Apr 25 21:13:10 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a593eb68_6bd04131
UUID: 25bffbdf_7aeb7518
Bytes: 77
Yes, since its always 0, it should never clear any of the alloc bit map bits.

605:10-605:60
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_c283e23f
Bytes: 33
This comment needs to be updated.

605
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_c283e23f
UUID: a5e5abf4_e139c2ef
Bytes: 4
Done

606:10-606:74
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_a0ca184e
Bytes: 263
first_bitmap_idx_ is meant to be a vector index, not a slot index, as I understand. Why compare it to numOfSlots[idx]?

Either case, why is this case? Because it was full? But it's all free now.

Would it be the case regardless of what is_all_free_after_merge is?

606
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_a0ca184e
UUID: a5e5abf4_c13cc6e2
Bytes: 21
Stale check, updated.

608:8-608:48
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_00b684e0
Bytes: 110
Why set it to zero here? Isn't first_bitmap_idx_ already updated by MergeThreadLocalFreeBitMapToAllocBitMap()?

608
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_00b684e0
UUID: 85b427df_80cd5a42
Bytes: 20
Stale code, deleted.

612:0-623:80
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_0087a44f
Bytes: 220
I think this code (lines 612-623) should be skipped if thread_local_run == dedicated_full_run_ as, I think, it'd be cleaner if we don't insert dedicated_full_run_ into the full_runs_ or update its is_thread_local_ field.

623
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_0087a44f
UUID: c5e8dfcd_22a72a98
Bytes: 4
Done

630:26-630:42
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_455fdc1c
Bytes: 57
Thanks for adding IsThreadLocal() and SetIsThreadLocal().

751:11-751:21
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_d992c374
Bytes: 87
Call ZeroHeader() above the MutexLock? Two other places where the same comment applies.

751
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_d992c374
UUID: a5e5abf4_81d0fe31
Bytes: 4
Done

753:6-753:20
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_a5b42811
Bytes: 47
run is dead at this point. Get rid of line 753?

753
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_a5b42811
UUID: a5e5abf4_41c6f67e
Bytes: 4
Done

807:29-807:30
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_45ad1cbd
Bytes: 69
For consistency, get rid of the '_' here or add it to all the fields?

807
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_45ad1cbd
UUID: c5e8dfcd_82b63ec8
Bytes: 4
Done

807
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5e8dfcd_82b63ec8
UUID: 6587332a_ac0ecb50
Bytes: 36
I don't see any change in this line.

807
Fri Apr 25 20:09:21 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_ac0ecb50
UUID: 6587332a_3e03dd2e
Bytes: 52
Can you remove the underscore before the equal sign?

807
Fri Apr 25 21:13:10 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_3e03dd2e
UUID: a593eb68_b7b44311
Bytes: 30
Done, forgot to do the change.

820:0-820:4
Thu Apr 24 17:51:17 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5e5abf4_21e48a71
Bytes: 122
How about DCHECK'ing that all the bits before first_bitmap_idx_ are all set here to verify that there's no slots 'leaked'?

820
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5e5abf4_21e48a71
UUID: 85b427df_09f0956f
Bytes: 4
Done

820
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85b427df_09f0956f
UUID: 6587332a_0c2517ce
Bytes: 7
Thanks.

822:4-822:28
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_17c6e47d
Bytes: 97
I guess this is where a bound check was removed by masking the end of the alloc bit map, correct?

822
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_17c6e47d
UUID: a5e5abf4_c198469a
Bytes: 84
Yes, since the bits are always masked we don't need to worry about allocating there.

824:58-824:87
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_374cc086
Bytes: 63
Either just "32" or "sizeof(*alloc_bitmap_ptr) * kBitsPerByte"?

824
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_374cc086
UUID: c5e8dfcd_62c85231
Bytes: 4
Done

838:17-838:26
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_ac850780
Bytes: 37
num_vec?

Hoist this out of the loop?

838
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_ac850780
UUID: c5e8dfcd_a2e17aaf
Bytes: 99
I don't think we want to since the loop usually will return before going to the next bitmap vector.

838
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5e8dfcd_a2e17aaf
UUID: a593eb68_0e898b16
Bytes: 7
Agreed.

841:6-841:12
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_006cc445
Bytes: 129
I think it's good idea to DCHECK that the run is actually full before returning here, in case there's a bug in first_bitmap_idx_.

841
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_006cc445
UUID: a5e5abf4_211f2a4f
Bytes: 4
Done

842:4-842:5
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_e3154a58
Bytes: 404
When there's no available slot, we are returning (nullptr) without incrementing first_bitmap_idx_. This means the first_bitmap_idx_ is left pointing the last vector, as opposed to the next (invalid) vector. And, next time AllocSlot() is called, it'd have to search the last vector even if the run is full.

Is this as intended?

I guess how it should be because we removed the bound check above. Correct?

842
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_e3154a58
UUID: c5e8dfcd_22f56a68
Bytes: 149
Yes, the point of that is that the last bitmap word is still valid memory so we don't need to check that we are on a valid word before doing the ffs.

870:2-870:8
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_97793452
Bytes: 220
Since we zero out the memory for each slot as it is freed, it may be worth experimenting with a hand-written C++ memory zero routine for a smaller size (eg < 64 bytes), as opposed to always calling memset.

Leave a TODO?

870
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_97793452
UUID: a5e5abf4_e15382f0
Bytes: 4
Done

879:19-879:38
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_63c03a31
Bytes: 17
Good refactoring.

980:2-980:10
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_4efe071c
Bytes: 10
DCHECK_GE?

980
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_4efe071c
UUID: a5e5abf4_4119964e
Bytes: 4
Done

982:2-982:10
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_23164ab1
Bytes: 10
DCHECK_NE?

982
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_23164ab1
UUID: a5e5abf4_610e9207
Bytes: 4
Done

991:20-991:24
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_037dee3c
Bytes: 19
'bits' -> 'vector'?

991
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_037dee3c
UUID: 85b427df_405ee259
Bytes: 4
Done

1005:4-1005:6
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65d01310_81347a02
Bytes: 56
I guess this was simplified due to the last vector mask.

1005
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 65d01310_81347a02
UUID: a5e5abf4_a1e17aaf
Bytes: 3
Yes

1127:8-1127:17
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2581bb17_f06416ed
Bytes: 35
I think this DCHECK should be kept.

1127:8-1127:17
Fri Apr 25 20:09:21 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2581bb17_f06416ed
UUID: 6587332a_9e112976
Bytes: 22
Can you add this back?

1127:8-1127:17
Fri Apr 25 21:04:02 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_9e112976
UUID: 25bffbdf_faa785dc
Bytes: 37
Never mind. It's in line 1207 in PS5.

1130:15-1130:47
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_37596071
Bytes: 44
This DCHECK is redundant and can be removed.

1130
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_37596071
UUID: c5e8dfcd_25c1f465
Bytes: 4
Done

1137:8-1137:17
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6587332a_4fc5413f
Bytes: 9
Good one.

1157:8-1157:17
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6587332a_6fca0552
Bytes: 28
I think this should be kept.

1157:8-1157:17
Fri Apr 25 20:09:21 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_6fca0552
UUID: 6587332a_be0eed50
Bytes: 22
Can you add this back?

1157:8-1157:17
Fri Apr 25 21:04:02 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_be0eed50
UUID: a593eb68_57c07f30
Bytes: 37
Never mind. It's in line 1207 in PS5.

1171:8-1171:16
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_32d7ae5e
Bytes: 36
Nice. This got rid of free_from_run.

1176:4-1176:10
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65d01310_21464e37
Bytes: 17
Nice refactoring.

1193:7-1193:10
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 65d01310_61405618
Bytes: 20
Nice simplification.

1262:10-1262:24
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_3225eece
Bytes: 41
run is dead and this line can be removed?

1262
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_3225eece
UUID: 85b427df_6393f046
Bytes: 4
Done

1550:26-1550:45
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_88cd7b42
Bytes: 178
I don't think dedicated_full_run_ would show up here as it points to a statically allocated memory, separate from the space memory, and we can undo the change around here, right?

1550
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_88cd7b42
UUID: a5e5abf4_c149269b
Bytes: 90
It used to be allocated in the RosAlloc space, the check isn't necessary anymore. Deleted.

1600:9-1600:25
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_a80f9fbe
Bytes: 93
So, thread_local_run could be nullptr? Not always pointing to dedicated_full_run_ if revoked?

1600
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_a80f9fbe
UUID: 85b427df_035b14db
Bytes: 12
Not anymore.

1606:8-1606:16
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_8829fb11
Bytes: 383
Assuming it can be null, how about making each case explicit and get rid of the continue, as in:

if (thread_local_run == nullptr) {
  thread->SetRosAllocRun(idx, dedicated_full_run_);
} else if (thread_local_run == dedicated_full_run) {
  // nothing to do.
} else {
  thread->SetRosAllocRun(idx, dedicated_full_run_);
  DCHECK_EQ(thread_local_run->magic_num_, kMagicNum);
  ...
}

?

1606
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_8829fb11
UUID: a5e5abf4_012b0eb5
Bytes: 40
Can't be null anymore with new patchset.

1611:6-1611:48
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_9204a2e2
Bytes: 49
Move this above line 1609, right after line 1608?

1611
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_9204a2e2
UUID: c5e8dfcd_055158e8
Bytes: 4
Done

1631:8-1631:35
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_681677e0
Bytes: 79
Similarly, thread_local_run is dead at this point and this line can be removed?

1631
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_681677e0
UUID: 85b427df_0054ea2f
Bytes: 4
Done

1778:43-1778:44
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85cb4765_088c0bdf
Bytes: 207
If we make dedicated_full_run_ as a size bracket idx 0, then how about asserting that the numOfSlots[0] is largest in the numOfSlots array so that its alloc bit map must be the largest? We rely on this fact.

1778
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85cb4765_088c0bdf
UUID: c5e8dfcd_650e9c07
Bytes: 51
I don't think it matters which size bracket we use.

1778
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5e8dfcd_650e9c07
UUID: 2581bb17_702e6682
Bytes: 425
I think it does in FillAllocBitMap() in the next line so it will fill a large enough alloc bit map to cover all the bracket sizes. In this case, since size bracket idx 0 happens to have the largest alloc bit map, it works.

Also the size_bracket_idx_ field and the filled alloc bit map must match as well because the dedicated full run is passed into a function where a normal run is expected. For example, in AllocFromRun().

1778
Fri Apr 25 20:09:21 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2581bb17_702e6682
UUID: 6587332a_5e2fb1ad
Bytes: 148
Never mind. I figured this out. As long as AllocFromRun() and MergeThreadLocalFreeBitMapToAllocBitMap() read the size index form the run, it's fine.

1778
Fri Apr 25 21:13:10 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_5e2fb1ad
UUID: a593eb68_57195f4e
Bytes: 24
Yes, I'll add a comment.

1878:28-1878:47
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_92794252
Bytes: 117
Similarly, dedicated_full_run_ isn't part of the space memory and the page map. We can remove the change around here?

1878
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_92794252
UUID: a5e5abf4_04f23c09
Bytes: 4
Done

File: runtime/gc/allocator/rosalloc.h

193:36-193:108
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_e0e540b2
Bytes: 88
How about:

// The index of the first bitmap vector which may contain an available slot.

193:13-193:30
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_20d90802
Bytes: 231
It seems that "first_bitmap_idx_" could be interpreted to mean something else as it's taken literally. How about "first_search_vec_idx_" or something like that in the sense that we search for an free slot starting from that vector?

193
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_e0e540b2
UUID: 85b427df_2ea8ffad
Bytes: 4
Done

193
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_20d90802
UUID: c5e8dfcd_d00e4c52
Bytes: 4
Done

228:42-228:53
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c5137f9f_c7e780f6
Bytes: 27
"per section" -> "per run"?

228
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5137f9f_c7e780f6
UUID: c5e8dfcd_85772815
Bytes: 4
Done

229:11-229:30
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_e311cd74
Bytes: 122
"Words" -> "Vectors"? Let's call it a vector as technically necessarily uword != uint32_t and for terminology consistency.

229
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_e311cd74
UUID: a5e5abf4_04515ce8
Bytes: 4
Done

262:18-262:33
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_ce34b767
Bytes: 30
GetLastBitMapLastVectorMask()?

262
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_ce34b767
UUID: c5e8dfcd_45e9a048
Bytes: 4
Done

262
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5e8dfcd_45e9a048
UUID: a593eb68_f4088e45
Bytes: 30
Right, no need for two Last's.

277:29-277:50
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_2e72abf8
Bytes: 105
Either lose "with a specific value" (the word "Fill" already implies what it does) or say "Set all bits"?

277
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_2e72abf8
UUID: a5e5abf4_64c5c03f
Bytes: 44
Stale comment, there used to be a parameter.

472:16-472:43
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5104b96_03acee78
Bytes: 87
This is a page-sized memory. How about

byte dedicated_full_runs_storage_[kPageSize]

?

472
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5104b96_03acee78
UUID: c5e8dfcd_6563fc20
Bytes: 78
Needs to be static since we do ::Thread() before the RosAllocSpace is created.

472
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5e8dfcd_6563fc20
UUID: 2581bb17_90075ae6
Bytes: 265
I didn't mean dropping static but using type byte instead of size_t.

  static byte dedicated_full_runs_storage_[kPageSize];

seemed simpler to have a page-sized memory, than

  static size_t dedicated_full_runs_storage_[kPageSize/sizeof(size_t)];

with a division.

472
Fri Apr 25 20:09:21 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2581bb17_90075ae6
UUID: 6587332a_de22c1bf
Bytes: 35
Any comment? This isn't a big deal.

472
Fri Apr 25 21:13:10 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_de22c1bf
UUID: 6587332a_924bdd6b
Bytes: 68
Added, reason was that it was not necessarily word aligned as bytes.

522:5-522:39
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_f9f21f79
Bytes: 56
This should now be the number of bytes instead of pages.

522
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_f9f21f79
UUID: a5e5abf4_c460548b
Bytes: 4
Done

528:2-528:8
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_2ebbcbd6
Bytes: 41
Comment that it returns the bracket size?

528
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_2ebbcbd6
UUID: a5e5abf4_241c9800
Bytes: 4
Done

File: runtime/gc/heap.cc

599:70-600:62
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c5137f9f_0751981e
Bytes: 209
For clarification, is another way to put this that so that we won't incorrectly retain the thread-local run from the previous rosalloc space (which could be invalidated/deallocated) after setting up a new one?

600
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c5137f9f_0751981e
UUID: a5e5abf4_4448c4e9
Bytes: 94
This is not a normal case, the tests just do strange stuff by adding multiple RosAlloc spaces.

600
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5e5abf4_4448c4e9
UUID: 6587332a_8fe8198c
Bytes: 175
If this only applies to space_test, is there a reason not to move it back to SpaceTest::AddSpace() where it was before? Or, does this have a value being here instead of there?

600
Fri Apr 25 20:09:21 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_8fe8198c
UUID: 6587332a_1e4c5986
Bytes: 132
We talked about ways to simplify the AddSpace/RemoveSpace interface in person. Any comment? Do something about it now? Leave a TODO?

600
Fri Apr 25 21:13:10 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_1e4c5986
UUID: 25bffbdf_7a5a550b
Bytes: 4
Done

607:27-607:54
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_6b465566
Bytes: 142
Same comment from another file: Setting up new thread local buffers by calling revoke upon a brand new rosalloc space seems unintuitive to me.

607
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_6b465566
UUID: 85b427df_0e933b7a
Bytes: 46
Deleted the revoke after, no longer necessary.

1470:33-1470:38
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_cb8dc96d
Bytes: 425
It's not clear to me what this code want to do. Stepping back a bit, what does the (un)set_as_default param for AddSpace() and RemoveSpace() mean?

We'd like to remove it from the continuous_spaces_ and alloc_spaces_ (presumably to avoid trimming as the comment says), but not clearing fields like main_space_, rosalloc_space_, dlmalloc_space_?

Could there be a cleaner way?

And what exactly does not work for debug builds?

1470
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_cb8dc96d
UUID: 85b427df_ee01a7d0
Bytes: 400
The problem is that since the space is protected, when RosAlloc tries to trim it it attempts to read the magic number (only for debug builds). But since the protection is set to PROT_NONE it faults. This is fixed if you remove the space since it doesn't get trimmed. I think this is a long existing bug with background compaction + debug builds. I can't think of cleaner ways, let me know if you can.

1470
Fri Apr 25 04:48:29 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85b427df_ee01a7d0
UUID: 6587332a_2f480de9
Bytes: 121
OK. What's the reason not to pass false (meaning as non default) to RemoveSpace() here and AddSpace() in line 1479 below?

1470
Fri Apr 25 21:13:10 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6587332a_2f480de9
UUID: 6587332a_525fa51c
Bytes: 145
As we discussed, the reason that I pass in false is to preserve the pointer to the main space since we need it for the next collector transition.

File: runtime/gc/space/space_test.h

42:51-42:55
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_324845e9
Bytes: 58
Note to self: By passing true, AddSpace() does the revoke.

42
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_324845e9
UUID: 85b427df_8ecaeb4e
Bytes: 4
Done

150:40-150:41
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_52786908
Bytes: 18
Double semicolons.

150
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_52786908
UUID: a5e5abf4_24ef3869
Bytes: 4
Done

File: runtime/runtime.cc

639:9-639:33
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e516c38e_48527f9a
Bytes: 96
Is this what the new thread had to do for the main thread? Same comment as the one in thread.cc.

639
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e516c38e_48527f9a
UUID: 85b427df_cecb0351
Bytes: 8
Deleted.

File: runtime/thread.cc

347:4-347:5
Thu Apr 24 01:58:42 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 85fd0775_72a12d96
Bytes: 92
Say why in the comment?

It seems unintuitive to need to call Revoke...() in a fresh thread?

347
Thu Apr 24 22:40:04 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 85fd0775_72a12d96
UUID: 85b427df_6e9cb75f
Bytes: 8
Deleted.

