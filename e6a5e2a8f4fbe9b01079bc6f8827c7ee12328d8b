Revision: e6a5e2a8f4fbe9b01079bc6f8827c7ee12328d8b
Patch-set: 2
File: compiler/optimizing/code_generator.cc

39:0-41:6
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_eeaa338b
Bytes: 39
Nit: Move this between lines 33 and 35.

39:0-41:6
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_eeaa338b
UUID: e9ea475e_44a2a09e
Bytes: 4
Done

File: compiler/optimizing/code_generator_mips.cc

19:0-32:46
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_f1ba1a59
Bytes: 35
Please sort this list of #includes.

19:0-32:46
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_f1ba1a59
UUID: c93f43b4_73557ac4
Bytes: 7
Sorted.

117:60-117:63
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_55a46cba
Bytes: 3
FPU

117:73-117:74
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_8a7cefd8
Bytes: 22
Add a space after `.`.

117:60-117:63
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_55a46cba
UUID: 09e87b64_45b85cfd
Bytes: 6
Fixed.

511:4-511:41
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_2fee0d2a
Bytes: 38
DCHECK_GE(new_position, old_position);

511:4-511:41
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_2fee0d2a
UUID: c9582344_08ede782
Bytes: 5
Done.

618:57-618:62
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_d5887c30
Bytes: 23
/* double_slot */ false

618:57-618:62
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_d5887c30
UUID: c9582344_08916715
Bytes: 4
Done

620:57-620:61
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_be0cb9cb
Bytes: 22
/* double_slot */ true

620:57-620:61
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_be0cb9cb
UUID: e986c7d4_e1f18661
Bytes: 4
Done

628:0-629:37
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_2cdb77e5
Bytes: 50
Introduce an art::mips::MipsAssembler::Pop method.

628:0-629:37
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_2cdb77e5
UUID: a95bef3d_67ded2d2
Bytes: 4
Done

634:0-635:30
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cce8a376
Bytes: 51
Introduce an art::mips::MipsAssembler::Push method.

634:0-635:30
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_cce8a376
UUID: 2947ff68_a6e4c815
Bytes: 5
Done.

645:23-645:52
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_fec481db
Bytes: 21
(double_slot ? 1 : 0)

645:23-645:52
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_fec481db
UUID: 494c338b_a414c20b
Bytes: 5
Done.

766:10-766:14
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_495b457f
Bytes: 19
Indentation is off.

766:10-766:14
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_495b457f
UUID: 494c338b_8411c61b
Bytes: 5
Done.

864:0-865:95
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_8ce2ab92
Bytes: 38
Shouldn't we emit parallel moves here?

871:6-871:30
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_3e198905
Bytes: 123
Shouldn't we use

  __ Mfc1(dst_high, static_cast<FRegister>(src + 1));

when isa_features_.Is32BitFloatingPoint() is true?

884:6-884:30
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_5e265544
Bytes: 123
Shouldn't we use

  __ Mtc1(src_high, static_cast<FRegister>(dst + 1));

when isa_features_.Is32BitFloatingPoint() is true?

900:0-903:53
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_313c3246
Bytes: 38
Shouldn't we emit parallel moves here?

1022:61-1022:66
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_35f388dc
Bytes: 22
value ATTRIBUTE_UNUSED

1022:61-1022:66
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_35f388dc
UUID: 8952ab21_467072a7
Bytes: 54
If I'm not mistaken, we use value a bit lower in Beqz.

1023:2-1023:24
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_4b35cddd
Bytes: 7
Remove.

1023:2-1023:24
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_4b35cddd
UUID: 64211e85_28eec3ee
Bytes: 4
Done

1135:2-1135:20
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_4cc4b388
Bytes: 14
UNREACHABLE();

1135:2-1135:20
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_4cc4b388
UUID: 490513fd_7fd76b2e
Bytes: 4
Done

1177:25-1177:27
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_d52a1cb4
Bytes: 36
Please use a named constant instead.

1177:25-1177:27
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_d52a1cb4
UUID: a9b76fb4_a792aa44
Bytes: 5
Done.

1183:25-1183:27
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ee2553b4
Bytes: 9
Likewise.

1183:25-1183:27
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_ee2553b4
UUID: e986c7d4_0146ea1a
Bytes: 5
Done.

1261
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_8e1a9f73
Bytes: 76
DCHECK(instruction->IsAnd() || instruction->IsOr() || instruction->IsXor());

1261
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_8e1a9f73
UUID: 691f3755_98925945
Bytes: 5
Done.

1268
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_f5065829
Bytes: 53
DCHECK(instruction->IsAdd() || instruction->IsSub());

1268
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_f5065829
UUID: 64211e85_e80bcb62
Bytes: 4
Done

1372:8-1372:40
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_ae1f5b62
Bytes: 64
Replace with

  else {
    DCHECK(instruction->IsSub());

and…

1372:8-1372:40
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_ae1f5b62
UUID: 09e87b64_85d7842d
Bytes: 4
Done

1378:8-1380:7
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_51ce86d9
Bytes: 15
…remove this.

1378:8-1380:7
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_51ce86d9
UUID: 89fb8b33_81989c6c
Bytes: 4
Done

1431
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_fee8012b
Bytes: 117
Shouldn't we use the result of `rhs_reg & kMaxIntShiftValue` as second operand (instead of using `rhs_reg` directly)?

1431
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_fee8012b
UUID: 694d7785_05d71284
Bytes: 220
The MIPS SLLV instruction takes the bit-shift amount is specified by the low-order 5b of GPR rs. This should match the behavior of the shl-int dex instruction. Same is true for all related shift instructions (SRLV etc.).

1450:0-1451:40
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_0ccebba6
Bytes: 62
Use

  Move64(locations->Out(), locations->IntAt(0);

instead?

1450:0-1451:40
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_0ccebba6
UUID: 8952ab21_06edda82
Bytes: 5
Done.

1452:35-1452:37
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_b558385e
Bytes: 131
Introduce 

  static constexpr size_t kMipsBitsPerWord = kMipsWordSize * kBitsPerByte;

and use it instead of `32`, here and below.

1452:35-1452:37
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_b558385e
UUID: 0984fbca_228a0e51
Bytes: 5
Done.

1483
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_f1077a8e
Bytes: 118
Shouldn't we use the result of `rhs_reg & kMaxLongShiftValue` as second operand (instead of using `rhs_reg` directly)?

1483
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_f1077a8e
UUID: c9582344_6807c3e4
Bytes: 10
See above.

1491:32-1491:36
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_8cd2ab44
Bytes: 16
kMipsBitsPerWord

1491:32-1491:36
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_8cd2ab44
UUID: 2900dfee_3ed7a5dd
Bytes: 4
Done

1794
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_5ed81598
Bytes: 96
Add

  CheckEntrypointTypes<kQuickAputObject, void, mirror::Array*, int32_t, mirror::Object*>();

1794
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_5ed81598
UUID: c9582344_2801cbcc
Bytes: 5
Done.

1988:38-1988:66
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_2fa04ded
Bytes: 41
Nit: align comment with the previous one.

1988:38-1988:66
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_2fa04ded
UUID: 494c338b_e41f5a1f
Bytes: 5
Done.

2019
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_f562c009
Bytes: 424
if (in_type == Primitive::kPrimFloat) {
  if (instruction->IsGtBias()) {
    CheckEntrypointTypes<kQuickCmpgFloat, int32_t, float, float>();
  } else {
    CheckEntrypointTypes<kQuickCmplFloat, int32_t, float, float>();
  }
} else {
  if (instruction->IsGtBias()) {
    CheckEntrypointTypes<kQuickCmpgDouble, int32_t, double, double>();
  } else {
    CheckEntrypointTypes<kQuickCmplDouble, int32_t, double, double>();
  }
}

2019
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_f562c009
UUID: 0984fbca_02710a1f
Bytes: 5
Done.

2124:0-2127:3
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_756fd0ed
Bytes: 130
LocationSummary::CallKind call_kind = (type == Primitive::kPrimLong)
    ? LocationSummary::kCall;
    : LocationSummary::kNoCall;

2124:0-2127:3
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_756fd0ed
UUID: 8952ab21_86f8aa41
Bytes: 5
Done.

2182
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_7ed5d15e
Bytes: 69
Add

  CheckEntrypointTypes<kQuickLdiv, int64_t, int64_t, int64_t>();

2182
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_7ed5d15e
UUID: 0984fbca_c27a42f9
Bytes: 5
Done.

2225
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_51c0c694
Bytes: 139
Add

  else {
      // A division by a non-null constant is valid. We don't need to perform
      // any check, so simply fall through.
  }

2225
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_51c0c694
UUID: 0984fbca_6269f630
Bytes: 5
Done.

2236
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_71bdca1b
Bytes: 9
Likewise.

2236
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_71bdca1b
UUID: 2947ff68_46019444
Bytes: 5
Done.

2448:55-2448:91
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_11ca4eb3
Bytes: 6
Ditto.

2448:17-2448:51
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_6c2c0f4b
Bytes: 16
Add parentheses.

2448:17-2448:51
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_6c2c0f4b
UUID: a95bef3d_67c812e2
Bytes: 5
Done.

2523
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_abf73981
Bytes: 79
Add

  CheckEntrypointTypes<kQuickA64Load, int64_t, volatile const int64_t*>();

2523
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_abf73981
UUID: 694d7785_65b12664
Bytes: 5
Done.

2528:6-2529:60
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_0c29db39
Bytes: 209
Shouldn't we use

  __ Mtc1(locations->GetTemp(2).AsRegister<Register>(),
          static_cast<FRegister>(locations->Out().AsFpuRegister<FRegister>() + 1));

when isa_features_.Is32BitFloatingPoint() is true?

2561:17-2561:51
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_8ed37f01
Bytes: 16
Add parentheses.

2561:55-2561:91
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_2c26176b
Bytes: 6
Ditto.

2636:6-2637:62
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_918e3e89
Bytes: 211
Shouldn't we use

  __ Mfh1(locations->GetTemp(2).AsRegister<Register>(),
          static_cast<FRegister>(locations->InAt(1).AsFpuRegister<FRegister>() + 1));

when isa_features_.Is32BitFloatingPoint() is true?

2643
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4c783336
Bytes: 81
Add

  CheckEntrypointTypes<kQuickA64Store, void, volatile int64_t *, int64_t>();

2643
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_4c783336
UUID: 490513fd_bfcbb387
Bytes: 5
Done.

2892:74-2892:85
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_b19342b0
Bytes: 15
kCallArtMethod?

2895:75-2895:86
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_3696181f
Bytes: 6
Ditto?

3042:0-3043:73
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_6cf3afdb
Bytes: 26
Nit: put on a single line.

3042:0-3043:73
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_6cf3afdb
UUID: 2900dfee_3ebe859b
Bytes: 4
Done

3044:0-3045:74
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_8be195bd
Bytes: 9
Likewise.

3044:0-3045:74
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_8be195bd
UUID: 2900dfee_1ec3c925
Bytes: 4
Done

3090:2-3090:95
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_0c00fb39
Bytes: 176
if (instruction->IsEnter()) {
  CheckEntrypointTypes<kQuickLockObject, void, mirror::Object*>();
} else {
  CheckEntrypointTypes<kQuickUnlockObject, void, mirror::Object*>();
}

3090:2-3090:95
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_0c00fb39
UUID: 64211e85_88fc17ae
Bytes: 6
Fixed.

3491
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_2cfdb7a2
Bytes: 62
CheckEntrypointTypes<kQuickLmod, int64_t, int64_t, int64_t>();

3491
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_2cfdb7a2
UUID: 44209a82_87808833
Bytes: 6
Fixed.

3500
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_3ef429f9
Bytes: 169
if (type == Primitive::kPrimFloat) {
  CheckEntrypointTypes<kQuickFmodf, float, float, float>();
} else {
  CheckEntrypointTypes<kQuickFmod, double, double, double>();
}

3500
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_3ef429f9
UUID: 691f3755_98f6d9c5
Bytes: 18
Refactored, fixed.

3679:6-3679:41
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_76909020
Bytes: 44
DCHECK_EQ(input_type, Primitive::kPrimLong);

3679:6-3679:41
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_76909020
UUID: e9ea475e_2432fc26
Bytes: 6
Fixed.

3756
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c473a992_b5cea059
Bytes: 161
if (result_type == Primitive::kPrimFloat) {
  CheckEntrypointTypes<kQuickL2f, float, int64_t>();
} else {
  CheckEntrypointTypes<kQuickL2d, double, int64_t>();
}

3756
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c473a992_b5cea059
UUID: e9ea475e_64380407
Bytes: 6
Fixed.

3777
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_11a32efd
Bytes: 397
if (result_type != Primitive::kPrimLong) {
  if (input_type == Primitive::kPrimFloat) {
    CheckEntrypointTypes<kQuickF2iz, int32_t, float>();
  } else {
    CheckEntrypointTypes<kQuickD2iz, int32_t, double>();
  }
} else {
  if (input_type == Primitive::kPrimFloat) {
    CheckEntrypointTypes<kQuickF2l, int64_t, float>();
  } else {
    CheckEntrypointTypes<kQuickD2l, int64_t, double>();
  }
}

3777
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24656596_11a32efd
UUID: 09e87b64_c256a26b
Bytes: 6
Fixed.

3878
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_cc4c231e
Bytes: 34
#undef __
#undef QUICK_ENTRY_POINT

3878
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_cc4c231e
UUID: c93f43b4_d31c262d
Bytes: 6
Fixed.

File: compiler/optimizing/code_generator_mips.h

119:7-119:15
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 24656596_115b2ece
Bytes: 24
Make this method static?

291:2-291:50
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2ea12baa
Bytes: 121
I think we got rid of this method in all other code generators  (see https://android-review.googlesource.com/#/c/154017).

291:2-291:50
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_2ea12baa
UUID: 2900dfee_fed01de2
Bytes: 15
Method removed.

File: compiler/optimizing/nodes.h

3881:21-3881:32
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_b6722889
Bytes: 25
x86, ARM, MIPS and MIPS64

3881:21-3881:32
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_b6722889
UUID: 09e87b64_e259a69b
Bytes: 6
Fixed.

4085:21-4085:25
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44e3394a_35970854
Bytes: 26
MIPS (and likewise below).

4085:21-4085:25
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44e3394a_35970854
UUID: a9f4cf41_02c24c6f
Bytes: 6
Fixed.

File: compiler/optimizing/register_allocator.cc

81:9-87:36
Thu Aug 27 17:31:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_2ec5ab31
Bytes: 54
While you're at it, could you sort this list?  Thanks.

81:9-87:36
Fri Sep 18 17:20:55 2015 +0000
Author: Pavle Batuta <1080239@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_2ec5ab31
UUID: 691f3755_3806a55e
Bytes: 13
No problem :)

