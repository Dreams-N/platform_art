Revision: 8ad142feb0ae5bb59cb1f4ceff181d32d4faaa66
Patch-set: 3
File: test/004-checker-UnsafeTest18/src/Main.java

253:10-253:23
Tue Mar 15 18:50:23 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bc842acd_423f120c
Bytes: 732
I would use a non-atomic field.  Unlike in C++, I think these are intended to work with ordinary accesses as the communication variable.

That's especially true since I believe we implement weakCompareAndSet as CompareAndSet, which we should probably stop doing.  Maybe after looking at all of our clients.  Atomic get() will also ensure ordering.

The probability of this failing with a broken implementation is still likely to be very small.  Another way to test is to have one thread increment x, then increment y, in a tight loop, with a fence in between, ensuring x >= y. Another thread reads y then x, again with a fence in between.  It should always see x >= y.  But even that seems to fail rarely in practice without fences.

253:10-253:23
Tue Mar 15 18:55:22 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bc842acd_423f120c
UUID: bc842acd_426ab2ee
Bytes: 260
Should be relying on the implementation of AtomicBoolean for the Unsafe unit test? Why not test the Unsafe methods directly?

Looking at the current implementation of AtomicBoolean it's not using any of the new 1.8 methods yet, am I looking in the wrong place?

253:10-253:23
Tue Mar 15 18:57:59 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bc842acd_426ab2ee
UUID: bc842acd_62aed666
Bytes: 460
Igor: no, this unit test uses the unsafe memory fence between the write of m.l in the main thread and the reads of m.l in the spawned threads.

It is just that we also need a *relaxed memory* signal between the two, but after/before the fence. Java does not really provide that, so I used atomic boolean with weak set. The problem is that these are implemented with a true happens-before relation (probably), so that memory visibility is derived through these.

