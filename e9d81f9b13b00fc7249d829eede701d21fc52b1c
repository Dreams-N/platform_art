Revision: e9d81f9b13b00fc7249d829eede701d21fc52b1c
Patch-set: 1
File: compiler/optimizing/intrinsics_arm.cc

173:0-173:45
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 312673b6_4d4d3983
Bytes: 85
Don't we have a helper in code_generator_arm.cc? Maybe factorize that in the .h file?

173:0-173:45
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 312673b6_4d4d3983
UUID: b19ee36a_511ed4d6
Bytes: 4
Done

174:0-175:42
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 312673b6_6d48f574
Bytes: 114
This is not correct. A D Register can never be through a FpuReguster, it must be created out of a FpuRegisterPair.

304:0-304:70
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51292784_0e472b63
Bytes: 92
And it cannot happen right? So I'd rather do a DCHECK() << "Diagonal overlap cannot happen".

304:0-304:70
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51292784_0e472b63
UUID: 511a07b5_06399ad1
Bytes: 4
Done

343:0-346:3
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51292784_ee5bbf39
Bytes: 79
Why do you take the parameter then? I'd just get rid of is_long and this check.

343:0-346:3
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51292784_ee5bbf39
UUID: 511a07b5_263496d9
Bytes: 4
Done

424:17-424:28
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 312673b6_0d473163
Bytes: 67
What is this? Note that I understand the last part of the sentence.

424:17-424:28
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 312673b6_0d473163
UUID: 518047c4_b9c3bb28
Bytes: 4
Done

483:17-483:28
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51292784_ce580340
Bytes: 5
ditto

483:17-483:28
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51292784_ce580340
UUID: 511a07b5_a647e63f
Bytes: 4
Done

603:0-604:23
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 312673b6_ed5bc539
Bytes: 42
The codegen has it, why can't you have it?

603:0-604:23
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 312673b6_ed5bc539
UUID: 518047c4_b9b3bb62
Bytes: 4
Done

761:0-761:57
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11332ff6_8c7b27a4
Bytes: 101
.. Worst case is that we'll consider the referenced object as live through this object for some time.

761:0-761:57
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 11332ff6_8c7b27a4
UUID: 518047c4_197aefdd
Bytes: 130
This is old behavior, and I think correct. There is no suspend point in the loop, so whether you mark now or later doesn't matter.

778:0-778:37
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 312673b6_cd8a4930
Bytes: 50
DCHECK that it's false, and remove the code below.

778:0-778:37
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 312673b6_cd8a4930
UUID: 511a07b5_26a3f64d
Bytes: 4
Done

817:0-817:56
Sat Feb 07 19:14:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 312673b6_ad87fd25
Bytes: 7
Remove?

817:0-817:56
Mon Feb 09 20:45:55 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 312673b6_ad87fd25
UUID: 511a07b5_66adee36
Bytes: 4
Done

