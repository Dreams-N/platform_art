Revision: 1a7f5d61ff631c54597716878d064f61fff24fbd
Patch-set: 3
File: runtime/thread_list.cc

108:0-108:56
Wed Jun 01 19:28:38 2016 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d91e5959_5d338f50
Bytes: 164
it was intended to implement this TODO as part of this, so we can have dalvikvm warn on shutdown issues so we can see if this is a problem in the tests in practice.

108:0-108:56
Wed Jun 01 20:50:11 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d91e5959_5d338f50
UUID: d91e5959_68768b92
Bytes: 162
We do log an ERROR in WaitForAllThreadsToFinish. The problem is that this is during runtime shutdown. We are in the destructor so returning anything is difficult.

112:17-112:42
Tue May 31 23:14:28 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39b855a6_47716e97
Bytes: 224
Won't this wait for 2s anytime someone has 2 threads and calls DestroyJavaVM? I suppose it might be OK, I wonder if there is a cleaner way. We could keep track of all the threads that were registered and only wait for those.

112:17-112:42
Wed Jun 01 05:56:10 2016 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 39b855a6_47716e97
UUID: 39b855a6_bb595f4e
Bytes: 1857
I thought about keeping the list, it seemed an overly invasive change to make.

A more practical localized TODO would be to use libbacktrace to see if the threads have any code running in libart, but that seemed pretty expensive to do without at least trying to sleep a bit first.

I don't think we are really going to see this in practice, but we should clearly comment this here. that assumption is based on the idea that other threads won't exist and that hopefully most android processes don't exit(2) at all, and those that do like am, pm, etc don't need to return, but can simply exit(2).

first first bit about other threads is unclear, the second bit doesn't seem to be true at the moment either. it does seem true for dex2oat:

int main(int argc, char** argv) {
  int result = art::dex2oat(argc, argv);
  // Everything was done, do an explicit exit here to avoid running Runtime destructors that take
  // time (bug 10645725) unless we're a debug build or running on valgrind. Note: The Dex2Oat class
  // should not destruct the runtime in this case.
  if (!art::kIsDebugBuild && (RUNNING_ON_MEMORY_TOOL == 0)) {
    exit(result);
  }
  return result;
}

but not in AndroidRuntime::start which uses DestroyJavaVM.

we could fix this in BaseCommand.run however:

    public void run(String[] args) {
        if (args.length < 1) {
            onShowUsage(System.out);
            return;
        }

        mArgs.init(null, null, null, null, args, 0);

        try {
            onRun();
        } catch (IllegalArgumentException e) {
            onShowUsage(System.err);
            System.err.println();
            System.err.println("Error: " + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace(System.err);
            System.exit(1);
        }
    }

so we need to change BaseCommand or others to be safe as well.

120:6-120:31
Tue May 31 23:54:38 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39b855a6_877a060d
Bytes: 51
This is expected to include daemon threads plus us?

120:6-120:31
Wed Jun 01 00:02:13 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 39b855a6_877a060d
UUID: 39b855a6_0aa85be6
Bytes: 13
I believe so.

122:8-122:34
Tue May 31 23:54:38 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 39b855a6_2a3d1f19
Bytes: 76
This presumably also includes unattached threads?  In which case this fails?

122:8-122:34
Wed Jun 01 00:02:13 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 39b855a6_2a3d1f19
UUID: 39b855a6_cab1e355
Bytes: 4
yes.

122:8-122:34
Wed Jun 01 05:56:10 2016 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 39b855a6_cab1e355
UUID: 39b855a6_5b34e3e8
Bytes: 287
don't we know the tid's of the expected threads to remove from the set returned from GetProcessThreads()? I was assuming we'd just probe for the continued existence of the extra threads, since these an obvious place to have a TODO about using libbacktrace on these threads in the future.

122:8-122:34
Wed Jun 01 17:40:31 2016 +0000
Author: Alex Light <1047769@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 39b855a6_5b34e3e8
UUID: 39b855a6_9cc25198
Bytes: 714
> don't we know the tid's of the expected threads to remove from the
 > set returned from GetProcessThreads()?

I guess. This just seemed easier frankly and we don't need to do the intersect of a pair of vectors.

Also IIUC if we are good (and no other, unrelated, threads are around) this should be fine since the daemon threads won't really ever exit just sleep forever and should be the only thing on the thread list other then this thread. Therefore we can just see if we have more threads than expected.

 > I was assuming we'd just
 > probe for the continued existence of the extra threads, 
 > since these
 > an obvious place to have a TODO about using libbacktrace on these
 > threads in the future.

Done.

