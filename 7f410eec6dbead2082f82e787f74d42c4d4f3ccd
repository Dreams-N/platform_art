Revision: 7f410eec6dbead2082f82e787f74d42c4d4f3ccd
Patch-set: 1
File: compiler/optimizing/code_generator_x86.cc

649
Thu Jan 08 17:28:34 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce9e4d6c_71411868
Bytes: 248
I'm still coming up to speed on the optimizing compiler, so I am fuzzy about this.  Shouldn't there be either 0 or 2 movl's?  I think that the old code moved 1 part into a register, and one on the stack.  This seems to move 2 stacks and 1 register.

649
Thu Jan 08 17:36:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce9e4d6c_71411868
UUID: eeb4f1df_fde403e3
Bytes: 180
The last move is putting 1 part to the parameter register. EmitParallelMoves above will do two moves: from low slot to parameter low slot, and from high slot to parameter low slot.

649
Thu Jan 08 17:44:04 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb4f1df_fde403e3
UUID: ce9e4d6c_b132a00b
Bytes: 172
Why does it go to the parameter register?  I thought that this CL was to remove longs from parameter registers and force it to memory.  Is this for quick compatibility now?

