Revision: f5d5eb0e18d35f1fd3e358abd03eff15e353eb80
Patch-set: 9
File: compiler/optimizing/optimizing_compiler.cc

438:44-438:69
Thu Apr 09 13:52:58 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63a66a29_ee777f51
Bytes: 115
I think you need an or with GetIncludeDebugSymbols here. You can include debug symbols without generating GDB info.

438:44-438:69
Thu Apr 09 14:37:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63a66a29_ee777f51
UUID: 63a66a29_0eeacb1d
Bytes: 143
I wanted to ask - What is difference between those two?
I noticed in the option parser that gdb-info implies debug-symbols, but not vice versa.

438:44-438:69
Thu Apr 09 14:45:54 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63a66a29_0eeacb1d
UUID: 63a66a29_aea57704
Bytes: 183
I'm afraid I don't know. First I thought it's something that you added in one of your previous CLs.  Looks that it's been here for a while and not used. Smells like rotten code to me.

438:44-438:69
Thu Apr 09 15:07:03 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63a66a29_aea57704
UUID: 03868e96_7b2cf890
Bytes: 256
IncludeDebugSymbols is a subset of GDBInformation (in fact, the latter forces the former). Currently IncludeDebugSymbols writes at least the symtab and such.

As such, it sounds like you want to change this back, and potentially clean up in a follow-up CL.

438:44-438:69
Thu Apr 09 15:12:11 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63a66a29_aea57704
UUID: 03d12e8c_ebaf6dde
Bytes: 907
My vote would be to have just one generic flag.

GDB-info is misleading since Dwarf can be used by many tools - including LLDB, and libbacktrace.

I like DebugSymbols more.  I would say it sounds like a DwarfSymbols (i.e. .debug_* sections), but not everyone might not know the name Dwarf so it is good generic name.

But both of the above seem to imply that they only control inclusion/exclusion of debug data.  I think it would be conceivable that the flag could have deeper effects.  Say, do not deduplicate methods to make sure they can be identified, or omit some optimizations that rearrange code.

Anyway, this is just bike-shedding about names.  I would not want to change it as part of this CL.  I picked GDBInformation here somewhat randomly, and made sure it is at least consistent with Quick and Elf Writer.

Should I change it back to GetIncludeDebugSymbols? (and maybe kill GDB in further CL?)

438:44-438:69
Thu Apr 09 15:31:30 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03d12e8c_ebaf6dde
UUID: 237f124e_72b418c5
Bytes: 397
As I wrote:

1) Please change it back to not change semantics for now.

2) A follow-up combining the flags is fine. Just be sure you update the preopt settings in build/, if necessary.

The advantage of two flags was different levels of debug support. E.g., symtab itself is enough to get at least the name of the last Java frame, while not increasing the oat size as badly as complete DWARF info.

