Revision: 83792780c12511ee514f72b79fab8bc19fbf23d6
Patch-set: 9
File: compiler/dex/compiler_enums.h

461:64-461:72
Tue Aug 26 17:44:21 2014 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d3b431fe_e29b6221
Bytes: 1297
I think we need to be a little clearer about the semantics, since they affect the legality of transformations.  I would have expected this primarily to occur after a group of NT store instructions, to ensure that WC buffers are flushed before subsequent stores become visible.  That's necessary because a subsequent volatile store doesn't come with a fence to enforce this ordering.  We don't care about enforcing Store->Load ordering in that position, since that is already explicitly enforced precisely where we need it.  Thus SFENCE makes sense in this position.

The current comment makes it sound as if this is intended to be used before NT stores.  I couldn't tell from the Intel documentation whether prior memory operations can be reordered with a subsequent NT store.  If so, I would expect that Load->Store reordering would also be an issue, since volatile loads don't come with fences.  Thus I would expect that either an MFENCE or nothing is needed in this position.  The GNU code I was quickly able to find seems to assume that nothing is needed there.

If the GNU code is correct, I think the comment should read something like: "Use NTStoreStore to order non-temporal stores with respect to all later store-to-memory instructions.  Only generated together with non-temporal stores."

