Revision: 15dc2660646905b0a75cf5700b0617e06bff386d
Patch-set: 2
File: compiler/optimizing/code_generator_arm64.cc

578:43-578:59
Mon Dec 08 10:15:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a48dbaf4_e0ebc2b1
Bytes: 128
When does it actually matter what type a move is? Don't you reference the same register, whether you're an X or W? (or S and D?)

578:43-578:59
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a48dbaf4_e0ebc2b1
UUID: 84927610_1fc5e31b
Bytes: 632
Thinking about it now, the type is actually only useful when moving from a constant or between two (core of fp) registers. We have 32bit move instructions that are preferable to the 64bit variants. In other situations the Locations will contain all the information we need.

This function was required in this patch because `MoveLocation()` was built to require the type as an argument to use 32bit moves when possible. I think this was when there was no FP support yet, and before this the type was always available. So now we could make that argument optional. If that's ok with you I'll look at refactoring that in another patch.

578:43-578:59
Mon Dec 08 13:41:31 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84927610_1fc5e31b
UUID: 84927610_df877ba1
Bytes: 116
Why are 32bits moves preferables to 64bits?

Should we have a bit in Location telling whether you should use 32bits?

578:43-578:59
Mon Dec 08 14:29:39 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84927610_df877ba1
UUID: 84927610_5f1a8be2
Bytes: 2110
TLDR:
- 32bit moves should be better for power consumption.
- I'm not sure about the 'bit' solution.

(Diving in, take what you need from the comments!)

32bit moves should be better at least for power consumption, and maybe for other things. I don't know/remember the details, but the rule of thumb is that we prefer using a 32bit regs if 64bit is not required. So 64bit moves are not very bad, but 32bit moves would be nice.

I am trying to see how having a bit to indicate whether we need a 32bit or 64bit move would work.
If that has to be specified manually, then we can only benefit from it in manually generated moves.
If we want the register allocator to be able to do this, doesn't Location needs to be extended with some type information?
I touched this topic earlier when we met in London. If we were to add more information in the Location, wouldn't embedding the primitive type be more appropriate than a single 32/64 bit? After all, an other architecture could use 16bit, 32bit, and 64bit regs and could prefer 16bit moves.
In earlier work for arm64 I embedded the type into Locations so I could directly convert a Location to a W or X arm64 register (or other); it was working fine.
However as you noted at the time this would need some thinking about how this fits in the more general structure. A few points I am thinking of immediately:
1) Where is the 'source of truth' for the type of an IR? The result location or the IR GetType()?
2) Would that require introducing type information in the register allocator? If so is that a good idea?
3) Are we thinking of using a Location with multiple types (eg. a shared stack slot for temporaries)?
4) By embedding the type we may be able to get rid of StackSlot vs DoubleStackSlot. Maybe we can even optimise further stack slots for smaller types?

On a related topic, there are other things that we would eventually like to optimise in the parallel move resolver. For example ARM64 provides 'Load pair' and 'Store pair' instructions, so ideally we'd like to be able to 'merge' parallel moves to use those. That's likely something to discuss later.

578:43-578:59
Mon Dec 08 15:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84927610_5f1a8be2
UUID: 64974203_fe3cc105
Bytes: 94
it would be interesting to see some numbers if any are available (i.e. how much do you save?).

578:43-578:59
Mon Dec 08 16:00:35 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64974203_fe3cc105
UUID: a48dbaf4_c32a4894
Bytes: 243
just to be more precise about my previous question: :)

you mentioned that it *should* save power. I just wonder if the save is important enough to make us think about optimizations (e.g. as you suggested, to enhance Location with extra info).

580:4-580:56
Mon Dec 08 15:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_61cb30b4
Bytes: 205
nit: i'd prefer to have this at the top. I find it hard to read cause || implies to me that both can be valid...

Maybe you could use xor? might also help you simplify other if(...) {DCHECK()...} patterns.

594:7-594:15
Mon Dec 08 15:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_be5f196a
Bytes: 150
nit: just a matter of preference but I think most of the code in art uses is_reg1/loc1 etc... style. For me loc1 reads better but I don't really care.

610:37-610:38
Fri Dec 05 16:18:29 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ffad7dfd_7287f86f
Bytes: 15
Nit: extra `.'.

610:37-610:38
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ffad7dfd_7287f86f
UUID: 84927610_3fca272d
Bytes: 8
Removed.

614:5-614:41
Fri Dec 05 16:18:29 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f133113_b31cd8d6
Bytes: 35
Shouldn't we add a DCHECK for that?

614:5-614:41
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f133113_b31cd8d6
UUID: 84927610_dfce9b3f
Bytes: 13
We can. Done.

889:2-889:52
Mon Dec 08 15:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_5e4cd5c2
Bytes: 69
prefer 2 DCHECKS. In case of error it will better reveal the culprit.

905:4-905:47
Mon Dec 08 15:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64974203_7e519159
Bytes: 96
does it worth using the xor "trick" and remove the need for a temp?

(x = x^y, y = x^y, x = x^y)

935:4-936:46
Fri Dec 05 16:18:29 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f133113_f3cf70e8
Bytes: 56
Shouldn't `loc_2` and `loc_1' be swapped in those lines?

935:4-936:46
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f133113_f3cf70e8
UUID: a48dbaf4_40caae2d
Bytes: 6
Fixed.

1541:6-1543:5
Fri Dec 05 16:18:29 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dfb2795b_5432a211
Bytes: 61
Is there any reason why you kept this empty `else' statement?

1541:6-1543:5
Mon Dec 08 10:15:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dfb2795b_5432a211
UUID: 64974203_5ef8558c
Bytes: 75
The comment is a good enough reason for me :). though it could be improved.

1541:6-1543:5
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64974203_5ef8558c
UUID: 64974203_5e5cd5f4
Bytes: 21
Detailed the comment.

2137:2-2137:8
Mon Dec 08 10:15:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_bfe2b7d1
Bytes: 58
Trend is to put ATTRIBUTE_UNUSED on the parameter instead.

2137:2-2137:8
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84927610_bfe2b7d1
UUID: 64974203_7e6191a3
Bytes: 4
Done

File: compiler/optimizing/code_generator_arm64.h

147:2-147:9
Mon Dec 08 10:15:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84927610_7fac2f7e
Bytes: 32
Remove virtual (here and below).

147:2-147:9
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84927610_7fac2f7e
UUID: a48dbaf4_e0ce623f
Bytes: 4
Done

File: compiler/optimizing/register_allocator.cc

72:10-73:65
Fri Dec 05 16:18:29 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ffad7dfd_72a8981a
Bytes: 89
Nit: put each Boolean statement on its own line (either break a line before or after &&).

72:10-73:65
Mon Dec 08 10:15:06 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ffad7dfd_72a8981a
UUID: a48dbaf4_c0e23ed3
Bytes: 118
Actually, we can put a if (kX86_64 || kArm64) return true line 66, and make this loop not look at the instruction set.

72:10-73:65
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a48dbaf4_c0e23ed3
UUID: a48dbaf4_c0d55eca
Bytes: 37
Fixed following Nicolas's suggestion.

76:10-76:68
Fri Dec 05 16:18:29 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1f133113_73f3607e
Bytes: 9
Likewise.

76:10-76:68
Mon Dec 08 13:34:50 2014 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1f133113_73f3607e
UUID: 84927610_bfd5d7ca
Bytes: 48
Now moved to a previous test. See comment above.

File: test/Android.run-test.mk

300:0-300:45
Fri Dec 05 16:18:29 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ffad7dfd_d2b8646d
Bytes: 18
Wow! Great job. :)

300:0-300:45
Mon Dec 08 15:42:22 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ffad7dfd_d2b8646d
UUID: 64974203_7eed1149
Bytes: 119
btw, just a head up that I added REM_FLOAT tests to this list in https://android-review.googlesource.com/#/c/118233/ :)

