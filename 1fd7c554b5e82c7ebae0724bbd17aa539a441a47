Revision: 1fd7c554b5e82c7ebae0724bbd17aa539a441a47
Patch-set: 2
File: /COMMIT_MSG

9:0-9:74
Wed Jun 03 17:08:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9a97860_71dd438c
Bytes: 15
Nit: long line.

9:0-9:74
Thu Jun 04 10:43:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9a97860_71dd438c
UUID: b9ec18cf_36795ef5
Bytes: 4
Done

File: compiler/optimizing/inliner.cc

79:12-79:41
Wed Jun 03 17:08:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9ae2c65_edf876be
Bytes: 31
Maybe move this into ArtMethod?

79:12-79:41
Thu Jun 04 10:43:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9ae2c65_edf876be
UUID: d9f1cca3_7734820a
Bytes: 107
It's only really useful to a compiler/optimizer. We can think of moving it if the runtime sees a use of it.

File: compiler/optimizing/optimizing_compiler.cc

347:5-347:21
Wed Jun 03 16:41:48 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9ae2c65_2d268ef1
Bytes: 233
did you notice a regression on the null check and type check instruction? We record this stats and it's easy to see the diff.

Would also be interested to see if we would gain anything consistent if we run it again after the inliner.

347:5-347:21
Thu Jun 04 10:43:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9ae2c65_2d268ef1
UUID: d9f1cca3_97abee5d
Bytes: 192
Good point. There was a regression for the number of checkcast, I suspect due to running it before the inliner. I now do another run, and we remove more null checks and checkcasts than before.

File: compiler/optimizing/reference_type_propagation.cc

212:36-213:1
Wed Jun 03 16:41:48 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 99a8345d_615011dc
Bytes: 10
good catch

File: test/444-checker-nce/src/Main.java

30:40-30:51
Wed Jun 03 17:14:35 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9ae2c65_ad027e3a
Bytes: 49
Why not "instruction_simplifier_after_types" too?

30:40-30:51
Thu Jun 04 10:43:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9ae2c65_ad027e3a
UUID: b9ec18cf_d69c5abc
Bytes: 102
Because this is known non null at build time. The first first simplier wil lget rid of the null check.

