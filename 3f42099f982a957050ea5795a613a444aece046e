Revision: 3f42099f982a957050ea5795a613a444aece046e
Patch-set: 4
File: compiler/optimizing/code_generator_x86.cc

6437:10-6437:26
Tue Dec 08 16:14:19 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 601bdcb8_09908d2f
Bytes: 49
Unnecessary, it's always lower_bound + index + 1.

6437:10-6437:26
Tue Dec 08 17:59:20 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 601bdcb8_09908d2f
UUID: 20eac4c4_2bfc6562
Bytes: 4
Done

6438:29-6438:45
Tue Dec 08 16:14:19 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 60f2fca8_51a236ce
Bytes: 27
Unnecessary, always kEqual.

6438:29-6438:45
Tue Dec 08 17:59:20 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 60f2fca8_51a236ce
UUID: 60e03ce1_0d07bd2e
Bytes: 4
Done

6453:0-6458:25
Tue Dec 08 16:14:19 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c001e83e_f43cf69e
Bytes: 59
Simply index = 0 and leave the CMP+JB+JE to the loop below.

6453:0-6458:25
Tue Dec 08 17:59:20 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c001e83e_f43cf69e
UUID: e0b50cdb_6e24b7a2
Bytes: 4
Done

6474:0-6475:67
Tue Dec 08 16:14:19 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 601bdcb8_6995c11f
Bytes: 119
Note: the result is the same as

  cmp value_reg, lower_bound + index
  je successors[index]

So, whichever you prefer.

6474:0-6475:67
Tue Dec 08 17:59:20 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 601bdcb8_6995c11f
UUID: 00e5c0f2_752f2838
Bytes: 4
Done

6474:0-6475:67
Tue Dec 08 18:22:34 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 00e5c0f2_752f2838
UUID: 60f2fca8_d4e9f4d6
Bytes: 299
Actually, it does matter if the last value is INT_MAX, i.e. lower_bound+index==INT_MAX but lower_bound+num_entries overflows to INT_MIN.

(Note that lower_bound+index cannot overflow here because the verifier actually refuses such packed-switch, see https://android-review.googlesource.com/172894 .)

File: compiler/optimizing/code_generator_x86_64.cc

6041:12-6041:28
Tue Dec 08 16:14:19 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 60f2fca8_b186fa3a
Bytes: 25
= lower_bound + index + 1

6041:12-6041:28
Tue Dec 08 17:59:20 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 60f2fca8_b186fa3a
UUID: c0b808d7_d3356c82
Bytes: 4
Done

6042:31-6042:47
Tue Dec 08 16:14:19 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4016d890_a81df350
Bytes: 8
= kEqual

6042:31-6042:47
Tue Dec 08 17:59:20 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4016d890_a81df350
UUID: 80b290f4_ab9c01dc
Bytes: 4
Done

6057:0-6062:27
Tue Dec 08 16:14:19 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4016d890_881ab754
Bytes: 20
Simplify: index = 0.

6057:0-6062:27
Tue Dec 08 17:59:20 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4016d890_881ab754
UUID: a0af948e_6743fc96
Bytes: 4
Done

