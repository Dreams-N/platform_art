Revision: e3f67e94610f785aa20147a2c5dab1bae52a8b96
Patch-set: 1
File: compiler/dex/quick/x86/codegen_x86.h

905:2-905:6
Fri Dec 05 01:18:09 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bfe9452d_80da16f3
Bytes: 387
I am not sure that changing the signature is the greatest idea. The point of these methods is that they would be used for any analysis needed before codegen. For example, another use could be estimating spill region needed. AFAIK, the analysis in AOSP is only used to determine if we need the code pointer. But I am hesitant in reducing the capability of this logic to only do one thing.

905:2-905:6
Fri Dec 05 01:26:34 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bfe9452d_80da16f3
UUID: bf0225b9_8181808d
Bytes: 256
Its be possible to change the return type to a tuple... Avoiding side-effects makes it obvious what the code is computing and when the computation can terminate (ie immediately on x86-64 and when an instruction requiring the code base ptr is found on x86).

905:2-905:6
Fri Dec 05 01:29:21 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf0225b9_8181808d
UUID: dfe43953_616d56a0
Bytes: 52
Yes, I agree with striving to avoid side-effects. :)

905:2-905:6
Fri Dec 05 14:13:43 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dfe43953_616d56a0
UUID: bfe9452d_0328d0ac
Bytes: 299
While I agree that avoiding side effects is definitely good, I don't want to change the signature.  The purpose of this is to allow general analysis for ANY purpose.  It is not there just to compute store_method_address, and the routines are overriden to compute more information in a derived class.

905:2-905:6
Fri Dec 05 16:08:32 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bfe9452d_0328d0ac
UUID: 9fbc8133_353b98f0
Bytes: 529
If there is a use-case in a derived class that's not part of AOSP we have no means to test or maintain its correctness - such things are treated as though they don't exist and this is certainly not a justification for a -1.
As I explained above, the code is able to serve multiple purposes if you return a tuple to cover other conditions. For the up-stream AOSP code this code is clearly more optimal as we avoid a traversal of the IR on x86-64, as well as terminating early on x86 as soon as one base of code ptr is encountered.

