Revision: b72123440d8541362ebdb131436f9dbdda5fd329
Patch-set: 3
File: compiler/dex/quick/quick_compiler.cc

394:17-394:34
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_5d06cf27
Bytes: 59
I thought you were planing on moving this to CREATE_LAMBDA?

394:17-394:34
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_5d06cf27
UUID: f5586271_407ec241
Bytes: 120
As discussed offline, haven't had a chance to update smali yet so the encodings stay the way they do for the short term.

File: runtime/dex_instruction-inl.h

458:48-458:53
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_a4750cc4
Bytes: 16
Why this change?

458:48-458:53
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_a4750cc4
UUID: 9555663b_ba60ad3f
Bytes: 486
Has to use a new constant now since the array sizes are different for 25x and non-25x version. 


As for & vs non-&, the & version is much safer because this
argument doesn't just decay to a pointer 
(i.e. it's not possible to call this with an array of the wrong size).
 
For example,

     error: invalid initialization of reference of type
     ‘uint32_t (&)[kMaxVarArgRegs25x]’
     from expression of type ‘uint32_t [5]’

     uint32_t arg[5];
     inst.GetAllArgs25x(arg);

File: runtime/dex_instruction.cc

336:27-336:28
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_fc632523
Bytes: 14
missing spaces

336:27-336:28
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_fc632523
UUID: 704d65ae_bc4b8141
Bytes: 4
Done

File: runtime/interpreter/interpreter_common.h

143:61-143:68
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_c47210d9
Bytes: 37
Closure& (otherwise, drop the const?)

143:61-143:68
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_c47210d9
UUID: d03c51f4_df2bdb61
Bytes: 494
Done.

FWIW, I didn't do this originally because closure has flexible array elements in the end, it looks really weird to dereference it at the call site because it's impossible normally, EXCEPT when it immediately turns into a reference.

Personally I think this just makes the call sites more confusing so we may want to revisit this later. We also use const pointers all the time, I don't remember there being a rule in google3 saying we *have* to use const references (it's just preferred).

172:43-172:54
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_1c30d91c
Bytes: 82
ShadowFrame* (I know it was & before, but maybe you can change it in the process).

172:43-172:54
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_1c30d91c
UUID: d00a915c_2fbc69ab
Bytes: 95
I'd have to change the rest of the file too, or it won't be consistent. Not sure it's worth it.

228:55-228:93
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_3c359d0d
Bytes: 54
Huh? Explain why it's ok, and what do you plan to fix.

228:55-228:93
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_3c359d0d
UUID: 704d65ae_7ce0d984
Bytes: 29
That's explained on line 229.

239:9-239:36
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0e9a4178_f54092fe
Bytes: 38
Why did you need that one to be typed?

239:9-239:36
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0e9a4178_f54092fe
UUID: d03c51f4_dff0fb53
Bytes: 5
Done.

248:2-248:3
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_59b7c70c
Bytes: 20
why the extra block?

248:2-248:3
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_59b7c70c
UUID: 1001893d_1178ac85
Bytes: 4
Done

339:46-339:57
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_b68b8613
Bytes: 12
ShadowFrame*

339:46-339:57
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_b68b8613
UUID: d55b5e6b_bffc1fdd
Bytes: 95
I would prefer not to change this one since that's how the rest of the code is written already.

342:2-342:32
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_9e1f7d67
Bytes: 9
Why this?

342:2-342:32
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_9e1f7d67
UUID: 354d9aaf_1fd1c793
Bytes: 52
to avoid writing out the entire type name each time?

362:90-362:123
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_e46f14f2
Bytes: 4
huh?

362:90-362:123
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_e46f14f2
UUID: 1548969f_2183ca93
Bytes: 48
lint doesn't like the /*out*/ , don't ask me why

441:46-441:57
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_046dd8f9
Bytes: 12
ShadowFrame*

441:46-441:57
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_046dd8f9
UUID: 1001893d_517234a7
Bytes: 9
As above.

442:0-442:32
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_79bc83f0
Bytes: 5
drop?

442:0-442:32
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_79bc83f0
UUID: 30592d74_ba9c31dd
Bytes: 9
As above.

469:90-469:123
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eeb7ade1_7c2f15bf
Bytes: 1
?

469:90-469:123
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eeb7ade1_7c2f15bf
UUID: 5061411e_334de832
Bytes: 25
Lint doesn't like /*out*/

488:43-488:47
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_d7e1de06
Bytes: 21
with regards to what?

488:43-488:47
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_d7e1de06
UUID: 15a33681_6672701e
Bytes: 116
I'm not super sure, but the existing interpreter code would also clear out destination vregs when an error occurred.

File: runtime/interpreter/interpreter_goto_table_impl.cc

2422:0-2425:5
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_d9caf786
Bytes: 56
Sounds like this should be part of an interpreter state?

2422:0-2425:5
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_d9caf786
UUID: d55b5e6b_dff3d308
Bytes: 225
You mean the shadow frame or?

Once I kill off the capture-variable instruction, the ClosureBuilder will just be a temp used only for the scope of a single DoCreateLambda, so it will just disappear from the switch altogether.

File: runtime/lambda/closure.cc

128:9-128:19
Mon Sep 28 09:21:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ceae6993_1eb7edbf
Bytes: 1
?

128:9-128:19
Wed Sep 30 20:04:05 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ceae6993_1eb7edbf
UUID: 354d9aaf_9fbcb73c
Bytes: 166
Too many things on an ArtMethod require it to be non-const (don't ask me why, I didn't design it), better to have the const cast in one place than all over the place.

128:9-128:19
Tue Oct 06 20:56:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 354d9aaf_9fbcb73c
UUID: 5061411e_13770c62
Bytes: 284
I discussed this offline with Mathieu/Hiroshi and they mentioned that the ArtMethod being non-const most of the time is because back in the day it was a mirror object and required some sort of barriers.

We may want to do a larger cleanup later to make ArtMethod itself const-correct.

