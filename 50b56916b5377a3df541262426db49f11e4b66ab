Revision: 50b56916b5377a3df541262426db49f11e4b66ab
Patch-set: 6
File: /COMMIT_MSG

9:52-9:65
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 985112ab_1ccc9558
Bytes: 21
Nit: optimizations :)

9:52-9:65
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 985112ab_1ccc9558
UUID: b8fdf6c1_05b312d6
Bytes: 4
Done

File: compiler/optimizing/locations.cc

34:22-34:29
Wed Jul 15 09:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 985112ab_5c7f7d8a
Bytes: 56
Actually we need to refine that to non-fatal slow paths.

File: compiler/optimizing/nodes.h

1163:20-1163:26
Wed Jul 15 10:32:07 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 98fcb2c6_a4ab2292
Bytes: 220
Argh. This will conflict badly with my type-based improvement in CL https://android-review.googlesource.com/#/c/159329/

However, the good news is that we have sufficient bits left in that solution to add the GC as well.

1163:20-1163:26
Wed Jul 15 10:40:50 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 98fcb2c6_a4ab2292
UUID: b8fdf6c1_85a6e298
Bytes: 86
I'll have a look at your CL. I've done a lot of rebase already. A little more is fine!

1163:20-1163:26
Wed Jul 15 10:58:01 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b8fdf6c1_85a6e298
UUID: f8f20ee5_cf33dd31
Bytes: 91
Thanks. Yes, this code base has a lot more traffic than I was used to in prior projects :-)

1264:60-1264:61
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 985112ab_fcfbe96f
Bytes: 12
kBitsPerByte

1264:60-1264:61
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 985112ab_fcfbe96f
UUID: b8fdf6c1_e580f6d6
Bytes: 4
Done

2055:42-2055:51
Wed Jul 15 09:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b8fdf6c1_65108657
Bytes: 95
I don't think we make the deoptimize a terminating instruction, so this should be kept to None.

2055:42-2055:51
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b8fdf6c1_65108657
UUID: b8fdf6c1_853dc27c
Bytes: 52
Done. What do you mean by 'terminating instruction'?

3103:51-3103:75
Wed Jul 15 09:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d8470aeb_5e969554
Bytes: 108
Since this is ARM dependent again, maybe we could abstract that away, eg a method ArchNeedsRuntimeCallFor...

3103:51-3103:75
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d8470aeb_5e969554
UUID: d8470aeb_3ef8693e
Bytes: 36
Done here and for other occurrences.

3160:0-3160:96
Wed Jul 15 09:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 18f0c2db_507c2c94
Bytes: 59
not on the check, right? You could still move that to none.

3160:0-3160:96
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 18f0c2db_507c2c94
UUID: 18f0c2db_5030aca1
Bytes: 6
Fixed.

3357:19-3357:44
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d8470aeb_3e3069ef
Bytes: 70
What about making this static member function of art::HTypeConversion?

3357:0-3357:103
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 985112ab_7ce839a3
Bytes: 15
Nit: long line.

3357:0-3357:103
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 985112ab_7ce839a3
UUID: d8470aeb_de15c5fb
Bytes: 4
Done

3357:19-3357:44
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d8470aeb_3e3069ef
UUID: 985112ab_bc3d617c
Bytes: 4
Done

3358:63-3360:22
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b8fdf6c1_c5fbba70
Bytes: 49
Could we use art::HGraph::GetInstructionSet here?

3358:63-3360:22
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b8fdf6c1_c5fbba70
UUID: f8ba0e36_6f68b19a
Bytes: 119
As discussed, for now let's be conservative and we can optimise that later.
The reworked code should be clearer though.

3366:2-3366:4
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 18f0c2db_d0fb7c70
Bytes: 19
Indentation is off.

3366:2-3366:4
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 18f0c2db_d0fb7c70
UUID: 985112ab_1c1495f7
Bytes: 4
Done

3649:19-3649:38
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 985112ab_fc9c4946
Bytes: 64
What about making this static member function of art::HArraySet?

3649:19-3649:38
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 985112ab_fc9c4946
UUID: b8fdf6c1_45710a55
Bytes: 4
Done

3652:26-3652:59
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 985112ab_3ce2b1c3
Bytes: 16
Add parentheses.

3652:26-3652:59
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 985112ab_3ce2b1c3
UUID: d8470aeb_fe1a0129
Bytes: 4
Done

3653:2-3653:23
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b8fdf6c1_85f5c27d
Bytes: 31
Maybe use `?:' instead of `if'?

3653:2-3653:23
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b8fdf6c1_85f5c27d
UUID: 18f0c2db_302d284a
Bytes: 4
Done

4176:29-4176:53
Wed Jul 15 09:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d8470aeb_7e935163
Bytes: 23
only if it's not final?

4176:29-4176:53
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d8470aeb_7e935163
UUID: 18f0c2db_f05fa0c0
Bytes: 106
There is a slow path in the codegen unconditionally.
Is there a situation where we don't need a safepoint?

4238:0-4238:125
Wed Jul 15 10:31:21 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 985112ab_9ca18585
Bytes: 10
Long line.

4238:0-4238:125
Fri Jul 17 16:35:06 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 985112ab_9ca18585
UUID: b8fdf6c1_257e0e25
Bytes: 4
Done

