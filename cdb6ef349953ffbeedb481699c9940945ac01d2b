Revision: cdb6ef349953ffbeedb481699c9940945ac01d2b
Patch-set: 2
File: compiler/optimizing/nodes.h

1871:4-1871:49
Thu Nov 20 19:04:34 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ff64148_8547867d
Bytes: 93
Isn't converting to uint32_t, doing the shift, and converting back, easier and more readable?

1871:4-1871:49
Thu Nov 20 19:08:50 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ff64148_8547867d
UUID: ffe73d92_4883d3e7
Bytes: 285
I'm not deep enough in the code. But does this take Java semantics (preserved by dex) into account, i.e., is y in the right range when this is called? y is implicitly masked by 0x1f...

This has an impact here as you are not ensuring that y is non-negative, which is required in C/C++.

1871:4-1871:49
Fri Nov 21 00:22:23 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ffe73d92_4883d3e7
UUID: fa32ebd1_edb92171
Bytes: 139
It doesn't. C++ has undefined behaviour when the shift count is out of range. I figured it after uploading but didn't have time to fix it:)

1871:4-1871:49
Fri Nov 21 00:22:23 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ff64148_8547867d
UUID: fa32ebd1_0d9f55f0
Bytes: 77
Maybe. I don't have a strong preference. I tried to match the Java spec here.

1871:4-1871:49
Fri Nov 21 00:26:49 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fa32ebd1_0d9f55f0
UUID: 5ff84938_71a56097
Bytes: 221
I wonder whether we should follow Java or Dex spec. Dex actually defines what ushr-int is equivalent to... :-)

https://source.android.com/devices/tech/dalvik/dalvik-bytecode.html, section "Mathematical operation details"

1871:4-1871:49
Fri Nov 21 00:29:56 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5ff84938_71a56097
UUID: ba5313fc_b344e2e7
Bytes: 115
I wasn't aware of that. Thanks! :) I think it's better to match the dex one then. They should be equivalent anyway.

1871:4-1871:49
Fri Nov 21 02:15:10 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba5313fc_b344e2e7
UUID: df151930_59a84396
Bytes: 95
Agreed. You could also use interpreter as reference as well since it has to adhere to the spec.

