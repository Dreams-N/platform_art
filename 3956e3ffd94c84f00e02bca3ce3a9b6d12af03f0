Revision: 3956e3ffd94c84f00e02bca3ce3a9b6d12af03f0
Patch-set: 8
File: runtime/gc/accounting/mod_union_table.cc

87:0-87:56
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_efe395b8
Bytes: 67
DCHECK(!...IsActiveTransaction...);

Transactions add moving GC :-/

87
Tue Feb 11 20:30:16 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8fbfe18b_efe395b8
UUID: 8fbfe18b_1203b2da
Bytes: 217
I think this should always be obj->SetFieldObjectWithoutWriteBarrier<false>? If an object gets moved, you do not want to restore the pointer if the transaction gets aborted since it will be pointing to random garbage.

87
Wed Feb 12 18:00:58 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8fbfe18b_1203b2da
UUID: 0f405174_91b4acb8
Bytes: 4
Done

File: runtime/gc/collector/semi_space.cc

606:0-606:54
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_8fe0d9ad
Bytes: 67
DCHECK(!...IsActiveTransaction...);

Transactions add moving GC :-/

606
Tue Feb 11 20:30:16 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8fbfe18b_8fe0d9ad
UUID: efce9d4a_d530ae1a
Bytes: 103
Don't restore pointers of moved objects since rolling back the transaction will not unmove the objects.

606
Wed Feb 12 18:00:58 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: efce9d4a_d530ae1a
UUID: 0fabf157_3437befc
Bytes: 90
Agreed. Actually we do not change the object, just its address so no need to roll it back.

File: runtime/gc/heap.cc

2307:0-2307:50
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: efce9d4a_12ec0c73
Bytes: 92
I'd also expect not to be here in a transaction, but I don't think it'd be inherently wrong.

2307
Tue Feb 11 20:30:16 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: efce9d4a_12ec0c73
UUID: efce9d4a_f52daabd
Bytes: 108
In some cases, this is called when the referent moves, we do not want to store that case in the transaction.

2307
Wed Feb 12 18:00:58 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: efce9d4a_f52daabd
UUID: 0fabf157_d41bca86
Bytes: 4
Done

File: runtime/mirror/array.h

155:38-155:44
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_8ff53969
Bytes: 55
broken due to the templating? add to comment the reason

165:0-165:92
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_aff27d7c
Bytes: 8
and here

File: runtime/mirror/art_field.cc

46:0-46:14
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: efce9d4a_b215f89b
Bytes: 78
sounds like this could be enabled, "if (kIsDebugBuild)" is preferred to #ifdef

File: runtime/mirror/class-inl.h

432:48-432:49
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_2f20cd26
Bytes: 49
needed because image writing is in a transaction?

File: runtime/mirror/object.h

182
Tue Feb 11 20:30:16 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_d2fc3a8e
Bytes: 69
Worth doing kCheckTransition = kIsDebugBuild for performance? Or nah?

182
Wed Feb 12 18:00:58 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8fbfe18b_d2fc3a8e
UUID: 0fabf157_d4166a69
Bytes: 70
I'll move the transaction mode check from CHECK to DCHECK to fix that.

File: runtime/mirror/string.cc

36:30-36:75
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: efce9d4a_7259d079
Bytes: 108
another bogus case, thanks for cleaning the one below, annotalysis belongs on the declaration not definition

40:0-40:83
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_4f8501ae
Bytes: 77
It should be sound to set this unconditionally as the hash code is invariant.

File: runtime/thread.cc

401:8-401:27
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8fbfe18b_cf78110a
Bytes: 7
runtime

File: test/Transaction/Transaction.java

31:7-31:8
Tue Feb 11 18:33:36 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: efce9d4a_b22738dc
Bytes: 2
ws

