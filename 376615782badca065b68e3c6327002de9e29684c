Revision: 376615782badca065b68e3c6327002de9e29684c
Patch-set: 2
File: compiler/optimizing/graph_visualizer.cc

28:0-28:60
Wed Dec 03 04:33:07 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dfb999d9_df965321
Bytes: 60
Move into static member of HGraphVisualizer for annotalysis?

28:0-28:60
Wed Dec 03 04:39:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dfb999d9_df965321
UUID: 1fe09112_ebbb3199
Bytes: 78
I'd be fine with it, but I wanted a minimal change. I'll let Nicolas decide...

28:0-28:60
Wed Dec 03 09:28:47 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1fe09112_ebbb3199
UUID: 3f70f517_0dffd977
Bytes: 102
A new static mutex is not free, it pollutes the binary. Can't we use an existing compiler-related one?

28:0-28:60
Wed Dec 03 17:29:45 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f70f517_0dffd977
UUID: 1fe09112_b10d982b
Bytes: 169
I don't think there is a reasonable one exposed anywhere. I can try to refactor the compiler driver to expose its stats lock.

Is a 100 or so B really that unreasonable?

28:0-28:60
Thu Dec 04 00:17:58 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1fe09112_b10d982b
UUID: 1f4ed10c_3e0f059f
Bytes: 113
I checked, the one that would have been reasonable (compiler driver's stats lock) is only there in a debug build.

183:0-183:36
Wed Dec 03 09:28:47 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5f8a0930_f65b363d
Bytes: 85
Can't you have a VisitConstant? And move this VisitInstruction to a PrintInstruction?

183:0-183:36
Wed Dec 03 11:21:20 2014 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5f8a0930_f65b363d
UUID: 3f70f517_ed727d4f
Bytes: 2
+1

183:0-183:36
Wed Dec 03 17:29:45 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f70f517_ed727d4f
UUID: 1fe09112_71ae10aa
Bytes: 266
Currently the printer is a visitor that's forwarding everything here. So I used this setup as VisitConstant will mean all the things around (the rest of the output) has to be duplicated.

I can refactor some more, but I don't think it becomes more readable that way.

183:0-183:36
Thu Dec 04 00:17:58 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1fe09112_71ae10aa
UUID: 7f47cdec_137ebed9
Bytes: 29
I've refactored, take a look.

File: compiler/optimizing/graph_visualizer.h

75
Wed Dec 03 04:33:07 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f8d0d44_74466080
Bytes: 26
LOCKS_EXCLUDED(dump_mutex)

75
Thu Dec 04 00:17:58 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f8d0d44_74466080
UUID: 7f47cdec_738dc28e
Bytes: 4
Done

78:0-79:34
Wed Dec 03 04:33:07 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dfb999d9_ff93172e
Bytes: 64
compare and contrast output_ and oss_ in some comments?
mutable?

78:0-79:34
Wed Dec 03 04:39:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dfb999d9_ff93172e
UUID: 1fe09112_0b467d1a
Bytes: 233
The comments for DumpGraph and Finalizable are trying to do that, I'll extend.

oss_ had to be mutable because the whole class is used in a const context somewhere (I didn't want to heap-allocate, so it's not a pointer like output_).

79:2-79:9
Wed Dec 03 09:28:47 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff82dd17_f3d0a205
Bytes: 78
If you need a mutable, I think I'd prefer to drop the constness at call sites.

79:2-79:9
Wed Dec 03 17:29:45 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ff82dd17_f3d0a205
UUID: 5fd68940_3039a614
Bytes: 18
I'll look into it.

79:2-79:9
Thu Dec 04 00:17:58 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5fd68940_3039a614
UUID: 1f4ed10c_be1b15db
Bytes: 4
Done

