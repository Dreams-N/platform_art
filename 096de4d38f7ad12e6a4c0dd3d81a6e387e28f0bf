Revision: 096de4d38f7ad12e6a4c0dd3d81a6e387e28f0bf
Patch-set: 7
File: compiler/optimizing/graph_checker.cc

17:25-17:26
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0aa0b52_223c57d8
Bytes: 51
Please also add direct stl dependencies (like map).

17:25-17:26
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0aa0b52_223c57d8
UUID: d0fa6781_d6cf3163
Bytes: 4
Done

122:21-122:28
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1076bf12_66278ea3
Bytes: 55
No need to check, the visitor pattern ensures it's not.

122:45-122:62
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1076bf12_46229294
Bytes: 43
Add a VisitBinaryOperation in this visitor?

122:21-122:28
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1076bf12_66278ea3
UUID: 1076bf12_06e89a5a
Bytes: 4
Done

122:45-122:62
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1076bf12_46229294
UUID: f0aa0b52_82c98b3d
Bytes: 168
Agreed. However, it won't work as-is, as HBinaryOperation is not a concrete node type in the HInstruction hierarchy (i.e. it is not a leaf node in the class hierarchy).

124:9-124:23
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1076bf12_261d9655
Bytes: 155
BinaryOperation will only have two inputs, so you can just check whether InputAt(0) is a constant or not.

Note that having two constants as input is fine.

124:9-124:23
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1076bf12_261d9655
UUID: d0fa6781_561181b9
Bytes: 4
Done

158:35-158:36
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0fa6781_963be9b3
Bytes: 50
The following two methods could be in the .h file.

158:35-158:36
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0fa6781_963be9b3
UUID: d0fa6781_969649c8
Bytes: 4
Done

164:0-164:1
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0aa0b52_82742ba8
Bytes: 22
Remove extra new line.

164:0-164:1
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0aa0b52_82742ba8
UUID: d0fa6781_769bddef
Bytes: 4
Done

File: compiler/optimizing/graph_checker.h

27:31-27:36
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0fa6781_f6998d9b
Bytes: 148
arena -> allocator (I know I may have left a few places that called it arena, but we should really call them allocator, as there is an Arena class).

27:31-27:36
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0fa6781_f6998d9b
UUID: f0aa0b52_4215d3d3
Bytes: 4
Done

65:49-65:51
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0aa0b52_2213f777
Bytes: 13
Add new line.

65:49-65:51
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0aa0b52_2213f777
UUID: f0aa0b52_621a4f05
Bytes: 4
Done

File: compiler/optimizing/graph_checker_test.cc

28:8-28:17
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1076bf12_86a2cac7
Bytes: 80
Maybe move this to optimizing_unit_test.h, and change the other tests to use it?

28:8-28:17
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1076bf12_86a2cac7
UUID: f0aa0b52_224f77a5
Bytes: 4
Done

100:19-100:23
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0fa6781_56186165
Bytes: 5
CFG2?

100:19-100:23
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0fa6781_56186165
UUID: f0aa0b52_020fdbc5
Bytes: 4
Done

110:19-110:23
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1076bf12_a69fc680
Bytes: 5
CFG3?

110:19-110:23
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1076bf12_a69fc680
UUID: f0aa0b52_220c57ce
Bytes: 4
Done

126:44-126:46
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0fa6781_9622c991
Bytes: 68
Add a check that the graph is valid before you're making it invalid?

126:44-126:46
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0fa6781_9622c991
UUID: d0fa6781_567501da
Bytes: 4
Done

142:44-142:46
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0fa6781_76275da3
Bytes: 5
ditto

142:44-142:46
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0fa6781_76275da3
UUID: d0fa6781_c9e3163c
Bytes: 4
Done

File: compiler/optimizing/nodes.cc

396:75-396:76
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0aa0b52_a250471e
Bytes: 68
Add DCHECK_EQ(instruction1->GetBlock() == instruction2->GetBlock());

396:75-396:76
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0aa0b52_a250471e
UUID: d0fa6781_a9b68a10
Bytes: 4
Done

398:34-398:36
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1076bf12_c69cc28e
Bytes: 49
Why this check? You're returning line 400 anyway.

398:34-398:36
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1076bf12_c69cc28e
UUID: 1076bf12_267af6c9
Bytes: 93
Right, thanks. This comes from a previous implementation and I forgot to clean this up.
Done.

406:13-406:14
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0aa0b52_4245d35d
Bytes: 108
Add LOG(FATAL) << "Can't find an order between two instructions of the same block".

Or something like that.

406:13-406:14
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0aa0b52_4245d35d
UUID: f0aa0b52_c21ea3c4
Bytes: 4
Done

409:61-409:62
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d0fa6781_56418123
Bytes: 5
const

409:61-409:62
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d0fa6781_56418123
UUID: d0fa6781_c92b166b
Bytes: 80
Agreed.  Had to propagate const-ness to IsXYZ and AsXYZ methods to have it work.

424:46-424:47
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0aa0b52_624a4f6f
Bytes: 292
There is no order in phis (conceptually they are done in parallel).

I think we should either return false or LOG(FATAL). The latter seems best for now, as it's probably an error if we want to check dominance between two phis. Also, returning false would render this function non-commutative.

424:46-424:47
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0aa0b52_624a4f6f
UUID: 1076bf12_a64ee6a5
Bytes: 219
I have implemented the LOG(FATAL) solution, although returning false seems okay to me.  This case would only happen when `this` and `other_instruction` are both phis, hence commutativity would be preserved, wouldn't it?

File: compiler/optimizing/nodes.h

590:27-590:36
Mon Sep 15 09:13:42 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0aa0b52_023fdbcf
Bytes: 21
dominates -> dominate

590:27-590:36
Mon Sep 15 16:05:26 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0aa0b52_023fdbcf
UUID: d0fa6781_c954b6e1
Bytes: 4
Done

