Revision: b1d19b963825f506f9399d1bb04372b3b604e711
Patch-set: 4
File: compiler/dex/quick/dex_file_method_inliner.cc

298:0-301:83
Mon Jun 16 18:25:43 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df3990b5_adbd5dc7
Bytes: 145
We should not require intrinsic != nullptr.
  bool res = ...;
  if (res && intrinsic != nullptr) {
    *intrinsic = it->second;
  }
  return res;

298:0-301:83
Mon Jun 16 19:48:16 2014 +0000
Author: Yixin Shou <1013850@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df3990b5_adbd5dc7
UUID: bf469c40_0f36691e
Bytes: 4
Done

File: compiler/dex/quick/x86/fp_x86.cc

559:0-560:10
Mon Jun 16 18:25:43 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df3990b5_cdc2a93a
Bytes: 40
This should be a single line:
  } else {

559:0-560:10
Mon Jun 16 19:48:16 2014 +0000
Author: Yixin Shou <1013850@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df3990b5_cdc2a93a
UUID: 9f439833_2edde7ed
Bytes: 4
Done

563
Mon Jun 16 18:25:43 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1fd5e878_417f7633
Bytes: 87
This is a NOP now, please remove or replace with
  DCHECK(rl_result.reg == rl_src.reg);

563
Mon Jun 16 19:48:16 2014 +0000
Author: Yixin Shou <1013850@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1fd5e878_417f7633
UUID: 7f3264d4_d0f8749f
Bytes: 4
Done

564
Mon Jun 16 18:25:43 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: df3990b5_edc76547
Bytes: 61
We're done using the sign_mask, so
  FreeTemp(sign_mask)
now.

564
Mon Jun 16 19:48:16 2014 +0000
Author: Yixin Shou <1013850@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: df3990b5_edc76547
UUID: 7f3264d4_10e3ecf1
Bytes: 4
Done

