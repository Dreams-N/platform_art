Revision: 5aef37440b10128094b1d7b01c3a5f41c7ac65b4
Patch-set: 1
File: compiler/dex/mir_dataflow.cc

902:2-902:3
Mon Dec 01 18:21:16 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5f17698b_6be015df
Bytes: 164
Since this can't be expressed with the existing flags, use DF_FORMAT_EXTENDED and implement in MIRGraph::HandleExtended() and MIRGraph::DataFlowSSAFormatExtended().

902:2-902:3
Mon Dec 01 19:19:00 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5f17698b_6be015df
UUID: bfaea591_7bb9db6d
Bytes: 466
Agreed with Vmarko. Also, please add this to the extended disassembler.

Vmarko, what do you think about also adding type information to the operands instead of opcode? I am interested in that approach because I find it cleaner, and will also allow possibility of adding float and double if we ever decide to deviate from current specification on FP value safety. (though for now, Ian did mention that we need to retain strict safety so we match interpreter always).

902:2-902:3
Mon Dec 01 19:27:16 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bfaea591_7bb9db6d
UUID: 5f8a0930_70e58eed
Bytes: 192
MIR is very close to the dalvik instruction and as such embedding the type in the opcode seems cleaner to me. Otherwise we're going to mix two different approaches which can lead to confusion.

902:2-902:3
Thu Dec 04 03:01:45 2014 +0000
Author: Ningsheng Jian <1055173@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5f17698b_6be015df
UUID: 9fb3a1f9_e6f2b078
Bytes: 174
Hi Vmarko, since this is SSA based optimization, it depends on preceding multiply op's SSA. I find that it is not easy to handle it in the methods you pointed out. Any ideas?

902:2-902:3
Thu Dec 04 06:42:27 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9fb3a1f9_e6f2b078
UUID: bf16a5da_f831b1e2
Bytes: 842
Ningsheng, this comment is not about necessarily maintaining the ssa (because I think you already have logic to do that), but to allow regeneration in case we need it. One way to test it is to mark the pass as having "dirtied" the CFG and it will run the post-opts (just for testing because preferred approach is still to maintain in pass to prevent useless work). Therefore, you do not worry about the previous multiply's ssa. As long as you express the new semantics via the methods Vmarko recommended, you should be fine. Just make sure you remove the multiply and replace the add with the multiply-add. Then if ssa needs regenerated, as long as you express the semantics you already captured via the definition, then it will just work automatically. Vmarko will likely reply if he has anything else to add (or if he disagrees with me :)).

File: compiler/dex/mir_graph.h

1276
Mon Dec 01 18:21:16 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ffcbbd63_629a16d2
Bytes: 16
Bad indentation.

