Revision: da6f8bb40fe10305b3fdad437d26b7c04fe1fe95
Patch-set: 7
File: compiler/dex/quick/x86/assemble_x86.cc

392:0-392:103
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a698874_d0eb52c9
Bytes: 93
this needs to handle REX prefixes, especially as R8 and R9 are part of the calling convention

392
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a698874_d0eb52c9
UUID: aa26584d_fc5f5d19
Bytes: 942
The work on REX support, particularly for r8..r9 is in progress and it depends on this patch. I would prefer to submit r8..r9 as a separate patch. Both patches are quite big and consume a lot of resources on rebasing after each change in BE (Load/StoreWord, stack walker changes, doubles as doubles, ThreadOffset4 etc).

This version is functional, except "hard float" limitation, passing 3 regs as arguments limitation, register allocator limitation (it still allocates longs as pair for 64-bit, discussion with Bill initiated by Mark) - all of them are general art limitations.

Does it sounds reasonable to separate patches as follows?
 - Start with this patch (it can pass about a half of art tests in 64-bit host mode)
 - Extend it with REX after merge (with same pass rate)
 - Update LoadArgRegs/GenDalvikArgs with hard float and >3 parameters support
 - Update long arithmetic when reg alloc will be ready

Do you accept such sequence?

411:60-411:61
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a698874_d046f236
Bytes: 9
full-stop

411:6-411:7
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_7984d381
Bytes: 14
In 64-bit mode

411
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_7984d381
UUID: 6a862067_37d0a085
Bytes: 37
Do you mean I have to update comment?

411
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a698874_d046f236
UUID: 8a81944e_7884d981
Bytes: 32
What do you mean by "full-stop"?

411
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a862067_37d0a085
UUID: aa26584d_1c3c99b4
Bytes: 4
Done

411
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a81944e_7884d981
UUID: 8a81944e_fb03e32c
Bytes: 4
Done

574:0-579:5
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_f95c4360
Bytes: 159
this is somewhat defeating the point of having a skeleton, it'd be nicer if the lookup table contained fs: for 32-bit and gs: for 64-bit and lose the condition

579
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_f95c4360
UUID: 6a862067_37a50028
Bytes: 321
That is the only solution to keep lookup table manageable. There is no difference between 32-bit operations in 32-bit and 64-bit mode. The 64-bit specific appears only in three places: EmitPrefix, CalculateSize, EmitModrmThread.

Is it acceptable to avoid duplicating *Thread* instruction entries in lookup table for now?

635:33-635:39
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a698874_505be20c
Bytes: 9
full-stop

635
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a698874_505be20c
UUID: 6a862067_976cec18
Bytes: 32
Please describe your point here.

635
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6a862067_976cec18
UUID: aa26584d_3c3955c5
Bytes: 4
Done

File: compiler/dex/quick/x86/call_x86.cc

214:64-214:76
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a64fc99_7c9a8191
Bytes: 182
presumably kPointerSize here should be 4 or 8, use GetInstructionSetPointerSize(cu_->instruction_set) or else cross-compilation 32-bit to 64-bit or vice versa will do the wrong thing

214
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a64fc99_7c9a8191
UUID: 8a81944e_98617d1b
Bytes: 183
I didn't have chance to check cross compilation yet, ThreadOffset4 patch was merged yesterday.

I'll update kPointerSize with GetInstructionSetPointerSize where applicable. Thank you.

214
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a81944e_98617d1b
UUID: 8a81944e_5b130f7e
Bytes: 4
Done

298:64-298:76
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_b93fabf4
Bytes: 5
ditto

298
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_b93fabf4
UUID: aa26584d_7c6cadd4
Bytes: 13
Will fix this

298
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa26584d_7c6cadd4
UUID: 6a862067_7a15ad56
Bytes: 4
Done

File: compiler/dex/quick/x86/codegen_x86.h

583:4-583:10
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_192fd7c1
Bytes: 10
s/inline /

583:26-583:27
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_04dbea88
Bytes: 5
const

583
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_192fd7c1
UUID: aa26584d_dcbf01ef
Bytes: 79
Is "const bool Gen64Bit() { return gen64bit_; }" will be better for this place?

583
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa26584d_dcbf01ef
UUID: 8a81944e_9b2df7b5
Bytes: 51
Done (bool Gen64Bit() const  { return gen64bit_; })

615:4-615:8
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a64fc99_5c321de7
Bytes: 5
const

File: compiler/dex/quick/x86/target_x86.cc

589:30-589:42
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a698874_900e3a03
Bytes: 119
as before (and below) this needs to be the pointer size being compiled for not the pointer size of the current runtime.

589
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a698874_900e3a03
UUID: aa26584d_fcc43d77
Bytes: 14
Will fix this.

589
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa26584d_fcc43d77
UUID: aa26584d_bc456529
Bytes: 4
Done

658:0-658:20
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_a4f8dee6
Bytes: 36
TODO: r8 and r9. floating point args

658
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_a4f8dee6
UUID: 6a862067_9a465164
Bytes: 24
Added TODO into the code

File: compiler/dex/quick/x86/utility_x86.cc

141:0-166:3
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_84103a71
Bytes: 6
indent

166
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_84103a71
UUID: 6a862067_9af891e7
Bytes: 4
Done

597:17-597:26
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a6a7464_240dce53
Bytes: 12
fall-through

597
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a6a7464_240dce53
UUID: aa26584d_7c2fcd79
Bytes: 4
Done

743:17-743:26
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a698874_f0be96c2
Bytes: 12
fall-through

743
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a698874_f0be96c2
UUID: 6a862067_bafd55d6
Bytes: 4
Done

File: compiler/dex/quick/x86/x86_lir.h

543
Tue May 13 06:23:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a64fc99_5c5bfd0c
Bytes: 54
just REX 0x40 is useful for normalizing byte registers

543
Tue May 13 17:08:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a64fc99_5c5bfd0c
UUID: 8a81944e_7832992e
Bytes: 112
The REX_W is used in lookup table for 64-bit entries. Do you prefer to remove REX_R/REX_X/REX_B from this patch?

543
Tue May 13 17:42:15 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a81944e_7832992e
UUID: aa26584d_3c52b5ef
Bytes: 41
Removed REX_R/REX_X/REX_B from this patch

