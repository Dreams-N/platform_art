Revision: 0cb342abdb4de5aefb258849e85326f20be0b39d
Patch-set: 6
File: /COMMIT_MSG

14
Wed Oct 28 16:01:35 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d685318b_20ddea41
Bytes: 159
Line too long.

We usually stick to just 60 characters in commit message but I'm OK with 76 for reading git log on an 80-column terminal. This one is over 100.

14
Wed Oct 28 16:56:25 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d685318b_20ddea41
UUID: 36a68d28_2b8a191d
Bytes: 4
Done

File: compiler/oat_writer.h

71
Wed Oct 28 16:01:35 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b688bda5_bf1f57a4
Bytes: 51
Please update the layout comment with the new data.

71
Wed Oct 28 16:56:25 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b688bda5_bf1f57a4
UUID: 76c565cc_6594463d
Bytes: 4
Done

File: runtime/dex_file.cc

423
Wed Oct 28 16:01:35 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3694cdc0_fb000f50
Bytes: 14
Line too long.

423
Wed Oct 28 16:56:25 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3694cdc0_fb000f50
UUID: 769c85d8_cda449b0
Bytes: 4
Done

497:0-502:3
Wed Oct 28 16:01:35 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f66795cb_39b1af1a
Bytes: 107
If the new lookup table is better, we should use it instead of the "Index" (rather than in addition to it).

497:0-502:3
Wed Oct 28 16:16:49 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f66795cb_39b1af1a
UUID: 96cad9dc_66b8ceac
Bytes: 171
There's a tradeoff. Space for the new lookup table is larger. So I think this is fine - for runtime cases, use the index, otherwise use the lookup table that's oat backed.

497:0-502:3
Wed Oct 28 16:54:37 2015 +0000
Author: Artem Udovichenko <1083288@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96cad9dc_66b8ceac
UUID: 56c4e1d1_04d476cc
Bytes: 338
Sorry, I don't understand what do you mean: "for runtime cases, use the index, otherwise use the lookup table that's oat backed". In current code lookup table used at runtime.
There are no reasons to build lookup table only for speedup compilation.
Also I notice that lookup table uses less memory then Index and this memory is read only.

497:0-502:3
Wed Oct 28 16:56:25 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96cad9dc_66b8ceac
UUID: f6d955b5_a9745d8f
Bytes: 163
It doesn't really use more memory, especially on 64bit. On 32 bit it is probably similar space usage depending on load factor vs rounding up to nearest power of 2.

508:0-511:72
Wed Oct 28 16:01:35 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f66795cb_59be63e9
Bytes: 460
This is really sub-optimal. The number of strings is usually an order of magnitude higher than the number of types, so the first binary search is doing about 3 more string comparisons than needed if we provide a "FindTypeId(const char* descriptor)", and it's also bringing non-type strings into cache.

Maybe we should start by improving this slow path and then benchmark against that to assess whether the lookup table (and/or the "Index") is actually needed.

508:0-511:72
Wed Oct 28 16:56:25 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f66795cb_59be63e9
UUID: 769c85d8_4d033927
Bytes: 264
Nice catch, I just implemented the FindTypeId that binary searches on the string contents. However, based on my measurements this regresses FindClassDef by around 20x (10% total perf time vs 0.5%) compared to the hash table (compile 100k APKs with interpret-only).

