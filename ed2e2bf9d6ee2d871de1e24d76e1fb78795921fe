Revision: ed2e2bf9d6ee2d871de1e24d76e1fb78795921fe
Patch-set: 5
File: compiler/optimizing/intrinsics_arm.cc

866:3-866:86
Fri Jul 10 10:40:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1867e20f_5bb4d722
Bytes: 103
An alternative could be to use Thumb2Assembler::CompareAndBranchIfZero instead of Thumb2Assembler::cbz.

866:3-866:86
Fri Jul 10 11:17:58 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1867e20f_5bb4d722
UUID: 1840c241_e4e762d3
Bytes: 179
There is a trade-off between how much do we gain by forcing CBZ and how much do we lose by placing this restriction on the register allocation. I'd expect a negligible difference.

890:62-890:74
Fri Jul 10 11:17:58 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1867e20f_9bd10f43
Bytes: 13
Uint32Value()

898:0-899:26
Fri Jul 10 11:17:58 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d829ca86_823f6a76
Bytes: 45
__ CompareAndBranchIfZero(arg, &return_false)

924:12-924:42
Fri Jul 10 10:40:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d829ca86_020a5ad8
Bytes: 44
Use IsAligned from runtime/base/bit_utils.h.

925:12-925:46
Fri Jul 10 10:40:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 782e1e92_71ce905a
Bytes: 44
Ditto (and turn it into a static_assertion).

927:35-927:64
Fri Jul 10 10:40:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 18f28255_f445e0c8
Bytes: 84
"plus the length of the string in bytes (so twice the number of UTF-16 characters)"?

930:2-930:59
Fri Jul 10 10:40:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 18f28255_d429bc16
Bytes: 34
Move this comment before line 932?

931:2-931:42
Fri Jul 10 10:40:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1867e20f_5bddb750
Bytes: 342
Maybe add a comment before this line to explain that `temp1` is reset one position (= two bytes in an UTF-16-encoded string) backward to the offset of the last character of the string?

Also, shouldn't you also check that the length (`temp`) is not 0 before doing this?  (In other words, shouldn't lines 937 and 938 be moved before line 931?)

935:71-935:79
Fri Jul 10 10:40:26 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 782e1e92_31f12891
Bytes: 8
handled?

938:21-938:23
Fri Jul 10 11:17:58 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1867e20f_fb604b05
Bytes: 201
LS (you still need to compare the first 2 characters if EQ)

And since you don't need to compare during the first iteration, you can move this to the end of the loop, avoiding one unconditional branch.

939:0-941:36
Fri Jul 10 11:24:47 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 18f28255_f4a160f8
Bytes: 46
Requires Location::kNoOutputOverlap for "out".

939:0-941:36
Fri Jul 10 11:43:58 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 18f28255_f4a160f8
UUID: 782e1e92_91de9cce
Bytes: 275
Please ignore my comment, it's OK as is.

(As Nicolas explained to me, the notion of overlap is about the live ranges of the registers. So, the default case assuming range overlap forces the register allocator to assign different registers, i.e. "not overlapping registers".)

