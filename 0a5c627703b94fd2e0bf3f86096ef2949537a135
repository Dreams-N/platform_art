Revision: 0a5c627703b94fd2e0bf3f86096ef2949537a135
Patch-set: 2
File: runtime/base/stack_allocator.h

26:8-26:32
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2461e61f_b6e9e6f0
Bytes: 15
No, really? :-)

41:2-44:3
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6492fe15_46088330
Bytes: 134
This won't work. :-(

However, for you the default parameter for MakeInstance would work, as you have the templated type. Lucky you...

41:2-44:3
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_46088330
UUID: a455d63a_d79a9cd5
Bytes: 27
Do we want to rely on luck?

41:2-44:3
Thu Sep 03 15:54:27 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a455d63a_d79a9cd5
UUID: 6492fe15_1c8acc0e
Bytes: 284
This has nothing to do with relying on luck. He's in the lucky position that the type completely defines the storage size, and then the default parameter will work (we both verified that). I was just jealous, as the same is not possible for dynamically sized things like ShadowFrames.

41:2-44:3
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_1c8acc0e
UUID: 84529221_8ee1cdba
Bytes: 455
Yeah, I'm just going to omit this file from this CL, there is no test for it anyway because I didn't end up needing it. Sorry for adding it to the review.

FWIW this templated version is not very useful either because the size should be dynamic. If the size is static then using alloca is fairly pointless.

I've been some deep thought how to cleanly and reusably handle dynamically-sized structs/classes and alloca and I will post something in later CLs.

File: runtime/lambda/art_lambda_method.cc

33:2-36:33
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e486eed4_be139066
Bytes: 31
Why not in an initializer list?

33:2-36:33
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e486eed4_be139066
UUID: 6492fe15_dc9a24d6
Bytes: 178
Doesn't really matter to me, would you rather?

This is not part of the style right now so we should add that if you want this to always be part of the [member] initializer list.

33:2-36:33
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_dc9a24d6
UUID: 84529221_71c4312b
Bytes: 4
Done

43:29-43:30
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6492fe15_e622ef7e
Bytes: 9
Remove s.

43:29-43:30
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_e622ef7e
UUID: 84529221_31a6b98e
Bytes: 4
Done

File: runtime/lambda/art_lambda_method.h

81:2-81:68
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a40a365b_f2c6c6cf
Bytes: 20
Vertical whitespace?

81:2-81:68
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a40a365b_f2c6c6cf
UUID: e486eed4_cf2a5c41
Bytes: 180
Do you always want a blank line in between function definitions/declarations *even if* there's a comment in between?

This is not part of the style right now so we should add that.

89:9-89:35
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8480d2c5_b9017b10
Bytes: 8
NumberOf

89:9-89:35
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8480d2c5_b9017b10
UUID: 64159e82_4b2399e7
Bytes: 27
NumberOfCapturedVariables ?

89:9-89:35
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64159e82_4b2399e7
UUID: 8497f201_e1040a22
Bytes: 4
Done

94:5-94:85
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4d42ed5_b4df2e76
Bytes: 12
Explain why.

94:5-94:85
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4d42ed5_b4df2e76
UUID: e486eed4_4f4e4c37
Bytes: 49
to avoid the extra indirect load? it's on line 95

94:5-94:85
Mon Sep 07 09:11:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e486eed4_4f4e4c37
UUID: e4d42ed5_bac95591
Bytes: 19
Ah, yes, missed it.

100:42-100:46
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4dbaa04_93a79ef0
Bytes: 9
variables

100:42-100:46
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4dbaa04_93a79ef0
UUID: 64159e82_3954b7c7
Bytes: 4
Done

102:50-102:88
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 247566b9_d68c422d
Bytes: 36
isn't that the definition of shorty?

102:50-102:88
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 247566b9_d68c422d
UUID: 84529221_0e94bd01
Bytes: 238
Yes it is, that's why it says "e.g." as a quick example to remind them what a shorty is.

Would you rather I not have an example here (I personally get lost when there's specially formatted strings without examples of how they look like)?

104:51-104:56
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4d42ed5_540cc2b6
Bytes: 10
who needs?

104:51-104:56
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4d42ed5_540cc2b6
UUID: 8497f201_6108fa30
Bytes: 4
Done

File: runtime/lambda/closure.cc

40:5-40:28
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a46956e6_7a6f55c7
Bytes: 10
nit: drop?

40:5-40:28
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a46956e6_7a6f55c7
UUID: 644d9e85_38bea8eb
Bytes: 176
(Done)

Personally I thought you would've preferred this since it's more explicit. After all with a function call like "GetUnsafeAtOffset" it could return pretty much anything.

78:6-78:41
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4072a51_848bb654
Bytes: 57
Personally I dislike this. What does the style guide say?

78:6-78:41
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4072a51_848bb654
UUID: 644d9e85_879addab
Bytes: 234
This ends up generating pretty tight code, when I was debugging even in O2 most of these [unused] variables (and branches) were optimized out.

That being said, can you elaborate on what exactly you dislike so I can see how to fix it?

140:9-140:29
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 247566b9_f6893e1a
Bytes: 5
drop?

140:9-140:29
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 247566b9_f6893e1a
UUID: 04cce27b_7cf1d9a0
Bytes: 4
Done

191:6-191:18
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64ecbece_56698abe
Bytes: 31
LOG(FATAL) instead. Same below.

File: runtime/lambda/closure.h

53:9-53:35
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4deb6f4_926f9a81
Bytes: 8
NumberOf

53:9-53:35
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4deb6f4_926f9a81
UUID: 644d9e85_bd528a73
Bytes: 4
Done

56:12-56:18
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4072a51_e4a442ed
Bytes: 28
Technically java/lang/Object

56:12-56:18
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4072a51_e4a442ed
UUID: 6492fe15_dc31c485
Bytes: 89
This was just referring to an arbitrary object, not to the specific one. Fix or leave it?

56:12-56:18
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_dc31c485
UUID: 04cce27b_3ce751e8
Bytes: 4
Done

File: runtime/lambda/closure_builder.cc

33:58-33:72
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e486eed4_beeab01c
Bytes: 51
UNIMPLEMENTED(FATAL) is more intention-revealing...

33:58-33:72
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e486eed4_beeab01c
UUID: 84529221_d16ac5b6
Bytes: 4
Done

153:33-153:35
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4072a51_6467b25c
Bytes: 41
DCHECK_EQ, or probably !shorty.IsObject()

153:33-153:35
Fri Sep 04 00:29:27 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4072a51_6467b25c
UUID: 04cce27b_1c028d13
Bytes: 17
changed as per 33

File: runtime/lambda/shorty_field_type.h

44:7-44:22
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4deb6f4_52c932e5
Bytes: 47
Why do we need this when we have PrimitiveType?

44:7-44:22
Thu Sep 03 18:10:03 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a4deb6f4_52c932e5
UUID: 84529221_2e453936
Bytes: 560
TL;DR I wanted to keep the CL shorter to make it easier for reviewers

--
I need to refactor these together later (as on line 37)

Right now the PrimitiveType assumes everything not a primitive is an object, and I just didn't want this CL to also have to refactor every other piece of art code where PrimitiveType was used because this is just the infrastructure side of the closures.

As for the rest of the functionality here, it's helpful to have it be part of the class instead of the rest of art code hardcoding the logic on what the traits of a type are.

44:7-44:22
Mon Sep 07 09:11:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84529221_2e453936
UUID: 24bd66ca_d3cc94a3
Bytes: 236
I understand it might be easier to introduce a new thing, but we will pay the price for it when refactoring two things that prove to work. I hope you prove me wrong when I say these refactorings get lost once we have a working system...

