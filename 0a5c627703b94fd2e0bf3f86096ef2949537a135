Revision: 0a5c627703b94fd2e0bf3f86096ef2949537a135
Patch-set: 2
File: runtime/base/stack_allocator.h

26:8-26:32
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2461e61f_b6e9e6f0
Bytes: 15
No, really? :-)

41:2-44:3
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6492fe15_46088330
Bytes: 134
This won't work. :-(

However, for you the default parameter for MakeInstance would work, as you have the templated type. Lucky you...

41:2-44:3
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_46088330
UUID: a455d63a_d79a9cd5
Bytes: 27
Do we want to rely on luck?

File: runtime/lambda/art_lambda_method.cc

33:2-36:33
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e486eed4_be139066
Bytes: 31
Why not in an initializer list?

43:29-43:30
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6492fe15_e622ef7e
Bytes: 9
Remove s.

File: runtime/lambda/art_lambda_method.h

81:2-81:68
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a40a365b_f2c6c6cf
Bytes: 20
Vertical whitespace?

89:9-89:35
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8480d2c5_b9017b10
Bytes: 8
NumberOf

94:5-94:85
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4d42ed5_b4df2e76
Bytes: 12
Explain why.

100:42-100:46
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4dbaa04_93a79ef0
Bytes: 9
variables

102:50-102:88
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 247566b9_d68c422d
Bytes: 36
isn't that the definition of shorty?

104:51-104:56
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4d42ed5_540cc2b6
Bytes: 10
who needs?

File: runtime/lambda/closure.cc

40:5-40:28
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a46956e6_7a6f55c7
Bytes: 10
nit: drop?

78:6-78:41
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4072a51_848bb654
Bytes: 57
Personally I dislike this. What does the style guide say?

140:9-140:29
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 247566b9_f6893e1a
Bytes: 5
drop?

191:6-191:18
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64ecbece_56698abe
Bytes: 31
LOG(FATAL) instead. Same below.

File: runtime/lambda/closure.h

53:9-53:35
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4deb6f4_926f9a81
Bytes: 8
NumberOf

56:12-56:18
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4072a51_e4a442ed
Bytes: 28
Technically java/lang/Object

File: runtime/lambda/closure_builder.cc

33:58-33:72
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e486eed4_beeab01c
Bytes: 51
UNIMPLEMENTED(FATAL) is more intention-revealing...

153:33-153:35
Wed Sep 02 23:15:34 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4072a51_6467b25c
Bytes: 41
DCHECK_EQ, or probably !shorty.IsObject()

File: runtime/lambda/shorty_field_type.h

44:7-44:22
Thu Sep 03 14:57:09 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a4deb6f4_52c932e5
Bytes: 47
Why do we need this when we have PrimitiveType?

