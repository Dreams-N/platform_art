Revision: 08267d8f336ff89763c7a516f11b8a94bd07e41a
Patch-set: 15
File: compiler/utils/arm/assembler_arm.cc

156:34-156:43
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_57660cf5
Bytes: 18
indentation is off

156:34-156:43
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_57660cf5
UUID: aa1c9852_695d21a4
Bytes: 4
Done

175:6-175:11
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_b7bfa8ef
Bytes: 13
Remove break.

175:6-175:11
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_b7bfa8ef
UUID: aa1c9852_892a5d05
Bytes: 4
Done

856:12-856:13
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_97bee4c1
Bytes: 93
Please create a constant for this return value, and check for that constant at the call site.

856:12-856:13
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_97bee4c1
UUID: ea9db0d4_a7c47676
Bytes: 87
Yeah, should do that.  This was copied from the quick compiler with a few modifications

File: compiler/utils/arm/assembler_arm.h

188:8-188:14
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_170654ea
Bytes: 18
missing end paren.

188:8-188:14
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_170654ea
UUID: aa1c9852_e9291110
Bytes: 4
Done

200:12-200:13
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_5700cccb
Bytes: 49
Why can't you compute the encoding at this point?

200:12-200:13
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_5700cccb
UUID: caaaaceb_608b9ac8
Bytes: 710
Because there are two possible encodings depending on whether we are in ARM or thumb.  I didn't want to burden the caller with the responsibility of knowing what instruction set the assembler will generate.  The caller should just create an Address and the assembler should call the either encodingArm() or encodingThumb().  I ended up with this format after going through a phase of using a different class for each instruction set (ArmAddress and ThumbAddress) but realized that everything that uses Address then needs to know which one to create.

Potentially we could also use this for the ARM64 assembler then the code generator could be common for all ARM (might not be that simple, but that is my hope).

200:12-200:13
Mon May 19 08:27:37 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: caaaaceb_608b9ac8
UUID: 2a58a819_f8772514
Bytes: 119
I see. Thanks for the explanation.

About ARM64: let's not think about it, I'd like us to use vixl as much as possible.

200:12-200:13
Thu May 22 20:01:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a58a819_f8772514
UUID: bfa05c5b_05fef816
Bytes: 228
I was thinking that we should use the vixl stuff but make the ARM64 assembler a derived class of ARMAssembler rather than Assembler.  There are a lot of common instructions the code generators could benefit from the commonality.

372:19-372:27
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_179ad48f
Bytes: 56
Indentation is off (here and other 2 lines declaration).

372:19-372:27
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_179ad48f
UUID: 4a2cfc7a_717eeabe
Bytes: 4
Done

File: compiler/utils/arm/assembler_arm32.cc

2:17-2:21
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_765510d6
Bytes: 4
2014

2:17-2:21
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_765510d6
UUID: 4a2cfc7a_9157de3c
Bytes: 4
Done

1152:40-1152:41
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_b6eb28ca
Bytes: 57
indentation is off here and other two lines declarations.

1152:40-1152:41
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_b6eb28ca
UUID: 8a3274d1_7ec1590f
Bytes: 34
Done, and fixed all the others too

File: compiler/utils/arm/assembler_arm32.h

2:17-2:21
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_16581c0e
Bytes: 4
2014

38:17-38:22
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_d6fa2495
Bytes: 8
OVERRIDE

File: compiler/utils/arm/assembler_thumb2.cc

176:23-176:32
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_9a4bad3d
Bytes: 50
Identation is off here and on 2 line declarations.

176:23-176:32
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a08b4da_9a4bad3d
UUID: 4a2cfc7a_9140be6c
Bytes: 28
Done, and all the others too

2153:0-2153:1
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_5739ecc3
Bytes: 18
too many new lines

2172:17-2172:39
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_dafa4595
Bytes: 39
Remove CHECK, it's been done line 2165.

2172:17-2172:39
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a08b4da_dafa4595
UUID: aa1c9852_498ea5d9
Bytes: 184
Not really.  The offset was changed on line 2170.  I think it's best to keep it in case someone decides to change the offset to something other than zero and breaks the following code.

2172:17-2172:39
Mon May 19 08:27:37 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aa1c9852_498ea5d9
UUID: 2a58a819_58675161
Bytes: 84
Ah yes, indeed, I missed that. So yeah, let's keep it. Shoult it be a DCHECK though?

2172:17-2172:39
Thu May 22 20:01:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a58a819_58675161
UUID: ff965405_33957a28
Bytes: 80
I will change it do DCHECK.  Unlikely to make any performance difference though.

2210:8-2210:15
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_3ae0a1e2
Bytes: 5
ditto

2227:15-2227:17
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_f740001b
Bytes: 5
ditto

2246:8-2246:15
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_760350da
Bytes: 5
ditto

2278:15-2278:17
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_5600d4cb
Bytes: 5
ditto

2295:2-2295:7
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_1adddd26
Bytes: 5
ditto

File: compiler/utils/arm/assembler_thumb2.h

44:23-44:24
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_56e734f8
Bytes: 8
OVERRIDE

44:23-44:24
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_56e734f8
UUID: aa1c9852_698b61c8
Bytes: 37
Also did the one in assembler_arm32.h

451:46-451:52
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_d6c86459
Bytes: 154
This is quite expensive. Can we have a mode where we're always pessimistic? I know force_32 does it, but maybe we need another flag just for the branches.

451:46-451:52
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_d6c86459
UUID: 8a3274d1_3ee521b2
Bytes: 538
It's not too expensive.  It's a memmove.  I don't think that making all branches 32 bit is efficient.  It would eliminate the use of cbz/cbnz and those are important for thumb performance.

Are you worried about compile time performance?  I don't think that a couple of memmoves in the assembler is anywhere near as complex in time as the rest of the compiler.

If you insist I can certainly add the flag to force 32 bit branches but in the absence of any evidence I would rather not as it complicates the code and adds another test path.

451:46-451:52
Mon May 19 08:27:37 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a3274d1_3ee521b2
UUID: 0a3da49e_57f2c67c
Bytes: 390
Yes, I'm worried about compile time performance. And it's not just a memmove right? You need to go through all branching instructions to change their offsets have the memmove.

I agree with you that compared to what's going on in the compiler, it's not so expensive. But with a baseline compiler, it might be.

I also agree with you that in the absence of evidence, let's stick with that :)

489:17-489:32
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_b7eb28ca
Bytes: 32
const Thumb2Assembler& assembler

489:17-489:32
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_b7eb28ca
UUID: 4a2cfc7a_bcdaf981
Bytes: 183
The reason for making this a pointer is that the caller can just pass 'this' as an argument rather than '*this'.  Forcing the caller to insert a dereference on every call seems wrong.

489:17-489:32
Mon May 19 08:27:37 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a2cfc7a_bcdaf981
UUID: 0a3da49e_77efc28f
Bytes: 112
That makes it easier, but is at odds with google's c++ style guide (that I know, we're not following fully....).

489:17-489:32
Thu May 22 20:01:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a3da49e_77efc28f
UUID: 9f9d5828_a43aa8b7
Bytes: 925
Looking at the C++ style guide, I think this is allowed:

-----

In fact it is a very strong convention in Google code that input arguments are values or const references while output arguments are pointers. Input parameters may be const pointers, but we never allow non-const reference parameters except when required by convention, e.g., swap().

However, there are some instances where using const T* is preferable to const T& for input parameters. For example:

You want to pass in a null pointer.
The function saves a pointer or reference to the input.
Remember that most of the time input parameters are going to be specified as const T&. Using const T* instead communicates to the reader that the input is somehow treated differently. So if you choose const T* rather than const T&, do so for a concrete reason; otherwise it will likely confuse readers by making them look for an explanation that doesn't exist.

-----

599:9-599:22
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_da13652d
Bytes: 6
const?

599:9-599:22
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a08b4da_da13652d
UUID: aa1c9852_c9729527
Bytes: 4
Done

641:10-641:25
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_36cef862
Bytes: 33
const Thumb2Assembler& assembler_

641:10-641:25
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_36cef862
UUID: aa1c9852_e9775114
Bytes: 17
See comment above

File: compiler/utils/assembler.h

107:21-107:28
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_1a067dea
Bytes: 22
Remove debugging code.

107:21-107:28
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a08b4da_1a067dea
UUID: 8a3274d1_de16c5de
Bytes: 40
oops, missed these ones during the cull.

114:21-114:28
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a07c8cc_37e0b8e2
Bytes: 6
ditto.

114:21-114:28
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a07c8cc_37e0b8e2
UUID: 4a2cfc7a_3ce7e94b
Bytes: 4
Done

File: compiler/utils/assembler_thumb_test.cc

20:10-20:17
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_36b718df
Bytes: 19
Move fstream first.

20:10-20:17
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_36b718df
UUID: 4a2cfc7a_5cf49df6
Bytes: 4
Done

29:0-29:9
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_76b190e6
Bytes: 6
static

29:0-29:9
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_76b190e6
UUID: 8a3274d1_1e113de5
Bytes: 4
Done

32:63-32:65
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_7a0339da
Bytes: 8
of -> or

32:63-32:65
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a08b4da_7a0339da
UUID: aa1c9852_49678561
Bytes: 4
Done

68:34-68:38
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a1cc41d_b687a802
Bytes: 83
Is that always in the PATH? (I'm thinking about builds that don't call envsetup.sh)

68:34-68:38
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a1cc41d_b687a802
UUID: 4a2cfc7a_bc03d92d
Bytes: 92
Have to think about this.  Do we have any builds that don't all envsetup.sh?  I'll ask Brian

68:34-68:38
Mon May 19 08:27:37 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a2cfc7a_bc03d92d
UUID: 4a531cfd_04464634
Bytes: 43
Yes, AFAIR almost all of them (if not all).

68:34-68:38
Thu May 22 20:01:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4a531cfd_04464634
UUID: 9f9d5828_04559cd4
Bytes: 129
It will be hard to do this without getting access to the assembler.  I'll do some investigation about the best way to handle this

102:32-102:35
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_5a00f5cb
Bytes: 4
end.

102:32-102:35
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a08b4da_5a00f5cb
UUID: aa1c9852_6964415c
Bytes: 4
Done

119:7-119:22
Wed May 14 10:16:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a08b4da_bab951de
Bytes: 35
Why not Thumb2Assembler assembler ?

119:7-119:22
Fri May 16 21:28:04 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a08b4da_bab951de
UUID: 8a3274d1_3e0e01c2
Bytes: 157
Wanted to use the factory method because that's what the compilers should use.  I guess I could have done it in only one test but that doesn't really matter.

119:7-119:22
Mon May 19 08:27:37 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a3274d1_3e0e01c2
UUID: 0a3da49e_d716b6de
Bytes: 64
Your call, but at this level of unit testing, I would not worry.

