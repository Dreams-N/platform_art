//
// Copyright (C) 2011 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

LIBART_CFLAGS = ["-DBUILDING_LIBART=1"]

// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(MALLOC_IMPL),dlmalloc)
// LIBART_CFLAGS += ["-DUSE_DLMALLOC"]
// ANDROIDMK TRANSLATION ERROR: else from unsupported contitional
// else
LIBART_CFLAGS += ["-DUSE_JEMALLOC"]
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// Default dex2oat instruction set features.
LIBART_HOST_DEFAULT_INSTRUCTION_SET_FEATURES = "default"
LIBART_TARGET_DEFAULT_INSTRUCTION_SET_FEATURES = "default"
// 2ND_LIBART_TARGET_DEFAULT_INSTRUCTION_SET_FEATURES = ["default"]
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(DEX2OAT_TARGET_ARCH),arm)
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifneq (,$(filter $(DEX2OAT_TARGET_CPU_VARIANT),cortex-a15 krait denver))
// LIBART_TARGET_DEFAULT_INSTRUCTION_SET_FEATURES = ["atomic_ldrd_strd,div"]
// ANDROIDMK TRANSLATION ERROR: else from unsupported contitional
// else
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifneq (,$(filter $(DEX2OAT_TARGET_CPU_VARIANT),cortex-a7))
// LIBART_TARGET_DEFAULT_INSTRUCTION_SET_FEATURES = ["div"]
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(2ND_DEX2OAT_TARGET_ARCH),arm)
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifneq (,$(filter $(DEX2OAT_TARGET_CPU_VARIANT),cortex-a15 krait denver))
// 2ND_LIBART_TARGET_DEFAULT_INSTRUCTION_SET_FEATURES = ["atomic_ldrd_strd,div"]
// ANDROIDMK TRANSLATION ERROR: else from unsupported contitional
// else
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifneq (,$(filter $(DEX2OAT_TARGET_CPU_VARIANT),cortex-a7))
// 2ND_LIBART_TARGET_DEFAULT_INSTRUCTION_SET_FEATURES = ["div"]
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif

gensrcs {
    name: "art_operator_srcs",
    cmd: "${srcDir}/art/tools/generate-operator-out.py ${srcDir}/art/runtime/ $in > $out",
    srcs: [
        "arch/instruction_set.h",
        "base/allocator.h",
        "base/mutex.h",
        "debugger.h",
        "base/unix_file/fd_file.h",
        "dex_file.h",
        "dex_instruction.h",
        "dex_instruction_utils.h",
        "gc_root.h",
        "gc/allocator/rosalloc.h",
        "gc/collector/gc_type.h",
        "gc/allocator_type.h",
        "gc/collector_type.h",
        "gc/space/region_space.h",
        "gc/space/space.h",
        "gc/heap.h",
        "instrumentation.h",
        "indirect_reference_table.h",
        "invoke_type.h",
        "jdwp/jdwp.h",
        "jdwp/jdwp_constants.h",
        "lock_word.h",
        "mirror/class.h",
        "oat.h",
        "object_callbacks.h",
        "profiler_options.h",
        "quick/inline_method_analyser.h",
        "runtime.h",
        "stack.h",
        "thread.h",
        "thread_state.h",
        "verifier/method_verifier.h",
    ],
    output_extension: "operator_out.cc",
}

cc_library {
    name: "libart",
    host_supported: true,
    cflags: art_cflags + LIBART_CFLAGS,
    clang_cflags: art_clang_cflags,
    debug: art_debug_defaults,
    release: art_release_defaults,
    native_coverage: ART_COVERAGE,

    srcs: [
        "atomic.cc", // TODO: "atomic.cc.arm"
        "barrier.cc",
        "base/allocator.cc",
        "base/arena_allocator.cc",
        "base/bit_vector.cc",
        "base/hex_dump.cc",
        "base/logging.cc",
        "base/mutex.cc",
        "base/scoped_arena_allocator.cc",
        "base/scoped_flock.cc",
        "base/stringpiece.cc",
        "base/stringprintf.cc",
        "base/timing_logger.cc",
        "base/unix_file/fd_file.cc",
        "base/unix_file/random_access_file_utils.cc",
        "check_jni.cc",
        "class_linker.cc",
        "common_throws.cc",
        "debugger.cc",
        "dex_file.cc",
        "dex_file_verifier.cc",
        "dex_instruction.cc",
        "elf_file.cc",
        "gc/allocator/dlmalloc.cc",
        "gc/allocator/rosalloc.cc",
        "gc/accounting/bitmap.cc",
        "gc/accounting/card_table.cc",
        "gc/accounting/heap_bitmap.cc",
        "gc/accounting/mod_union_table.cc",
        "gc/accounting/remembered_set.cc",
        "gc/accounting/space_bitmap.cc",
        "gc/collector/concurrent_copying.cc",
        "gc/collector/garbage_collector.cc",
        "gc/collector/immune_region.cc",
        "gc/collector/mark_compact.cc",
        "gc/collector/mark_sweep.cc",
        "gc/collector/partial_mark_sweep.cc",
        "gc/collector/semi_space.cc",
        "gc/collector/sticky_mark_sweep.cc",
        "gc/gc_cause.cc",
        "gc/heap.cc",
        "gc/reference_processor.cc",
        "gc/reference_queue.cc",
        "gc/space/bump_pointer_space.cc",
        "gc/space/dlmalloc_space.cc",
        "gc/space/image_space.cc",
        "gc/space/large_object_space.cc",
        "gc/space/malloc_space.cc",
        "gc/space/region_space.cc",
        "gc/space/rosalloc_space.cc",
        "gc/space/space.cc",
        "gc/space/zygote_space.cc",
        "gc/task_processor.cc",
        "hprof/hprof.cc",
        "image.cc",
        "indirect_reference_table.cc",
        "instrumentation.cc",
        "intern_table.cc",
        "interpreter/interpreter.cc",
        "interpreter/interpreter_common.cc",
        "interpreter/interpreter_goto_table_impl.cc",
        "interpreter/interpreter_switch_impl.cc",
        "interpreter/unstarted_runtime.cc",
        "java_vm_ext.cc",
        "jdwp/jdwp_event.cc",
        "jdwp/jdwp_expand_buf.cc",
        "jdwp/jdwp_handler.cc",
        "jdwp/jdwp_main.cc",
        "jdwp/jdwp_request.cc",
        "jdwp/jdwp_socket.cc",
        "jdwp/object_registry.cc",
        "jni_env_ext.cc",
        "jit/jit.cc",
        "jit/jit_code_cache.cc",
        "jit/jit_instrumentation.cc",
        "jni_internal.cc",
        "jobject_comparator.cc",
        "mem_map.cc",
        "memory_region.cc",
        "mirror/art_field.cc",
        "mirror/art_method.cc",
        "mirror/array.cc",
        "mirror/class.cc",
        "mirror/dex_cache.cc",
        "mirror/object.cc",
        "mirror/reference.cc",
        "mirror/stack_trace_element.cc",
        "mirror/string.cc",
        "mirror/throwable.cc",
        "monitor.cc",
        "native_bridge_art_interface.cc",
        "native/dalvik_system_DexFile.cc",
        "native/dalvik_system_VMDebug.cc",
        "native/dalvik_system_VMRuntime.cc",
        "native/dalvik_system_VMStack.cc",
        "native/dalvik_system_ZygoteHooks.cc",
        "native/java_lang_Class.cc",
        "native/java_lang_DexCache.cc",
        "native/java_lang_Object.cc",
        "native/java_lang_Runtime.cc",
        "native/java_lang_String.cc",
        "native/java_lang_System.cc",
        "native/java_lang_Thread.cc",
        "native/java_lang_Throwable.cc",
        "native/java_lang_VMClassLoader.cc",
        "native/java_lang_ref_FinalizerReference.cc",
        "native/java_lang_ref_Reference.cc",
        "native/java_lang_reflect_Array.cc",
        "native/java_lang_reflect_Constructor.cc",
        "native/java_lang_reflect_Field.cc",
        "native/java_lang_reflect_Method.cc",
        "native/java_lang_reflect_Proxy.cc",
        "native/java_util_concurrent_atomic_AtomicLong.cc",
        "native/org_apache_harmony_dalvik_ddmc_DdmServer.cc",
        "native/org_apache_harmony_dalvik_ddmc_DdmVmInternal.cc",
        "native/sun_misc_Unsafe.cc",
        "oat.cc",
        "oat_file.cc",
        "oat_file_assistant.cc",
        "object_lock.cc",
        "offsets.cc",
        "os_linux.cc",
        "parsed_options.cc",
        "primitive.cc",
        "quick_exception_handler.cc",
        "quick/inline_method_analyser.cc",
        "reference_table.cc",
        "reflection.cc",
        "runtime.cc",
        "runtime_options.cc",
        "signal_catcher.cc",
        "stack.cc",
        "thread.cc",
        "thread_list.cc",
        "thread_pool.cc",
        "trace.cc",
        "transaction.cc",
        "profiler.cc",
        "fault_handler.cc",
        "utf.cc",
        "utils.cc",
        "verifier/dex_gc_map.cc",
        "verifier/instruction_flags.cc",
        "verifier/method_verifier.cc",
        "verifier/reg_type.cc",
        "verifier/reg_type_cache.cc",
        "verifier/register_line.cc",
        "well_known_classes.cc",
        "zip_archive.cc",

        "arch/context.cc",
        "arch/instruction_set.cc",
        "arch/instruction_set_features.cc",
        "arch/memcmp16.cc",
        "arch/arm/instruction_set_features_arm.cc",
        "arch/arm/registers_arm.cc",
        "arch/arm64/instruction_set_features_arm64.cc",
        "arch/arm64/registers_arm64.cc",
        "arch/mips/instruction_set_features_mips.cc",
        "arch/mips/registers_mips.cc",
        "arch/mips64/instruction_set_features_mips64.cc",
        "arch/mips64/registers_mips64.cc",
        "arch/x86/instruction_set_features_x86.cc",
        "arch/x86/registers_x86.cc",
        "arch/x86_64/registers_x86_64.cc",
        "entrypoints/entrypoint_utils.cc",
        "entrypoints/interpreter/interpreter_entrypoints.cc",
        "entrypoints/jni/jni_entrypoints.cc",
        "entrypoints/math_entrypoints.cc",
        "entrypoints/quick/quick_alloc_entrypoints.cc",
        "entrypoints/quick/quick_cast_entrypoints.cc",
        "entrypoints/quick/quick_deoptimization_entrypoints.cc",
        "entrypoints/quick/quick_dexcache_entrypoints.cc",
        "entrypoints/quick/quick_field_entrypoints.cc",
        "entrypoints/quick/quick_fillarray_entrypoints.cc",
        "entrypoints/quick/quick_instrumentation_entrypoints.cc",
        "entrypoints/quick/quick_jni_entrypoints.cc",
        "entrypoints/quick/quick_lock_entrypoints.cc",
        "entrypoints/quick/quick_math_entrypoints.cc",
        "entrypoints/quick/quick_thread_entrypoints.cc",
        "entrypoints/quick/quick_throw_entrypoints.cc",
        "entrypoints/quick/quick_trampoline_entrypoints.cc",
    ],

    // Clang assembler has problem with macros in asm_support_x86.S, http://b/17443165,
    // on linux. Yet sdk on mac needs integrated assembler.
    clang_asflags: ["-no-integrated-as"],

    target: art_target_defaults + {
        android: {
            srcs: [
                "jdwp/jdwp_adb.cc",
                "monitor_android.cc",
                "runtime_android.cc",
                "thread_android.cc",
            ],
            cflags: [
                "-DART_DEFAULT_INSTRUCTION_SET_FEATURES=" + LIBART_TARGET_DEFAULT_INSTRUCTION_SET_FEATURES,
            ],
            shared_libs: [
                "libdl",
                // For android::FileMap used by libziparchive.
                "libutils",
                // For liblog, atrace, properties, ashmem, set_sched_policy and socket_peer_is_trusted.
                "libcutils",
            ],
            static_libs: [
                // ZipArchive support
                "libziparchive",
		// the order matters here to get all symbols.
                "libz",
            ],
        },
        host: {
            srcs: [
                "monitor_linux.cc",
                "runtime_linux.cc",
                "thread_linux.cc",
            ],
            cflags: [
                "-DART_DEFAULT_INSTRUCTION_SET_FEATURES=" + LIBART_HOST_DEFAULT_INSTRUCTION_SET_FEATURES,
            ],
            host_ldlibs: [
                "-ldl",
                "-lpthread",
            ],
            shared_libs: [
                "libziparchive",
            ],
            static_libs: [
                // For ashmem_create_region.
                "libcutils",
            ],
        },
        linux: {
            host_ldlibs: [
                "-lrt",
            ],
        },
        darwin: {
            clang_asflags: ["-integrated-as"],
        },
    },

    arch: art_arch_defaults + {
        arm: {
            srcs: [
                "arch/arm/context_arm.cc", // TODO: "arch/arm/context_arm.cc.arm",
                "arch/arm/entrypoints_init_arm.cc",
                "arch/arm/instruction_set_features_assembly_tests.S",
                "arch/arm/jni_entrypoints_arm.S",
                "arch/arm/memcmp16_arm.S",
                "arch/arm/quick_entrypoints_arm.S",
                "arch/arm/quick_entrypoints_cc_arm.cc",
                "arch/arm/thread_arm.cc",
                "arch/arm/fault_handler_arm.cc",
            ],
        },
        arm64: {
            srcs: [
                "arch/arm64/context_arm64.cc",
                "arch/arm64/entrypoints_init_arm64.cc",
                "arch/arm64/jni_entrypoints_arm64.S",
                "arch/arm64/memcmp16_arm64.S",
                "arch/arm64/quick_entrypoints_arm64.S",
                "arch/arm64/thread_arm64.cc",
                "monitor_pool.cc",
                "arch/arm64/fault_handler_arm64.cc",
            ],
        },
        x86: {
            srcs: [
                "arch/x86/context_x86.cc",
                "arch/x86/entrypoints_init_x86.cc",
                "arch/x86/jni_entrypoints_x86.S",
                "arch/x86/memcmp16_x86.S",
                "arch/x86/quick_entrypoints_x86.S",
                "arch/x86/thread_x86.cc",
                "arch/x86/fault_handler_x86.cc",
            ],
        },
        x86_64: {
            srcs: [
                "arch/x86_64/context_x86_64.cc",
                "arch/x86_64/entrypoints_init_x86_64.cc",
                "arch/x86_64/jni_entrypoints_x86_64.S",
                "arch/x86_64/memcmp16_x86_64.S",
                "arch/x86_64/quick_entrypoints_x86_64.S",
                "arch/x86_64/thread_x86_64.cc",
                "monitor_pool.cc",
                // Note that the fault_handler_x86.cc is not a mistake.  This file is
                // shared between the x86 and x86_64 architectures.
                "arch/x86/fault_handler_x86.cc",
            ],
        },
        mips: {
            srcs: [
                "arch/mips/context_mips.cc",
                "arch/mips/entrypoints_init_mips.cc",
                "arch/mips/jni_entrypoints_mips.S",
                "arch/mips/memcmp16_mips.S",
                "arch/mips/quick_entrypoints_mips.S",
                "arch/mips/thread_mips.cc",
                "arch/mips/fault_handler_mips.cc",
            ],
        },
        mips64: {
            srcs: [
                "arch/mips64/context_mips64.cc",
                "arch/mips64/entrypoints_init_mips64.cc",
                "arch/mips64/jni_entrypoints_mips64.S",
                "arch/mips64/memcmp16_mips64.S",
                "arch/mips64/quick_entrypoints_mips64.S",
                "arch/mips64/thread_mips64.cc",
                "monitor_pool.cc",
                "arch/mips64/fault_handler_mips64.cc",
            ],
        },
    },

    include_dirs: art_include_dirs,
    local_include_dirs: [
        "../cmdline",
        "../sigchainlib",
        "..",
    ],

    shared_libs: [
        "libnativehelper",
        "libnativebridge",
        "libsigchain",
        "libbacktrace",
    ],
    deps: ["art_operator_srcs"],
}

//   ifeq ($$(art_ndebug_or_debug),ndebug)
//     LOCAL_MODULE := libart
//     ifeq ($$(art_target_or_host),target)
//       LOCAL_FDO_SUPPORT := true
//     endif
//   else # debug
//     LOCAL_MODULE := libartd
//   endif
//
//
//   ifeq ($$(art_target_or_host),target)
//     LOCAL_MODULE_TARGET_ARCH := $$(ART_TARGET_SUPPORTED_ARCH)
//   endif
//
//   ifeq ($$(art_target_or_host),target)
//     ifneq ($$(art_ndebug_or_debug),debug)
//       # Leave the symbols in the shared library so that stack unwinders can
//       # produce meaningful name resolution.
//       LOCAL_STRIP_MODULE := keep_symbols
//     endif
//     include $$(BUILD_SHARED_LIBRARY)
//   else # host
//     include $$(BUILD_HOST_SHARED_LIBRARY)
//   endif

// We always build dex2oat and dependencies, even if the host build is otherwise disabled, since
// they are used to cross compile for the target.
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(ART_BUILD_HOST_NDEBUG),true)

// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(ART_BUILD_HOST_DEBUG),true)

// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(ART_BUILD_TARGET_NDEBUG),true)
//  $(error $(call build-libart,target,ndebug))

// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
// ANDROIDMK TRANSLATION ERROR: unsupported conditional
// ifeq ($(ART_BUILD_TARGET_DEBUG),true)

// ANDROIDMK TRANSLATION ERROR: endif from unsupported contitional
// endif
