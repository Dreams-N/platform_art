Revision: 6c7c9997f7017a79328299ab738ccfbc85825914
Patch-set: 2
File: compiler/dex/quick/arm64/call_arm64.cc

98
Thu Jun 19 10:08:39 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4932916_ece173e9
Bytes: 64
I guess the 5th argument could become EncodeExtend(kA64Sxtw, 0).

98
Thu Jun 19 15:13:09 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4932916_ece173e9
UUID: 44b4f5af_9739cec5
Bytes: 63
See my reply in utility_arm64.cc I'd prefer (..., kA64Sxtw, 0).

98
Thu Jun 19 15:59:34 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44b4f5af_9739cec5
UUID: 04ae7d65_06005a99
Bytes: 90
For consistency, we should then also change OpRegRegRegShift and all the other friends :-)

98
Thu Jun 19 16:09:55 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 04ae7d65_06005a99
UUID: c4ce254b_466976ff
Bytes: 15
Another CL. :-)

151
Thu Jun 19 10:08:39 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4932916_0cdfff1e
Bytes: 9
As above.

File: compiler/dex/quick/arm64/utility_arm64.cc

648
Thu Jun 19 10:08:39 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a49db127_0417dc5f
Bytes: 185
The 5th argument could be changed to allow using EncodeExtend. This function is currently returning a mere int. I have no strong opinions about whether this should be typed differently.

648
Thu Jun 19 15:13:09 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a49db127_0417dc5f
UUID: 44b4f5af_b795f25d
Bytes: 197
Personally I prefer to have these things explicit when we have types for them. So I would add an int for the amount,
and make the body use EncodeExtend. But I'd like to hear Bill's opinion on that.

665
Thu Jun 19 10:08:39 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 04ae7d65_262b1673
Bytes: 234
This seems a bit too strong, considering that you are using r_dest.Is64Bit() above to set widened_opcode. Also consider that the assembler will be able to detect such register misusages, once its checks are enabled to the full extent.

665
Thu Jun 19 15:13:09 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 04ae7d65_262b1673
UUID: 44b4f5af_7721ba92
Bytes: 219
Yes, but we kind of have a problem. The widened_opcode choice is wrong, isn't it. Dest is always 64b. Here is one of the issues where I don't know what the clean approach is.

I think the check should be against r_src2?

665
Thu Jun 19 15:23:51 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44b4f5af_7721ba92
UUID: 44b4f5af_d758a60f
Bytes: 23
Disregard my comment...

665
Thu Jun 19 15:59:34 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44b4f5af_7721ba92
UUID: c4ce254b_e6ff4211
Bytes: 209
Personally, I believe that the two checks can be removed. Instructions like:

  add w1, w2, w3, sxtb #0
  add x1, x2, x3, sxtx #0
  add x1, x2, w3, sxtb #0

are all valid and could be handled by this function.

665
Thu Jun 19 16:09:55 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4ce254b_e6ff4211
UUID: c4ce254b_665a7264
Bytes: 137
As long as the assembler swallows it, I'd be OK to drop them. Though I have just simplified them a bit in my next PS (under testing now).

667
Thu Jun 19 10:41:33 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 44b4f5af_1c6bc503
Bytes: 811
The name of the instruction should be kA64Sub4RRre, meaning that one expects that the third argument is a w register for kA64Sub4RRre and an x register for WIDE(kA64Sub4RRre). This is not strictly conforming to how the instruction is documented. For example, one should write "add x1, x2, w3, uxtb #2" rather than "add x1, x2, x3, uxtb #2". The reason, however, is just aesthetical: "w3, uxtb #2" and "x3, uxtb #2" are two ways to write the same thing (and the the GNU assembler seems to tolerate the latter). It is therefore morally fine to name the instruction kA64Sub4RRre. What we may want to do is to up-convert r_src2, when necessary (w -> x). Down-converting (x -> w) will not work (it will make the assembler register check in assemble_arm64.cc fail for the 3rd argument of the add example given above).

667
Thu Jun 19 15:13:09 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44b4f5af_1c6bc503
UUID: 44b4f5af_17263eac
Bytes: 34
Why would we up-convert? For uxtx?

667
Thu Jun 19 15:29:20 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44b4f5af_17263eac
UUID: c4ce254b_e63c2250
Bytes: 152
Oh, now I understand. This is not at all conforming to the specification in the documentation about the instruction set, as there the src_2 is always w.

667
Thu Jun 19 15:59:34 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44b4f5af_17263eac
UUID: 24b9c1aa_b05adea9
Bytes: 581
uxtx is a no-op, consider sxtb. Imagine the following instruction,

  OpRegRegRegExtend(WIDE(kA64Sub4RRre), rx1, rx2, rw3, EncodeExtend(kA64Stxb, 0));

A user may think this is perfectly legitimate. But if we do not up-convert, then the assembler will see an attempt to use rw3 in an instruction which wants an x register as its third argument. It doesn't sound right to force the user to provide an x, when an stxb operation is done on it. On the other hand, up-conversion is only legitimate if sxtx and uxtx are not being used, so if we do this we should exclude these two cases.

667
Thu Jun 19 16:09:55 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 24b9c1aa_b05adea9
UUID: 44b4f5af_37726265
Bytes: 322
Thanks for the updates. I had seen my mistake. :-)

But I don't understand why sxtx and uxtx are not legitimate. According to the encoding guide (I'm looking at "ARMÂ®
 Architecture Reference Manual
ARMv8, for ARMv8-A architecture profile
Errata markup
Beta", p395), those values are perfectly fine in both 32 and 64 mode.

667
Thu Jun 19 16:43:50 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44b4f5af_37726265
UUID: 6471f9c6_aeda8bf2
Bytes: 206
You are right, the doc allows sxtx for both the 32-bit and the 64-bit variants of add and sub, which means it is legitimate. But to me "add x1, x2, w3, sxtx #0" seems more a truncation than an extension :-)

674
Thu Jun 19 10:08:39 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a49db127_a42388c6
Bytes: 96
This is not necessary if you use EncodeExtend. You could add,

 DCHECK(IsExtendedEncoding(ext));

674
Thu Jun 19 15:13:09 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a49db127_a42388c6
UUID: 44b4f5af_d72f467b
Bytes: 36
I'll replace this with EncodeExtend.

