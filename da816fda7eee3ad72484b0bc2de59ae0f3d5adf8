Revision: da816fda7eee3ad72484b0bc2de59ae0f3d5adf8
Patch-set: 2
File: compiler/optimizing/graph_checker.cc

199:81-199:82
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43b5e6d8_7ac9d9a5
Bytes: 12
missing '.'.

199:63-199:64
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23b8f2d3_59c42391
Bytes: 2
to

199:63-199:64
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23b8f2d3_59c42391
UUID: 637aea34_ab93c959
Bytes: 4
Done

199:81-199:82
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43b5e6d8_7ac9d9a5
UUID: a3706250_edc48543
Bytes: 4
Done

203:4-203:34
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43b5e6d8_fad40940
Bytes: 173
I could foresee some problems with inlining here. I think it's probably best if you just check the next phi? After all, we only add those equivalent phis next to each other.

203:4-203:34
Tue Mar 31 23:44:17 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43b5e6d8_fad40940
UUID: 03af6e90_181b8575
Bytes: 249
I don't immediately see problems with inlining. 
And I'm not sure that checking just the next one captures all the cases. I think we  could potentially have a non-ref equivalent in between?

I will think more about it and adapt the code accordingly.

203:4-203:34
Wed Apr 01 21:17:01 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03af6e90_181b8575
UUID: e3a41acd_9fe19316
Bytes: 512
Yeah, maybe I'm being too cautious: I was thinking of the same dex register number for two different methods. If two phis of different methods but with the same dex register number, end up in the same block, we would get into trouble.

But it remains to be seen if it can happen.

And yes, you need to check all of them. So when iterating over the phis, you check the next one. If it's the same reg number, you check that they have different type, and continue until you find one that is not the same reg number.

203:4-203:34
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3a41acd_9fe19316
UUID: 2312b2d8_8c7de76a
Bytes: 319
I thought about the same thing but I still don't see it happening as they'll be split in different blocks.

I think if that ever happens we should keep a single one anyway and this check can catch that scenario.

Checking just the next phis will not work as you may still fall in your case (assuming that ever happens).

File: compiler/optimizing/ssa_builder.cc

198:24-198:67
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43b5e6d8_3ae841f8
Bytes: 14
nit: new line?

198:24-198:67
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43b5e6d8_3ae841f8
UUID: 23b8f2d3_7c271569
Bytes: 4
Done

202:32-202:76
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23b8f2d3_f9d41740
Bytes: 5
ditto

202:32-202:76
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23b8f2d3_f9d41740
UUID: 03af6e90_bb4d33cb
Bytes: 4
Done

207:8-207:16
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43b5e6d8_5addf55c
Bytes: 111
How about non-phi inputs? We also want them to be properly typed with null on the left/right side instead of 0.

207:8-207:16
Tue Mar 31 23:44:17 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43b5e6d8_5addf55c
UUID: 23b8f2d3_99f6bbdc
Bytes: 44
good point. I'll add logic for that as well.

207:8-207:16
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23b8f2d3_99f6bbdc
UUID: 43b5e6d8_dd001fbb
Bytes: 4
Done

217:10-217:26
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23b8f2d3_19e38b20
Bytes: 15
This has to be.

215:6-221:7
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03af6e90_18470581
Bytes: 103
Add a comment that is going over equivalent phis that are not reference (and therefore floating point).

215:6-221:7
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03af6e90_18470581
UUID: 43b5e6d8_fdfde335
Bytes: 4
Done

223:10-223:26
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23b8f2d3_39e84ff8
Bytes: 15
This has to be.

274:10-274:69
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23b8f2d3_99cddbb4
Bytes: 76
equivalent phis (that is, having the same dex registers) with the same type.

274:10-274:69
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23b8f2d3_99cddbb4
UUID: 43b5e6d8_9d0b07d6
Bytes: 4
Done

275:5-275:10
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23b8f2d3_b9ca9f97
Bytes: 6
leaves

275:5-275:10
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23b8f2d3_b9ca9f97
UUID: 03af6e90_3ebf51f5
Bytes: 4
Done

276:21-276:24
Tue Mar 31 22:10:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23b8f2d3_d9d75342
Bytes: 12
don -> done.

276:21-276:24
Tue Apr 07 15:38:28 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23b8f2d3_d9d75342
UUID: 03af6e90_5ec40591
Bytes: 4
Done

