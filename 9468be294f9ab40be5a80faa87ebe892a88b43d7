Revision: 9468be294f9ab40be5a80faa87ebe892a88b43d7
Patch-set: 9
File: compiler/optimizing/code_generator.cc

192:0-192:46
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_23d1aa74
Bytes: 98
We should also check with Vladimir how this is going to be affected by the relocation he is doing.

237:0-237:25
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_e1b4e643
Bytes: 15
Why doing this?

237:0-237:25
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_e1b4e643
UUID: 799460c1_fe61dd07
Bytes: 152
I only added this for sanity, to cover for example:
    CompileInternal(disasm_info)
    delete disasm_info
    CompileInternal(<disasm_info = nullptr>)

File: compiler/optimizing/code_generator.h

142:0-142:70
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_d5823c50
Bytes: 28
Why can't you use the field?

142:0-142:70
Mon Jun 15 13:37:12 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_d5823c50
UUID: 799460c1_3ba357ff
Bytes: 149
Actually, I suggested to Alexandre that he should get rid of the field entirely because it is not used anywhere outside the CompileInternal function.

142:0-142:70
Mon Jun 15 13:39:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_3ba357ff
UUID: 79bf0033_43c666a8
Bytes: 5
sgtm.

143:51-143:95
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_03ce2ed2
Bytes: 5
ditto

350:26-350:39
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_a1aadedd
Bytes: 18
GetDisassemblyInfo

350:26-350:39
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_a1aadedd
UUID: 799460c1_5e48117d
Bytes: 92
Changed to `GetDisassemblyInformation` to be consistent with the other getter in this patch.

462:23-462:58
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_c1afe2ec
Bytes: 31
Why are we not using the field?

462:23-462:58
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_c1afe2ec
UUID: 79bf0033_46e954f3
Bytes: 22
See previous comments.

File: compiler/optimizing/code_generator_arm.h

122:27-122:32
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_356a9013
Bytes: 94
Consider moving all the slow paths changes in another CL. It would make this CL a lot shorter.

122:27-122:32
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_356a9013
UUID: 799460c1_3e642514
Bytes: 18
Sounds good. Done.

File: compiler/optimizing/graph_visualizer.cc

19:0-21:18
Mon Jun 15 15:41:44 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_243a5cd6
Bytes: 6
Ditto.

19:0-21:18
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_243a5cd6
UUID: 397f484e_c4b53070
Bytes: 4
Done

96:3-98:95
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 799460c1_5bf2e313
Bytes: 112
I think there is some expcataion we could run dex2oat on the mac. We should have helpers for doing that already.

96:3-98:95
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_5bf2e313
UUID: 79bf0033_66dbb094
Bytes: 240
I could not find an obious helper.
I followed art/runtime/jit/jit.cc:80 Jit::LoadCompiler().
There seem to be a more complex use of dlopen in art/runtime/oat_file.cc:234 in OatFile::Dlopen(). The osx code seems to fall back to some default.

113:8-113:30
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_63dba294
Bytes: 22
Nit: move this one up?

113:8-113:30
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_63dba294
UUID: 799460c1_9e39b907
Bytes: 4
Done

162:45-162:46
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_41bcb227
Bytes: 47
Nit: '?' and ':' at the beginning of each line.

162:45-162:46
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_41bcb227
UUID: b9733893_587101d5
Bytes: 4
Done

497
Mon Jun 15 17:44:32 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 799460c1_7ee22d99
Bytes: 12
add new line

497:31-497:41
Mon Jun 15 17:44:32 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_66e290c2
Bytes: 35
Use the name constant defined below

497
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_7ee22d99
UUID: 397f484e_04c0f8bd
Bytes: 4
Done

497:31-497:41
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_66e290c2
UUID: 195444e3_9004344f
Bytes: 4
Done

500:40-500:44
Mon Jun 15 17:44:32 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 799460c1_5ee5719e
Bytes: 9
std::endl

500:40-500:44
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_5ee5719e
UUID: 397f484e_e4ba345f
Bytes: 4
Done

509:17-510:17
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_61c9b6b8
Bytes: 66
Does that work in c1visualizer? I thought it was unhappy about it.

509:17-510:17
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_61c9b6b8
UUID: 397f484e_24233c38
Bytes: 226
I have tested it and it works fine.
When opening the graph tab for a pass, having an unlinked block causes c1 to display all blocks overlapping by default. Clicking on any of the graph layout buttons spreads the blocks nicely.

516
Mon Jun 15 17:44:32 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_a4c66c0c
Bytes: 12
add new line

516
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_a4c66c0c
UUID: 79bf0033_e62fa013
Bytes: 4
Done

518:47-518:48
Mon Jun 15 17:44:32 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_7864fdc2
Bytes: 8
no space

518:47-518:48
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_7864fdc2
UUID: 799460c1_3e20a528
Bytes: 4
Done

File: compiler/optimizing/optimizing_compiler.cc

424:40-424:87
Mon Jun 15 13:18:29 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 799460c1_bbaf67ed
Bytes: 120
Can't you just pass it to the CodeGenerator constructor instead? Also, won't that record unconditionnally the dump info?

424:40-424:87
Tue Jun 16 09:22:31 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_bbaf67ed
UUID: 79bf0033_c6dc2458
Bytes: 122
Yes this was wrongly unconditionally recording. Fixed.
See comments in code_generator.h on why we are not using the field.

