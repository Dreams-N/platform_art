Revision: 434b4af8cc2c30f8ee180e4a1f5f2555879e7f1a
Patch-set: 6
File: test/458-checker-instruction-simplification/src/Main.java

328:2-328:41
Fri Apr 10 10:53:41 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3617abc_7736d063
Bytes: 47
Move this check into its own CHECK-START block?

328:2-328:41
Fri Apr 10 11:06:12 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_7736d063
UUID: 6394aac1_9e5d395a
Bytes: 71
There is a Neg after, so I think this comes back to your other comment.

328:2-328:41
Fri Apr 10 11:17:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_9e5d395a
UUID: a38a229d_20fc04b3
Bytes: 36
Oh right, I didn't see that!  Sorry.

365:2-365:41
Fri Apr 10 10:53:41 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3617abc_b7d4e874
Bytes: 9
Likewise.

365:2-365:41
Fri Apr 10 11:17:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_b7d4e874
UUID: 6394aac1_3e58a55a
Bytes: 76
But I think my comment is valid here, as you highlighted it hereinbefore. :)

395:0-406:42
Fri Apr 10 10:53:41 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3617abc_17c4b4bd
Bytes: 1016
Maybe these checks should be uncorrelated? E.g.

1. First ensure the graph is not changed first:

  // CHECK-START: long Main.AddNegs3(long, long) instruction_simplifier (after)
  // -------------- Arguments and initial negation operations.
  // CHECK-DAG:     [[Arg1:j\d+]]     ParameterValue
  // CHECK-DAG:     [[Arg2:j\d+]]     ParameterValue
  // CHECK-DAG:     [[Neg1:j\d+]]     Neg [ [[Arg1]] ]
  // CHECK-DAG:     [[Neg2:j\d+]]     Neg [ [[Arg2]] ]
  // CHECK:                           Goto
  // -------------- Loop
  // CHECK:                           SuspendCheck
  // CHECK:         [[Add:j\d+]]      Add [ [[Neg1]] [[Neg2]] ]
  // CHECK:                           Goto

2. Then check no Neg instruction has been inserted in the loop:

  // CHECK-START: long Main.AddNegs3(long, long) instruction_simplifier (after)
  // -------------- Loop
  // CHECK:                           SuspendCheck
  // CHECK-NOT:                       Neg
  // CHECK:                           Goto

David, what do you think?

395:0-406:42
Fri Apr 10 11:06:12 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_17c4b4bd
UUID: a38a229d_60f1ace2
Bytes: 95
Wouldn't this fail if there is was SuspendCheck for example in the entry block of the function?

395:0-406:42
Fri Apr 10 11:17:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_60f1ace2
UUID: e3617abc_f7b4a037
Bytes: 375
Yes, probably.  I was about to suggest this:

  // CHECK-START: long Main.AddNegs3(long, long) instruction_simplifier (after)
  // CHECK:                           Goto
  // -------------- Loop
  // CHECK:                           SuspendCheck
  // CHECK-NOT:                       Neg
  // CHECK:                           Goto

but I think your initial solution is better.

729:0-750:42
Fri Apr 10 10:53:41 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a38a229d_c0be00f7
Bytes: 6
Ditto?

729:0-750:42
Fri Apr 10 11:17:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_c0be00f7
UUID: a38a229d_601fec8a
Bytes: 36
Sorry, scratch this comment as well.

