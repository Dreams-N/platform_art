Revision: caad22c9f138f3717b6cad2f41dac8fbd0a9e7cc
Patch-set: 5
File: compiler/optimizing/boolean_not_simplifier.cc

29:12-29:32
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 263640c8_a992bda5
Bytes: 32
I think this can be null. right?

29:12-29:32
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 263640c8_a992bda5
UUID: a63870b1_50b572ac
Bytes: 44
That's why the !IsEmpty test right above it.

51:12-51:28
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c63d64a0_b11e9a62
Bytes: 160
hmmm, semantically this also preserve the condition, just that it considers the oposite case.

maybe rename to PreserveTrueCondition and PreserveFalseCondition?

51:12-51:28
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c63d64a0_b11e9a62
UUID: 263640c8_8c5ee753
Bytes: 252
I'm not sure I follow. A function 0->0, 1->1 returns the input value, while 0->1, 1->0 returns its negation. I actually thought that the phrase "preserve condition" could be misleading, so Preserve{True,False}Condition doesn't sound very fitting to me.

92:7-92:25
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a63870b1_707fce8e
Bytes: 45
Is PostOrder mandatory? Is yes, document why.

92:7-92:25
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a63870b1_707fce8e
UUID: 263640c8_ac63ab14
Bytes: 4
Done

106:36-106:44
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a63870b1_d0fc0289
Bytes: 83
could you put this between brackets. In this case I think it will be more readable.

106:36-106:44
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a63870b1_d0fc0289
UUID: c63d64a0_3180ea90
Bytes: 4
Done

File: compiler/optimizing/boolean_not_simplifier.h

2:17-2:21
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 263640c8_69c285a1
Bytes: 31
2015, here and everywhere else.

2:17-2:21
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 263640c8_69c285a1
UUID: c63d64a0_f18ca289
Bytes: 4
Done

17:0-19:67
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a63870b1_105a0a56
Bytes: 74
Please add a short code example. It will make things easier to understand.

17:0-19:67
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a63870b1_105a0a56
UUID: 263640c8_4c114f55
Bytes: 4
Done

20:2-21:75
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c63d64a0_91f27eb3
Bytes: 168
Not for now, but maybe we should think of a (general) way to enforce the requirement that this is executed after another optimization. We already to that with gvn/lcim.

20:2-21:75
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c63d64a0_91f27eb3
UUID: 263640c8_6c0e1336
Bytes: 6
Agreed

37:64-37:86
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a63870b1_b0ecd6be
Bytes: 46
I'm not sure why we name this with `not`... :)

37:64-37:86
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a63870b1_b0ecd6be
UUID: a63870b1_3080e690
Bytes: 29
Historical reasons... Renamed

File: compiler/optimizing/ssa_liveness_analysis.cc

76:26-76:34
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 263640c8_494a21b3
Bytes: 20
please use brackets.

76:26-76:34
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 263640c8_494a21b3
UUID: c63d64a0_518d76c7
Bytes: 8
Removed.

File: test/462-checker-logical-not/src/Main.java

134:38-134:46
Tue Mar 24 15:30:55 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c63d64a0_318f0afc
Bytes: 29
do you miss an if after this?

134:38-134:46
Tue Mar 24 16:49:25 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c63d64a0_318f0afc
UUID: c63d64a0_31ae2a13
Bytes: 123
Done.
You're right that I should test if it's there (and the other two as well) but it doesn't contribute to the data flow.

