Revision: 871679169aa56eb0bae30f097b3f996db26a7a61
Patch-set: 4
File: compiler/optimizing/builder.cc

1964
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_5ffefe5a
Bytes: 23
Thanks for clean up :).

1964
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb75bfb9_5ffefe5a
UUID: 204d6487_e7363cde
Bytes: 4
Done

2835
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_b007839a
Bytes: 353
Do we want to gate this behind -Xexperimental:lambdas? It would just be a runtime call to see is the flag was enabled. That's what the interpreter does today.

(Also I would think in the future we likely don't want older dex versions to try to use the new opcodes, so having a gate here is a good placeholder to replace with later with a version check).

2835
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_b007839a
UUID: 40933818_c0648067
Bytes: 101
We don't even go through the verifier if this flag is not set; do we really want to be this pedantic?

2835
Mon Dec 07 21:14:42 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 40933818_c0648067
UUID: 60e03ce1_018cece8
Bytes: 300
Sounds like it should be a DCHECK then?

  DCHECK(IsExperimentalLambdasEnabled) or similar.

To make sure the verifier is indeed catching unsupported opcodes.

The lambda verifier support is TBD so it really could help in the future not to accidentally end up in the compiler when it's inappropriate.

2835
Mon Dec 07 23:09:06 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 60e03ce1_018cece8
UUID: 80d9b040_65b142b7
Bytes: 18
Okay, added safety

2836:31-2836:33
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_9fd256db
Bytes: 60
It's actually vC, not vA. I'm going to fix it to be vA soon.

2836:31-2836:33
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fb75bfb9_9fd256db
UUID: 204d6487_c7246091
Bytes: 9
AH, okay.

2837:49-2837:51
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db847bce_138390e9
Bytes: 2
vC

2837:49-2837:51
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db847bce_138390e9
UUID: e0842cce_0525948a
Bytes: 4
Done

2852
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_799e7a7a
Bytes: 157
If this is a shorty, it's fine. If it's a long type descriptor then line 2860 won't work anymore in the future because it's going to need to scan until the ;

2852
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b6aafda_799e7a7a
UUID: 009dc025_3eb6a5b0
Bytes: 62
It works for now, but this will go away soon with your change.

2853
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b816bc7_5dadaca9
Bytes: 8
See 2856

2853
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b816bc7_5dadaca9
UUID: 009dc025_de9a212f
Bytes: 4
Done

2856:56-2856:60
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76d4867d_bd00f3dd
Bytes: 248
Actually this exists as a constant in interpreter_common.cc, can you bring it out to a header file and use it here?

// All lambda closures have to be a consecutive pair of virtual registers.
static constexpr size_t kLambdaVirtualRegisterWidth = 2;

2856:56-2856:60
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76d4867d_bd00f3dd
UUID: 20a2c463_c22a46ba
Bytes: 30
Is this really the same thing?

2856:56-2856:60
Mon Dec 07 21:14:42 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 20a2c463_c22a46ba
UUID: 80b290f4_9a278994
Bytes: 228
More or less, "2" represents here the register width of the receiver in the method and it's always a lambda (always 2) for invoke-lambda.

Perhaps it can have a different name that's more representative of what's happening here?

2860
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b2a4b7b_c38d631a
Bytes: 125
It would probably be helpful to add a DCHECK(*descriptor == 'J') here since its using that assumption which will soon change.

2860
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b2a4b7b_c38d631a
UUID: 00486077_46e0744e
Bytes: 4
Done

2862
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_f0957b63
Bytes: 25
nit: out, inout, just in?

2862
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_f0957b63
UUID: 00486077_a6af28eb
Bytes: 4
Done

2871:61-2871:81
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_6dc15554
Bytes: 12
method index

2871:61-2871:81
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bed97ca_6dc15554
UUID: 00486077_e9d73115
Bytes: 4
Done

2872:81-2872:83
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_4bad65aa
Bytes: 51
nit: into the implicit register pair in vA and vA+1

2872:81-2872:83
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fbf69f9c_4bad65aa
UUID: c08728d0_a7170e2c
Bytes: 4
Done

2875
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b440b88_a1d7d817
Bytes: 108
Just so we're clear, we're relying on the verifier here to match object reference types to be correct right?

2875
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b440b88_a1d7d817
UUID: e06d0cee_407142e5
Bytes: 3
yes

2876
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_8cdc8734
Bytes: 16
nit: line length

2876
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_8cdc8734
UUID: 204d6487_c7358082
Bytes: 4
Done

2883
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_eae9a7d4
Bytes: 160
nit: bring out instruction.VRegA_21c into a separate variable for readability

  uint32_t target_vreg = instruction.VRegA_21c();
  UpdateLocal(target_vreg, ...)

2883
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db271bf3_eae9a7d4
UUID: e06d0cee_00634a20
Bytes: 4
Done

2889:79-2889:80
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_6c0f9b79
Bytes: 22
nit: as a string index

2889:79-2889:80
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_6c0f9b79
UUID: 40933818_231a0eaa
Bytes: 4
Done

2897:41-2897:64
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_2d158d8d
Bytes: 131
nit: bring out to separate variable for readability

  uint32_t source_vreg = instruction.VRegA_21c()
  LoadLocal(source_vreg, ...)

2897:41-2897:64
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bed97ca_2d158d8d
UUID: 20a2c463_82199e57
Bytes: 4
Done

2906:66-2906:68
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_29ec6de9
Bytes: 38
the implicit register pair vB and vB+1

2906:66-2906:68
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb2a67bd_29ec6de9
UUID: 00486077_a667286a
Bytes: 4
Done

2907:53-2907:54
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_ec026b4c
Bytes: 120
nit: as a string index

Might as well also add a // TODO: vC should be a type index instead

since that's the plan later

2907:53-2907:54
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_ec026b4c
UUID: 009dc025_7ef2ed56
Bytes: 4
Done

2911:40-2911:63
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b3d4fed_df7d9b4a
Bytes: 42
nit: bring out to var name for readability

2911:40-2911:63
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b3d4fed_df7d9b4a
UUID: e06d0cee_20f68e81
Bytes: 4
Done

2912
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_6c44bb9d
Bytes: 16
nit: line length

2912
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_6c44bb9d
UUID: e0842cce_65f7c0f7
Bytes: 4
Done

2913:18-2913:41
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b4e13ac_bf08936e
Bytes: 42
nit: bring out to var name for readability

2913:18-2913:41
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b4e13ac_bf08936e
UUID: e06d0cee_000d8a4f
Bytes: 4
Done

2918:50-2918:51
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_4c49ffb1
Bytes: 38
the implicit register pair vB and vB+1

2918:50-2918:51
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_4c49ffb1
UUID: 009dc025_7e198d54
Bytes: 4
Done

2920:40-2920:62
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_6a44979d
Bytes: 42
nit: bring out to var name for readability

2920:40-2920:62
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db271bf3_6a44979d
UUID: e06d0cee_20b1aeb7
Bytes: 4
Done

2922:18-2922:41
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_09f1a9c3
Bytes: 42
nit: bring out to var name for readability

2922:18-2922:41
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb2a67bd_09f1a9c3
UUID: e0842cce_451ddcee
Bytes: 4
Done

2928:76-2928:78
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_0b1a3dbb
Bytes: 38
the implicit register pair vA and vA+1

2928:76-2928:78
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fbf69f9c_0b1a3dbb
UUID: 40933818_23f68e81
Bytes: 4
Done

2932:42-2932:65
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_ec570b4e
Bytes: 42
nit: bring out to var name for readability

2932:42-2932:65
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_ec570b4e
UUID: e0842cce_a50b88aa
Bytes: 4
Done

2934:18-2934:41
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_cc54cf4c
Bytes: 42
nit: bring out to var name for readability

2934:18-2934:41
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_cc54cf4c
UUID: 404ed883_c856afd9
Bytes: 4
Done

File: compiler/optimizing/builder.h

363
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_5372647f
Bytes: 114
nit: maybe mention this is for lambdas?

// Record of variable captures for the upcoming create-lambda instruction

363
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_5372647f
UUID: 20a2c463_7f442b2f
Bytes: 55
Okay, but this goes away with your create-lambda change

367
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_1e561fdd
Bytes: 133
I think this means the full type descriptor type list right?

Maybe just add a comment example to be sure?

   // e.g. "LFoo;ZJLBar;"

367
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_1e561fdd
UUID: e06d0cee_fdfda322
Bytes: 46
Done, but same comment on temporary character.

File: compiler/optimizing/code_generator.cc

423
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_6d44b59d
Bytes: 91
Andreas like to puts UNIMPLEMENTED(FATAL) in situations like this. Or is crashing here bad?

423
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bed97ca_6d44b59d
UUID: 8091b00f_42571408
Bytes: 166
Yes, right now I don't generate any code for lambda's, and rely on the deopts to go back to interpreter. If I crash here or elsewhere, we no longer have that ability.

File: compiler/optimizing/code_generator_arm.cc

5536
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_cb54b54c
Bytes: 91
Andreas like to puts UNIMPLEMENTED(FATAL) in situations like this. Or is crashing here bad?

5536
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fbf69f9c_cb54b54c
UUID: 8091b00f_224d3073
Bytes: 6
is bad

5547
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_ad4dfdbf
Bytes: 16
nit: line length

5547
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3bed97ca_ad4dfdbf
UUID: 20a2c463_1fbc0728
Bytes: 4
Done

5556
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b167790_65a8469c
Bytes: 16
nit: line length

5556
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b167790_65a8469c
UUID: 20a2c463_3fc1c3a4
Bytes: 4
Done

5565
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_e6d43e15
Bytes: 16
nit: line length

5565
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b1b2bb8_e6d43e15
UUID: 404ed883_084847b0
Bytes: 4
Done

5574
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b167790_25c76e6d
Bytes: 16
nit: line length

5574
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b167790_25c76e6d
UUID: 40933818_2018c4ff
Bytes: 4
Done

5583
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b153384_e4d43a15
Bytes: 16
nit: line length

5583
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b153384_e4d43a15
UUID: 20a2c463_dfb53f3b
Bytes: 4
Done

5584
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_ea8527ee
Bytes: 146
Not sure what these all are doing, will probably need explanation offline

Sidenote: It looks like it's leaking. Why isn't it leaking (the arena)?

5584
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db271bf3_ea8527ee
UUID: 204d6487_67cecc3b
Bytes: 4
Done

File: compiler/optimizing/code_generator_arm64.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_cb2dd5d0
Bytes: 23
nit: check line lengths

0
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fbf69f9c_cb2dd5d0
UUID: 404ed883_483e3f0c
Bytes: 4
Done

File: compiler/optimizing/code_generator_mips.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_e957f54d
Bytes: 23
nit: check line lengths

0
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb2a67bd_e957f54d
UUID: 204d6487_a7a4c476
Bytes: 4
Done

File: compiler/optimizing/code_generator_mips64.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_c6e66204
Bytes: 23
nit: check line lengths

0
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b1b2bb8_c6e66204
UUID: 009dc025_de330135
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_ca82e3e3
Bytes: 23
nit: check line lengths

0
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: db271bf3_ca82e3e3
UUID: 009dc025_3e1f859a
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_2615b68d
Bytes: 23
nit: check line lengths

0
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b1b2bb8_2615b68d
UUID: 40933818_e0eadc0c
Bytes: 4
Done

File: compiler/optimizing/nodes.h

3646
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_b9d41214
Bytes: 98
nit: Judging on some other nodes like HInvokeStaticOrDirect this could probably use more comments.

3646
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b6aafda_b9d41214
UUID: 8091b00f_a217002c
Bytes: 47
I just followed the convention of this file :-)

3646
Mon Dec 07 21:14:42 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8091b00f_a217002c
UUID: a0af948e_7b4b9b06
Bytes: 251
Right, so there's classes more and less documented residing  in this the same file.

Is there any reason not to follow the convention of the more documented classes so we can continue to set a good example for the rest of the optimizing [lambda] code?

3646
Mon Dec 07 23:09:06 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a0af948e_7b4b9b06
UUID: a0af948e_be81a1b4
Bytes: 161
I was just being ironic. Since this was a WIP, I did not add comments, but if you all agree on that these are the right nodes to add, I will document them fully.

3646
Mon Dec 07 23:39:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a0af948e_be81a1b4
UUID: 60e03ce1_671a20ab
Bytes: 29
Ah, yes :). These seem right.

3652:44-3652:46
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_13605c80
Bytes: 46
nit: document parameter name, also line length

3652:44-3652:46
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b3453db_13605c80
UUID: e0842cce_4552bc10
Bytes: 4
Done

3666:21-3666:40
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_d08f974b
Bytes: 371
What is considered a "side effect"? This doesn't seem like it can be considered to not have any side effects because it could trigger class loading of the method ID specified, which in turn can cause a GC.

(and also more generally it shouldn't be reordered since we want to maintain class load ordering, although this didn't seem to be mentioned by the SideEffects docs)

3666:21-3666:40
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_d08f974b
UUID: e06d0cee_7d2af329
Bytes: 71
Side effects in this context is very specific to field read/write or GC

3666:21-3666:40
Mon Dec 07 21:14:42 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e06d0cee_7d2af329
UUID: 00e5c0f2_de42e1ed
Bytes: 102
Maybe someone familiar with the analysis can explain to me how that's sufficient to retain correctness

3666:21-3666:40
Mon Dec 07 23:09:06 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 00e5c0f2_de42e1ed
UUID: 60c91c79_bc0c4955
Bytes: 60
calling create lambda can never change the value of a field.

3666:21-3666:40
Mon Dec 07 23:39:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 60c91c79_bc0c4955
UUID: a0af948e_be6a8132
Bytes: 305
Oh that makes perfect sense in the context of your above explanation. 

I'm just not sure what "side effects" is supposed to represent in general (outside of lambdas) since it means something different than what I would intuitively expect (e.g. code that can be evaluated without any ordering constraints)

3677
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b816bc7_bdd40014
Bytes: 92
nit: Please comments for public methods (assuming this is dex method ID but could be wrong).

3677
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b816bc7_bdd40014
UUID: 009dc025_5e7291ef
Bytes: 52
I will add comments, but after the format stabilizes

3683
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_a449410d
Bytes: 28
No bounds check, is that ok?

3683
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b2597a9_a449410d
UUID: 00486077_86078cf5
Bytes: 38
Yes, this is an already checked array!

3687
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_10780f10
Bytes: 8
See 3683

3687
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 96d1fa8e_10780f10
UUID: c08728d0_e7b0b603
Bytes: 4
Done

3691
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_8403e59b
Bytes: 22
nit: dex method index?

3691
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b2597a9_8403e59b
UUID: e06d0cee_7d5193b3
Bytes: 80
in this file, we don't typically add dex_. also I notice that Idx is more common

3693
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_24f2f103
Bytes: 134
(Since I don't understand the compiler too well), why can't it just have a list of inputs? Why does it need to go through HUserRecord?

3693
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b2597a9_24f2f103
UUID: 009dc025_3e71c5e6
Bytes: 20
this is how it works

3700
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_a41701d3
Bytes: 166
(Another stupid compiler question) Is  this always in SSA form? If vreg can have different value from different incoming edges, is this always set to Phi instruction?

3700
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3b2597a9_a41701d3
UUID: 009dc025_fe627d1a
Bytes: 36
not sure I understand this question?

3700
Mon Dec 07 21:14:42 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 009dc025_fe627d1a
UUID: c0b808d7_5f95e31e
Bytes: 187
Using this as an example

   if (foo)
      v1 = 1
   else
      v1 = 2
   capture-variable v1

Presumably "variable" here is something like phi(..evaluates to 1, ..evaluates to 2) right?

3700
Mon Dec 07 23:09:06 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c0b808d7_5f95e31e
UUID: a0af948e_fe8b19d0
Bytes: 113
Yes, but that applies to anything that is an HExpression. Any reason you are worried about having a Phi as input?

3700
Mon Dec 07 23:39:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a0af948e_fe8b19d0
UUID: 40db3839_83c1e2a6
Bytes: 158
Just trying to clarify my understanding of the fundamentals of the optimizing compiler architecture I suppose, don't think it has anything to do with this CL.

3708
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_991a6eba
Bytes: 22
nit: Dex method index?

3708
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b6aafda_991a6eba
UUID: 1bfc537c_0c2897c3
Bytes: 35
Meant to say dex string index here.

3708
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_0c2897c3
UUID: c08728d0_27f9bea8
Bytes: 4
Done

3731
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_89dc7934
Bytes: 21
nit: Dex string index

3731
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb2a67bd_89dc7934
UUID: e06d0cee_9d5907db
Bytes: 4
Done

3754
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_091a49bb
Bytes: 481
As I mentioned earlier we should probably have at least some comments for these nodes, at the very least they should point to somewhere else in the source with more documentation, although it wouldn't hurt to match the comment level of other nodes in this file either.

(it might be pretty obvious to you and i what these IR nodes do but since these new opcodes are so brand new most other readers probably would have to spend a bit more time trying to figure out the fine details)

3754
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb2a67bd_091a49bb
UUID: 8091b00f_c207a4f4
Bytes: 4
Done

File: compiler/optimizing/reference_type_propagation.cc

602
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_a608866e
Bytes: 63
Isn't the exact type ID in one of the vregs (perhaps a string)?

602
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b1b2bb8_a608866e
UUID: 009dc025_7e250dee
Bytes: 3
tbd

608
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_c6ff8280
Bytes: 71
Isn't the exact type ID in the const-string preceding this instruction?

608
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b1b2bb8_c6ff8280
UUID: 20a2c463_9fd8179e
Bytes: 3
tbd

File: runtime/class_linker.cc

6154
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b246ff3_e7e9e2d4
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

6154
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b246ff3_e7e9e2d4
UUID: c08728d0_84ad28ca
Bytes: 161
Right now I don't generate any code for lambda's, and rely on the deopts to go back to interpreter. If I crash here or elsewhere, we no longer have that ability.

6177
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b2123e5_a84dfbbf
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

6177
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b2123e5_a84dfbbf
UUID: 00486077_267b38a3
Bytes: 4
Done

6207
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_ab7b29cf
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

6207
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fbf69f9c_ab7b29cf
UUID: c08728d0_24a21cd7
Bytes: 4
Done

6276
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_2923cdec
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

6276
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bb2a67bd_2923cdec
UUID: 009dc025_5e393121
Bytes: 4
Done

File: runtime/invoke_type.h

31:19-31:29
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_ec5eeb51
Bytes: 9
kLambda ?

31:19-31:29
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1bfc537c_ec5eeb51
UUID: e06d0cee_bd1e4b37
Bytes: 11
good catch!

File: test/956-checker-lambda/src/Main.java

48:17-48:29
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b153384_a408826e
Bytes: 46
any way to check that what the parameters are?

48:17-48:29
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b153384_a408826e
UUID: 404ed883_88ce7781
Bytes: 30
at the moment there aren't any

49:17-49:29
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b153384_e4027a4c
Bytes: 45
ditto here and for all the rest of the CHECKs

49:17-49:29
Thu Dec 03 23:04:18 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1b153384_e4027a4c
UUID: 404ed883_28f9c3a8
Bytes: 30
here it would be useful indeed

