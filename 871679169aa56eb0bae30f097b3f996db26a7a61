Revision: 871679169aa56eb0bae30f097b3f996db26a7a61
Patch-set: 4
File: compiler/optimizing/builder.cc

1964
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_5ffefe5a
Bytes: 23
Thanks for clean up :).

2835
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_b007839a
Bytes: 353
Do we want to gate this behind -Xexperimental:lambdas? It would just be a runtime call to see is the flag was enabled. That's what the interpreter does today.

(Also I would think in the future we likely don't want older dex versions to try to use the new opcodes, so having a gate here is a good placeholder to replace with later with a version check).

2836:31-2836:33
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fb75bfb9_9fd256db
Bytes: 60
It's actually vC, not vA. I'm going to fix it to be vA soon.

2837:49-2837:51
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db847bce_138390e9
Bytes: 2
vC

2852
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_799e7a7a
Bytes: 157
If this is a shorty, it's fine. If it's a long type descriptor then line 2860 won't work anymore in the future because it's going to need to scan until the ;

2853
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b816bc7_5dadaca9
Bytes: 8
See 2856

2856:56-2856:60
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76d4867d_bd00f3dd
Bytes: 248
Actually this exists as a constant in interpreter_common.cc, can you bring it out to a header file and use it here?

// All lambda closures have to be a consecutive pair of virtual registers.
static constexpr size_t kLambdaVirtualRegisterWidth = 2;

2860
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b2a4b7b_c38d631a
Bytes: 125
It would probably be helpful to add a DCHECK(*descriptor == 'J') here since its using that assumption which will soon change.

2862
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_f0957b63
Bytes: 25
nit: out, inout, just in?

2871:61-2871:81
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_6dc15554
Bytes: 12
method index

2872:81-2872:83
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_4bad65aa
Bytes: 51
nit: into the implicit register pair in vA and vA+1

2875
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b440b88_a1d7d817
Bytes: 108
Just so we're clear, we're relying on the verifier here to match object reference types to be correct right?

2876
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_8cdc8734
Bytes: 16
nit: line length

2883
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_eae9a7d4
Bytes: 160
nit: bring out instruction.VRegA_21c into a separate variable for readability

  uint32_t target_vreg = instruction.VRegA_21c();
  UpdateLocal(target_vreg, ...)

2889:79-2889:80
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_6c0f9b79
Bytes: 22
nit: as a string index

2897:41-2897:64
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_2d158d8d
Bytes: 131
nit: bring out to separate variable for readability

  uint32_t source_vreg = instruction.VRegA_21c()
  LoadLocal(source_vreg, ...)

2906:66-2906:68
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_29ec6de9
Bytes: 38
the implicit register pair vB and vB+1

2907:53-2907:54
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_ec026b4c
Bytes: 120
nit: as a string index

Might as well also add a // TODO: vC should be a type index instead

since that's the plan later

2911:40-2911:63
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b3d4fed_df7d9b4a
Bytes: 42
nit: bring out to var name for readability

2912
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_6c44bb9d
Bytes: 16
nit: line length

2913:18-2913:41
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b4e13ac_bf08936e
Bytes: 42
nit: bring out to var name for readability

2918:50-2918:51
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_4c49ffb1
Bytes: 38
the implicit register pair vB and vB+1

2920:40-2920:62
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_6a44979d
Bytes: 42
nit: bring out to var name for readability

2922:18-2922:41
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_09f1a9c3
Bytes: 42
nit: bring out to var name for readability

2928:76-2928:78
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_0b1a3dbb
Bytes: 38
the implicit register pair vA and vA+1

2932:42-2932:65
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_ec570b4e
Bytes: 42
nit: bring out to var name for readability

2934:18-2934:41
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_cc54cf4c
Bytes: 42
nit: bring out to var name for readability

File: compiler/optimizing/builder.h

363
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_5372647f
Bytes: 114
nit: maybe mention this is for lambdas?

// Record of variable captures for the upcoming create-lambda instruction

367
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b25eb9e_1e561fdd
Bytes: 133
I think this means the full type descriptor type list right?

Maybe just add a comment example to be sure?

   // e.g. "LFoo;ZJLBar;"

File: compiler/optimizing/code_generator.cc

423
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_6d44b59d
Bytes: 91
Andreas like to puts UNIMPLEMENTED(FATAL) in situations like this. Or is crashing here bad?

File: compiler/optimizing/code_generator_arm.cc

5536
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_cb54b54c
Bytes: 91
Andreas like to puts UNIMPLEMENTED(FATAL) in situations like this. Or is crashing here bad?

5547
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3bed97ca_ad4dfdbf
Bytes: 16
nit: line length

5556
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b167790_65a8469c
Bytes: 16
nit: line length

5565
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_e6d43e15
Bytes: 16
nit: line length

5574
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b167790_25c76e6d
Bytes: 16
nit: line length

5583
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b153384_e4d43a15
Bytes: 16
nit: line length

5584
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_ea8527ee
Bytes: 146
Not sure what these all are doing, will probably need explanation offline

Sidenote: It looks like it's leaking. Why isn't it leaking (the arena)?

File: compiler/optimizing/code_generator_arm64.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_cb2dd5d0
Bytes: 23
nit: check line lengths

File: compiler/optimizing/code_generator_mips.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_e957f54d
Bytes: 23
nit: check line lengths

File: compiler/optimizing/code_generator_mips64.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_c6e66204
Bytes: 23
nit: check line lengths

File: compiler/optimizing/code_generator_x86.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: db271bf3_ca82e3e3
Bytes: 23
nit: check line lengths

File: compiler/optimizing/code_generator_x86_64.cc

0
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_2615b68d
Bytes: 23
nit: check line lengths

File: compiler/optimizing/nodes.h

3646
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_b9d41214
Bytes: 98
nit: Judging on some other nodes like HInvokeStaticOrDirect this could probably use more comments.

3652:44-3652:46
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b3453db_13605c80
Bytes: 46
nit: document parameter name, also line length

3666:21-3666:40
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_d08f974b
Bytes: 371
What is considered a "side effect"? This doesn't seem like it can be considered to not have any side effects because it could trigger class loading of the method ID specified, which in turn can cause a GC.

(and also more generally it shouldn't be reordered since we want to maintain class load ordering, although this didn't seem to be mentioned by the SideEffects docs)

3677
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b816bc7_bdd40014
Bytes: 92
nit: Please comments for public methods (assuming this is dex method ID but could be wrong).

3683
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_a449410d
Bytes: 28
No bounds check, is that ok?

3687
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96d1fa8e_10780f10
Bytes: 8
See 3683

3691
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_8403e59b
Bytes: 22
nit: dex method index?

3693
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_24f2f103
Bytes: 134
(Since I don't understand the compiler too well), why can't it just have a list of inputs? Why does it need to go through HUserRecord?

3700
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3b2597a9_a41701d3
Bytes: 166
(Another stupid compiler question) Is  this always in SSA form? If vreg can have different value from different incoming edges, is this always set to Phi instruction?

3708
Thu Nov 19 02:09:10 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b6aafda_991a6eba
Bytes: 22
nit: Dex method index?

3708
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7b6aafda_991a6eba
UUID: 1bfc537c_0c2897c3
Bytes: 35
Meant to say dex string index here.

3731
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_89dc7934
Bytes: 21
nit: Dex string index

3754
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_091a49bb
Bytes: 481
As I mentioned earlier we should probably have at least some comments for these nodes, at the very least they should point to somewhere else in the source with more documentation, although it wouldn't hurt to match the comment level of other nodes in this file either.

(it might be pretty obvious to you and i what these IR nodes do but since these new opcodes are so brand new most other readers probably would have to spend a bit more time trying to figure out the fine details)

File: compiler/optimizing/reference_type_propagation.cc

602
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_a608866e
Bytes: 63
Isn't the exact type ID in one of the vregs (perhaps a string)?

608
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5b1b2bb8_c6ff8280
Bytes: 71
Isn't the exact type ID in the const-string preceding this instruction?

File: runtime/class_linker.cc

6154
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7b246ff3_e7e9e2d4
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

6177
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b2123e5_a84dfbbf
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

6207
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fbf69f9c_ab7b29cf
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

6276
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bb2a67bd_2923cdec
Bytes: 29
Why not UNIMPLEMENTED(FATAL)?

File: runtime/invoke_type.h

31:19-31:29
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1bfc537c_ec5eeb51
Bytes: 9
kLambda ?

File: test/956-checker-lambda/src/Main.java

48:17-48:29
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b153384_a408826e
Bytes: 46
any way to check that what the parameters are?

49:17-49:29
Fri Nov 20 19:22:06 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1b153384_e4027a4c
Bytes: 45
ditto here and for all the rest of the CHECKs

