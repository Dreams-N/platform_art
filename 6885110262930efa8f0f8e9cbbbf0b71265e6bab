Revision: 6885110262930efa8f0f8e9cbbbf0b71265e6bab
Patch-set: 5
File: compiler/oat_writer.cc

130:37-130:43
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 453f8fb5_e4d4027d
Bytes: 8
GetData?

130:37-130:43
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 453f8fb5_e4d4027d
UUID: c5a7ff88_44e40e72
Bytes: 4
Done

148:21-148:28
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 453f8fb5_c4d1fe8a
Bytes: 5
Name?

148:21-148:28
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 453f8fb5_c4d1fe8a
UUID: c5a7ff88_a4b70271
Bytes: 4
Done

218:2-218:27
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c51d3f5e_d195435f
Bytes: 63
should EndClass bother to clear dex_file_ and class_def_index_?

218:2-218:27
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c51d3f5e_d195435f
UUID: c5a7ff88_84ba065a
Bytes: 23
Done for kIsDebugBuild.

222:2-224:3
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 45586f41_9da58f29
Bytes: 10
GetOffset?

222:2-224:3
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 45586f41_9da58f29
UUID: c5a7ff88_e4adfa22
Bytes: 4
Done

230:2-230:17
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 853507d4_c836a8fd
Bytes: 125
It was unclear that this was intended to be mutable, I'd document this is expected to be set/advanced as needed by processors

230:2-230:17
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 853507d4_c836a8fd
UUID: e53fa3e6_1d90b3c9
Bytes: 4
Done

231:2-232:26
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c51d3f5e_91ed8be1
Bytes: 95
i'd visually separate these from the above too since they change with each StartClass/EndClass.

231:2-232:26
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c51d3f5e_91ed8be1
UUID: e53fa3e6_7d9577b9
Bytes: 4
Done

File: compiler/oat_writer.h

55:59-55:60
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c51d3f5e_5146d365
Bytes: 52
perhaps add " including the size of the MethodCode."

55:59-55:60
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c51d3f5e_5146d365
UUID: e53fa3e6_5dd07b30
Bytes: 4
Done

62:1-77:2
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 45586f41_9d20efff
Bytes: 240
can we now move these above the "padding", that is before the executable offset? This would mean less executable pages which the security team would like. I thought I said this previously (a few days ago) but apparently lost those comments.

62:1-77:2
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 45586f41_9d20efff
UUID: e53fa3e6_fd650759
Bytes: 138
Done.

But where do we use the OatHeader::executable_offset_ to actually make the code executable? Or do we make it all executable anyway?

62:1-77:2
Tue Apr 22 17:44:18 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e53fa3e6_fd650759
UUID: 253e1beb_a20400e2
Bytes: 184
The ElfWriter uses it

./elf_writer_quick.cc:201:  uint32_t oat_data_size = oat_header.GetExecutableOffset();

the oat data will span two elf segments, one read only, one read execute.

113:9-113:18
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 05291785_3dc57b40
Bytes: 368
I'm not sure the template struct vs a little abstract class with subclasses is the clearest way to do this.

that said, the name is definitely unclear. Can we do something like MapBinder -> DeDuper?

(looking at the other file, I think part of the confusion for me in the "Map" part of the name is that its just a coincidence to me that these are are "map" like data.)

113:9-113:18
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 05291785_3dc57b40
UUID: c5a7ff88_6477cae8
Bytes: 139
Renamed to DataAccess.

Using inheritance we'd have 6 additional derived classes. Using templates we have only 3 additional helper classes.

125:8-125:26
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 653ad3c6_e0cbcc50
Bytes: 21
Processor -> Visitor?

125:8-125:26
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 653ad3c6_e0cbcc50
UUID: 25b9bbaa_27d0fa2f
Bytes: 4
Done

138:7-138:24
Fri Apr 18 00:45:08 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 05291785_7d1f834e
Bytes: 16
VisitDexMethods?

138:7-138:24
Tue Apr 22 17:00:09 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 05291785_7d1f834e
UUID: e53fa3e6_fd95075f
Bytes: 4
Done

