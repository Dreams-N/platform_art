Revision: 0c1a078d1ee64d509dd8fe1b936d95bf656fd409
Patch-set: 3
File: compiler/driver/compiler_driver.cc

1016:4-1017:26
Tue Jun 16 12:13:05 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 799460c1_21f24ae5
Bytes: 390
IIUC, you no longer trust app class initialization, right? So calling a static method of an app class from another app class will always have to do that check?

Isn't the issue in the app class initialization itself (InitializeClass function) ? I mean we would incorrectly initialize an app class (changing its status to kStatusInitialized) at compilation time while it won't be at runtime?

1016:4-1017:26
Tue Jun 16 12:33:45 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_21f24ae5
UUID: 397f484e_e7aa368d
Bytes: 157
Right. We shouldn't trust the app class initialization because the app can use a different class loader and all bets are off before the class is even loaded.

1016:4-1017:26
Tue Jun 16 12:47:12 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_e7aa368d
UUID: 799460c1_611a92a1
Bytes: 287
OK, so this is more a class-loading issue in fact. The same kind of issue Nicolas is facing with inlining.

It'd be nice to add that in the comment above, something like "If an app class is loaded in different class loaders, we cannot be sure the class is really initialized at runtime".

1016:4-1017:26
Tue Jun 16 12:51:25 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_611a92a1
UUID: 79bf0033_297ce997
Bytes: 4
Done

