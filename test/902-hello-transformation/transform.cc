/*
 * Copyright (C) 2013 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include <iostream>
#include <pthread.h>
#include <stdio.h>
#include <vector>

#include "art_method-inl.h"
#include "base/logging.h"
#include "jni.h"
#include "openjdkjvmti/jvmti.h"

namespace art {
namespace Test902HelloTransformation {

static bool RuntimeIsJvm = false;

jvmtiEnv* jvmti_env;
bool IsJVM() {
  return RuntimeIsJvm;
}

// class/dex file for
//
// class Transform {
//   public void sayHi() {
//     System.out.println("Goodbye");
//   }
// }
uint8_t class_file_data[] = {
  0xca, 0xfe, 0xba, 0xbe, 0x00, 0x00, 0x00, 0x34, 0x00, 0x1c, 0x0a, 0x00, 0x06, 0x00, 0x0e, 0x09,
  0x00, 0x0f, 0x00, 0x10, 0x08, 0x00, 0x11, 0x0a, 0x00, 0x12, 0x00, 0x13, 0x07, 0x00, 0x14, 0x07,
  0x00, 0x15, 0x01, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x01, 0x00, 0x03, 0x28, 0x29,
  0x56, 0x01, 0x00, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x01, 0x00, 0x0f, 0x4c, 0x69, 0x6e, 0x65, 0x4e,
  0x75, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x01, 0x00, 0x05, 0x73, 0x61, 0x79,
  0x48, 0x69, 0x01, 0x00, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x01,
  0x00, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6a, 0x61, 0x76, 0x61,
  0x0c, 0x00, 0x07, 0x00, 0x08, 0x07, 0x00, 0x16, 0x0c, 0x00, 0x17, 0x00, 0x18, 0x01, 0x00, 0x07,
  0x47, 0x6f, 0x6f, 0x64, 0x62, 0x79, 0x65, 0x07, 0x00, 0x19, 0x0c, 0x00, 0x1a, 0x00, 0x1b, 0x01,
  0x00, 0x09, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x01, 0x00, 0x10, 0x6a, 0x61,
  0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x01, 0x00,
  0x10, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65,
  0x6d, 0x01, 0x00, 0x03, 0x6f, 0x75, 0x74, 0x01, 0x00, 0x15, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f,
  0x69, 0x6f, 0x2f, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x3b, 0x01,
  0x00, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 0x6f, 0x2f, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53,
  0x74, 0x72, 0x65, 0x61, 0x6d, 0x01, 0x00, 0x07, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x6e, 0x01,
  0x00, 0x15, 0x28, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74,
  0x72, 0x69, 0x6e, 0x67, 0x3b, 0x29, 0x56, 0x00, 0x20, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x1d, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x05, 0x2a, 0xb7, 0x00, 0x01, 0xb1, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x01,
  0x00, 0x0b, 0x00, 0x08, 0x00, 0x01, 0x00, 0x09, 0x00, 0x00, 0x00, 0x25, 0x00, 0x02, 0x00, 0x01,
  0x00, 0x00, 0x00, 0x09, 0xb2, 0x00, 0x02, 0x12, 0x03, 0xb6, 0x00, 0x04, 0xb1, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x08, 0x00,
  0x14, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d,
};

uint8_t dex_file_data[] = {
  0x64, 0x65, 0x78, 0x0a, 0x30, 0x33, 0x35, 0x00, 0x8b, 0x5d, 0x20, 0x50, 0xe4, 0x58, 0x92, 0xdd,
  0xfd, 0x7a, 0x92, 0xb4, 0x98, 0x64, 0x51, 0x7c, 0xc5, 0x86, 0x6d, 0x15, 0x5a, 0x74, 0x19, 0x15,
  0xcc, 0x02, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
  0x62, 0x01, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x73, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00,
  0x97, 0x01, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00,
  0xe3, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00,
  0x03, 0x02, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x04, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x70, 0x10, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x18, 0x02, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x01, 0x00,
  0x00, 0x00, 0x6e, 0x20, 0x02, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x06, 0x3c, 0x69, 0x6e, 0x69, 0x74, 0x3e, 0x00, 0x07, 0x47, 0x6f, 0x6f, 0x64, 0x62,
  0x79, 0x65, 0x00, 0x0b, 0x4c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x3b, 0x00,
  0x15, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x69, 0x6f, 0x2f, 0x50, 0x72, 0x69, 0x6e, 0x74, 0x53,
  0x74, 0x72, 0x65, 0x61, 0x6d, 0x3b, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61,
  0x6e, 0x67, 0x2f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x3b, 0x00, 0x12, 0x4c, 0x6a, 0x61, 0x76,
  0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x3b, 0x00, 0x12,
  0x4c, 0x6a, 0x61, 0x76, 0x61, 0x2f, 0x6c, 0x61, 0x6e, 0x67, 0x2f, 0x53, 0x79, 0x73, 0x74, 0x65,
  0x6d, 0x3b, 0x00, 0x0e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x2e, 0x6a, 0x61,
  0x76, 0x61, 0x00, 0x01, 0x56, 0x00, 0x02, 0x56, 0x4c, 0x00, 0x12, 0x65, 0x6d, 0x69, 0x74, 0x74,
  0x65, 0x72, 0x3a, 0x20, 0x6a, 0x61, 0x63, 0x6b, 0x2d, 0x33, 0x2e, 0x33, 0x36, 0x00, 0x03, 0x6f,
  0x75, 0x74, 0x00, 0x07, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6c, 0x6e, 0x00, 0x05, 0x73, 0x61, 0x79,
  0x48, 0x69, 0x00, 0x11, 0x00, 0x07, 0x0e, 0x00, 0x13, 0x00, 0x07, 0x0e, 0x85, 0x00, 0x00, 0x00,
  0x01, 0x01, 0x00, 0x80, 0x80, 0x04, 0xa0, 0x02, 0x01, 0x01, 0xb8, 0x02, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x01, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00,
  0x01, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x02, 0x20, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x03, 0x20, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x13, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00,
};

static void JNICALL transformationHook(jvmtiEnv *jvmtienv,
                                       JNIEnv* jni_env                 ATTRIBUTE_UNUSED,
                                       jclass class_being_redefined    ATTRIBUTE_UNUSED,
                                       jobject loader                  ATTRIBUTE_UNUSED,
                                       const char* name,
                                       jobject protection_domain       ATTRIBUTE_UNUSED,
                                       jint class_data_len             ATTRIBUTE_UNUSED,
                                       const unsigned char* class_data ATTRIBUTE_UNUSED,
                                       jint* new_class_data_len,
                                       unsigned char** new_class_data) {
  if (strcmp("Transform", name)) {
    return;
  }
  printf("modifying class '%s'\n", name);
  unsigned char* new_data;
  bool is_jvm = IsJVM();
  jlong new_len = is_jvm ? sizeof(class_file_data) : sizeof(dex_file_data);
  jvmtiError ret = JVMTI_ERROR_NONE;
  unsigned char* source = is_jvm ? class_file_data : dex_file_data;
  if ((ret = jvmtienv->Allocate(new_len, &new_data)) != JVMTI_ERROR_NONE) {
    printf("Unable to allocate buffer!\n");
    return;
  }
  memcpy(new_data, source, new_len);
  *new_class_data_len = static_cast<jint>(new_len);
  *new_class_data = static_cast<unsigned char*>(new_data);
  return;
}

using RetransformWithHookFunction = jvmtiError (*)(jvmtiEnv*, jclass, jvmtiEventClassFileLoadHook);
static void DoClassTransformation(jvmtiEnv* jvmtienv, JNIEnv* jnienv, jclass target) {
  if (IsJVM()) {
    UNUSED(jnienv);
    jvmtienv->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_CLASS_FILE_LOAD_HOOK, nullptr);
    jvmtiError ret = jvmtienv->RetransformClasses(1, &target);
    if (ret != JVMTI_ERROR_NONE) {
      char* err;
      jvmtienv->GetErrorName(ret, &err);
      printf("Error transforming: %s\n", err);
    }
  } else {
    RetransformWithHookFunction f =
        reinterpret_cast<RetransformWithHookFunction>(jvmtienv->functions->reserved1);
    if (f(jvmtienv, target, transformationHook) != JVMTI_ERROR_NONE) {
      printf("Failed to tranform class!");
      return;
    }
  }
  // TODO
}

extern "C" JNIEXPORT void JNICALL Java_Main_doClassTransformation(JNIEnv* env,
                                                                  jclass,
                                                                  jclass target) {
  JavaVM* vm;
  if (env->GetJavaVM(&vm)) {
    printf("Unable to get javaVM!\n");
    return;
  }
  DoClassTransformation(jvmti_env, env, target);
}

// Don't do anything
jint OnLoad(JavaVM* vm,
            char* options,
            void* reserved ATTRIBUTE_UNUSED) {
  jvmtiCapabilities caps;
  RuntimeIsJvm = (strcmp("jvm", options) == 0);
  if (vm->GetEnv(reinterpret_cast<void**>(&jvmti_env), JVMTI_VERSION_1_0)) {
    printf("Unable to get jvmti env!\n");
    return 1;
  }
  if (IsJVM()) {
    jvmti_env->GetPotentialCapabilities(&caps);
    jvmti_env->AddCapabilities(&caps);
    jvmtiEventCallbacks cbs;
    memset(&cbs, 0, sizeof(cbs));
    cbs.ClassFileLoadHook = transformationHook;
    jvmti_env->SetEventCallbacks(&cbs, sizeof(jvmtiEventCallbacks));
  }
  return 0;
}

}  // namespace Test902HelloTransformation
}  // namespace art

