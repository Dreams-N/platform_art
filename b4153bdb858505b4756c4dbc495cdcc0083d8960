Revision: b4153bdb858505b4756c4dbc495cdcc0083d8960
Patch-set: 3
File: compiler/optimizing/bounds_check_elimination.cc

579:0-579:25
Fri Feb 06 15:58:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc81ac4d_d277e46f
Bytes: 35
Add a comment: "Will always throw".

579:0-579:25
Fri Feb 06 19:54:59 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc81ac4d_d277e46f
UUID: bce4f851_a4bacc9d
Bytes: 5
Done.

File: compiler/optimizing/instruction_simplifier.cc

85:34-85:35
Fri Feb 06 15:58:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9c8bb46f_30c5082c
Bytes: 76
... the constant instruction. This helps the bounds check elimination phase.

85:34-85:35
Fri Feb 06 19:54:59 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c8bb46f_30c5082c
UUID: bce4f851_c4b550b2
Bytes: 5
Done.

86:0-86:28
Fri Feb 06 15:58:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc81ac4d_124fac25
Bytes: 55
Haven't we removed the null check on HNewArray already?

86:0-86:28
Fri Feb 06 19:54:59 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc81ac4d_124fac25
UUID: dc08ccdb_da252525
Bytes: 195
We have removed the null check on HNewArray. We are replacing the HArrayLength* possibly with a constant below. The IsNullCheck on line 81 is still needed since the array may not be a HNewArray*.

86:0-86:28
Fri Feb 06 21:55:45 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc08ccdb_da252525
UUID: bc80787a_4100322e
Bytes: 117
Yeah, but then why do you care? You're only interested on HNewArray, which cannot be guarded on a HNullCheck anymore.

File: test/448-checker-bce/src/Main.java

50:0-52:23
Fri Feb 06 16:14:24 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5c5e9cd0_26e15624
Bytes: 679
As Nicolas mentions below, to verify that something occurs a certain number of times, you need to do than number of CHECKs followed by a single CHECK-NOT. Otherwise you're testing that there are "at least N occurrences" rather than "exactly N".

To test for exactly three BoundsChecks:
  // CHECK: BoundsCheck
  // CHECK: BoundsCheck
  // CHECK: BoundsCheck
  // CHECK-NOT: BoundsCheck

Checker will find matches for CHECKs in the given order and then come back and test that CHECK-NOTs don't occur in the given scopes. So CHECK CHECK-NOT CHECK will verify that something doesn't appear between lines that match the surrounding CHECKs.

IM me if I can help clear things out more.

50:0-52:23
Fri Feb 06 19:54:59 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5c5e9cd0_26e15624
UUID: 5ca13c0b_2ea4e7cd
Bytes: 158
Thanks for the explanation. I added // CHECK: ArraySet between the CHECK-NOT like I did for the first method sieve(). This should give more accurate matching.

55:0-57:23
Fri Feb 06 15:58:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc81ac4d_b2c4a014
Bytes: 133
This should be:
CHECK: BoundsCheck
CHECK-NOT: BoundsCheck

Otherwise, more bounds check could be there after your CHECK: BoundsCheck.

55:0-57:23
Fri Feb 06 19:54:59 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc81ac4d_b2c4a014
UUID: 7cbc4032_4f732d7f
Bytes: 161
Good point. That actually caught a bug in my original testcase.
I added some ArraySet in-between my CHECK/CHECK-NOT which should make the matching more accurate.

59:2-59:29
Fri Feb 06 15:58:55 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc81ac4d_12d48cc1
Bytes: 79
Add a comment that this gets inlined by dex. Why not just inlining it yourself?

59:2-59:29
Fri Feb 06 19:54:59 2015 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc81ac4d_12d48cc1
UUID: dc08ccdb_1abddd42
Bytes: 28
Ok I just inlined it myself.

