Revision: 80221968dcaaebe26e26bd89ed5bd021f2d25f60
Patch-set: 4
File: compiler/compiled_method.h

137:17-137:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_bd1e2b8d
Bytes: 74
"Find" is confusing, it completely hides the intent. Maybe "FindInterval"?

137:17-137:21
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_bd1e2b8d
UUID: 43116641_40e3a2cd
Bytes: 170
It behaves like std::map::find.  The only difference is that it is sparse (many of the mappings are implied).
The pair (from,to) is like (key,value), not a range from..to

137:17-137:21
Wed Mar 25 20:31:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_40e3a2cd
UUID: 43116641_a0b6fe68
Bytes: 161
For two consecutive entries (key1,value1), (key2,value2), the first entry is valid on the interval [key1,key2). And you're looking for the start of such a range.

137:17-137:21
Wed Mar 25 20:57:03 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_a0b6fe68
UUID: 23147232_9fca3bc6
Bytes: 516
So FindIntervalStart?  (FindInterval seems to imply it returns a pair)

Or FindLessThenOrEqual / FindLE?  Given that it returns a value such that it->from_ <= from

std::pair<int, bool> Find(uint32_t from)?  That is, make the fact that some entries are implied better hidden.

bool Find(uint32_t from, *int to)

int Find(uint32_t from, int default)

Any variation above with name Remap.

In any case, I do not really mind, so give me a method signature, and I will put it in there :-)

And thanks for the big review!

File: compiler/dex/quick/arm/call_arm.cc

431:21-431:24
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_ac2e8bba
Bytes: 29
Nit: "!= 0u" for consistency.

431:21-431:24
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_ac2e8bba
UUID: 43116641_a0a6feb6
Bytes: 4
Done

595:35-595:36
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_3ea0c56f
Bytes: 20
Shouldn't this be 4?

595:35-595:36
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_3ea0c56f
UUID: 63002af0_c128e67d
Bytes: 4
Done

File: compiler/dex/quick/arm64/int_arm64.cc

1534
Fri Mar 20 17:25:22 2015 +0000
Author: Stuart Monteith <1037216@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_cccadf1f
Bytes: 85
Use "kArm64PointerSize" from instruction_set.h
That is already (indirectly) included.

1534
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_cccadf1f
UUID: 63002af0_41ca964d
Bytes: 4
Done

File: compiler/dex/quick/lazy_debug_frame_opcode_writer.cc

2:17-2:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_dd6e7ff9
Bytes: 4
2015

39:0-41:7
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_7df3f371
Bytes: 165
Bulk copy:

  opcodes_.insert(opcodes_.end(),
                  old_opcodes.begin() + pos,
                  old_opcodes.begin() + advance.pos);
  pos = advance.pos;

39:0-41:7
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_7df3f371
UUID: 43116641_e085160b
Bytes: 4
Done

50:0-52:5
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_7c6e5580
Bytes: 10
Bulk copy.

50:0-52:5
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_7c6e5580
UUID: 63002af0_811bfe73
Bytes: 4
Done

File: compiler/dex/quick/lazy_debug_frame_opcode_writer.h

2:17-2:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_1d6d17ff
Bytes: 4
2015

2:17-2:21
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_1d6d17ff
UUID: 63002af0_c10fc62f
Bytes: 4
Done

30
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_bd7bcbb9
Bytes: 14
Line too long.

30
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_bd7bcbb9
UUID: 63002af0_a10cba3b
Bytes: 4
Done

File: compiler/dex/quick/x86/int_x86.cc

956:9-956:40
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_bd150bf5
Bytes: 47
CFA adjustment should be outside the if, right?

956:9-956:40
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_bd150bf5
UUID: 43116641_002fea87
Bytes: 18
Yes! Well spotted.

971:8-971:40
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_de08c1da
Bytes: 5
ditto

971:8-971:40
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_de08c1da
UUID: 43116641_e02bd677
Bytes: 4
Done

1167:8-1167:39
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_9d124709
Bytes: 5
ditto

1167:8-1167:39
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_9d124709
UUID: 43116641_c028d27d
Bytes: 4
Done

1177:8-1177:39
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_7d41b3f9
Bytes: 5
ditto

1177:8-1177:39
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_7d41b3f9
UUID: 23147232_5f84a3e1
Bytes: 4
Done

1211:8-1211:40
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_3c51fdba
Bytes: 5
ditto

1211:8-1211:40
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_3c51fdba
UUID: 23147232_3f79ef7d
Bytes: 4
Done

1220:8-1220:40
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_1c5639b3
Bytes: 5
ditto

1220:8-1220:40
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_1c5639b3
UUID: 23147232_1f7e2b66
Bytes: 4
Done

File: compiler/dex/quick/x86/target_x86.cc

766:35-766:101
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_dc67a195
Bytes: 70
Can you move this to a local variable just like you did above, please?

766:35-766:101
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_dc67a195
UUID: 43116641_60c5863d
Bytes: 4
Done

1320:6-1320:30
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_bc64ed91
Bytes: 15
Outside the if?

1320:6-1320:30
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_bc64ed91
UUID: 23147232_ff925724
Bytes: 4
Done

1421:6-1421:31
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_9c612982
Bytes: 5
ditto

1421:6-1421:31
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_9c612982
UUID: 63002af0_61eeb2b7
Bytes: 4
Done

File: compiler/dwarf/debug_frame_opcode_writer.h

2:17-2:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_3eb685f0
Bytes: 4
2015

2:17-2:21
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_3eb685f0
UUID: 63002af0_e1a6428a
Bytes: 4
Done

79:20-79:28
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_3c2b3dae
Bytes: 60
reg_mask != 0u (we try to avoid implicit conversion to bool)

79:20-79:28
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_3c2b3dae
UUID: 43116641_c0d692ef
Bytes: 4
Done

80:10-80:22
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_dd579f2b
Bytes: 20
(reg_mask & 1) != 0u

80:10-80:22
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_dd579f2b
UUID: 23147232_5f5263f1
Bytes: 4
Done

89:20-89:28
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_1e462981
Bytes: 14
reg_mask != 0u

89:20-89:28
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_1e462981
UUID: 43116641_a0d39efd
Bytes: 4
Done

90:10-90:22
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_bd54eb27
Bytes: 20
(reg_mask & 1) != 0u

90:10-90:22
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_bd54eb27
UUID: 63002af0_4179767c
Bytes: 4
Done

File: compiler/dwarf/debug_frame_writer.h

2:17-2:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_1d94f740
Bytes: 4
2015

2:17-2:21
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_1d94f740
UUID: 63002af0_6146b214
Bytes: 4
Done

45:37-45:77
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_3c41fd68
Bytes: 111
Are these constants defined? If so, you should use this expression directly instead of the pre-calculated 0x04.

45:37-45:77
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_3c41fd68
UUID: 43116641_20a54e80
Bytes: 27
Sadly they are not defined.

File: compiler/dwarf/debug_line_opcode_writer.h

2:17-2:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_9d0c873c
Bytes: 4
2015

2:17-2:21
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_9d0c873c
UUID: 63002af0_e18f62f8
Bytes: 4
Done

File: compiler/dwarf/debug_line_writer.h

46:7-46:41
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_9c7fe98d
Bytes: 29
What's the clang's rationale?

46:7-46:41
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_9c7fe98d
UUID: 23147232_dfdaf3ea
Bytes: 192
I am not sure.  I have just observed it by doing objdump.
I assume it is to allow DWARF-2 only tools to read it (DWARF is fairly nicely forwards compatible).
Or, it might just be bug in clang.

55
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_fe2edd89
Bytes: 14
Line too long.

55
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_fe2edd89
UUID: 23147232_9fe47ba9
Bytes: 47
Done.  This line is kind of difficult to split.

56:17-56:18
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_9e2599a6
Bytes: 80
Why are we skipping the first one? (It prevents us from using range-based loop.)

56:17-56:18
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_9e2599a6
UUID: 23147232_3fed6f88
Bytes: 253
The opcode 0 is special in DWARF (encodes variable length information).  Therefore it does not have an entry in the header.  We could just remove first element from the array, but I find "int i = 1" nice as it is explicit that we are skipping an opcode.

59:9-59:13
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_5ec5d13c
Bytes: 68
const auto& (or const std::string&, it's not that long to spell out)

59:9-59:13
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_5ec5d13c
UUID: 43116641_00580a12
Bytes: 4
Done

63:9-63:13
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_deb0c1d1
Bytes: 33
const auto& (or const FileEntry&)

63:9-63:13
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_deb0c1d1
UUID: 23147232_1ff2ab6a
Bytes: 4
Done

File: compiler/dwarf/register.h

2:17-2:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_bdd62bee
Bytes: 4
2015

2:17-2:21
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_bdd62bee
UUID: 63002af0_214c2a4e
Bytes: 4
Done

26:8-26:13
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_5c203199
Bytes: 153
const (or constexpr and make the constructor and the static functions constexpr as well; the only problem is with X86_64Core - until we upgrade to C++14)

26:8-26:13
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_5c203199
UUID: 23147232_bf005fb9
Bytes: 81
Done - made const.  I assume there is no benefit in making this constexpr anyway?

File: compiler/dwarf/writer.h

2:17-2:21
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_9dd367fe
Bytes: 4
2015

2:17-2:21
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_9dd367fe
UUID: 63002af0_c13a2696
Bytes: 4
Done

141:0-143:5
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_3ee325cf
Bytes: 162
Don't insert each byte on its own:

  size_t extra = data_->size() & (alignment - 1);
  if (extra != 0) {
    data->insert(data->end(), alignment - extra, 0);
  }

141:0-143:5
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_3ee325cf
UUID: 63002af0_81cade1c
Bytes: 4
Done

File: compiler/elf_writer_quick.cc

183
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_9cb6c969
Bytes: 12
&& reg !=  7

183
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_9cb6c969
UUID: 23147232_ffaff70c
Bytes: 23
Done.  2 bugs actually.

445:19-445:20
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_1d7d1731
Bytes: 6
4 or 8

445:19-445:20
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_1d7d1731
UUID: 43116641_605226f2
Bytes: 4
Done

459:26-459:31
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_bd8bcbb3
Bytes: 25
static_cast<uint32_t>(-1)

459:26-459:31
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_bd8bcbb3
UUID: 43116641_4047222e
Bytes: 4
Done

471
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_dc1201dc
Bytes: 259
else nothing? Does the

  if (dbg_line != nullptr) {
    // DW_AT_stmt_list DW_FORM_sec_offset.
    PushByte(dbg_abbrev, dwarf::DW_AT_stmt_list);
    PushByte(dbg_abbrev, dwarf::DW_FORM_sec_offset);
  }

tell the debugger if the line number offset is present?

471
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_dc1201dc
UUID: 23147232_df08b3da
Bytes: 13
Yes, correct.

543:31-543:45
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_81e3fe1e
Bytes: 40
std::string::npos? It's a static member.

543:31-543:45
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_81e3fe1e
UUID: 63002af0_e1dac2ea
Bytes: 4
Done

547:33-547:62
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_61bfd2f4
Bytes: 102
In ART we try to avoid the subscript operator on map/unordered_map. Use find() and compare with end().

547:33-547:62
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_61bfd2f4
UUID: 63002af0_611d921e
Bytes: 4
Done

549:12-549:59
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_fff6d7dc
Bytes: 47
Use insert()/emplace() to insert the new entry.

549:12-549:59
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_fff6d7dc
UUID: 43116641_a0fdde36
Bytes: 4
Done

553
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_20c9cea6
Bytes: 87
else nothing? Are we not going to record the directory from the file name (if present)?

553
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_20c9cea6
UUID: 43116641_a0371eae
Bytes: 195
Else the file name stays in its original form - which might by just filename, relative path or absolute path.
We are really just passing along the file name from the Java compiler to DWARF as is.

556:26-556:46
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_9d47e7a8
Bytes: 42
Avoid subscript operator on unordered_map.

556:26-556:46
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_9d47e7a8
UUID: 43116641_80189a30
Bytes: 4
Done

558:10-558:43
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_80bada02
Bytes: 18
insert()/emplace()

558:10-558:43
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_80bada02
UUID: 43116641_601d861e
Bytes: 4
Done

640:8-640:20
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_5f36e319
Bytes: 12
thumb_offset

640:8-640:20
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_5f36e319
UUID: 43116641_80cada1c
Bytes: 4
Done

File: compiler/optimizing/code_generator_arm.cc

541:0-543:35
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_dcb6813c
Bytes: 19
IncreaseFrameSize()

541:0-543:35
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_dcb6813c
UUID: 43116641_c08b32b3
Bytes: 166
IncreaseFrameSize() tends to have CHECK_ALIGNED(adjust, kStackAlignment) in it.  I am worried the intermediate adjustments in GenerateFrameEntry might not satisfy it.

552:0-554:36
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_1edf498f
Bytes: 19
DecreaseFrameSize()

552:0-554:36
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_1edf498f
UUID: 63002af0_61735269
Bytes: 5
ditto

File: compiler/optimizing/code_generator_x86.cc

493:0-495:35
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_1c83d951
Bytes: 19
IncreaseFrameSize()

493:0-495:35
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_1c83d951
UUID: 23147232_5faa63fa
Bytes: 5
ditto

504:0-506:36
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_7da65311
Bytes: 19
DecreaseFrameSize()

504:0-506:36
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_7da65311
UUID: 63002af0_41785641
Bytes: 5
ditto

File: compiler/optimizing/code_generator_x86_64.cc

504:0-506:35
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_1db51732
Bytes: 19
IncreaseFrameSize()

504:0-506:35
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_1db51732
UUID: 23147232_3f9fafe0
Bytes: 5
ditto

535:0-537:36
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_bec3b5a4
Bytes: 19
DecreaseFrameSize()

535:0-537:36
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_bec3b5a4
UUID: 63002af0_217d4a31
Bytes: 5
ditto

File: compiler/utils/arm/assembler_arm.cc

390:25-390:30
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_be1f35e2
Bytes: 122
I find at() rather ugly. Just make this a range-based loop:

  for (const ManagerRegister& reg : callee_save_regs) { ... }

390:25-390:30
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_be1f35e2
UUID: 23147232_ff9817f5
Bytes: 4
Done

442
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_bce62d58
Bytes: 16
range-based loop

442
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_bce62d58
UUID: 43116641_80bc1a51
Bytes: 4
Done

File: compiler/utils/arm64/assembler_arm64.cc

665
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_fcc385b5
Bytes: 9
constexpr

665
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_fcc385b5
UUID: 63002af0_c18b46b3
Bytes: 4
Done

666:25-666:41
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 23147232_9cca49c6
Bytes: 11
arraysize()

666:25-666:41
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 23147232_9cca49c6
UUID: 43116641_40c602eb
Bytes: 4
Done

728
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_de1201dc
Bytes: 9
constexpr

728
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_de1201dc
UUID: 23147232_bf929fd1
Bytes: 4
Done

729:25-729:41
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43116641_9d1c87ee
Bytes: 11
arraysize()

729:25-729:41
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 43116641_9d1c87ee
UUID: 23147232_9f8fdba7
Bytes: 4
Done

File: compiler/utils/assembler.h

358:65-358:76
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_7ed08d80
Bytes: 10
explicitly

358:65-358:76
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_7ed08d80
UUID: 23147232_bfb97f5b
Bytes: 4
Done

376:0-376:1
Wed Mar 25 15:55:12 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63002af0_5ed5d16e
Bytes: 20
Bogus space, remove.

376:0-376:1
Wed Mar 25 20:27:15 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63002af0_5ed5d16e
UUID: 23147232_9fb6bb69
Bytes: 4
Done

