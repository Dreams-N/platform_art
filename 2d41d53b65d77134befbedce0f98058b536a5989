Revision: 2d41d53b65d77134befbedce0f98058b536a5989
Patch-set: 6
File: compiler/optimizing/induction_var_analysis.cc

48
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a40a365b_aff21962
Bytes: 103
nit: wouldn't expect an "IsXXX" named function to have any side-effects, perhaps "MaybeGetInt" instead?

48
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a40a365b_aff21962
UUID: c4072a51_19328fbf
Bytes: 102
renamed into IsIntAndGet()
(it takes away some of the conciseness of the code, but since you asked :-)

54
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e486eed4_80b3cb43
Bytes: 25
Why not also handle long?

54
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e486eed4_80b3cb43
UUID: a40a365b_eff9c1ef
Bytes: 13
Okay then :-)

78:20-78:34
Wed Sep 02 18:04:49 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 247566b9_530cc4b6
Bytes: 71
Pointer comparison? Please avoid, it will cause non deterministic runs.

78:20-78:34
Wed Sep 02 18:06:49 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 247566b9_530cc4b6
UUID: 6492fe15_72245ef2
Bytes: 155
Well, ideally I would like to have a hash map, and not keep any order. Do we have any plans to support these with the Arena wrapper. E.g. ArenaSafeHashMap?

78:20-78:34
Wed Sep 02 18:08:32 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_72245ef2
UUID: 84c53226_2e0be79d
Bytes: 104
Why ideally?

We really want to have the order be the same across runs. It makes debugging much simpler.

78:20-78:34
Wed Sep 02 18:11:58 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84c53226_2e0be79d
UUID: 84f1b2a4_0e888be8
Bytes: 387
Well, this is a mapping of instructions to induction information. There is no point in keeping these ordered at all and, in fact, it adds runtime (O(log n) vz O(1) per insertion).

Can you enlighten me on: how do you use the order during debugging, and, what do you suggest I use for comparisons here then (I could order on GetId(), but then we are more or less back where I started)....

78:20-78:34
Wed Sep 02 18:26:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84f1b2a4_0e888be8
UUID: 84f1b2a4_0e0b6bef
Bytes: 166
Also, e.g. graph visualizer code (one that uses similar map) does exactly the same:

   instruction_intervals_(std::less<const HInstruction*>(), allocator->Adapter())

78:20-78:34
Wed Sep 02 20:00:40 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84f1b2a4_0e0b6bef
UUID: 84529221_d4e07e00
Bytes: 343
One more comment on this after talking with Andreas what you may have meant. Note that nothing in my code relies on the order of the map, I just do lookup/inserts, never iteration in order. So the only non-determinism may be in how the data appears in memory, not something that should matter much, unless you are a very hard core debugger :-)

78:20-78:34
Thu Sep 03 13:15:48 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84529221_d4e07e00
UUID: a455d63a_f79880f8
Bytes: 234
Rest assured, I'm not :) But by experience, those little things tend to matter, like one run you're processing two instructions in one order, and the other run it's a different order. We can't assume our algorithms are, eg, reflexive.

267:30-267:39
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0484e2ca_a23293bd
Bytes: 12
Why size -1?

267:30-267:39
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0484e2ca_a23293bd
UUID: 8497f201_687f8ca7
Bytes: 17
See comment above

274:21-274:26
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84f1b2a4_cec323be
Bytes: 7
Why =2?

274:30-274:36
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a40a365b_8fef557a
Bytes: 11
Why = size?

274:30-274:36
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a40a365b_8fef557a
UUID: 84529221_741e6aa1
Bytes: 36
We do down now. Added more comments.

286
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 84529221_3205a5d7
Bytes: 103
Not sure what I understand what this is supposed to be doing, would it make sense to add more comments?

286
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 84529221_3205a5d7
UUID: 8497f201_0874c8c6
Bytes: 32
Okay, more comments, better name

309
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64ecbece_50d51220
Bytes: 161
nit: less indentation on the whole function if we return nullptr right away when either a or b is null (since it looks like none of the other code falls-through)

309
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64ecbece_50d51220
UUID: c4072a51_593c1792
Bytes: 123
We talked on this earlier

I like the

if() {

}
return fail value

pattern, unless it really really gives bad indentation.

341
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0484e2ca_2245230d
Bytes: 7
see 309

341
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0484e2ca_2245230d
UUID: 644d9e85_4e076259
Bytes: 4
Done

358
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0484e2ca_a2805381
Bytes: 283
Not sure if this is right?  According to JLS bit shifting should use 0x1f mask , so the original constant value range shouldn't matter because once its masked with 0x1f it will always be in range of [0,31]

See JLS 15.19 or this StackOverflow post
http://stackoverflow.com/a/10516830

358
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0484e2ca_a2805381
UUID: e486eed4_e33c21f8
Bytes: 187
Ah, you know that in C this was a bit portability issue. I once debugged someone's chess engine that run fine on x86 but not on ARM. 

Even if you are right, however, does it matter much?

File: compiler/optimizing/induction_var_analysis.h

51
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64ecbece_6d8b1556
Bytes: 36
What happened to None and Monotonic?

51
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64ecbece_6d8b1556
UUID: 0484e2ca_bde158ba
Bytes: 282
I don't need None anymore.

I still plan to implement Monotonic at one point, but maybe only if we need it. I don't want to get carried away (too much) getting it academically sound without having direct applications in our code.

(but expect it at some point, I cannot help myself)

103
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a40a365b_2fdf49cf
Bytes: 54
Does this need any DCHECKs for null a/b or is null ok?

103
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a40a365b_2fdf49cf
UUID: 64ecbece_b044363b
Bytes: 4
Done

107
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6492fe15_52db6206
Bytes: 53
Does this need any DCHECKs for null f, or is null ok?

107
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6492fe15_52db6206
UUID: 84529221_34f112d0
Bytes: 4
Done

111
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a40a365b_6fe95178
Bytes: 55
Does this need any DCHECKs for null a/b, or is null ok?

111
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a40a365b_6fe95178
UUID: 64ecbece_90413a2b
Bytes: 4
Done

139
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a40a365b_4fee0d82
Bytes: 21
What does first mean?

139
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a40a365b_4fee0d82
UUID: 6492fe15_d26c528e
Bytes: 4
Done

140
Wed Sep 02 19:00:00 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0484e2ca_c2131721
Bytes: 24
What does a period mean?

140
Wed Sep 02 20:06:52 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0484e2ca_c2131721
UUID: 84529221_d4f75ec0
Bytes: 36
Renamed the method to be more clear.

150:75-150:76
Wed Sep 02 18:04:49 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e4d42ed5_74ec66ca
Bytes: 6
, -> .

150:75-150:76
Wed Sep 02 18:06:49 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4d42ed5_74ec66ca
UUID: 64ecbece_eda0a561
Bytes: 4
Done

