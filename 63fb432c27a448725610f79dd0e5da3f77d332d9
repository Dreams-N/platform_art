Revision: 63fb432c27a448725610f79dd0e5da3f77d332d9
Patch-set: 2
File: compiler/compiled_method.cc

65
Tue Feb 04 22:23:09 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d25422b3_86fb6ce7
Bytes: 20
Ignore return value?

73
Tue Feb 04 22:23:09 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d25422b3_a600e81b
Bytes: 20
Ignore return value?

File: compiler/image_writer.cc

716:15-716:26
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_bbd1079c
Bytes: 47
s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier

726:11-726:22
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_e159267d
Bytes: 47
s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier

File: compiler/jni/jni_compiler_test.cc

215
Tue Feb 04 22:23:09 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d25422b3_26c8788f
Bytes: 11
soa.Self()?

File: compiler/oat_test.cc

50:6-50:61
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_61463697
Bytes: 79
Might be worth to assert we have either quick code or portable code, not both ?

File: compiler/oat_writer.cc

488:6-488:61
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_7b9b7fea
Bytes: 32
Could you add a TODO or remove ?

File: compiler/utils/dedupe_set.h

65
Tue Feb 04 22:23:09 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 72e9b62a_c06d3e1c
Bytes: 22
I prefer StringPrintf.

File: disassembler/disassembler_arm.cc

19:9-19:21
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_4027b0c4
Bytes: 18
Include with < > ?

File: runtime/arch/arm/context_arm.h

38:84-38:97
Thu Jan 30 17:08:31 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f2b4c6fd_9993ec90
Bytes: 119
Just out of curiosity, what is the lock needed for? Why is there a single mutator lock used everywhere for the runtime?

38:84-38:97
Thu Jan 30 17:29:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f2b4c6fd_9993ec90
UUID: 92870a29_15dd17fa
Bytes: 611
Its a shared/exclusive lock (reader/writer) with mutators sharing the heap and the GC taking exclusive access during GC pauses. This arrangement avoids the GC busy waiting for mutators to suspend, a source of increased pause time. The lock forms part of the global order (locks.h) where the only thing that matters is we have an order so that we avoid deadlocks. Requiring via static analysis (annotalysis) that the mutator lock is held means that non-runnable threads aren't mutating the heap, which would break the GC. Having a share of the mutator lock is a proxy for saying the accessing thread is runnable.

File: runtime/arch/x86_64/asm_support_x86_64.S

109
Thu Jan 30 00:30:36 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f2b4c6fd_764710da
Bytes: 10
pushq & 8?

109
Thu Jan 30 02:05:10 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f2b4c6fd_764710da
UUID: 92870a29_1e87f98f
Bytes: 17
Agreed with Mark.

109
Thu Jan 30 03:40:14 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 92870a29_1e87f98f
UUID: f2b4c6fd_c3f1854e
Bytes: 112
Agreed. The macros aren't currently being used, but they will when I have a working set of library dependencies.

115
Thu Jan 30 02:05:10 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f2b4c6fd_e3e4814d
Bytes: 23
pop should also be popq

File: runtime/arch/x86_64/asm_support_x86_64.h

23
Thu Jan 30 11:22:35 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_8416e866
Bytes: 32
Offsets are incorrect for 64-bit

File: runtime/arch/x86_64/context_x86_64.cc

56:20-56:36
Thu Jan 30 02:48:12 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 52811216_5c9179c8
Bytes: 104
I don't get why rbx is being "smashed". Anyway, rsi, rdi, and r8-r11 are not kept across function calls.

56:20-56:36
Thu Jan 30 03:39:15 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 52811216_5c9179c8
UUID: 52811216_10a9a56f
Bytes: 395
This code is used when quick does a long jump to deliver an exception. In the event that the handler is an upcall into managed code we want to ensure the "returned value" (we're delivering an exception so there isn't a returned value) is 0. It would suffice to have RAX be zero, on 32bit we needed RAX and RDX. We know no temporary/argument registers are live when doing the exception long jump.

File: runtime/arch/x86_64/quick_entrypoints_x86_64.S

224
Thu Jan 30 11:22:35 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_c4fbd0e6
Bytes: 107
Missed declaration of some stubs (e.g. GENERATE_ALLOC_ENTRYPOINTS_ALLOC_ARRAY_RESOLVED), cause linker error

File: runtime/arch/x86_64/registers_x86_64.cc

25
Thu Jan 30 00:30:36 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f2b4c6fd_b6ab5824
Bytes: 6
"rax"?

File: runtime/arch/x86_64/thread_x86_64.cc

81
Thu Jan 30 11:22:35 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_a08d546d
Bytes: 53
LDT entry related code is non functional in host mode

File: runtime/debugger.cc

1084:4-1084:29
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_1b50fb47
Bytes: 88
Add a TODO to fix thread safety analysis later. I guess it's due to the template, right?

File: runtime/entrypoints/entrypoint_utils.h

722:2-722:36
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_006648fe
Bytes: 66
Would be nice to track this in buganizer. Do we have a bug opened?

File: runtime/gc/accounting/mod_union_table.cc

85:15-85:26
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_240ddc4f
Bytes: 47
s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier

File: runtime/gc/collector/semi_space.cc

606:47-606:58
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_e4837440
Bytes: 47
s/SetFieldPtr/SetFieldObjectWithoutWriteBarrier

File: runtime/hprof/hprof.cc

249:17-249:35
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_5eec3131
Bytes: 105
Can we create a method/macro with this code and use it so we do not duplicate code at multiple locations?

532:4-532:66
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_249a7ca3
Bytes: 20
Use a foreach loop ?

558:4-558:66
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_1ef6a901
Bytes: 20
Use a foreach loop ?

File: runtime/mirror/array.h

124:4-125:38
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_a4644cf3
Bytes: 130
Would be nice to use GetRawData(sizeof(T), 0) to avoid duplicating code. I missed this one when refactoring array for interpreter.

129:4-130:38
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_3e104569
Bytes: 16
Same than above.

File: runtime/mirror/art_method.cc

182:0-182:21
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_de2de1aa
Bytes: 16
Why this change?

276:10-276:31
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_4048d048
Bytes: 283
This probably will slow down invokes a bit going through this path since we need to do this test each time (plus the extra entrypoint). Wondering what's the impact here, especially for reflection. Interpreter could be impacted too because transition to compiled code take this route.

298:76-298:77
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_00e1a8ed
Bytes: 24
Remove extra semi-colon.

298:6-298:76
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_5e1af185
Bytes: 113
I'm pretty sure I've already seen this log but I don't remember where. Is this happening only during compilation?

File: runtime/mirror/art_method.h

427
Thu Jan 30 19:01:10 2014 +0000
Author: Stuart Monteith <1037216@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_fe39bdb9
Bytes: 60
Are these uint64_t because of cross-compilation on the host?

427
Thu Jan 30 19:28:51 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d2b1820e_fe39bdb9
UUID: 32d9fe6f_ce17632e
Bytes: 181
they're uint64_t so they agree with the Java long. They need to be longs so they can hold pointers. We expect all of this to get condensed but we want to get 64bit functional first.

430:11-430:32
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_20dca434
Bytes: 41
Nice renaming! I prefer this one I think.

File: runtime/mirror/dex_cache.h

153:2-153:10
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_24c83c8f
Bytes: 19
Why not uintptr_t ?

File: runtime/mirror/object.h

228
Thu Jan 30 11:22:35 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 929c6a85_4410e069
Bytes: 115
This field contains reference to monitor for fat locks. Do you think it could be reasonable to extend it to 64-bit?

File: runtime/mirror/object_array-inl.h

58:9-58:54
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_be49f582
Bytes: 59
Why changing this line? GetWithoutChecks does this already.

76:4-76:54
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_40f690ab
Bytes: 37
Same than above for SetWithoutChecks.

107:9-107:12
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_20f384bb
Bytes: 7
int32_t

161:2-161:5
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2b1820e_7e448d65
Bytes: 7
int32_t

File: runtime/mirror/string.h

139
Thu Jan 30 11:22:35 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_e0835c40
Bytes: 56
Shouldn't we change private members of StringClass also?

File: runtime/native/java_lang_System.cc

76:6-76:14
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_60c86c62
Bytes: 95
Why multiple UNLIKELYs rather than only one? Is the generated code different with this pattern?

File: runtime/profiler.cc

443:10-443:29
Thu Jan 30 15:18:12 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 12a87aa1_e0a23c91
Bytes: 83
As noticed earlier, we should move this to a separate method/macro and use it here.

443
Tue Feb 04 22:23:09 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 12a87aa1_e0a23c91
UUID: b2dfae7e_45277c96
Bytes: 22
PointerToLowMemUInt32?

File: runtime/stack.cc

278
Thu Jan 30 04:10:52 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 52811216_d0bb8da2
Bytes: 130
Is word the right type here?  I can't easily see the definition.  Also, does it handle compiler temps (not currently used, but...)

278
Thu Jan 30 04:25:42 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 52811216_d0bb8da2
UUID: 52811216_5025dd37
Bytes: 158
word is defined to be the size of a pointer, I can imagine it'd be confusing with Intel's use of word meaning 16bit. I'll try to think of a more neutral term.

278
Thu Jan 30 17:08:31 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 52811216_5025dd37
UUID: 52811216_33e153ee
Bytes: 131
Yeah, this terminology also confused me when I started looking at quick. Then I realized you use "word" to refer to "doubleword" :)

File: runtime/trace.cc

138
Tue Feb 04 22:23:09 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b2dfae7e_e5db3061
Bytes: 26
Use PointerToLowMemUInt32?

File: runtime/utils.h

174
Thu Jan 30 04:10:52 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 92870a29_b290e1f4
Bytes: 160
This seems weird.  Either the DCHECK will fail, or the masking isn't needed.

Is the mask really needed, since the caller will only reference a uint32_t result?

174
Thu Jan 30 04:24:28 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 92870a29_b290e1f4
UUID: 52811216_10f44568
Bytes: 161
We have code that assumes a pointer as a uint32_t will be in the low 4GB, this is a cast & mask with a test to make sure the pointer was allocated in low memory.

