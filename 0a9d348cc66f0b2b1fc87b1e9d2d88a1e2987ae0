Revision: 0a9d348cc66f0b2b1fc87b1e9d2d88a1e2987ae0
Patch-set: 1
File: compiler/driver/compiler_driver.cc

1175:0-1175:89
Tue Jan 21 16:41:14 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3229fe85_029b7aea
Bytes: 313
I don't follow the "re-read" comment. In all of the cases you are searching the class linker for dex caches from dex files, whereas in the original code this was only done if the reference was across dex files. The original reason to do this was driven by profiling the code, something I suspect wasn't done here.

1175:0-1175:89
Tue Jan 21 16:48:24 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3229fe85_029b7aea
UUID: 728d36f2_2398d465
Bytes: 377
In the original code, Compute{Field,Method}ReferencedFromCompilingMethod() performs the first FindDexCache() and then, ComputeCompilingMethodsClass() may do a second FindDexCache() for the same DexFile since the caller initialized the dex_cache from the resolved field/method. With this change, we only do the FindDexCache() once and use that dex_cache as many times as needed.

1177:0-1177:77
Tue Jan 21 16:12:34 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3229fe85_a2ab86ff
Bytes: 82
Don't do this. Create the SirtRefs in the scoped limited cases they are necessary.

1177:0-1177:77
Tue Jan 21 16:27:26 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3229fe85_a2ab86ff
UUID: 728d36f2_e3fbcc93
Bytes: 49
Both dex_cache and class_loader are reused below.

1182:0-1182:56
Tue Jan 21 16:12:34 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 723ff6b5_eae96b92
Bytes: 159
variable used once, just use target_method->dex_method_index at its use. Note the term method_idx is overloaded and so this variable name introduces ambiguity.

1182:0-1182:56
Tue Jan 21 16:27:26 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 723ff6b5_eae96b92
UUID: 32973e04_4135d457
Bytes: 9
Shall do.

