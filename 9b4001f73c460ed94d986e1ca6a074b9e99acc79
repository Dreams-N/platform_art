Revision: 9b4001f73c460ed94d986e1ca6a074b9e99acc79
Patch-set: 1
File: runtime/gc/system_weak.h

31:15-31:34
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_09f88ddc
Bytes: 119
Since it's a bit wordy, we could try to shorten the names like Allow, Disallow, Broadcast, Sweep and Wait, for example?

31:15-31:34
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_09f88ddc
UUID: 8b9bba7b_32a1509b
Bytes: 4
Done

72:8-72:28
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_69c7810b
Bytes: 38
This has to be public for annotations?

72:8-72:28
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_69c7810b
UUID: 8b9bba7b_129c4c5e
Bytes: 267
Sorry, I can move this back to protected, it was here from when I tried to move AllocationRecord to use it. At least for the current implementation protected is good enough.

It has to be available to do things like:

 MutexLock mu(...)
 WaitForAllowance()
 Access...

File: runtime/gc/system_weak_test.cc

68:7-68:17
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_49cc452e
Bytes: 51
Can this be part of the SystemWeakHolder interface?

68:7-68:17
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_49cc452e
UUID: 8b9bba7b_72ed98b5
Bytes: 294
The SystemWeakHolder itself doesn't declare how the weaks are held (because you could use a single element, a list, a map ...). I didn't find a way to let the Holder do anything non-trivial before having to forward to the actual implementation, so it seemed easy just to punt that completely...

69
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_49e3a599
Bytes: 118
May not matter for this test, but do we want to lock allow_disallow_lock_ around this function like the existing ones?

69
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_49e3a599
UUID: 8b9bba7b_92e11cc2
Bytes: 117
OK, that could be something that a generic SweepWeaks does. Or the Runtime call could do it (if the Mutex is public).

87:24-87:43
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_e92251b1
Bytes: 593
Regarding the synchronization around AddSystemWeakHolder():

- I think a suspend-all isn't sufficient and it must be a ScopedGCCriticalSection because we could suspend all threads in the middle of a GC, which would break/race with GC's system weak handling. This is sort of like adding an app image space.

- Do we want to support adding a new holder dynamically? Or, is it enough to (statically) add each to the runtime (that is, add at startup) as a need arises? An option is to leave some holders added at startup but empty when not in use. This would work around the synchronization issue.

87:24-87:43
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_e92251b1
UUID: 8b9bba7b_521b34dd
Bytes: 273
* Is there some annotation that supports this safely? Or is it enough (and safe) to add the Scoped... in AddSystemWeakHolder?

* It has to be dynamic, as plugins may be attached late. So synchronization is an issue - I had just hoped holding the lock exclusively is enough.

87:24-87:43
Fri Sep 09 23:47:32 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b9bba7b_521b34dd
UUID: 8b9bba7b_26466e09
Bytes: 179
No annotation that I know of. It should be safe to use ScopedGCCriticalSection in AddSystemWeakHolder. The caller should be aware that it shouldn't call it too often or regularly.

102:0-104:35
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_69994124
Bytes: 211
Does this fail with the CC build because allow/disallow are called only if the read barrier is disabled.

Also fail with SS? I think the SS collector doesn't call these at all as it's not a concurrent collector?

102:0-104:35
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_69994124
UUID: 8b9bba7b_32fdd056
Bytes: 226
I haven't tried, yet.

I assume allow should work for CC, as I also count the broadcast. disallow is an issue, yeah. I'll have to make them conditional.

Once the overall structure is satisfactory, I'll test with CC and fix...

102:0-104:35
Fri Sep 09 23:47:32 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b9bba7b_32fdd056
UUID: 8b9bba7b_66f316d1
Bytes: 25
Please test with SS, too.

107:25-107:42
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_897f5db2
Bytes: 13
Use IsNull()?

107:25-107:42
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_897f5db2
UUID: 8b9bba7b_52f25485
Bytes: 4
Done

126:0-129:35
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_c98955d3
Bytes: 5
Same.

132:25-132:42
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_29b62993
Bytes: 9
IsNull()?

132:25-132:42
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_29b62993
UUID: 8b9bba7b_d2600434
Bytes: 4
Done

134
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_292c69a4
Bytes: 220
If it's manageable, it might make sense to add a test that exercises WaitForAllowance. Maybe if it's possible to spawn a thread, one thread invoking GC in a loop and another accessing the weak in a loop? Or leave a TODO?

134
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_292c69a4
UUID: 8b9bba7b_f236e8ea
Bytes: 69
Yeah, it's kinda a TODO right now. Thinking of how to easily do this.

File: runtime/runtime.cc

1717:0-1721:3
Fri Sep 09 18:54:46 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_497d6573
Bytes: 246
I think we could try to convert the above four to the SystemWeakHolder style later, but it's also an option to leave them as is (at least for now), because some of them have some custom behavior, and focus here on the other/extended system weaks?

1717:0-1721:3
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_497d6573
UUID: 8b9bba7b_12e9ace4
Bytes: 66
That was a goal, but turned out to be more complicated. Follow-up.

File: runtime/runtime.h

891:45-891:58
Fri Sep 09 17:33:50 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ab0ebe7a_e64d6090
Bytes: 21
system_weak_holders_?

891:45-891:58
Fri Sep 09 21:08:32 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ab0ebe7a_e64d6090
UUID: 8b9bba7b_12a1ac03
Bytes: 4
Done

