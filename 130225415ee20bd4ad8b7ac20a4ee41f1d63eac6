Revision: 130225415ee20bd4ad8b7ac20a4ee41f1d63eac6
Patch-set: 4
File: compiler/optimizing/code_generator_arm.cc

3215:19-3215:65
Tue Dec 08 15:36:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 00622024_5971a3e5
Bytes: 49
CodeGenerator::GetInt32ValueOf(rhs.GetConstant())

3215:19-3215:65
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 00622024_5971a3e5
UUID: 856aa2d7_b78ae8cb
Bytes: 4
Done

File: compiler/optimizing/instruction_simplifier.cc

207
Thu Dec 10 02:59:40 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a5596647_11a86eb3
Bytes: 116
Shouldn't we let DCE remove these? The code in this file seems to alternate between deleting and letting DCE delete.

207
Thu Dec 10 10:14:37 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a5596647_11a86eb3
UUID: c539fad1_71d458df
Bytes: 299
When I reviewed it I didn't see places where this patch didn't delete what it could. For now transformations in the simplifier would remove what they could. That's an interesting question though. I don't have a strong opinion on this. It would be nice to have a general rule to follow. Any opinions?

207
Thu Dec 10 10:22:48 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c539fad1_71d458df
UUID: 457c2aa4_b55d0055
Bytes: 645
Some thoughts on this
- By leaving the work to DCE, transformations may be lazy and wrongly assume that an IR will be removed, potentially leaving extra IRs in the graph or applying transformations when they should not.
- If we leave the work to DCE, then it may be harder to check an IR has been removed with checker, as it must be checked after other passes have run. (It would be a little annoying to have an additional checker section, but it should be fine.)
- So maybe a good rule would be: if an IR should be removed as part of the transformation, do it manually (forcing manual checks). If it is optional, as it is here, leave it to DCE.

File: compiler/optimizing/nodes.h

4170
Tue Dec 08 15:36:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 00622024_f9886f08
Bytes: 14
Line too long.

4170
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 00622024_f9886f08
UUID: 856aa2d7_57590c3c
Bytes: 4
Done

4182:0-4185:3
Tue Dec 08 15:36:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a0d6b40a_63f93ca8
Bytes: 318
You may have missed my comment in PS1/nodes_arm64.h. Updated version:

If you don't reject this here, you should allow it everywhere. That includes InstructionCodeGeneratorARM::HandleLongRotate() where you're now using GetInt32ValueOf() which cannot handle long constants, so you would actually need GetInt64ValueOf().

4182:0-4185:3
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a0d6b40a_63f93ca8
UUID: 457c2aa4_f563781e
Bytes: 84
Fixed in HandleLongRotate. If you'd prefer we reject this I can return nullptr here.

File: test/541-checker-instruction-simplifier-rotate/src/Main.java

45:43-45:71
Tue Dec 08 15:36:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c001e83e_d41e1238
Bytes: 100
For the CHECK-NOTs, I would go without the intrinsic specification. We don't expect any invoke here.

45:43-45:71
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c001e83e_d41e1238
UUID: a054f4e4_d3516615
Bytes: 4
Done

190:41-190:44
Tue Dec 08 15:36:16 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 00622024_d985b3ee
Bytes: 12
Indentation.

190:41-190:44
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 00622024_d985b3ee
UUID: 00430035_8b716dec
Bytes: 4
Done

File: test/542-bitfield-rotates/src/Main.java

0
Thu Dec 10 04:13:08 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 253496db_c0bc4e86
Bytes: 245
I'm implementing the x86 version of these, and I notice that they all get folded at compile time, and don't test the runtime cases at all.  The resulting code just calls assertXXXEquals(x, x), which is nice, but doesn't test the code generation.

0
Thu Dec 10 10:13:53 2015 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 253496db_c0bc4e86
UUID: 856aa2d7_775e9027
Bytes: 126
True. These are more boundary cases for the folding. 541 tests the codegen.

What are you doing for an "x86 version" of these?

