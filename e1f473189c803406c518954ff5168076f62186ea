Revision: e1f473189c803406c518954ff5168076f62186ea
Patch-set: 3
File: compiler/optimizing/code_generator_arm.cc

2741:45-2741:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_35133298
Bytes: 144
I'd remove the notion of Quick here. It's just an entry point. The fact that it's being called quick is because we had portable entrypoints too.

2741:45-2741:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_35133298
UUID: fe8836a6_5f872b95
Bytes: 4
Done

2762:45-2762:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_fc5b5dc9
Bytes: 5
ditto

2762:45-2762:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_fc5b5dc9
UUID: 1e86ea96_c066fea1
Bytes: 4
Done

3018:0-3020:53
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_d5f74ecc
Bytes: 41
Isn't that just for the negation of null?

3018:0-3020:53
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_d5f74ecc
UUID: fe8836a6_9f0d33c4
Bytes: 4
Done

3479:0-3480:55
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_9501c63a
Bytes: 76
I don't see the use of this in the codegen implementation below (line 3572).

3479:0-3480:55
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_9501c63a
UUID: fe8836a6_5f2c8b23
Bytes: 4
Done

3496:0-3497:55
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_9c5829cf
Bytes: 91
ditto. It looks like this is just for the 'null' case, where we don't need a write barrier.

3496:0-3497:55
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_9c5829cf
UUID: 5e7ce256_420032be
Bytes: 4
Done

File: compiler/optimizing/code_generator_arm64.cc

1286:0-1288:75
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9ecf3a47_152716ef
Bytes: 87
You can 'Release' registers. Maybe that makes it easier to read than a block + comment?

1286:0-1288:75
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9ecf3a47_152716ef
UUID: 1e86ea96_e044e2ee
Bytes: 4
Done

2591:45-2591:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_1cbad95e
Bytes: 12
ditto: drop?

2591:45-2591:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_1cbad95e
UUID: 3e7f2e4e_214b2edc
Bytes: 4
Done

2616:45-2616:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_ac934364
Bytes: 5
ditto

2616:45-2616:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_ac934364
UUID: 5e7ce256_e2e86676
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.cc

2979:45-2979:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_3cbf954f
Bytes: 5
ditto

2979:45-2979:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_3cbf954f
UUID: 5e7ce256_02ee2a7f
Bytes: 4
Done

3001:45-3001:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_dca30136
Bytes: 5
ditto

3001:45-3001:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_dca30136
UUID: fe8836a6_3f48a7dc
Bytes: 4
Done

3419:0-3422:3
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_fca03d2b
Bytes: 31
Same comment for the null case.

3419:0-3422:3
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_fca03d2b
UUID: 1e86ea96_20a40a3e
Bytes: 4
Done

3763:0-3763:55
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_ec9d4b6f
Bytes: 7
unused?

3763:0-3763:55
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_ec9d4b6f
UUID: fe8836a6_5f456bc3
Bytes: 4
Done

3786:0-3789:5
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_f7aa9258
Bytes: 5
ditto

3786:0-3789:5
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_f7aa9258
UUID: 1e86ea96_405caec2
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.cc

3037:45-3037:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_6d72f590
Bytes: 5
ditto

3037:45-3037:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_6d72f590
UUID: 1e86ea96_6059b2d1
Bytes: 4
Done

3061:45-3061:50
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_cc9a0f75
Bytes: 5
ditto

3061:45-3061:50
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_cc9a0f75
UUID: 1e86ea96_8056b6a0
Bytes: 4
Done

3278:0-3279:53
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_bcaac505
Bytes: 14
Just for null?

3278:0-3279:53
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_bcaac505
UUID: 1e86ea96_c0b43e76
Bytes: 217
I tried to remove this, but then I got a dex2oat failure on 3333 (locations->GetTemp(0)).  So it seems we can have both `needs_write_barrier` being false on line 3273 and `value.IsConstant()` being false on line 3324.

3612:1-3612:55
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_2c89132e
Bytes: 7
Unused?

3612:1-3612:55
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_2c89132e
UUID: 3e7f2e4e_c1e0c248
Bytes: 4
Done

3632:0-3633:55
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_0c8ed735
Bytes: 14
Just for null?

3632:0-3633:55
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_0c8ed735
UUID: 3e7f2e4e_e1e5c655
Bytes: 4
Done

File: compiler/optimizing/intrinsics_arm64.cc

899:2-899:4
Fri Jun 19 19:47:55 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1e67ca0f_8d88e727
Bytes: 336
(I saw a missing-poisoning-code crash in java.util.concurrent.ConcurrentHashMap.tabAt during a volantis boot.)

I think this needs unpoisoning/poisoning code.

An easy way may be to poison both 'expected' and 'value' first and do the following unchanged?

Similarly, in the else block below.

And similarly, for the other architectures.

899:2-899:4
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1e67ca0f_8d88e727
UUID: 3e7f2e4e_41d752b8
Bytes: 76
Thanks for spotting this issue!  I ran into it this week too.  Fixed in PS4.

File: compiler/optimizing/optimizing_compiler.cc

643:7-643:28
Fri Jun 19 19:02:05 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3e700ec3_b8e3b09c
Bytes: 614
I see that if poisoning is enabled, we won't invoke quick as a fallback. Does it mean that we will fall back to baseline or interpreter instead?

On a related note, it seems on an eng build (on device) with poisoning is enabled, JIT is not disabled and causes crashes (as poisoning no longer forces interpret mode).

An alternative is to use userdebug. But would it be less confusing and safer if JIT/Quick is disabled when poisoning is enabled?

I'm not sure what would be the best way, maybe "if (kPoisonHeapReference) { return nullptr;} " in QuickCompiler::Compile() would be the most reassuring? Open to ideas.

643:7-643:28
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3e700ec3_b8e3b09c
UUID: 9ecf3a47_f51daa97
Bytes: 85
Yeah, I agree maybe doing the poisoning check in the QuickCompiler:: method is nicer.

643:7-643:28
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3e700ec3_b8e3b09c
UUID: 3e0c8eed_9c8d693b
Bytes: 202
Yes, if Optimizing is unable to compile the method, we will fall back to the interpreter.

Sorry, I didn't think about JIT and Quick;  I bypass Quick in QuickCompiler::Compile() as you suggested in PS4.

File: compiler/utils/arm/assembler_arm.cc

537:6-537:27
Mon Jun 22 14:48:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_fc891da9
Bytes: 137
Since the assembler already doe these kinds of checks, consider doing the kPoison check in its methods rather than in the code generator?

537:6-537:27
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_fc891da9
UUID: fe8836a6_bfe03747
Bytes: 183
You mean, in order to replace code like:

  if (kPoisonHeapReferences) {
    __ UnpoisonHeapReference(out);
  }

with this:

  __ UnpoisonHeapReference(out, kPoisonHeapReferences);

?

537:6-537:27
Tue Jun 30 11:26:22 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fe8836a6_bfe03747
UUID: f3b791b3_2a051f81
Bytes: 102
with this:
__ UnpoisonHeapReference(out)

The assmeblers already have access to kPoisonHeapReferences.

537:6-537:27
Tue Jun 30 15:43:50 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f3b791b3_2a051f81
UUID: 93973554_ece60b25
Bytes: 4
Done

File: test/Android.run-test.mk

461:0-461:48
Fri Jun 19 19:02:05 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5e6dc2eb_014b49db
Bytes: 2098
The way I test (ART_TEST_OPTIMIZING=true ART_USE_OPTIMIZING_COMPILER=true ART_HEAP_POISONING=true), the following test fail in addition. Do they for you?

FAILING TESTS
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-496-checker-inlining-and-class-loader32
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-496-checker-inlining-and-class-loader64
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-501-null-constant-dce32
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-501-null-constant-dce64
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-501-regression-packed-switch32
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-501-regression-packed-switch64
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-503-dead-instructions32
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-503-dead-instructions64
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-504-regression-baseline-entry32
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-504-regression-baseline-entry64
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-505-simplifier-type-propagation32
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-505-simplifier-type-propagation64
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-955-lambda-smali32
test-art-host-run-test-debug-prebuild-default-relocate-ntrace-cms-checkjni-image-npictest-ndebuggable-955-lambda-smali64

It might make sense to disable all default tests (or disable quick) if poisoning is enabled?

461:0-461:48
Tue Jun 30 11:24:13 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5e6dc2eb_014b49db
UUID: fe8836a6_3fab475f
Bytes: 343
Yes, all run-tests pass (with ART_TEST_OPTIMIZING=true ART_USE_OPTIMIZING_COMPILER=true ART_HEAP_POISONING=true) on my machine (but I haven't rebased/synced for a few days).  If you still see tests failing, can you send me the error messages?  Thanks.

I've removed the long list of tests from TEST_ART_BROKEN_DEFAULT_HEAP_POISONING_RUN_TESTS.

