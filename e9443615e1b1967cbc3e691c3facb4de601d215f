Revision: e9443615e1b1967cbc3e691c3facb4de601d215f
Patch-set: 15
File: compiler/optimizing/intrinsics_mips.cc

100:0-100:27
Tue Feb 16 16:16:00 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3de034e0_72b820ef
Bytes: 123
Could we refactor this using art::IntrinsicSlowPath from  compiler/optimizing/intrinsics_utils.h (maybe in a follow-up CL)?

100:0-100:27
Wed Feb 17 00:57:53 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3de034e0_72b820ef
UUID: dd255844_99ee7bd8
Bytes: 280
I'm happy to do this. Are you talking about something like what is done for ARM:

using IntrinsicSlowPathARM = IntrinsicSlowPath<InvokeDexCallingConventionVisitorARM>;

?

And, I would prefer to do it as a separate patch since this patch has been outstanding for so long.

Thanks.

100:0-100:27
Wed Feb 17 10:55:50 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd255844_99ee7bd8
UUID: 9d20402f_9c8429cd
Bytes: 337
> I'm happy to do this. Are you talking about something like what is
 > done for ARM:
 > 
 > using IntrinsicSlowPathARM = IntrinsicSlowPath<InvokeDexCallingConventionVisitorARM>;
 > 
 > ?

Yes, precisely.

 > And, I would prefer to do it as a separate patch since this patch
 > has been outstanding for so long.

Sure, sounds good to me.

100:0-100:27
Thu Mar 10 07:51:02 2016 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9d20402f_9c8429cd
UUID: 570ce9bf_3573d375
Bytes: 2462
Roland, we have a bit of a problem with class Mips[64]Label derived from class Label.

We want SlowPathCode::GetEntryLabel() and SlowPathCode::GetExitLabel() to return pointers to instances of MIPS-specific labels. Right now class SlowPathCode simply contains two instances of class Label and returns pointers to them. I'm not sure if we could somehow easily tweak the label instance type at this level (SlowPathCode is a generic class and exposing arch-specific types in it appears problematic and is probably wrong, though the existing hard-coded type Label in it isn't great either).

We could make SlowPathCode::GetE*Label() virtual and have the derived class SlowPathCodeMIPS[64] override these and return pointers to its own labels of type Mips[64]Label, much like it's done now.
But this alone doesn't help with class IntrinsicSlowPath<>, currently deriving from SlowPathCode directly. It still needs to be derived from SlowPathCodeMIPS[64] or it has to replicate the same MIPS-specific label stuff.

We aren't planning to redo the MIPS labels and branches mechanism right now (we will revisit it when we get to making improvements in the areas of delay slots, static/direct method calls and method loading in e.g. CodeGeneratorMIPS*::GenerateStaticOrDirectCall()) and so right now we won't be able to just use the base class Label for MIPS. We still need our Mips[64]Label.

A few solutions that I can think of:

1. "virtualize" SlowPathCode::GetE*Label() and extend the template class IntrinsicSlowPath<> to take the type of a SlowPathCode class, so we can plug SlowPathCodeMIPS[64] in more seamlessly.

2. Move prev_branch_id_plus_one_ from Mips[64]Label to the parent class Label and abandon Mips[64]Label.

3. "virtualize" SlowPathCode::GetE*Label() and figure out how to create the two labels of the right type at run time.

I'm not sure no. 2 is great, it makes it less generic (although just an extra int32_t won't break it if unused) and we may need to touch/redo class Label again.

No. 3 may be a little(?) involving.

I'd probably go with no. 1.

Also, we have the same issue with ARM64 (rather custom label and slow path classes).

If we use a bit of pointer casting (between vixl::Label* and Label*), we could apply no. 1 to MIPS[64] and ARM64. With this we'd trade code cleanliness in one place with uncleanliness in another.

If you have some other thoughts or recommendations w.r.t. how to do this better at this time, please let us know.

860:7-860:10
Tue Feb 16 16:16:00 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d20402f_7ca835a2
Bytes: 110
As far as I know, INS is available since MIPS32 R2; shouldn't you ensure that the instruction set is R2+ here?

860:7-860:10
Wed Feb 17 00:57:53 2016 +0000
Author: Chris Larsen <1071873@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9d20402f_7ca835a2
UUID: bd82644f_f81e89a7
Bytes: 4
Done

