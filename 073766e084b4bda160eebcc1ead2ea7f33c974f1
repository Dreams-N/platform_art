Revision: 073766e084b4bda160eebcc1ead2ea7f33c974f1
Patch-set: 2
File: compiler/optimizing/code_generator_arm64.cc

91
Tue Jul 07 14:16:32 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d829ca86_2e4307e9
Bytes: 393
Why `hi` and `hs`? I think it works, but so would `ge` and `gt`. They would be less confusing, and we could use the helper above.

Not considering the NaN cases, the NZCV flags are set as follow for FP comparisons (ARMv8 ARM AppxG-5105):

==  0110
<   1000
>   0010

Then the condition code mean:

hs = 2,   // C set
hi = 8,   // C set, Z clear
ge = 10,  // N == V
gt = 12,  // Z clear, N == V

91
Wed Jul 08 14:53:02 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d829ca86_2e4307e9
UUID: d829ca86_b1563aa0
Bytes: 63
Changed to `ge` and `gt` in PS5 and merged with ARM64Condition.

1660
Tue Jul 07 13:49:07 2015 +0000
Author: Serban Constantinescu <1072549@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d8fb8a32_defd6532
Bytes: 74
This seems pretty architecture independent. Should we move it out of here?

1660
Wed Jul 08 14:53:02 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d8fb8a32_defd6532
UUID: d8fb8a32_c156a4a1
Bytes: 148
Yeah, but we only use this routine in the ARM64 code generator to encode 0.0 as an immediate in an FCMP instruction, so I'd prefer to leave it here.

1767
Tue Jul 07 14:16:32 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d829ca86_4e653397
Bytes: 80
What about `if (Primitive::IsFloatingPointType(type) ...` instead of the switch?

1767
Wed Jul 08 14:53:02 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d829ca86_4e653397
UUID: f8f4ce42_422f3417
Bytes: 62
Thanks; this is indeed better.  Done here and in other places.

1782
Tue Jul 07 13:49:07 2015 +0000
Author: Serban Constantinescu <1072549@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f8f4ce42_3f39e78f
Bytes: 304
I have read this correctly this should be:

__ Cset(res, cond);
if (gt_bias && ((cond == GT) || (cond == GE))) || (!gt_bias && (cond == NE)) {
__ Csinc(res, res, wzr, InvertCondition(vs));
} else if (gt_bias && ((cond == LT) || (cond == LE))) || (!gt_bias && (cond == EQ)) {
__ Csel(res, wzr, res, vs);
}

1782
Tue Jul 07 14:16:32 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f8f4ce42_3f39e78f
UUID: d8fb8a32_be7df929
Bytes: 122
Actually VIXL will handle this nicely.

__ Cset(res, cond);
int val = <nan case> ? 0 : 1;
__ Csel(res, res, Operand(val));

1782
Wed Jul 08 14:53:02 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d8fb8a32_be7df929
UUID: 1840c241_537f16d6
Bytes: 103
Thanks Serban and Alexandre; I've written a CSET-based implementation based on your suggestions in PS5.

2111
Tue Jul 07 14:16:32 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1840c241_10ed043d
Bytes: 48
This is misnamed. `on_NaN_label`? `on_vs_label`?

2111
Wed Jul 08 09:03:47 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1840c241_10ed043d
UUID: d829ca86_1152aee0
Bytes: 233
I didn't see that on `vs` we could branch to either `true_label` or `false_label`.
I found confusing that when `vs` is not set by the comparison and the condition evaluates to false we fall through and do not branch to `false_label.`

2111
Wed Jul 08 14:53:02 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d829ca86_1152aee0
UUID: f8f4ce42_c2290417
Bytes: 105
I've rewritten this part in PS5 (GenerateFPJumps is no more) and hopefully this should be less confusing.

2119:17-2119:28
Wed Jul 08 09:05:46 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 18f28255_86dd4e54
Bytes: 40
Do we need to check that it is not null?

2119:17-2119:28
Wed Jul 08 14:53:02 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 18f28255_86dd4e54
UUID: 1840c241_d61f748c
Bytes: 83
Likewise, this is no longer applicable, as GenerateFPJumps has been removed in PS5.

2178
Tue Jul 07 14:16:32 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d829ca86_6e60ef88
Bytes: 6
Ditto.

2178
Wed Jul 08 14:53:02 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d829ca86_6e60ef88
UUID: f8f4ce42_02d24c77
Bytes: 4
Done

