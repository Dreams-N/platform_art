Revision: c757d91b3db252a3d09c092d7c5cfa8ca46b8cdf
Patch-set: 2
File: compiler/elf_builder.h

113:6-117:7
Mon Feb 01 14:19:45 2016 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 517cf4a3_d5fbdc28
Bytes: 196
Why do we need to align to page boundary if we are switching from allocated section to a non-allocated section?

Should we (explicitly) align the first section to page boundary if it is allocated?

113:6-117:7
Mon Feb 01 14:49:10 2016 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 517cf4a3_d5fbdc28
UUID: 317b00b0_14f3948e
Bytes: 208
I do not want to included non-related data at the end of mmaped page.  It just feels wrong.

Whether we align or not given section depends on which sections are written.  Thus I like to do it implicitly here.

113:6-117:7
Mon Feb 01 15:10:49 2016 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 317b00b0_14f3948e
UUID: 517cf4a3_356250bb
Bytes: 75
AFAIK you can mmap only part of a page if the part starts at page boundary.

113:6-117:7
Mon Feb 01 15:30:39 2016 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 517cf4a3_356250bb
UUID: 7153b827_09b16db3
Bytes: 342
I would still rather be safe than sorry as the behavior also depends on the linker's implementation.

The elf spec says: "Impurities in the other three pages are not logically part of the process image; whether the system expunges them is unspecified."

None the less, our JIT images contain no allocated sections, so it does not affect them.

113:6-117:7
Mon Feb 01 16:37:00 2016 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7153b827_09b16db3
UUID: 517cf4a3_9556c4ac
Bytes: 127
I don't see the risk of it but I agree that it have very little impact on the size of the ELF file so we can leave it as it is.

372
Mon Feb 01 14:19:45 2016 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7153b827_4993e542
Bytes: 290
What do you think about changing it to "bool write_program_headers" without a default value? It would mean the user of the class don't have to know how many program headers an ELF file has and it would be more consistent with the approach we use for write_oat patches in the End() function.

372
Mon Feb 01 14:49:10 2016 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7153b827_4993e542
UUID: 317b00b0_34f81066
Bytes: 214
The user of the class kind of needs to know the number of headers.  That is, at least the upper bound needs to be provided.
Having said that I am happy to revert to compile-time upper bound + write_program_headers.

372
Mon Feb 01 15:10:49 2016 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 317b00b0_34f81066
UUID: b140d043_d0865c40
Bytes: 190
I don't feel strongly about it but I would prefer to use "compile-time upper bound + write_program_headers" especially as none of the user specifies the argument to a value different then 0.

File: compiler/elf_writer_debug.cc

1536
Mon Feb 01 14:19:45 2016 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 517cf4a3_950564f5
Bytes: 65
Please add a comment about why we don't want program headers here

1567
Mon Feb 01 14:19:45 2016 +0000
Author: Tamas Berghammer <1059813@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d139c4d1_549dc27b
Bytes: 65
Please add a comment about why we don't want program headers here

