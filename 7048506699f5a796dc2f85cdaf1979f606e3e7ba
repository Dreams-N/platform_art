Revision: 7048506699f5a796dc2f85cdaf1979f606e3e7ba
Patch-set: 2
File: runtime/oat_file_assistant.cc

172:0-173:71
Fri Feb 19 17:00:10 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 02d06de3_cc76efa9
Bytes: 30
Richard, any thoughts on this?

172:0-173:71
Fri Feb 19 18:45:57 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 02d06de3_cc76efa9
UUID: c2301515_6b8931e2
Bytes: 358
Yes, if the original dex files have been stripped from the apk, which happens for pre-compiled apps on the system partition.

Maybe add another possible status result for this case? The idea is that the package manager should not try to compile, even though the oat file is out of date, because compilation will fail without access to the original dex files.

179:40-179:55
Fri Feb 19 18:45:57 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c2d2d5e6_a11e0851
Bytes: 79
I don't think fall-through is worth it here. Just duplicate the 'return true;'.

180:4-180:38
Fri Feb 19 19:10:16 2016 +0000
Author: Richard Uhler <1057373@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 02a94d5f_4acad793
Bytes: 239
How does this relate to go/aog/200364? What if an application uses a DexClassLoader to try and explicitly aot-compile their dex file, but there exists an extract-only dex file. Don't we want to do compilation in that case via MakeUpToDate?

