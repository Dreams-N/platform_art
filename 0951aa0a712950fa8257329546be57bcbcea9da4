Revision: 0951aa0a712950fa8257329546be57bcbcea9da4
Patch-set: 2
File: compiler/optimizing/code_generator_arm.cc

1819:54-1819:81
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bc24f1f_96bb12e0
Bytes: 77
Maybe introduce a kOutputOverlap constant in compiler/optimizing/locations.h?

1896:54-1896:81
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bc24f1f_b6b88ee3
Bytes: 6
Ditto.

2067:55-2067:61
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bc24f1f_56a7eac5
Bytes: 54
Does this mean there was also a change in the runtime?

3348:0-3353:9
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbd63fdb_5766044b
Bytes: 111
This seems odd to move half a 64-bit value in a 32-bit register.  Shouldn't the destination be a register pair?

3366:0-3366:117
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cbd63fdb_17707cf7
Bytes: 10
Long line.

3368:0-3368:118
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_a04fd432
Bytes: 10
Long line.

3364:6-3369:9
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bc24f1f_36a6dec7
Bytes: 73
Likewise, about moving half a 64-bit value into a single 32-bit register.

File: compiler/optimizing/register_allocator.h

135:39-135:53
Tue Jan 20 10:41:45 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_80c29815
Bytes: 30
"at finding such an interval"?

