Revision: c58802b95ff4421e88fb8e0277112e5c00b5261b
Patch-set: 10
File: test/449-checker-bce/src/Main.java

624
Wed Jan 13 18:15:55 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 870b8a60_52e192ba
Bytes: 36
Thanks for doing this. Way better :)

639:20-639:21
Tue Jan 12 11:53:23 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 07f79a9a_2b2739f5
Bytes: 22
Shouldn't this be `i`?

639:20-639:21
Tue Jan 12 12:19:12 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 07f79a9a_2b2739f5
UUID: 27fc9e7c_ecef0ba3
Bytes: 94
two dimensional array, I think. So first array get returns a reference, second returns an int.

639:20-639:21
Tue Jan 12 14:34:57 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 27fc9e7c_ecef0ba3
UUID: 27fc9e7c_2c5f532a
Bytes: 55
Makes sense, thanks.  Please ignore my initial comment.

639:20-639:21
Tue Jan 12 18:50:32 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 27fc9e7c_2c5f532a
UUID: 27673e34_a81d0355
Bytes: 93
Yes, what Nicolas said. This is done on purpose to make sure only "the right one" is hoisted.

639:20-639:21
Tue Jan 12 19:02:12 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 27673e34_a81d0355
UUID: 870b8a60_af54d9d9
Bytes: 44
Nice!  This might be worth a comment IMO. :)

639:20-639:21
Wed Jan 13 18:06:34 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 870b8a60_af54d9d9
UUID: 274e5eac_4bc39163
Bytes: 4
Done

642:6-642:15
Wed Jan 13 18:15:55 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 47ed12c9_704e4e72
Bytes: 662
This is still nasty (I should forbid mixing -DAG and -NOT entirely) because it only tests the assertion in a part of the file.

IIUC, there should be no NullCheck and no BoundsCheck whatsoever, right? Then let's move them to their own pass just like you do everywhere else:

  CHECK-START:
  CHECK-NOT: NullCheck
  CHECK-NOT: BoundsCheck

The ArrayGet and ArrayLength should still be in the graph but should be in the outer loop, right? So why not test them the same way as the Deoptimize below?

  ...
  CHECK-DAG: Deoptimize loop:<<OuterLoop:B\d+>>
  CHECK-DAG: {{l\d+}} ArrayGet loop:<<OuterLoop>>
  CHECK-DAG: ArrayLength loop:<<OuterLoop>>
  CHECK-EVAL: ...

642:6-642:15
Wed Jan 13 18:27:19 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 47ed12c9_704e4e72
UUID: 07623a24_a865ff1f
Bytes: 522
Yes, you may have noticed that I separated -DAG and -NOT completely in the other file for exactly that reason, it does not tell much. I thought it would be okay here since it appears typically before the array get, but you are right I might as well go the full way.

What you suggest does not test that there is no ArrayLength in the inner loop at all (some strange optimization may move it out and keep it inside :-)

Any pointers on how you would do that (since it seems you need *some* positive mixed with the negative?

642:6-642:15
Wed Jan 13 19:13:23 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 07623a24_a865ff1f
UUID: c701023f_74f5a672
Bytes: 1246
Correct, we'd need to pass the name of the inner loop header between the passes to test that the instruction is not present there. We've never needed something like this before, maybe I should think about adding a feature for doing a match without moving the cursor...

That said, it reminds me of the instruction simplifier where we don't actually remove the optimized-out instructions but assume that DCE will do so later on. Showing in Checker that the instruction was removed from the data flow is then sufficient enough evidence that it will not be present in the native code. You could do that by showing that the two inputs of the integer ArrayGet are now the two Phis and be done with it.

If you wanted to be absolutely strict about making sure there's no dangling ArrayLength, you could do a match on the number of users - that's the number before the instruction id. You would show that they had just one user in (before):

  CHECK-DAG {{\d}} 1 <<Len:i\d+>> ArrayLength
  CHECK-DAG                       BoundsCheck [<<Len>>,...]

that that user was removed in (after)

  CHECK-NOT BoundsCheck

and now there isn't an ArrayLength with no users

  CHECK-NOT {{\d+}} 0 {{i\d+}} ArrayLength

but that just seems like a massive overkill...

File: test/530-checker-loops/src/Main.java

1057:0-1059:48
Tue Jan 12 11:53:23 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 27fc9e7c_6c6f9b01
Bytes: 6
Ditto?

1057:0-1059:48
Tue Jan 12 14:34:57 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 27fc9e7c_6c6f9b01
UUID: 870b8a60_6faaf141
Bytes: 9
Ditto. :)

1065:0-1067:50
Tue Jan 12 11:53:23 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 07f79a9a_6b2141dc
Bytes: 6
Ditto?

1065:0-1067:50
Tue Jan 12 14:34:57 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 07f79a9a_6b2141dc
UUID: a7088e64_70d0104f
Bytes: 6
Ditto.

