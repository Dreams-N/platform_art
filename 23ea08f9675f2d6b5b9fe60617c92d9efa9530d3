Revision: 23ea08f9675f2d6b5b9fe60617c92d9efa9530d3
Patch-set: 2
File: /COMMIT_MSG

25:13-25:19
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_c19a2cb4
Bytes: 40
nit: we called it bisection (not binary)

25:13-25:19
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_c19a2cb4
UUID: 74d3c2eb_5cb8622b
Bytes: 4
Done

File: compiler/driver/compiler_driver.cc

81:22-81:56
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_e10ad0d0
Bytes: 137
unless we have a strong reason to keep this code around, i would vote for removing this flag and the two tests (now deadcode) that use it

81:22-81:56
Wed Aug 03 00:50:18 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_e10ad0d0
UUID: 74d3c2eb_19d98c49
Bytes: 138
You will have to show that it doesn't have a significant impact on app compile time. I instructed Wojciech to test on a known large app...

81:22-81:56
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_19d98c49
UUID: 74d3c2eb_3c055ee2
Bytes: 247
So, I've tested on the large known app compiling 5 times and I got:

Without this CL:
real	2m35.032s
user	40m6.319s
sys	4m47.595s

With this CL:
real	2m35.434s
user	40m15.946s
sys	4m51.845s

I will try doing more compilations and see what happens.

81:22-81:56
Wed Aug 03 18:22:54 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_3c055ee2
UUID: 94e3d6ef_e441d042
Bytes: 589
Tested on twice the number of compilations (10) and got times:

Without this CL:
4814.69user 584.75system 5:05.99elapsed
Without this CL but with flag set to false:
4820.86user 559.29system 5:01.45elapsed
With this CL:
4834.38user 560.16system 5:04.16elapsed

When I rerun I got:
Without this CL:
4827.10user 570.68system 5:03.98elapsed
Without this CL but with flag set to false:
4820.70user 561.31system 5:02.36elapsed 
With this CL:
4811.59user 560.94system 5:03.14elapsed

It seems that there is no significant impact on performance when setting this flag to false or applying this CL.

81:22-81:56
Wed Aug 03 20:22:34 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 94e3d6ef_e441d042
UUID: 94e3d6ef_8a99f375
Bytes: 36
Why is that relevant to this change?

File: compiler/optimizing/constant_folding.h

50:19-50:24
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_6cf6d794
Bytes: 93
see my comment in optimizing_compiler on why I would prefer to have just a base name per pass

50:19-50:24
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_6cf6d794
UUID: 74d3c2eb_79e21832
Bytes: 4
Done

File: compiler/optimizing/optimization_factory.cc

45
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_ac0d9f90
Bytes: 57
we don't indent inside namespace
(whole file pretty much)

45
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_ac0d9f90
UUID: 74d3c2eb_59f5d481
Bytes: 4
Done

76:4-76:5
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_4c519361
Bytes: 96
if -else if chain instead?
safes some vertical space, since else if may appear at same line as }

76:4-76:5
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_4c519361
UUID: 74d3c2eb_b9e3a0cd
Bytes: 4
Done

107:0-107:8
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_0c5ceb80
Bytes: 18
indent by 2, not 4

107:0-107:8
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_0c5ceb80
UUID: 74d3c2eb_592874ed
Bytes: 4
Done

155:45-155:51
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_2c752ffc
Bytes: 221
yes, this is a good way to deal with such dependences

we could later extend this with warnings when too many phases appear in between, or when they are never consumed (although that may of course happen during bisection)

155:45-155:51
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_2c752ffc
UUID: 74d3c2eb_192aece4
Bytes: 4
Done

158
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_cc3ca316
Bytes: 7
else if

158
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_cc3ca316
UUID: 74d3c2eb_d933045a
Bytes: 4
Done

File: compiler/optimizing/optimization_factory.h

31:0-31:2
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_8c053b6d
Bytes: 32
we don't indent inside namespace

31:0-31:2
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_8c053b6d
UUID: 74d3c2eb_a779385e
Bytes: 4
Done

33:8-33:28
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_4c28b3ed
Bytes: 76
please provide documentation for every class
(putting on my readability hat)

33:8-33:28
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_4c28b3ed
UUID: 74d3c2eb_39f01093
Bytes: 4
Done

File: compiler/optimizing/optimizing_compiler.cc

310
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_6cdc97df
Bytes: 36
we can remove the two virtuals again

310
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_6cdc97df
UUID: 74d3c2eb_f91368b0
Bytes: 4
Done

601
Tue Aug 02 23:12:41 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 74d3c2eb_ccaee37e
Bytes: 467
I still find it less pretty that we need to define several pass names in the optimization pass class itself now; I would like it much better if we could simply concatenate base name with suffix here.

update: Wojciech just told me that such an approach would always generate runtime code. Any way to force this to be done at compile time? Or, worst case, only concatenate in cases checker is active (since for other situations, including factory, base name suffices).

601
Wed Aug 03 01:25:45 2016 +0000
Author: Wojciech Staszkiewicz <1067043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 74d3c2eb_ccaee37e
UUID: 74d3c2eb_d9f544e8
Bytes: 146
It was a mistake to move pass names into optimization passes. There is no need to do so if we have the standardized pass naming, I've reverted it.

