Revision: 7ca71fccd10e31e321564bf511ddab75bab92dab
Patch-set: 5
File: compiler/image_writer.cc

908:27-908:33
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_186e867e
Bytes: 23
Vladimir likes emplace.

908:27-908:33
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_186e867e
UUID: 234d525a_48277168
Bytes: 4
Done

1029:0-1038:3
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_18bcc64e
Bytes: 65
This is not the right function, you're not copying objects... :-)

1029:0-1038:3
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_18bcc64e
UUID: 234d525a_c813610d
Bytes: 84
CopyAndFixupObjects seems like a good place to copy, or do you want me to rename it.

1029:0-1038:3
Fri Apr 10 19:33:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 234d525a_c813610d
UUID: e3617abc_bdb047f5
Bytes: 56
Maybe we could split it out to CopyAndFixupNativeData()?

1029:0-1038:3
Fri Apr 10 19:57:17 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_bdb047f5
UUID: e356daec_447e8266
Bytes: 4
Done

1063:2-1067:47
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_198e8d7f
Bytes: 123
For better readability you could consider factoring this into Data* data = GetDataFor(obj, klass); if (data != nullptr) ...

1063:2-1067:47
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_198e8d7f
UUID: 234d525a_a88c5dcc
Bytes: 4
Done

1068:6-1104:51
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_19b5ed31
Bytes: 34
Put into a separate, named method.

1068:6-1104:51
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_19b5ed31
UUID: 636d8ab3_26a5fb7f
Bytes: 4
Done

1189:4-1208:5
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_b862ffbb
Bytes: 94
All the other fixups are in their own methods (well visitor stuff). Consider moving this, too.

1189:4-1208:5
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_b862ffbb
UUID: 636d8ab3_012b89ad
Bytes: 4
Done

File: compiler/image_writer.h

129:40-129:41
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_d88dfe00
Bytes: 35
There's no apostrophe in plurals...

129:40-129:41
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_d88dfe00
UUID: 234d525a_8e1faa89
Bytes: 4
Done

131:4-131:58
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_586e4ead
Bytes: 70
This needs to change. People might add heap things after the ArtField.

131:4-131:58
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_586e4ead
UUID: e356daec_b8175800
Bytes: 4
Done

305:27-305:52
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83c43ed3_b99db9b3
Bytes: 51
Nicolas says no to this. Please introduce a struct.

305:27-305:52
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83c43ed3_b99db9b3
UUID: e356daec_a789f5bc
Bytes: 4
Done

File: compiler/utils/dex_cache_arrays_layout.h

84:31-84:86
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_5b166300
Bytes: 189
The problem is that you're using non-static functions to compute values of other members. If you used static functions taking an additional pointer size argument, this wouldn't be an issue.

84:31-84:86
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_5b166300
UUID: 234d525a_73b7ca38
Bytes: 97
We could pass this in everywhere but that seems like it would not provide any real advantage IMO.

84:31-84:86
Fri Apr 10 19:33:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 234d525a_73b7ca38
UUID: e3617abc_ddb5fbe3
Bytes: 35
Style preferences... not important.

File: patchoat/patchoat.cc

425:0-465:3
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 237f124e_fba71cb2
Bytes: 18
Separate function.

425:0-465:3
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 237f124e_fba71cb2
UUID: 234d525a_8e06c14b
Bytes: 4
Done

File: runtime/art_field.cc

51:0-51:71
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a38a229d_fd4ba735
Bytes: 152
Can you update or remove the comment, please? We have made a deliberate choice to keep the same order as in the dex file to allow binary search by name.

51:0-51:71
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_fd4ba735
UUID: 234d525a_ae79c5c2
Bytes: 4
Done

File: runtime/check_jni.cc

996:0-1002:6
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 636d8ab3_931a9c6f
Bytes: 1
?

996:0-1002:6
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_931a9c6f
UUID: e356daec_c2cfc7dc
Bytes: 50
I need to think of a good way to check this field.

File: runtime/class_linker.cc

1119:2-1119:46
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 03868e96_18d5ab6f
Bytes: 32
Don't see that that's necessary.

1119:2-1119:46
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 03868e96_18d5ab6f
UUID: e356daec_bd5d8259
Bytes: 4
Done

1485:2-1485:50
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 234d525a_3158f05a
Bytes: 89
Why is the order here changed, without any comments? If you had chosen intuitive names...

1485:2-1485:50
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 234d525a_3158f05a
UUID: 234d525a_4eb05971
Bytes: 4
Done

2928:22-2928:58
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a38a229d_7d2cf73e
Bytes: 82
We don't GC proxy classes, do we? (Otherwise we would leak memory allocated here.)

2928:22-2928:58
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_7d2cf73e
UUID: 234d525a_6e135de1
Bytes: 34
We don't GC any classes currently.

File: runtime/class_linker.h

508:2-510:50
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 636d8ab3_f3ce705e
Bytes: 48
Where's the comment what SetupClass is gonna do?

508:2-510:50
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_f3ce705e
UUID: 234d525a_ae2c653f
Bytes: 4
Done

File: runtime/common_throws.cc

21:0-31:37
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 234d525a_f119087a
Bytes: 100
This is missing the art_field include (must be pulling it transitively). Please add for cleanliness.

21:0-31:37
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 234d525a_f119087a
UUID: e356daec_5d865617
Bytes: 4
Done

File: runtime/gc/heap.cc

2713:12-2713:37
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_db24332f
Bytes: 108
I don't think this is still valid. Previously we could have had empty array but now we have nullptr instead.

2713:12-2713:37
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_db24332f
UUID: 636d8ab3_6196fdc9
Bytes: 4
Done

File: runtime/image.h

149:0-153:28
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_3b3c3742
Bytes: 132
Maybe we should rename this to native object space offset/size with a view of moving more things here (ArtMethod, dex cache arrays).

149:0-153:28
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_3b3c3742
UUID: 636d8ab3_61135de1
Bytes: 108
I was going to rewrite the image stuff into an array of "sections" which should be cleaner in a separate CL.

File: runtime/jdwp/jdwp_event.cc

122:16-122:22
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6394aac1_bbaa07d0
Bytes: 15
Please realign.

122:16-122:22
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_bbaa07d0
UUID: 234d525a_d9e2551b
Bytes: 4
Done

File: runtime/linear_alloc.h

37:0-41:5
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a38a229d_9d5623b4
Bytes: 89
I don't think the construction of elements should be the responsibility of the allocator.

37:0-41:5
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a38a229d_9d5623b4
UUID: e356daec_5ddad614
Bytes: 111
Is it OK if I rename to AllocAndConstructArray? It seems like this is a handy place to have this functionality.

37:0-41:5
Fri Apr 10 19:33:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e356daec_5ddad614
UUID: e3617abc_fdbabfd0
Bytes: 151
Do you really need that?

  SomeType* array = alloc->AllocArray<SomeArray>(self, num_elems);
  std::uninitialized_fill_n(array, num_elems, SomeType());

37:0-41:5
Fri Apr 10 19:57:17 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3617abc_fdbabfd0
UUID: 636d8ab3_c848d1b9
Bytes: 29
Didn't know about that, SGTM.

File: runtime/mirror/class-inl.h

436:2-437:88
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 234d525a_718a78e9
Bytes: 55
Please document why it's now OK to overwrite with null.

436:2-437:88
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 234d525a_718a78e9
UUID: 234d525a_198f7d2d
Bytes: 68
Actually, I don't think we overwrite with null anymore, I'll delete.

File: runtime/mirror/class.h

1157:0-1159:46
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 636d8ab3_f37cb036
Bytes: 26
Is that really still true?

1157:0-1159:46
Fri Apr 10 09:56:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_f37cb036
UUID: 6394aac1_bb720763
Bytes: 77
Please remove. I clearly missed this comment in the field ordering change CL.

1157:0-1159:46
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6394aac1_bb720763
UUID: 234d525a_9910cd54
Bytes: 4
Done

1157:0-1159:46
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_f37cb036
UUID: 636d8ab3_e5e2181b
Bytes: 4
Done

1161:41-1161:49
Thu Apr 09 20:06:33 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 636d8ab3_337f0829
Bytes: 1
?

1161:41-1161:49
Fri Apr 10 19:23:16 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 636d8ab3_337f0829
UUID: e356daec_1d4cce4d
Bytes: 4
Done

