Revision: cbcd46f1130db23b2a7427f7b99a07e89c0c3af9
Patch-set: 1
File: compiler/optimizing/code_generator_x86.cc

2237
Tue Mar 31 08:00:37 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_6c795b7d
Bytes: 166
It looks like this is already implemented in
./compiler/dex/quick/x86/int_x86.cc.

Maybe we can share the code?
At some point we will want to do that for other archs.

2237
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83fb5e85_6c795b7d
UUID: a3ece2ce_adb97d2d
Bytes: 63
Okay, I didn't know we could depend on Quick. Fixing this then.

2238:21-2238:28
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_5f313b1f
Bytes: 139
can this be used for longs as well? We currently don't. Looks sensible to add support but we can do it in a follow CL. For now, add a TODO.

2238:21-2238:28
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_5f313b1f
UUID: 83fb5e85_4c40dff3
Bytes: 57
Yes. You want me to implement the division for longs now?

2242:31-2242:47
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3ece2ce_f02ebe37
Bytes: 46
Nit: "Hacker's Delight" (Addison Wesley, 2002)

2242:5-2242:17
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_5156b6b3
Bytes: 19
Implementation from

2243:35-2243:86
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3ece2ce_90313a9e
Bytes: 216
Nit: "Division by Invariant Integers Using Multiplication" (PLDI 1994)

BTW, there seems to be a follow-up paper in IEEE Transactions on Computers from February 2011 (see https://gmplib.org/~tege/division-paper.pdf).

2243:5-2243:34
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_af6a155c
Bytes: 29
T.Grablund & P.L.Montgomery's

2246
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_b16a7a5c
Bytes: 11
Nit: space.

2257:5-2257:8
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_cfb6816a
Bytes: 8
Nit: The

2261:53-2261:58
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3ece2ce_d088e2b8
Bytes: 13
32 (resp. 64)

2261:78-2261:86
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_f1640293
Bytes: 21
32 - p (resp. 64 - p)

2265:14-2265:23
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3ece2ce_3057a6b3
Bytes: 21
Drop the parentheses.

2266:35-2266:56
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_6f9f8ddf
Bytes: 63
UINT64_C(0x8000000000000000)

Or better IMHO: UINT64_C(1) << 63

2266:23-2266:32
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_51cb56ef
Bytes: 6
Ditto.

2266:59-2266:70
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_f1b9a25a
Bytes: 55
UINT32_C(0x80000000)

Or better IMHO: UINT32_C(1) << 31

2270:24-2270:33
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3ece2ce_d08f42a6
Bytes: 6
Ditto.

2272:30-2272:41
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_6ff30d20
Bytes: 23
Suggestion: add parens.

2279:59-2279:75
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_afecd53a
Bytes: 18
"Hacker's Delight"

2306:10-2306:19
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_31f96a00
Bytes: 6
Ditto.

2320:12-2320:32
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_00cb569e
Bytes: 99
add a dcheck in the beginning as documentation that this applies when the second arg is a constant.

2320:12-2320:32
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_00cb569e
UUID: 83fb5e85_6c7e7be0
Bytes: 4
Done

2322:2-2322:7
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_1f12d38f
Bytes: 6
DCHECK

2322:2-2322:7
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_1f12d38f
UUID: 83fb5e85_0c79b7f6
Bytes: 4
Done

2338
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3a94260_ae9276d1
Bytes: 16
__ testl(i1, i1)

2338
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a3a94260_ae9276d1
UUID: a3ece2ce_cd8849b9
Bytes: 4
Done

2342:28-2342:38
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_2fa62510
Bytes: 19
INT32_C(0x80000000)

2350:9-2350:13
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3ae3665_acca87c5
Bytes: 13
__ xorl(o, o)

2350:9-2350:13
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3ae3665_acca87c5
UUID: a3ece2ce_2d574db3
Bytes: 4
Done

2324:2-2352:3
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_40171e7f
Bytes: 142
why not

if (instruction->IsRem()) {
  __ movl(o, Immediate(0));
} else {
  __ movl(o, i1);
  if (imm == -1) {
     __ negl(o);
  }
}
?
     -

2324:2-2352:3
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_40171e7f
UUID: c3f1d6a3_4ea4532c
Bytes: 4
Done

2371:2-2371:15
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_2ebaa704
Bytes: 80
I think you can handle this case without a cmp. I don't see how this is special.

2371:2-2371:15
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3f1d6a3_2ebaa704
UUID: 83fb5e85_cc35ef57
Bytes: 92
If it's zero, we already know the answer trivially, so we just move 0 in the result and exit

2372
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3a94260_0e962ac9
Bytes: 16
__ testl(i1, i1)

2372
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a3a94260_0e962ac9
UUID: a3ece2ce_0d5c11d2
Bytes: 4
Done

2375
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3b7bab3_f0da96ea
Bytes: 10
xorl(o, o)

2375
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3b7bab3_f0da96ea
UUID: 83fb5e85_8c31279e
Bytes: 4
Done

2372:0-2383:33
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_5f47fb7f
Bytes: 69
hmm, does this produce the right result if the left side is negative?

2372:0-2383:33
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_5f47fb7f
UUID: 83fb5e85_2cd0f37f
Bytes: 67
yes, it's an arithmetic (signed) shift. Tests also proved it right.

2416:15-2416:17
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_a0d7e242
Bytes: 58
the if is not needed here. else seems to be enough. right?

2416:15-2416:17
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_a0d7e242
UUID: 83fb5e85_4cb57f31
Bytes: 168
Well. This is obviously a mistake.

I don't know what is the expected behavior if we want to divide by zero. The else clause I forgot to write was meant to handle this.

2417:10-2417:23
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_fff827c0
Bytes: 139
for this branch: I think this is long enough to deserve a separate function. e.g. GenerateDivRemWithGenericConstant, or other suitable name

2417:10-2417:23
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_fff827c0
UUID: c3f1d6a3_8ec0fbaa
Bytes: 18
Ok. Working on it.

2422:10-2422:47
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_4f8e1181
Bytes: 21
Merge with line 2418.

2433:10-2433:39
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_e0fbaaba
Bytes: 58
you should put this as close as possible to the condition.

2433:10-2433:39
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_e0fbaaba
UUID: 83fb5e85_0c941793
Bytes: 4
Done

2433:10-2433:39
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_e0fbaaba
UUID: 83fb5e85_efc37da3
Bytes: 26
And turn it into a DCHECK.

2443:13-2443:17
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3ae3665_8ce6ab58
Bytes: 12
tstl(i1, i1)

2443:13-2443:17
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3ae3665_8ce6ab58
UUID: c3f1d6a3_0e46cb12
Bytes: 4
Done

2446:13-2446:17
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3a94260_ee506e66
Bytes: 14
xorl(res, res)

2446:13-2446:17
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a3a94260_ee506e66
UUID: a3ece2ce_6d5155ba
Bytes: 4
Done

2454
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fb5e85_8f64794b
Bytes: 25
Nit: remove a blank line.

2543:54-2543:57
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a3a94260_31c4ab90
Bytes: 56
Do we need to have a fixed EBX, or is any register okay?

2543:54-2543:57
Mon Mar 30 17:43:37 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_7f0d176c
Bytes: 102
is EBX mandatory for any reasons? If yes, document why, if not, use RequireRegister. Same for the rem.

2543:54-2543:57
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_7f0d176c
UUID: 83fb5e85_cc996fc6
Bytes: 72
It was temporarily needed due to a bug in the register allocator. Fixed.

2543:54-2543:57
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a3a94260_31c4ab90
UUID: 83fb5e85_ec9c2bb8
Bytes: 72
It was temporarily needed due to a bug in the register allocator. Fixed.

2614:54-2614:57
Mon Mar 30 17:33:25 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e3b7bab3_b0e41ea9
Bytes: 5
ditto

2614:54-2614:57
Tue Mar 31 10:49:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e3b7bab3_b0e41ea9
UUID: 83fb5e85_2c747300
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.h

149:2-149:89
Tue Mar 31 14:51:09 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f1d6a3_71893277
Bytes: 325
* Move `magic' and `shift' at the end of the argument list, as required by the C++ style guide.
* Use a pointer for out arguments `magic' and `shift', as the C++ style guide mandates `const' with reference arguments.
* Also, please document this function, and especially the fact that `magic' and `shift' are "out" arguments.

