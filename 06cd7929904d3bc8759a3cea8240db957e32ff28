Revision: 06cd7929904d3bc8759a3cea8240db957e32ff28
Patch-set: 2
File: /COMMIT_MSG

23:0-23:4
Wed Aug 24 18:36:25 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 08f50bfe_a41766fc
Bytes: 38
I suggest testing with a libartd boot.

23:0-23:4
Wed Aug 24 20:34:21 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 08f50bfe_a41766fc
UUID: 08f50bfe_c7f1d497
Bytes: 4
Done

File: runtime/gc/collector/concurrent_copying-inl.h

33:0-38:60
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_97a5d6f8
Bytes: 233
Careful about the subtle race condition that this comment describes.

As I understand, we don't have this "false gray" issue here because we now allow the same object to be pushed more than once?

I'd like the comment updated anyhow.

33:0-38:60
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_97a5d6f8
UUID: 88357b64_e99c8669
Bytes: 36
Sorry, forgot to update the comment.

50:19-50:46
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_f76782ba
Bytes: 152
Now we changed such that an unevac-from-space object is marked if it's marked in the mark bitmap or its gray bit is set, correct? Can you add a comment?

50:19-50:46
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_f76782ba
UUID: 88357b64_c282b7fe
Bytes: 4
Done

52:4-52:11
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_57c66e46
Bytes: 150
If kUseBakerReadBarrier is false, we should negate the result of AtomicTestAndSet and change this line to "success = !bitmap->AtomicTestAndSet(ref);"?

52:4-52:11
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_57c66e46
UUID: 88357b64_2c7efc0e
Bytes: 24
Yes, that was a mistake.

File: runtime/gc/collector/concurrent_copying.cc

1308:56-1308:59
Tue Aug 23 23:17:06 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_4c3ee0ba
Bytes: 70
After the offline discussion with Hans, this should be a StoreRelaxed.

1308:56-1308:59
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_4c3ee0ba
UUID: 88357b64_ec4fb43c
Bytes: 4
Done

1582:17-1582:38
Tue Aug 23 23:17:06 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_ec69f4c6
Bytes: 34
and this should be a load acquire.

1582:17-1582:38
Wed Aug 24 00:29:53 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_ec69f4c6
UUID: 4889c376_1097a439
Bytes: 116
It's probably a good idea to factor this out into an inline function (eg "bool IsMarkedUnevacFromSpaceRegion(ref)").

1582:17-1582:38
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_ec69f4c6
UUID: 88357b64_0ccc5893
Bytes: 4
Done

1583:12-1583:43
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_29eb4e0a
Bytes: 177
Probably related to the TODO comment above, the bitmap is written by GC only without a CAS or a release.

Is this correct? The feasibility of this change seems to hinge on this.

1583:12-1583:43
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_29eb4e0a
UUID: 88357b64_df6934c7
Bytes: 4
Done

1631:17-1631:38
Tue Aug 23 23:17:06 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_8c4f086d
Bytes: 34
and this should be a load acquire.

1631:17-1631:38
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_8c4f086d
UUID: 88357b64_9f4c0c79
Bytes: 4
Done

1632:12-1632:43
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_c9df4264
Bytes: 5
Same.

1632:12-1632:43
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_c9df4264
UUID: 88357b64_5f568404
Bytes: 4
Done

1672:8-1672:38
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_d7ca7e76
Bytes: 141
This should be "GetReadBarrierPointer() == ReadBarrier::GrayPtr() || region_space_bitmap_->Test(obj)" aside from the correctness issue above?

1672:8-1672:38
Tue Aug 23 23:17:06 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_d7ca7e76
UUID: 88357b64_8c762899
Bytes: 51
The GetReadBarrierPointer should be a load acquire.

1672:8-1672:38
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_8c762899
UUID: 88357b64_ff819864
Bytes: 4
Done

1672:8-1672:38
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_d7ca7e76
UUID: 88357b64_bf7b1085
Bytes: 4
Done

2144:4-2144:47
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_c912e25c
Bytes: 5
Same.

2144:4-2144:47
Tue Aug 23 23:17:06 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_c912e25c
UUID: 88357b64_2cb27c4a
Bytes: 192
The GetReadBarrierPointer() may as well be a load acquire though this may be safe without an acquire because a mutator calling this and not seeing a mark may be harmless for the GetReferent().

2144:4-2144:47
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_2cb27c4a
UUID: 88357b64_5f6d24c4
Bytes: 4
Done

2144:4-2144:47
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_c912e25c
UUID: 88357b64_3f70609b
Bytes: 4
Done

File: runtime/gc/collector/concurrent_copying.h

107:47-107:63
Tue Aug 23 22:48:18 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 88357b64_09cbea56
Bytes: 223
You mean this more as "kMaybeFromMutator" (a negated one would be "kFromGC")? Or at least that makes more sense to me.

Can you add an assert:

if (!kMaybeFromMutator) {
  DCHECK_EQ(Thread::Current(), thread_running_gc_);
}

107:47-107:63
Wed Aug 24 00:59:54 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_09cbea56
UUID: 88357b64_8ca868d2
Bytes: 86
Actually I'll do kFromGCThread, want to remove some of the CAS from GC thread copying.

107:47-107:63
Wed Aug 24 18:36:25 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 88357b64_8ca868d2
UUID: 08f50bfe_c408b233
Bytes: 81
I take "want to remove some of the ..." will be in a future change, not this one.

107:47-107:63
Wed Aug 24 20:34:21 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 08f50bfe_c408b233
UUID: 08f50bfe_8d6d2d31
Bytes: 15
Yes, eventually

