Revision: ce2dd304494a49a12c1fcb269f7de3607b017265
Patch-set: 2
File: runtime/gc/collector/mark_sweep-inl.h

44:34-44:35
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef469d41_ec068baf
Bytes: 16
0 -> const name?

File: runtime/gc/collector/semi_space.cc

669:59-669:60
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_53c73cd9
Bytes: 25
0 or false -> const name?

File: runtime/gc/heap.cc

153:26-153:51
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_93afe411
Bytes: 36
Should this be kVerifyObjectSupport?

824:41-824:46
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_1684b1ae
Bytes: 25
false -> some const name?

915:56-915:57
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_36f60d46
Bytes: 16
0 -> const name?

File: runtime/gc/heap.h

132:36-132:60
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef469d41_2c5ed3d7
Bytes: 72
Do we need a new const here (can we directly use kVerifyObjectSupport) ?

File: runtime/gc/space/malloc_space.cc

114:38-114:42
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef469d41_ec920b3e
Bytes: 5
'is'?

File: runtime/gc/space/rosalloc_space.h

64:30-64:35
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef469d41_4caddf7a
Bytes: 25
false -> some const name?

File: runtime/gc/space/space_test.cc

41:20-41:27
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_b30f808c
Bytes: 55
There's no GC here. Do we need to use SirtRef and such?

50:36-50:41
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_b3e6a094
Bytes: 25
false -> some const name?

54:26-54:31
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_d3eb2c5b
Bytes: 4
same

File: runtime/mirror/array-inl.h

30:9-30:28
Fri Feb 21 00:58:54 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_4ad1231f
Bytes: 65
lets make this an enum as <0> throughout the code isn't readable.

File: runtime/mirror/array.h

67:29-67:30
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_f383c8a6
Bytes: 21
0 -> some const name?

File: runtime/mirror/class.h

137:18-137:30
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef469d41_6ca0dbb4
Bytes: 90
kVerifyFlags isn't used? Should it be removed?

Same comments for the following functions.

File: runtime/mirror/object-inl.h

105:42-105:47
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_160831f2
Bytes: 101
Should this be kVerifyNone (or equivalent) instead of false?

And why disable the check in this case?

180:18-180:19
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_93d284f0
Bytes: 21
0 -> some const name?

281:21-281:26
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_1378544f
Bytes: 25
false -> some const name?

286:74-286:79
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_d6715969
Bytes: 4
same

294:6-294:33
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_967fe134
Bytes: 52
The two constants are the same. There's a typo here?

478:0-478:2
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_b325c03b
Bytes: 52
Do we want to verify old_value if kVerifyReads here?

File: runtime/mirror/object.h

63:22-63:44
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_d3d5ec2f
Bytes: 34
Add a description of what this is?

File: runtime/mirror/object_array-inl.h

97:25-97:26
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_d3308c6d
Bytes: 24
0 -> some constant name?

File: runtime/thread-inl.h

155:0-155:2
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_33cab0e2
Bytes: 162
How about surrounding the whole function body with kVerifyStack and get rid of "if (kVerifyStack) { ... }" at the call sites to be consistent with VerifyObject()?

File: runtime/verify_object-inl.h

29:58-29:72
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_361c4d7f
Bytes: 68
I'm not sure, but would putting LIKELY or UNLIKELY here speed it up?

39:13-39:14
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_934ff3a6
Bytes: 15
How about ||= ?

55:26-55:40
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef469d41_ec368bfd
Bytes: 64
Is this different from c->GetClass<kVerifyObjectModeDisabled>()?

55:56-55:57
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_d655d918
Bytes: 51
We'd want to use some constant name instead of '0'?

File: runtime/verify_object.h

33:63-33:64
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_f3d2e79e
Bytes: 11
One period?

34:50-34:57
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0f3a11a9_b3078035
Bytes: 44
How about describing what Fast and All mean?

38:0-44:80
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef469d41_ac6ba3c4
Bytes: 92
These are a different set from VerifyObjectMode? Does it make sense to have kVerifyNone = 0?

47:46-47:47
Fri Feb 21 20:03:01 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f78b56e_b6669dfd
Bytes: 81
This '0' means the zero value in the set of kVerifyThis, kVerifyReads, ... right?

