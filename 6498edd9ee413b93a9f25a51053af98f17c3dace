Revision: 6498edd9ee413b93a9f25a51053af98f17c3dace
Patch-set: 1
File: compiler/optimizing/code_generator_arm64.h

41:0-41:60
Fri Jul 01 15:27:57 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 606e977c_1d7263f8
Bytes: 28
This is against style rules.

41:0-41:60
Fri Jul 01 16:11:59 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 606e977c_1d7263f8
UUID: 20d49f7c_2a07bf4c
Bytes: 334
Without this `using`, `vixl::aarch64::` becomes very invasive.
I felt this might be an acceptable trespassing:
- The `using` is in the namespace `art::arm64`, so does not leak out to other backends.
- ARM64 code including this header likely will deal with code-generation and also use VIXL.
Does it sound reasonable to you? Up to you.

41:0-41:60
Wed Jul 13 10:06:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 20d49f7c_2a07bf4c
UUID: 1ab2acf6_fafb2545
Bytes: 145
Looks like Scott did the change? Looking at PS3, maybe just "using namespace vixl" would be ok for me. But maybe not worth trsspassing the style?

41:0-41:60
Wed Jul 13 10:22:10 2016 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1ab2acf6_fafb2545
UUID: ba70c019_e7945cfe
Bytes: 250
I did.

Do you want me to use "using namespace vixl" in the header files, even though it's against your style rules? I think a using directive in the headers is neater, but as Andreas points out, it's against your rules.

How do you want me to do it?

41:0-41:60
Wed Jul 13 10:22:57 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ba70c019_e7945cfe
UUID: 1ab2acf6_fa9405fe
Bytes: 23
It's fine as it is now.

67
Fri Jul 01 16:11:59 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 20d49f7c_6ae89784
Bytes: 22
Alignment. Same below.

67
Mon Jul 04 11:01:57 2016 +0000
Author: Scott Wakeling <1076052@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 20d49f7c_6ae89784
UUID: fdd95270_eec8df32
Bytes: 4
Done

