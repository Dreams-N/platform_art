Revision: 6786a58659420c0631a1ebe1f2fde434b8bcd1e4
Patch-set: 1
File: runtime/interpreter/interpreter_common.h

205:15-205:27
Wed Oct 29 09:21:40 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55abca56_2e2e8b80
Bytes: 329
We may have a pending ArrayIndexOutOfBounds if the string_idx is bad (thrown by ObjectArray::Get). I believe that would happen only if we do runtime verification.

We should either return so this exception is handled in the interpreter OR clear it before resolving the string (which may throw an exception if something is wrong).

205:15-205:27
Wed Oct 29 15:27:16 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55abca56_2e2e8b80
UUID: 5594aafe_cb21f3ca
Bytes: 369
Agreed, this is something of a pre-existing condition rather than something this change adds. The method verifier checks string indices in VerifyInstruction:

    case Instruction::kVerifyRegBString:
      result = result && CheckStringIndex(inst->VRegB());

so the exception should never occur, in which case this can be a GetWithoutChecks (which has a bounds DCHECK).

205:15-205:27
Wed Oct 29 15:47:21 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5594aafe_cb21f3ca
UUID: 75ae0e67_55cef6bf
Bytes: 457
Right, we should fail verification with a hard failure (see MethodVerifier::CheckStringIndex). Since the verification fail, we shouldn't execute the method and end up here. Using GetWithoutChecks would avoid the cost of checking index again.

Actually we do the same for class, method and field resolution where we always test the index validity at runtime when accessing the DEX cache. I believe we could do the same change.

I'll file a bug to track that.

