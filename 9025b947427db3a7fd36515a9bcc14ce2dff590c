Revision: 9025b947427db3a7fd36515a9bcc14ce2dff590c
Patch-set: 3
File: compiler/optimizing/code_generator_arm.cc

4394:2-4396:3
Tue Sep 15 16:46:43 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0465c2c3_441aef3a
Bytes: 151
How about initializing output to zero? Then this becomes a jump to done, and quite a bit of the rest becomes simpler (no branch-overs to zero or done).

4394:2-4396:3
Tue Sep 15 16:48:20 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0465c2c3_441aef3a
UUID: 8478d270_004e2735
Bytes: 69
(Would be irrelevant if our assemblers would remove useless jumps...)

4394:2-4396:3
Tue Sep 15 16:51:19 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8478d270_004e2735
UUID: 64211e85_a5b73e2e
Bytes: 114
You need the zero case in most situations (since we overwrite out in cases below), so it doesn't seem that useful.

4394:2-4396:3
Tue Sep 15 16:54:29 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64211e85_a5b73e2e
UUID: 848ff2ac_f3203236
Bytes: 59
OK, then maybe consider the first comment, pre-loading 0...

4394:2-4396:3
Tue Sep 15 16:57:11 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 848ff2ac_f3203236
UUID: c93f43b4_b3952231
Bytes: 45
Then one instruction extra for handling null?

4394:2-4396:3
Tue Sep 15 17:01:57 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c93f43b4_b3952231
UUID: 44725a92_0aaac4ed
Bytes: 60
Sorry, didn't realize you dual-use out. Can't we use a temp?

4458:6-4458:18
Tue Sep 15 16:46:43 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e467cecb_f37910c4
Bytes: 78
Same optimization as below (skip if zero not used, which should be true here?)

4450:4-4472:5
Tue Sep 15 16:31:05 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 648afea0_c9de24d1
Bytes: 65
I'm curious. Why the difference in structure between those cases?

4450:4-4472:5
Tue Sep 15 16:34:19 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 648afea0_c9de24d1
UUID: 09e87b64_c2c582c6
Bytes: 318
Structure? I assume you mean implementation?

An array can be exactly of Interface[], whereas an Object cannot be of class Interface. Therefore, the array check can do a cheap class comparison check and then go to slow path if it fails. For regular objects, we know the class comparison will fail against an interface.

