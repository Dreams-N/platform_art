Revision: 1c5f859a77096b61a2d61c8729eea6146f1c1e13
Patch-set: 18
File: compiler/optimizing/builder.cc

965:15-965:78
Wed Aug 12 22:03:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a41eb557_4e37570a
Bytes: 44
So could you make this a helper in DexFile ?

965:15-965:78
Thu Aug 13 11:20:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a41eb557_4e37570a
UUID: 446259ef_6967c546
Bytes: 212
Does this logic belong to the DexFile? The DexFile is really the same if the inode is the same (or the memory address is the same for memory-based DexFiles). And yet, for the compiler even that may not be enough.

965:15-965:78
Fri Aug 14 11:10:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446259ef_6967c546
UUID: c4672930_751bc878
Bytes: 53
Why would an Equals method not belong to the DexFile?

965:15-965:78
Fri Aug 14 11:53:52 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4672930_751bc878
UUID: 0456a145_97aca474
Bytes: 130
Because the definition we need is compiler specific. I wouldn't want to see a comment "compiler needs it this way" in the DexFile.

965:15-965:78
Fri Aug 14 12:34:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0456a145_97aca474
UUID: e46c2d17_f66b6090
Bytes: 72
Oh I see. What would be the definition for other uses than the compiler?

965:15-965:78
Fri Aug 14 14:45:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e46c2d17_f66b6090
UUID: 040b0162_8fe3d5c3
Bytes: 146
ClassLinker::FindDexCache() also tries to match location if pointer comparison doesn't yield a result. I don't know what use cases does it target.

956:0-1029:3
Wed Aug 12 22:03:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64111d42_293c19ea
Bytes: 398
How about we move all this logic to CodeGenerator? And just pass method_ptr/code_ptr to HInvokeStaticOrDirect. This would also nicely move all the new enums intriduced in nodes.h to CodeGenerator.

Compile-time point in case: there's no need to do all this logic if the invoke is actually dead code. I know the compiler driver is also doing it, but that's also something I'd like to see cleaned up.

956:0-1029:3
Thu Aug 13 10:56:47 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64111d42_293c19ea
UUID: 240ba519_9857f5a0
Bytes: 36
Sounds like a good suggestion to me.

956:0-1029:3
Thu Aug 13 11:20:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 240ba519_9857f5a0
UUID: 240ba519_d8a68d44
Bytes: 68
Let's leave this to a refactoring CL, it will need a lot of thought.

956:0-1029:3
Fri Aug 14 11:10:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 240ba519_d8a68d44
UUID: c4672930_55204ca1
Bytes: 190
Why do you think it will need some thought?

If we agree it's better, I'd rather do this now than in a refactoring CL, which is often delayed because of more (valid) importants things to do.

956:0-1029:3
Fri Aug 14 11:53:52 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4672930_55204ca1
UUID: 040b0162_af82190b
Bytes: 737
I don't want to store the magic values for direct_code and direct_method returned by the ComputeInvokeInfo(). I want to process them right here. It logically belongs together and postponing the processing while keeping the ComputeInvokeInfo() here just spreads the chaos around instead of keeping it localized.

And you're not thinking far enough. For example, this information could be used by inliner; if we actually use kDexCachePcRelative, we can relax the same_dex_file check. So, if we push this to the CodeGenerator now, we may need to pull it back later.

This CL should be considered a first step, not the last one. I have the refactoring on my roadmap because there are a lot of things that the CompilerDriver should do better.

956:0-1029:3
Fri Aug 14 12:34:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 040b0162_af82190b
UUID: e4f18da3_ee0fffe8
Bytes: 355
There's sort of already stored with the method_load_data.....

Also, why would it affect inlining? The only problem with inlining is being able to recover the call stack, which we cannot do because we rely on the dex_method_index of the outermost method's dex_file. So I don't see why a different call implementation (relative/direct/...) would affect it?

956:0-1029:3
Fri Aug 14 14:45:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4f18da3_ee0fffe8
UUID: c4ec89d0_ad34dde3
Bytes: 398
method_load_data_ is a union of string_init_offset, method_address and dex_cache_offset, distinguished by method_load_kind_. It no longer needs to be decoded to find out what to do with itm, the decoding has already happened.

Inliner checks

  if (!same_dex_file && current->NeedsDexCache()) { ... }

If we can access a different dex cache with a PC-relative load, we don't need the same dex file.

File: compiler/optimizing/code_generator.h

360:0-368:4
Wed Aug 12 22:03:38 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64367de0_fbaf0367
Bytes: 121
Because Label is not used by vixl, we are templatizing the CommonGetLabel method in this file. Could we do the same here?

360:0-368:4
Thu Aug 13 11:20:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64367de0_fbaf0367
UUID: a47a35a8_74c52807
Bytes: 4
Done

