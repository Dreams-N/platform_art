Revision: 93fb4fc46c1798b80b3e0ac2ec1e14715d2f68ca
Patch-set: 13
File: cmdline/cmdline_parser_test.cc

420:38-420:42
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6998d84_92bbdcbd
Bytes: 108
Why not just directly use one bool flag "UseJIT" (is there a reason to do two flags like -Xjit and -Xnojit)?

File: compiler/compiled_method.cc

149:21-149:52
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96db9505_d0099c54
Bytes: 233
mapping_table.empty()

An empty ArrayRef<>, just like an empty std::vector<>, can have null or non-null data() and it doesn't affect its semantics. Most ArrayRef<>s are constructed from std::vector<>s and acquire their data() anyway.

File: compiler/dex/mir_analysis.cc

803:0-840:10
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 164de5ae_7c8459ef
Bytes: 56
dex_instruction_list.h says "unused-f3" ... "unused-ff".

1209:39-1209:54
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6834dc3_e5abd0ee
Bytes: 174
This is an abuse of MethodReference. We should have a FieldReference class as well if we want to do it like this. However, I'd keep this as uint16_t* or uint32_t*, see below.

1238:32-1238:79
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 36402975_7d8457ef
Bytes: 336
This should be in Mir{I,S}FieldLoweringInfo::Resolve(). This method should just record an extra flag "is_quick" and pass it to the Mir{I,S}FieldLoweringInfo constructors.

(You can allocate another bool array for these flags or encode them locally with the index/offset for faster search in a unified "uint32_t* field_idxs_or_offsets".)

1383:34-1383:82
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d658ad71_3ac4a198
Bytes: 250
This should be in MirMethodLoweringInfo::Resolve(). Just store mir->dalvikInsn.vB in the target method idx and record an additional "is_quick" flag here.

(MapEntry::invoke_type is unnecessarily 16-bit, change it to 8-bit to make space for the flag.)

File: compiler/dex/mir_dataflow.cc

761:0-799:0
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b65df961_19b72b08
Bytes: 56
dex_instruction_list.h says "unused-f3" ... "unused-ff".

File: compiler/dex/mir_field_info.cc

71:52-71:61
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6834dc3_659820e2
Bytes: 36
Remove: don't compare bool to false.

File: compiler/dex/mir_graph.cc

1740:0-1746:3
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56c59d22_eefddfc1
Bytes: 67
Rewrite using IsInstructionInvoke() and IsInstructionQuickInvoke().

File: compiler/dex/mir_graph.h

694:0-697:5
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 766b81dd_f7a14088
Bytes: 265
This is error-prone. meta is a union, so this check may spuriously fail.

Please revert all changes to GetMethodLoweringInfo() and implement appropriate checks in callers. It is their responsibility to ensure that they call GetMethodLoweringInfo() only for invokes.

File: compiler/dex/mir_method_info.cc

106:12-106:20
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56c59d22_aef7d7df
Bytes: 56
Always false in this branch of the highest enclosing if.

File: compiler/dex/mir_method_info.h

218:2-218:16
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 766b81dd_d7bbdcbc
Bytes: 109
Did we run out of bits in flags_? This bool will increase the sizeof(MirMethodLoweringInfo) by sizeof(void*).

218:7-218:16
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16fc05c4_c49f3e70
Bytes: 44
What does is_quick mean? Quick the compiler?

File: compiler/dex/quick/mir_to_lir.cc

410:6-410:22
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6834dc3_e55d1067
Bytes: 80
FALLTHROUGH_INTENDED or nothing (not even a blank line) here and 17 times below.

File: compiler/dex/verified_method.cc

75:0-75:40
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6f851d4_43fea6be
Bytes: 41
Put DCHECK(Runtime::Current()->UseJit())?

File: compiler/driver/compiler_driver-inl.h

233:43-233:59
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56c59d22_8e2c5bbf
Bytes: 37
So we're losing some sharpening here?

File: compiler/driver/compiler_driver.cc

572:0-591:25
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76a621d5_9f1ab366
Bytes: 129
If we put lines 572-585 in a nested block, can we avoid the TransitionFromRunnableToSuspended call across the CompileMethod call?

1092:13-1097:16
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d60eedb4_6a497753
Bytes: 45
I guess this applies to app classes, correct?

1344:0-1347:66
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 36d66940_2d894d3a
Bytes: 189
If the condition in line 1344 holds, is it ok to return? Is there a chance that we should negate the condition and put line 1347 into the if-then block and fall through to line 1365 and on?

File: compiler/jit/jit_compiler.h

2:13-2:17
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16fc05c4_04f2f6a0
Bytes: 5
2015?

File: runtime/class_linker.cc

252
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56abdd9d_3ea0493a
Bytes: 43
Is it intentional to add a blank line here?

1037:44-1037:94
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a1d5bc_83014037
Bytes: 54
Indentation seems off (though it's the original code)?

1108:0-1109:57
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56abdd9d_bed7b978
Bytes: 10
Here, too.

1631:10-1631:40
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f6b1310e_3b2df7b9
Bytes: 177
Is this fixing a bug (i.e., we should not set code pointer size for a runtime method) or removing redundancy (i.e., we don't need to set code pointer size for a runtime method)?

File: runtime/dex_instruction_utils.h

190:0-190:6
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 766b81dd_d748bc51
Bytes: 125
Unnecessary and potentially harmful to code size if the compiler emits out-of-line copies - the linker will keep all of them.

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

612:0-613:56
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16cfa548_ccd7cf46
Bytes: 75
I assume this small change is just for debugging. Revert before submitting.

File: runtime/instrumentation.cc

131:9-131:46
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a1d5bc_a089dabe
Bytes: 169
Does this suggest that we can have forced interpret and have jit at the same time? Can we make these mutually exclusive (it seems odd to have JIT when interpreter only)?

139:65-139:79
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56abdd9d_3e784957
Bytes: 9
same here

File: runtime/instrumentation.h

98:24-98:46
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a1d5bc_60ee3291
Bytes: 31
This is a copy-and-paste error.

296:27-296:47
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69c1985_e1e126a5
Bytes: 5
Same.

File: runtime/interpreter/interpreter_common.cc

690:8-690:37
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56abdd9d_bebd7995
Bytes: 9
same here

File: runtime/jit/jit.cc

69:29-69:32
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5643dd80_1e1b8d9e
Bytes: 3
not

122
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9639d503_00432634
Bytes: 29
dlclose(jit_library_handle_)?

File: runtime/jit/jit_code_cache.cc

26:42-26:50
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56475dec_9e009de4
Bytes: 45
Assert that capacity < 4G for a 64-bit build?

34:49-34:56
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96b475b1_88d1b7d2
Bytes: 4
typo

51:12-51:22
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7642a1dd_3f762725
Bytes: 44
Assign a mutex level in the enum in mutex.h?

58:37-58:62
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96b475b1_c8f00f6d
Bytes: 54
Could we instead make the code grow down from the end?

80:0-80:98
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7642a1dd_7f610f77
Bytes: 28
Should this line be removed?

95:16-95:21
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 763e21ec_bf7377ce
Bytes: 3
end

102:16-102:21
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 763e21ec_9f7033c3
Bytes: 3
end

File: runtime/jit/jit_code_cache.h

51:26-51:27
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7642a1dd_7f6b4f88
Bytes: 6
const?

File: runtime/jit/jit_instrumentation.cc

61:21-61:28
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9639d503_00b04607
Bytes: 45
Unnecessary, nullptr is the default argument.

File: runtime/mirror/art_field.cc

47:43-47:56
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f66cd149_e329b2ad
Bytes: 42
Why skip the DCHECK_ALIGNED if we use JIT?

File: runtime/mirror/art_method.cc

349:8-349:28
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56ae7d66_e61c1e63
Bytes: 77
This variable is used only here, so it should not be calculated so far above.

423:27-423:45
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16708517_a42fc2b2
Bytes: 50
Why need this? We don't run JIT when -Xint, right?

File: runtime/mirror/art_method.h

303:42-303:46
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76a8e190_6f6211a8
Bytes: 42
Add comment on what 'code' is pointing to?

308:14-308:33
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56767d13_46ce12b8
Bytes: 82
Can this be private? Since we don't check code is a valid pointer, it seems risky.

File: runtime/oat_file.cc

583:4-583:97
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6b979da_991f9b56
Bytes: 28
Update this comment for JIT?

File: runtime/quick/inline_method_analyser.cc

115:0-117:43
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96b475b1_e8f71391
Bytes: 4
WIP?

File: runtime/runtime.cc

232:33-232:39
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6341908_4149b276
Bytes: 15
Remove "after".

838:0-840:3
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6998d84_72dd9896
Bytes: 90
Does this mean that create jit options if we are not AOT or JIT? Not sure what this means.

841:0-843:3
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6998d84_12f7ec18
Bytes: 54
On what conditions exactly do we enable jit currently?

File: runtime/runtime.h

107:0-109:3
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96a1d5bc_e0e242e0
Bytes: 117
Does this mean now that we are more or less dex2oat, which is what IsCompiler() used to mean? Add comment to clarify?

111:7-111:17
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6998d84_32015080
Bytes: 101
I think this used to mean more or less we are dex2oat.

What does this exactly mean now? Add comment?

File: runtime/signal_catcher.cc

183:37-183:62
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f66cd149_e37a929e
Bytes: 40
Why create_peer = true for the JIT case?

File: runtime/utils.cc

1242:10-1244:21
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6998d84_955ca633
Bytes: 288
Can we add a non-static version of ArtMethod::PcIsWithinQuickCode (and turn the static version private)? It seem that if we do, we would not need to modify this code and it'd be safer as we don't check the validity of the 'code' param in the current static ArtMethod::PcIsWithinQuickCode.

File: runtime/verifier/method_verifier.cc

116:70-116:79
Wed Feb 11 17:34:38 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6341908_01b04a07
Bytes: 22
error ATTRIBUTE_UNUSED

File: test/etc/run-test-jar

264:14-264:25
Thu Feb 12 03:05:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b69c1985_212a6ea2
Bytes: 79
Why -Xint and Xjit at the same time? It seem they should be mutually exclusive.

