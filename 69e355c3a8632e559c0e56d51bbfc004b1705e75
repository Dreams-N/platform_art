Revision: 69e355c3a8632e559c0e56d51bbfc004b1705e75
Patch-set: 1
File: compiler/optimizing/code_generator.h

118:0-130:2
Thu Sep 10 08:06:40 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c43d6a4e_a020da34
Bytes: 140
Is it worth having a second class? Could we just put the Labels as fields and pay the price for vixl? Alternatively templating SlowPathCode?

118:0-130:2
Thu Sep 10 15:38:59 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c43d6a4e_a020da34
UUID: c4ef2afe_3b0de73f
Bytes: 350
Templating means that all functions handling (base) slow paths will have to be templated as well. I assumed that would have been against your wishes for simplicity.

Using this as the base class seems OK, as I don't imagine there are a gazillion of those in flight at any point in time, so the overhead shouldn't kill us. It's just not as clean IMHO.

118:0-130:2
Thu Sep 10 15:44:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4ef2afe_3b0de73f
UUID: e436ee6e_01674aae
Bytes: 100
I agree it's not as clean. Look at line 393: it wouldn't be the first time we template due to Label.

118:0-130:2
Thu Sep 10 21:12:03 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e436ee6e_01674aae
UUID: e4c34e74_a51a0938
Bytes: 308
The difference is that CodeGenerator doesn't have to store that templated class - MethodPatchInfo is stored and handled by the sub-classes (only trivial .

SlowPathCode, on the other hand, is managed by CodeGenerator itself. If you're OK with templatizing the whole of CodeGenerator, then I'm happy to do it.

118:0-130:2
Thu Sep 10 21:14:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e4c34e74_a51a0938
UUID: c43d6a4e_c3916816
Bytes: 115
Erf, templating CodeGenerator just sucks. So what about my first suggestion? Just put the Labels in SlowPathCode...

File: compiler/optimizing/code_generator_x86.cc

5449:0-5454:7
Thu Sep 10 09:31:50 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c4164adc_d8538ddf
Bytes: 44
Do we need to consider target_reg_lo == EDX?

5449:0-5454:7
Thu Sep 10 15:38:59 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4164adc_d8538ddf
UUID: 44fdfae7_3c2b7119
Bytes: 172
I guess I assumed the target would come from the register allocator, which I believe allocates this in "regular" pairs. AFAIK you won't get EDX as the low partner. Nicolas?

5449:0-5454:7
Thu Sep 10 15:44:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 44fdfae7_3c2b7119
UUID: 0434e264_65eae0e5
Bytes: 141
Unfortunately, you never know, as some instructions might say they want lo to be EDX. You can use ParallelMoveResolver to solve your problem.

5449:0-5454:7
Thu Sep 10 21:12:03 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0434e264_65eae0e5
UUID: 44cedaa4_c98c01ff
Bytes: 129
I'd rather clean this up in a follow-up CL, if that's OK. I intended this as a plain "move-stuff-around-to-reduce-copy-pasta" CL.

