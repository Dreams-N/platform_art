Revision: e09269ca05e3014e86198e9a2cf6092026fafefd
Patch-set: 1
File: runtime/dex_file_verifier.cc

1384:80-1384:88
Fri Jun 13 16:54:53 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf713c8e_1e576a00
Bytes: 88
Should this be DexFile::kDexNoIndex16? or should we have a constexpr value for 0x10000U?

1384:80-1384:88
Fri Jun 13 16:58:25 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf713c8e_1e576a00
UUID: bf713c8e_5e69e2c6
Bytes: 211
I should have made it a constant.

This is *not* kDexNoIndex16, as that is a valid return (as in "I didn't find anything"). This, which is >16b, signals an error when trying to load something.

Cleanup CL later.

1384:80-1384:88
Fri Jun 13 17:01:44 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf713c8e_5e69e2c6
UUID: 7f49844c_0127143e
Bytes: 187
Is it expected? We only use no index values in a few special cases. My concern is to avoid all data-types turning into int. I appreciated you commented the differences in the header file.

1384:80-1384:88
Fri Jun 13 17:32:16 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f49844c_0127143e
UUID: df74307d_7239715d
Bytes: 207
The issue is that we have two different uses of this. In one, we expect a valid index being returned. In the other one it is OK if this method doesn't find anything (so kDexNoIndex16 is a valid return then).

1805:0-1805:35
Fri Jun 13 16:54:53 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf713c8e_3e6c26d8
Bytes: 36
This feels like kDexNoIndex16 to me.

1805:0-1805:35
Fri Jun 13 16:58:25 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf713c8e_3e6c26d8
UUID: df74307d_12275da7
Bytes: 134
In this case I guess one could reuse kDexNoIndex16, but that check was missing before. For the "bigger" picture see the other comment.

