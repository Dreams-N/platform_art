Revision: 5b476d09254473fc179e7048612cd4472abfa6f8
Patch-set: 1
File: compiler/optimizing/codegen_test.cc

43
Fri Aug 28 10:46:28 2015 +0000
Author: Serban Constantinescu <1072549@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_0c16bb55
Bytes: 15
nit: not sorted

43
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_0c16bb55
UUID: 64091ddd_04f29790
Bytes: 4
Done

126:9-128:56
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_b21fc662
Bytes: 406
Please refactor this using something similar to https://android-review.googlesource.com/#/c/167353/2/compiler/optimizing/codegen_test.cc:

  static bool CanExecuteOnHardware(InstructionSet target_isa) {
    return (target_isa == kRuntimeISA)
        // Handle the special case of ARM, with two instructions sets
        // (ARM32 and Thumb-2).
        || (kRuntimeISA == kArm && target_isa == kThumb2);
  }

126:9-128:56
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_b21fc662
UUID: c4ee4936_a3b0fe4a
Bytes: 4
Done

133:33-133:47
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e45eedce_4ca913db
Bytes: 124
Use a pointer instead of reference, as per our C++ style guide ("all parameters passed by reference must be labeled const").

133:33-133:47
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e45eedce_4ca913db
UUID: 64091ddd_64e713d2
Bytes: 4
Done

File: runtime/code_simulator_container.cc

27:0-28:38
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 444df958_91535c43
Bytes: 33
Break the line after `=` instead.

27:0-28:38
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 444df958_91535c43
UUID: 64f67e4d_1dbe33eb
Bytes: 4
Done

31:2-31:12
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_aec43bda
Bytes: 274
I would send the message to the verbose log instead, for debugging purposes:

  const char* libart_compiler_so_name =
      kIsDebugBuild ? "libartd-simulator.so" : "libart-simulator.so";
  VLOG(compiler) << "Could not load " << libart_compiler_so_name << ": " << dlerror();

31:2-31:12
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_aec43bda
UUID: c421e986_c5bfda46
Bytes: 57
Should I add a member `bool simulator` to `LogVerbosity`?

31:2-31:12
Tue Sep 01 10:54:56 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c421e986_c5bfda46
UUID: 04d222e7_b2f740c1
Bytes: 24
Sure, sounds good to me.

31:2-31:12
Tue Sep 01 12:21:01 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 04d222e7_b2f740c1
UUID: 4405fafc_1f53c7de
Bytes: 4
Done

34:0-35:64
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_6ea72341
Bytes: 15
Nit: long line.

34:0-35:64
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_6ea72341
UUID: c41729fa_bef2dd91
Bytes: 4
Done

36:63-36:70
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c459e9e9_0eb46f67
Bytes: 6
symbol

36:63-36:70
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c459e9e9_0eb46f67
UUID: 64091ddd_c4a09f7e
Bytes: 4
Done

File: runtime/code_simulator_container.h

35:2-35:16
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_96b52c6d
Bytes: 115
As `simulator_` can be null, I would return a pointer here (even if we're supposed to call CanSimulate before Get).

35:2-35:16
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_96b52c6d
UUID: c41729fa_7ec8454a
Bytes: 4
Done

40:2-40:22
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_eca0ff7d
Bytes: 6
Ditto.

40:2-40:22
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_eca0ff7d
UUID: a4fdd5ea_22586a80
Bytes: 4
Done

47
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 444df958_5172d4d6
Bytes: 62
Also add:

  DISALLOW_COPY_AND_ASSIGN(CodeSimulatorContainer);

47
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 444df958_5172d4d6
UUID: c4f1ea51_c0c9fe39
Bytes: 4
Done

File: runtime/simulator/Android.mk

100:0-105:5
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 845371c9_ec89df03
Bytes: 85
Shouldn't we prevent the simulator from being built on targets (at least by default)?

100:0-105:5
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 845371c9_ec89df03
UUID: c41729fa_9ef72182
Bytes: 5
Done.

File: runtime/simulator/code_simulator.h

27:2-27:71
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_d69884fe
Bytes: 112
Add a comment saying that this functions returns a null pointer if a simulator cannot be found for `target_isa`.

27:2-27:71
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_d69884fe
UUID: c4f1ea51_a0c6fa25
Bytes: 4
Done

32:31-32:32
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 446ed97b_d2c91a55
Bytes: 5
const

32:31-32:32
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 446ed97b_d2c91a55
UUID: c41729fa_feec55b7
Bytes: 4
Done

33:35-33:36
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e48fcdab_e136a00c
Bytes: 5
const

33:35-33:36
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e48fcdab_e136a00c
UUID: c41729fa_def1998d
Bytes: 4
Done

34:35-34:36
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_0b4745f8
Bytes: 5
const

34
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: e478ad71_f69d80eb
Bytes: 65
Also add:

  private:
   DISALLOW_COPY_AND_ASSIGN(CodeSimulator);

34
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e478ad71_f69d80eb
UUID: 4436d9c8_c950d1df
Bytes: 109
CodeSimulator is an abstract base class, so it is non-copy-able and non-assignable. Could we drop this issue?

34
Tue Sep 01 10:54:56 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4436d9c8_c950d1df
UUID: c4dbaa04_102c04c8
Bytes: 144
I think we use DISALLOW_COPY_AND_ASSIGN even in abstract classes; see e.g. the definition of `art::HInstruction` in compiler/optimizing/nodes.h.

34
Tue Sep 01 12:21:01 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c4dbaa04_102c04c8
UUID: 447fb94c_245b3c80
Bytes: 4
Done

37:0-38:62
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 64e03d3d_ab51f9b3
Bytes: 21
Put on a single line.

37:0-38:62
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 64e03d3d_ab51f9b3
UUID: 4436d9c8_295ecdbd
Bytes: 4
Done

File: runtime/simulator/code_simulator_arm64.h

52
Fri Aug 28 13:48:23 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 444df958_913c3cef
Bytes: 58
Also add:

  DISALLOW_COPY_AND_ASSIGN(CodeSimulatorArm64);

52
Mon Aug 31 10:22:09 2015 +0000
Author: Phil Wang <1076443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 444df958_913c3cef
UUID: 447fb94c_4496801f
Bytes: 4
Done

