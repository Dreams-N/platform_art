Revision: 9ada13e80abf74aa66e980a27b06430df7b543cb
Patch-set: 3
File: /COMMIT_MSG

7:0-7:57
Tue Jul 19 19:36:17 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a5b3b40_7089e184
Bytes: 128
I wonder why we didn't do this to begin with? Any reason that we originally wanted to get to inline cache roots via ArtMethod's?

7:0-7:57
Tue Jul 19 22:04:45 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5b3b40_7089e184
UUID: 0a697be4_37f258d6
Bytes: 236
Mainly it felt to me that was the most natural way of doing it?
Class -> methods -> ProfilingInfo.

But if someone can concurrently erase profiling info, then yeah, we shouldn't do it this way and ensure we hold the profiling info lock.

10:26-10:59
Tue Jul 19 19:36:17 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a5b3b40_1c7881f4
Bytes: 105
This is referring to loading 0xwilldie into a local variable (eg art_method-inl.h:468 in Base PS), right?

10:26-10:59
Tue Jul 19 22:04:45 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5b3b40_1c7881f4
UUID: 0a697be4_d7f67cc8
Bytes: 8
Correct.

14:50-15:54
Tue Jul 19 19:36:17 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a5b3b40_9c3a3119
Bytes: 529
I think the GC thread (when running GC) is treated as suspended and the checkpoint code (is it MarkCodeClosure?) for the GC thread is run by the thread driving the checkpoint rather than the GC thread itself.

So, is it more like the checkpoint is still run for the GC thread but not by the GC thread itself and so running the checkpoint doesn't ensure that the GC will see the updated (nulled) profiling info, that is, GC isn't in the middle of visiting a profiling info and is potentially preempted with a stale local variable?

14:50-15:54
Tue Jul 19 22:04:45 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5b3b40_9c3a3119
UUID: 0a697be4_f7f380d5
Bytes: 167
Correct. The thread initiating the MarkCodeClosure, will visit the stack of the GC thread.

And yes, GC thread got preempted in the middle of visiting a ProfilingInfo.

16:3-17:43
Tue Jul 19 19:36:17 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a5b3b40_dc11c963
Bytes: 82
Is this referring to the FreeData call near the end of JitCodeCache::DoCollection?

16:3-17:43
Tue Jul 19 22:04:45 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5b3b40_dc11c963
UUID: 0a697be4_9700049d
Bytes: 33
Yes, the one line 749 of this PS.

File: runtime/jit/profiling_info.h

106:27-106:51
Tue Jul 19 22:07:03 2016 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0a5b3b40_e9f3acd5
Bytes: 151
Always visiting the inline caches seems like it would prevent class unloading in a lot of cases. Does class unloading test pass with jit + this change?

106:27-106:51
Tue Jul 19 22:12:37 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5b3b40_e9f3acd5
UUID: 0a697be4_57ca6c74
Bytes: 183
I have b/29712509 on my plate.

But I have sort of anticipated this with:
https://cs.corp.google.com/android/art/runtime/gc/heap.cc?rcl=d429249ba9b12ce3d8a2c0ee6416bc325163e375&l=2713

106:27-106:51
Tue Jul 19 23:03:28 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a697be4_57ca6c74
UUID: 0a5b3b40_7f208a04
Bytes: 318
A side question re: the ClearGcRootsInInlineCaches call there, did you mean kGcTypeFull or kGcTypePartial there? 

I think in a zygote-forked process, we usually do kGcTypePartial when it's not a sticky collection, and probably no kGcTypeFull at all. As a side note, it's always kGcTypeFull for the non-CMS collectors.

106:27-106:51
Wed Jul 20 11:06:32 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0a5b3b40_7f208a04
UUID: ea8187c9_d9155799
Bytes: 98
Not sure. Seems Full was ok for you guys here:
https://android-review.googlesource.com/#/c/206582/

106:27-106:51
Tue Jul 26 21:54:31 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ea8187c9_d9155799
UUID: 0f0a6d5d_7e373d98
Bytes: 53
I think that should be kGcTypePartial or kGcTypeFull.

