Revision: 6901810d60594af239c34860dc28ca034234ab9d
Patch-set: 3
File: runtime/gc/collector/mark_compact.cc

200:43-200:47
Fri Jan 16 00:35:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bc55323_11dbaef9
Bytes: 186
I guess the third param does not matter for MarkCompact? We pass true because the non-atomic write is faster than the atomic write? Maybe could we have the third option of doing nothing?

200
Fri Jan 16 01:00:41 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bc55323_11dbaef9
UUID: abdbcb04_d652f4da
Bytes: 56
True, I guess we don't need to clear these cards at all.

200:43-200:47
Fri Jan 16 07:05:49 2015 +0000
Author: Lei Li <1015518@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bc55323_11dbaef9
UUID: cb71dfc8_dcc5414e
Bytes: 196
Yes. I agree with you two. Mark compact and Semi space are both Stop-the-World GC. Also there is ClearCardTable below. I will remove the code change for these two algorithms in the next patch set.

File: runtime/gc/collector/semi_space.cc

219:72-219:76
Fri Jan 16 00:35:25 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2bcfdb48_cc8a6fac
Bytes: 181
Similarly, the third param does not matter for the SS collector?

And the third param does not matter for the GSS collector as we don't take the "AllocSpaceClearCards" control path?

219
Fri Jan 16 01:00:41 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2bcfdb48_cc8a6fac
UUID: 2bcfdb48_efc87d34
Bytes: 70
Correct, also since we do ClearCardTable below it won't really matter.

File: runtime/gc/heap.cc

2691:21-2691:35
Thu Jan 22 05:58:21 2015 +0000
Author: Lei Li <1015518@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2b70bb17_2d549549
Bytes: 674
The existing implementation will release card table of the current alloc space if reset is true. This includes two cases. One case is stop-the-world GC, mark compact and semi space. The other case is partial and full concurrent mark sweep. For the first case, the whole card table will be cleared immediately. Therefor it's unnecessary to do this work in the third branch. For the second case, there may cause lots of page faults, since the card table may be allocated again in the next CMS cycle. One alternative approach is that for stop-the-world GC, the third branch won't be allowed while using memset to reset the card table of the current allos space for CMS. Thanks.

