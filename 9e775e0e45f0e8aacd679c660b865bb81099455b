Revision: 9e775e0e45f0e8aacd679c660b865bb81099455b
Patch-set: 5
File: runtime/gc/allocator/rosalloc.cc

1873:7-1873:26
Tue Nov 04 23:47:57 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f533de7c_055f54bc
Bytes: 526
One more thing about modularity:

Since the ValgrindMallocSpace thing now requires internal changes in the rosalloc allocator code (this CL), if we use RosAlloc from code other than ValgrindMallocSpace and we run it on valgrind, this additional code would not make sense.

How about passing in a bool parameter (something like "running_with_ valgrind_malloc_space") to the RosAlloc constructor, and act accordingly in Verify() and Run::Verify(), rather than directly checking RUNNING_ON_VALGRIND in Verify() and Run::Verify()?

1873:7-1873:26
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f533de7c_055f54bc
UUID: 15e07212_c53e1ee2
Bytes: 8
Will do.

1923:12-1923:91
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15e07212_919f3c69
Bytes: 93
How about

start += ::art::gc::space::kDefaultValgrindRedZoneBytes;

instead, like line 2099?

1923:12-1923:91
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15e07212_919f3c69
UUID: 35e3b620_bb3c535a
Bytes: 77
start is a void*, so that doesn't work directly. I need to change its type...

1927:19-1927:27
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75d9ae6e_4805a333
Bytes: 71
I think we need to a dd the red zone size to obj_size in these CHECK_*.

1927:19-1927:27
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75d9ae6e_4805a333
UUID: f533de7c_6557409a
Bytes: 13
Yes, will do.

2102:39-2102:59
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75d9ae6e_1d347f1c
Bytes: 304
Since the variable is called obj_size which suggests a true object size that does not include the red zone, can you add valgrind_modifier to it inside the following CHECK_*, as opposed to defining obj_size to include the red zone? Or, create another variable that stands for obj_size + valgrind_modifier?

2102:39-2102:59
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75d9ae6e_1d347f1c
UUID: 15e07212_25172268
Bytes: 8
Will do.

File: runtime/gc/allocator/rosalloc.h

375:5-375:86
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15e07212_4e3a530d
Bytes: 115
I'm still not clear on what this means exactly and why we do not check zero memory under valgrind. Can you explain?

375:5-375:86
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15e07212_4e3a530d
UUID: 35e3b620_9b1d17d3
Bytes: 100
I will check again, but last time it failed. I think the issue is the protection status of the page.

375:5-375:86
Thu Nov 06 00:14:08 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_9b1d17d3
UUID: 755e0ed1_868a8aa7
Bytes: 247
The original meaning of kCheckZeroMemory was that we check we always return zeroed memory for allocation requests.

As RosAlloc::Run::FreeSlot() always zeroes the slot (see the memset call), we should have all slots zeroed including the red zones.

375:5-375:86
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 755e0ed1_868a8aa7
UUID: 55f02a0f_66cf2464
Bytes: 93
This is not the case. Gtests fail in the checking code. I will leave this for a follow-up CL.

375:5-375:86
Fri Nov 07 00:39:03 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55f02a0f_66cf2464
UUID: 15c152c3_d87eb950
Bytes: 53
I understood your plan. Can you leave a TODO comment?

File: runtime/gc/space/dlmalloc_space.cc

149:43-152:64
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 35e3b620_95684664
Bytes: 100
Can we reorder the param list to match the constructor's? I think it'd be less error-prone that way.

149:43-152:64
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_95684664
UUID: f533de7c_c5d2cc92
Bytes: 53
Sure, this was to keep the API change the smallest...

File: runtime/gc/space/rosalloc_space-inl.h

39:19-41:56
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15e07212_91473c98
Bytes: 195
Instead of disabling the check for the valgrind case, would the following work

  size_t size_by_ptr = rosalloc_->UsableSize(reinterpret_cast<uint8_t*>(obj_ptr) - kDefaultValgrindRedZoneBytes)

?

39:19-41:56
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15e07212_91473c98
UUID: f533de7c_c5ebac36
Bytes: 7
Likely.

39:19-41:56
Thu Nov 06 00:14:08 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f533de7c_c5ebac36
UUID: 755e0ed1_262ab6e8
Bytes: 25
Can you make that change?

39:19-41:56
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 755e0ed1_262ab6e8
UUID: d5b25a5b_b1e680c1
Bytes: 4
Done

File: runtime/gc/space/rosalloc_space.cc

80:50-80:55
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 35e3b620_75d27ae3
Bytes: 79
It might compile fine as is, but should this be "allocator::RosAlloc*" instead?

80:50-80:55
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_75d27ae3
UUID: 15e07212_253a82ba
Bytes: 4
Yes.

80:50-80:55
Thu Nov 06 00:14:08 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15e07212_253a82ba
UUID: b564069b_0b8f8135
Bytes: 53
Can you change it from void* to allocator::RosAlloc*?

80:50-80:55
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b564069b_0b8f8135
UUID: b5b7a64b_10c5c445
Bytes: 56
The whole template parameter is unnecessary and removed.

83:41-83:42
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15e07212_51079486
Bytes: 20
2 spaces -> 1 space.

83:41-83:42
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15e07212_51079486
UUID: b5b7a64b_70d25011
Bytes: 4
Done

172:43-174:64
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75d9ae6e_a841a7d5
Bytes: 100
Can we reorder the param list to match the constructor's? I think it'd be less error-prone that way.

172:43-174:64
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75d9ae6e_a841a7d5
UUID: 15e07212_a5e2f2e2
Bytes: 36
Yes, see comment for dlmalloc_space.

File: runtime/gc/space/space_test.h

70:6-70:37
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75d9ae6e_e857af1a
Bytes: 28
Why is this always the case?

70:6-70:37
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75d9ae6e_e857af1a
UUID: 35e3b620_bb9b33d6
Bytes: 177
I guess we do not trigger an OOM (that's the only way I could see this violated), or know when we do and do not have the usable_size output? I'll constrain the check a bit more.

70:6-70:37
Thu Nov 06 00:14:08 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_bb9b33d6
UUID: 755e0ed1_26bf1633
Bytes: 223
I think Alloc() could round up the requested bytes (bytes) by some alignment, or do a page granularity allocation, in which cases it could be usable_size > bytes. RosAlloc does that. So, I wondered why you added this check.

70:6-70:37
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 755e0ed1_26bf1633
UUID: 95bc6233_0ff8055a
Bytes: 121
This was a sanity check during "upbringing". Also note that it only says >=, so covers your case. I'll remove this again.

File: runtime/gc/space/valgrind_malloc_space-inl.h

30:10-30:26
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15e07212_f469ceea
Bytes: 36
Why do we need this extra namespace?

30:10-30:26
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15e07212_f469ceea
UUID: f533de7c_25893880
Bytes: 46
Just to keep implementation details "private."

36:6-36:25
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15e07212_14869a70
Bytes: 124
I think we can assume bytes_allocated param is always non-null (unlike usable_size). So we don't need to check its nullness.

43:0-47:5
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f533de7c_a23c5e5a
Bytes: 66
Why not do the same for both cases (either of line 44 or line 46)?

43:0-47:5
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f533de7c_a23c5e5a
UUID: 35e3b620_3b5e236b
Bytes: 173
Line 46 doesn't work with RosAlloc, as we won't detect overflow (as usable_size almost always > num_bytes). The other case is the "traditional" one used for dlmalloc before.

43:0-47:5
Thu Nov 06 00:14:08 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_3b5e236b
UUID: 755e0ed1_e696deaf
Bytes: 85
I think line 44 would be a more strict check against an overrun for dlmalloc as well?

43:0-47:5
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 755e0ed1_e696deaf
UUID: 95bc6233_8f1075f5
Bytes: 117
Does it actually matter for dlmalloc, I am wondering? Does it ever supply memory that's larger than what's requested?

43:0-47:5
Fri Nov 07 00:39:03 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 95bc6233_8f1075f5
UUID: 15c152c3_381a6d61
Bytes: 49
I think it rounds up the request size by 8 bytes.

64:0-64:33
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75d9ae6e_a879a7f2
Bytes: 31
Remove this commented-out code?

64:0-64:33
Thu Nov 06 00:14:08 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75d9ae6e_a879a7f2
UUID: 555bcae0_658c2691
Bytes: 51
Do you mean to want to keep the commented-out code?

64:0-64:33
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 555bcae0_658c2691
UUID: d5b25a5b_d1e504b5
Bytes: 20
No, will be removed.

67:0-70:5
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 35e3b620_f5f54a31
Bytes: 31
Remove this commented-out code?

67:0-70:5
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_f5f54a31
UUID: d5b25a5b_11f82c5a
Bytes: 4
Done

75:0-75:6
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 35e3b620_d5236e19
Bytes: 7
inline?

75:0-75:6
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_d5236e19
UUID: d5b25a5b_31fbb05a
Bytes: 4
Done

143:0-147:5
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 35e3b620_e096aaaf
Bytes: 49
Similarly, why not doing the same for both cases?

143:0-147:5
Thu Nov 06 08:08:47 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 35e3b620_e096aaaf
UUID: d5b25a5b_f115a8e3
Bytes: 239
The original code used usable_size here, so I wanted to keep that code path.

Please note that it allows testing "over-provisioning," where we grow an array after the fact. It didn't work immediately with RosAlloc, so I split up the paths.

165:27-165:41
Tue Nov 04 23:21:59 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f533de7c_02750a6f
Bytes: 87
If we call S::AllocationSize() here instead, can the following if statement be removed?

165:27-165:41
Wed Nov 05 00:08:28 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f533de7c_02750a6f
UUID: 15e07212_65540a94
Bytes: 267
I don't think so. For one, dlmalloc needs the adjustment to ptr for AllocationSize, as it needs the start of the chunk. Also, I wanted to clearly separate the cases: for dlmalloc, it is not correct to UNDEFINE allocation_size, as that will UNDEFINE dlmalloc metadata.

