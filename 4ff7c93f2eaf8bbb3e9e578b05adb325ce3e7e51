Revision: 4ff7c93f2eaf8bbb3e9e578b05adb325ce3e7e51
Patch-set: 2
File: runtime/class_linker.cc

1867:0-1867:48
Sat Aug 30 00:09:35 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f3c695d8_c52a5a02
Bytes: 51
Is there a better way to handle OOME than crashing?

1867:0-1867:48
Sat Aug 30 00:18:40 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f3c695d8_c52a5a02
UUID: 13a1690c_947a4c39
Bytes: 125
Agreed, I don't like this too. In the current use-cases, image writing and in the debugger its not as necessary to be robust.

1867:0-1867:48
Sun Aug 31 09:06:32 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 13a1690c_947a4c39
UUID: 133de99e_2e3b27e4
Bytes: 388
FYI, in one JDWP test there are 3000+ classes in the table. In the context of a big app being debugged, we could have even more so I'm concerned we could crash in this case. 

To avoid the OOME risk, maybe we could visit classes by chunks? We'd need to manage a kind of chunk index though. Besides a class could be added into the list in the meantime so we'd need to handle that case too.

1867:0-1867:48
Tue Sep 02 00:06:27 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 133de99e_2e3b27e4
UUID: 532cc17a_cb68c9fd
Bytes: 345
3000+ classes matches my expectations, we have 3000 classes in the image. Post GC we have 6MB of free heap, 12KB should be ok. I'm not sure about visiting in chunks, the easiest way would be to do this in Java code and then we get similar memory size issues. I think moving the classes table to Java code would be a longer term solution to this.

1867:0-1867:48
Wed Sep 03 16:47:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 532cc17a_cb68c9fd
UUID: 1024ffa2_39c6ab54
Bytes: 8
OK, sgtm

1873
Fri Aug 29 23:39:12 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b3a7bd22_5199149b
Bytes: 43
What if classes are added during this loop?

1873
Sat Aug 30 00:16:21 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b3a7bd22_5199149b
UUID: b3a7bd22_7164109a
Bytes: 138
I'll add to the comment. There's a race in either the kMovingClasses case or not, with classes being added after the classes were visited.

