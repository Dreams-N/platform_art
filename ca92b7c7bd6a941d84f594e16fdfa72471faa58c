Revision: ca92b7c7bd6a941d84f594e16fdfa72471faa58c
Patch-set: 1
File: compiler/optimizing/instruction_simplifier.cc

1576:25-1576:49
Fri Feb 26 11:13:34 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 22c49160_3e4d8d69
Bytes: 36
Why do we need environment or cache?

1576:25-1576:49
Fri Feb 26 17:11:30 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 22c49160_3e4d8d69
UUID: e2b0b90b_cd6beb5d
Bytes: 135
Force of habit I am afraid.

We don't seem to set kNoEnvironmentOrCache on any of our intrinsics. But here it makes sense no to indeed.

1590:2-1590:65
Fri Feb 26 11:13:34 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a220812e_df3053eb
Bytes: 126
IIUC, having the raw conversion between the HNotEqual and HSelect will force materialization of the HNotEqual. Please reorder.

1590:2-1590:65
Fri Feb 26 16:49:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a220812e_df3053eb
UUID: e27a7932_0b98dd2c
Bytes: 120
Ah, I was already displeased with the storing and testing of the 0/1. Now I realize better how the select works. Thanks!

1572:0-1594:80
Fri Feb 26 09:24:20 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 82affd8e_21de54f9
Bytes: 67
This isn't what the Java implementation is doing. Is that expected?

1572:0-1594:80
Fri Feb 26 11:13:34 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 82affd8e_21de54f9
UUID: 22c49160_1e48d158
Bytes: 68
It is what our old implementation was doing. The result is the same.

1572:0-1594:80
Fri Feb 26 16:49:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 22c49160_1e48d158
UUID: 4276e54b_54c7647f
Bytes: 97
What Vladimir said :-)

The implementation is identical afaik. Any concerns on particular values?

