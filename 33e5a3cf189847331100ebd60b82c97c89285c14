Revision: 33e5a3cf189847331100ebd60b82c97c89285c14
Patch-set: 9
File: /COMMIT_MSG

13:0-13:2
Mon May 18 10:54:48 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8dce2da2_9453c4c0
Bytes: 35
Missing beginning of this sentence?

13:0-13:2
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8dce2da2_9453c4c0
UUID: 2dc4617c_d96a939b
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86.cc

3253:8-3254:73
Mon May 18 14:07:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: add4d137_6d2d158f
Bytes: 93
The temporaries problem is more general than this instruction. So I wouldn't mention it here.

3253:8-3254:73
Mon May 18 14:20:06 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: add4d137_6d2d158f
UUID: 0dbb1df3_9bfe4f7a
Bytes: 4
Done

3252:0-3255:80
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8dce2da2_f4ef98ca
Bytes: 29
What is this? Can you fix it?

3252:0-3255:80
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8dce2da2_f4ef98ca
UUID: 0dbb1df3_fbef8bca
Bytes: 465
The problem is that we need 6 registers here:
- 2 for the LHS
- 2 for the RHS
- 2 for the temps.

I think that the problem is that the allocation order(?) (in particular if one of the operands comes back in EAX:EDX, which is in 2 pairs) doesn't allow allocating the registers in the right order that preserves the even/odd pairing.

To be honest, I would rather get this merged, and then I can make a CL that demonstrates the problem, and let you have a look at it.

3252:0-3255:80
Mon May 18 14:07:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dbb1df3_fbef8bca
UUID: cdd4a530_d960570e
Bytes: 225
We are generating code for it, so the TODOs are confusing. At the very least, I would move this to the code generation.

Also I can't parse "how to use better Quick code". Do you mean we should do something similar to Quick ?

3252:0-3255:80
Mon May 18 14:20:06 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdd4a530_d960570e
UUID: 2dc4617c_d953b3f1
Bytes: 4
Done

File: compiler/optimizing/nodes.h

2092:62-2092:73
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: adcf719d_95fe247a
Bytes: 23
Nit: New line for this.

2092:62-2092:73
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adcf719d_95fe247a
UUID: 4dc1956b_5ad9d5f3
Bytes: 4
Done

File: compiler/optimizing/prepare_for_register_allocation.cc

94:7-94:51
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: adcf719d_5501ac06
Bytes: 92
Please add a helper for this:
HInstruction::HasAnyEnvironmentUseBefore(HInstruction* other);

94:7-94:51
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adcf719d_5501ac06
UUID: 0dbb1df3_5b88b722
Bytes: 4
Done

98:2-98:42
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdd4a530_569f7461
Bytes: 173
What happens to this instruction? Is it marked as not materialize?

Should we instead removing the HCompare from the graph, and handle FP and long comparisons in HCondition?

98:2-98:42
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdd4a530_569f7461
UUID: 2dc4617c_f97c376f
Bytes: 544
It turns out that if there is only 1 use, it will be marked as not materialize.  I opted to do this in the HCompare, as I wanted a scheme that is backwards compatible with other architectures, and I am not qualified to implement the others.  An alternate would be a call to the code generator to 'allow merging of HCompare with HCondition'.  I am fine with that, but need approval first.  Would that be done in instruction simplification? I don't think it can be done in the builder, as we don't know all the users until after the SSA is built.

98:2-98:42
Mon May 18 14:07:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dc4617c_f97c376f
UUID: adcf719d_5856812f
Bytes: 138
I think folding the comparison in the Condition sounds simpler. Could you do it? I'll implement it for the other archs as part of this CL.

98:2-98:42
Mon May 18 14:20:06 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adcf719d_5856812f
UUID: 0dbb1df3_7b049b18
Bytes: 70
Will do.  Is doing this in instruction simplification the right place?

98:2-98:42
Mon May 18 14:27:25 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dbb1df3_7b049b18
UUID: add4d137_6ddf5503
Bytes: 41
Why not prepare_for_register_allocation ?

100:40-101:74
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8dce2da2_5401ac06
Bytes: 225
This is the pessimized debuggable problem right? Could you check if the graph is debuggable instead, and remove the environment uses if it's not?

You still need make sure there is only one use, or that could break any deopt.

100:40-101:74
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8dce2da2_5401ac06
UUID: 2dc4617c_f96557cd
Bytes: 4
Done

107:5-107:60
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: adcf719d_350e3037
Bytes: 18
Why not 1 and -1 ?

107:5-107:60
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adcf719d_350e3037
UUID: 2dc4617c_39b2afc6
Bytes: 278
The short answer is because the compare is ALWAYS to 0, because that is how the code is generated by dx. I'm not sure if we would get the bias right for FP compares to non-zero cases.  In any case, since this would only happen with hand-crafted smali code, it isn't worth doing.

107:5-107:60
Mon May 18 14:07:14 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dc4617c_39b2afc6
UUID: adcf719d_9843f972
Bytes: 41
OK, thanks, please add this as a comment.

113:0-117:3
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdd4a530_d6b264fa
Bytes: 22
Same comment as above.

113:0-117:3
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdd4a530_d6b264fa
UUID: 0dbb1df3_1b823f03
Bytes: 4
Done

121:0-123:3
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8dce2da2_f418b877
Bytes: 15
Use the helper.

121:0-123:3
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8dce2da2_f418b877
UUID: 4dc1956b_1ae35da4
Bytes: 4
Done

130:2-130:84
Mon May 18 07:50:04 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdd4a530_b6b7e8e8
Bytes: 13
What is this?

130:2-130:84
Mon May 18 14:00:24 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdd4a530_b6b7e8e8
UUID: 4dc1956b_3ae621b4
Bytes: 35
Implemented as part of above fixes.

