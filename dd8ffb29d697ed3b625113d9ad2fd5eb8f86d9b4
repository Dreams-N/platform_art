Revision: dd8ffb29d697ed3b625113d9ad2fd5eb8f86d9b4
Patch-set: 1
File: compiler/dex/compiler_enums.h

63:0-63:0
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_4d9eb478
Bytes: 17
remove whitespace

63:0-63:0
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_4d9eb478
UUID: cdcac190_55a19fbd
Bytes: 4
Done

65:60-65:68
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_958cd76c
Bytes: 102
comment convention is that they are sentences and should end with a full-stop. The comments below too.

65:60-65:68
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_958cd76c
UUID: cdcac190_359e2378
Bytes: 4
Done

70:0-70:0
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_55963f7a
Bytes: 21
1 line of whitespace.

70:0-70:0
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_55963f7a
UUID: 2dd43d2d_0214070c
Bytes: 4
Done

File: compiler/dex/mir_graph.h

333
Fri Jan 10 18:50:14 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2dd43d2d_479e9178
Bytes: 240
Rearrange to place the bit fields together.  We are sensitive to the size of the RegLocation struct - it needs to stay 64 bits to allow it to be passed in registers when possible (which is why you see it passed by value all over the place).

333
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dd43d2d_479e9178
UUID: 0dd1393f_ad28a86c
Bytes: 2
+1

333
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dd43d2d_479e9178
UUID: cdcac190_d5fecfd7
Bytes: 4
Done

335:38-335:41
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_cd22c48e
Bytes: 10
full-stop.

335:38-335:41
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_cd22c48e
UUID: cdcac190_15144725
Bytes: 4
Done

File: compiler/dex/quick/gen_common.cc

1843
Fri Jan 10 15:59:16 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_3f2f2273
Bytes: 36
Is there a better location for this?

1843
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_3f2f2273
UUID: 0dd1393f_0d42fc2c
Bytes: 179
Sentence for comments. Although quick hasn't been following this pattern, the pattern is supposed to be that comments for functions appear at their declaration and not definition.

1843
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_0d42fc2c
UUID: 2dd43d2d_c2be0fb7
Bytes: 68
Made into a sentence.   I am just following the rest of the file :-)

File: compiler/dex/quick/gen_loadstore.cc

267
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_8d5cccd9
Bytes: 618
This might be the right time to rethink the "pair" notion at a higher level.  I don't much like the "low != high" test here (though given the current setup it isn't unreasonable).  Rather than change that all in this CL, though, I should do it in a new CL.  Something like reworking MarkLive() and MarkPair to operate on RegLocations rather than individual registers so we can hide the physical storage.  The original notion behind RegLocations was to abstract away the physical location of a value, and it may make life cleaner for everyone if we also use it to hide more of the architecture-dependent storage quirks.

268:0-268:44
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_9575f7a4
Bytes: 46
comment as to what low_reg != high_reg implies

268:0-268:44
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_9575f7a4
UUID: 2dd43d2d_a2c4334d
Bytes: 4
Done

274
Fri Jan 10 18:50:14 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_92bbcdf5
Bytes: 10
use DCHECK

274
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_92bbcdf5
UUID: 0dd1393f_ad8c286c
Bytes: 4
Done

File: compiler/dex/quick/mir_to_lir.cc

160
Fri Jan 10 15:59:16 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_173d6fa5
Bytes: 43
Factoring out the code, to allow overriding

160
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_173d6fa5
UUID: 2dd43d2d_a228b36c
Bytes: 4
sgtm

File: compiler/dex/quick/mir_to_lir.h

510:0-510:39
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_8d4e0c52
Bytes: 25
Comments are sentences...

510:0-510:39
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_8d4e0c52
UUID: cdcac190_554bdf42
Bytes: 4
Done

File: compiler/dex/quick/ralloc_util.cc

605
Fri Jan 10 15:59:16 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_f741d328
Bytes: 20
Is DCHECK_NE better?

605
Fri Jan 10 18:50:14 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_f741d328
UUID: 2dd43d2d_a77565a4
Bytes: 4
Yes.

605
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dd43d2d_a77565a4
UUID: cdcac190_d5d36f44
Bytes: 224
The DCHECK_NE will give you the failing values. We prefer to use CHECK as DCHECK is only used in libartd phone boots and when running unit tests (ie you get much better coverage with a CHECK). eng builds don't imply libartd.

605
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dd43d2d_a77565a4
UUID: 2dd43d2d_c255ef10
Bytes: 4
Done

605
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_d5d36f44
UUID: 0dd1393f_cd97642f
Bytes: 157
The compiler generally goes with DCHECK.  We get decent coverage with host cross builds using dex2oatd, and want to avoid the extra on-device cost of CHECKs.

811:0-811:38
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_addae834
Bytes: 27
comment to explain the test

811:0-811:38
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_addae834
UUID: cdcac190_d5080ff4
Bytes: 4
Done

1066:0-1066:36
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_b5d8f35f
Bytes: 27
comment to explain the test

1066:0-1066:36
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_b5d8f35f
UUID: 2dd43d2d_62805bdf
Bytes: 4
Done

File: compiler/dex/quick/x86/fp_x86.cc

355:31-355:32
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_4de114ed
Bytes: 9
full-stop

355:31-355:32
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_4de114ed
UUID: 0dd1393f_2d8258ee
Bytes: 7
removed

358
Fri Jan 10 18:50:14 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_f208c1f3
Bytes: 314
The "fp" field says nothing about what register class is being used to store the value (that is inferred from the physical register number).  Rather, it specifies what type being used.  So, do not change it here.  It's perfectly reasonable to have .fp set in a regloc, but the value is contained in core registers.

367:0-367:44
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2dd43d2d_c23bafae
Bytes: 9
full-stop

367:0-367:44
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dd43d2d_c23bafae
UUID: 0dd1393f_0d879cfd
Bytes: 7
removed

369
Fri Jan 10 18:50:14 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_122e9dac
Bytes: 41
As above, don't change the .fp flag here.

File: compiler/dex/quick/x86/target_x86.cc

564
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_f52b0b12
Bytes: 687
Don't try to use the fp flag in a RegLocation to determine the register class of the physical storage.  Again, that tells how the value is being used - not how it is being held.  Use IsFpReg() on the physical register in question to determine its register class.  UpdateLoc's job is to determine if the Dalvik value in question currently exists in valid physical registers.  It's perfectly reasonable for a Dalvik int value to be held in an fp register, or a double value to be held in a pair of core registers.  UpdateLoc just finds the nearest valid location for the value - other code is responsible for making sure that the value is in the right kind of register, and correct if not.

570:0-570:37
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_55c87f8d
Bytes: 39
comments are sentences, here and below.

570:0-570:37
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_55c87f8d
UUID: cdcac190_95adf785
Bytes: 4
Done

647
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2dd43d2d_c20baf7c
Bytes: 97
As above, don't use loc.fp in this manner.  I think you probably just want to use reg_class here.

676
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_4d4d94ab
Bytes: 24
ditto - lose the loc.fp.

721
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_2805a62c
Bytes: 237
Add a TODO to unify the EvalLoc and UpdateLoc routines.  I think it should be doable once I clean up the pair mess, and historically these routines have been the source of subtle bugs.  I'm a bit queasy at having multiple copies of them.

743:23-743:26
Fri Jan 10 20:10:06 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2dd43d2d_02ebe7d4
Bytes: 117
scary, yet more todos for AllocTempDouble (currently an assert that AllocTempDouble returns a double register fails).

743:23-743:26
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2dd43d2d_02ebe7d4
UUID: 2dd43d2d_62597be7
Bytes: 43
Where is that assert, so that I can fix it?

743
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2dd43d2d_e2622b2f
Bytes: 127
+1.  I really don't like this - but it's the fault of the "pair" mechanism.  Add a TODO to revisit this after the pair cleanup.

749
Fri Jan 10 21:25:20 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_359bc3e1
Bytes: 250
Invalid use of rl.fp.  Also add a TODO to reunify this with the main routine.  As far as I can tell, the only significant difference is the DCHECK that makes sure pair is set on the high reg.  That should cease to be an issue with the pair reworking.

File: compiler/dex/quick/x86/utility_x86.cc

337
Fri Jan 10 18:50:14 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0dd1393f_b20369d5
Bytes: 9
DCHECK_EQ

337
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0dd1393f_b20369d5
UUID: 2dd43d2d_e2810b38
Bytes: 4
Done

567
Fri Jan 10 18:50:14 2014 +0000
Author: Bill Buzbee <1001578@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cdcac190_b23c89df
Bytes: 50
If this is a placeholder, use UNIMPLEMENTED(FATAL)

567
Fri Jan 10 21:17:22 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cdcac190_b23c89df
UUID: 0dd1393f_6d6f30d3
Bytes: 18
forgotten code :-)

