Revision: b1306a9459056634802760afa8d195702fbe53f1
Patch-set: 11
File: compiler/optimizing/instruction_simplifier.cc

1693:0-1703:39
Wed Jun 08 08:36:50 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_b5d9603c
Bytes: 159
This in combination with the bounds_check_elimination.cc change is a bit scary. How about we move the environment "hack" to prepare_for_register_allocation.cc?

1693:0-1703:39
Wed Jun 08 09:37:43 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_b5d9603c
UUID: 0318802b_15f49490
Bytes: 225
This has been considered and rejected, see https://android-review.googlesource.com/#/c/220983/8/compiler/optimizing/bounds_check_elimination.cc@1558 . If you feel strongly about it, I can do the hack but it will be very ugly.

1693:0-1703:39
Wed Jun 08 09:48:52 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_15f49490
UUID: 0318802b_55472cb2
Bytes: 366
We've just discussed this. I agree with Aart here that we coulda void this complexity and move this to prepare_for_register_allocaiton.cc. I think this is safer and cleaner when you think about not spreading the complexity of this CharAt optimization

Adding a method_idx into BoundsCheck should do the trick and avoid going back to the dex file which I agree sucks.

1693:0-1703:39
Wed Jun 08 12:51:42 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_55472cb2
UUID: 0318802b_95ed449d
Bytes: 4
Done

File: compiler/optimizing/stack_map_stream.cc

239:0-242:7
Wed Jun 08 08:34:28 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_95b544dc
Bytes: 21
This needs a comment.

239:0-242:7
Wed Jun 08 09:37:43 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_95b544dc
UUID: 0318802b_9530a443
Bytes: 128
I added a comment on inline_entry.dex_pc. With that and the comment added to stack_map.h I don't think we need another one here.

File: runtime/arch/mips/quick_entrypoints_mips.S

532:52-532:54
Wed Jun 08 08:34:28 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_f5aab879
Bytes: 1
a

532:52-532:54
Wed Jun 08 09:37:43 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_f5aab879
UUID: 0318802b_d5017c63
Bytes: 4
Done

File: runtime/entrypoints/quick/quick_throw_entrypoints.cc

77:23-77:27
Wed Jun 08 08:34:28 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_d5afbc87
Bytes: 4
code

77:23-77:27
Wed Jun 08 09:37:43 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_d5afbc87
UUID: 0318802b_b5020068
Bytes: 4
Done

77:77-78:86
Wed Jun 08 08:34:28 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_15c2d44c
Bytes: 85
I'd move this comment elsewhere, as the code here isn't really about the stack trace.

77:77-78:86
Wed Jun 08 09:37:43 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_15c2d44c
UUID: 0318802b_95070478
Bytes: 4
Done

File: runtime/stack_map.h

896:0-898:5
Wed Jun 08 08:34:28 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0318802b_75bfc8b4
Bytes: 15
Comment please.

896:0-898:5
Wed Jun 08 09:37:43 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0318802b_75bfc8b4
UUID: 0318802b_b52b20d8
Bytes: 4
Done

