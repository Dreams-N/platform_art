Revision: 548a7d3cec5e5832865a24adc22a48f5176c9715
Patch-set: 1
File: compiler/dwarf/headers.h

83:14-83:55
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d61d32f8_dad625e8
Bytes: 29
style: one parameter per line

83:14-83:55
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d61d32f8_dad625e8
UUID: 16e42a25_2f0ca54f
Bytes: 4
Done

File: compiler/elf_builder.h

35:0-53:2
Wed Nov 04 17:08:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76df26f3_c358f6d7
Bytes: 40
Put a comment here about why this order.

35:0-53:2
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 76df26f3_c358f6d7
UUID: 9609fab1_cbdbc90f
Bytes: 106
https://android-review.googlesource.com/180422 moved .dydsym, .dynstr, .hash after .rodata, .text, [.bss].

35:0-53:2
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9609fab1_cbdbc90f
UUID: d61d32f8_bafc9162
Bytes: 4
Done

57:2-57:7
Wed Nov 04 17:08:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 76df26f3_63f58aef
Bytes: 9
constexpr

57:8-57:11
Wed Nov 04 17:08:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b65c3e65_6d713d78
Bytes: 7
size_t?

57:8-57:11
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b65c3e65_6d713d78
UUID: 56030291_66108ed8
Bytes: 4
Done

163:0-164:29
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d61d32f8_3aff2184
Bytes: 76
I think we shouldn't even try to write (or seek) if we have a prior failure.

163:0-164:29
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d61d32f8_3aff2184
UUID: b6127ed6_29e14d1c
Bytes: 4
Done

192:9-192:22
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d61d32f8_fa2689f8
Bytes: 628
I think this should be moved to the builder, we don't need a per-section flag. The builder should provide a function Good(), see http://www.cplusplus.com/reference/ios/ios/good/ .

Add comments to all public functions that can fail saying that the user can use Good() to check the state of the stream (and for functions that return success flag, that the return value can be ignored; alternatively, do not return the success flag at all). Add comment to Good() that this design allows simplified code where you delay the failure check until you actually want to do something that depends on the previous writes being successful.

192:9-192:22
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d61d32f8_fa2689f8
UUID: 16e42a25_6f6e2dd9
Bytes: 4
Done

210:0-213:26
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 16e42a25_2f5ee553
Bytes: 168
I'd prefer this to be done by an explicit call to Write(). (Start() shouldn't be virtual.)

The Write() below should D/CHECK() that the first call is for an empty name.

210:0-213:26
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 16e42a25_2f5ee553
UUID: 16e42a25_4f6b71c7
Bytes: 4
Done

253:0-255:31
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 56030291_0659dad9
Bytes: 116
I would prefer the write to be in a separate function. End() should not do this work, it should not even be virtual.

253:0-255:31
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 56030291_0659dad9
UUID: 760c86c0_8a494bb6
Bytes: 4
Done

266:0-267:40
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6345268_42ab12dd
Bytes: 48
Fits on a single line. Same several times below.

266:0-267:40
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d6345268_42ab12dd
UUID: 16e42a25_2f6825c8
Bytes: 4
Done

318:4-318:12
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6127ed6_e9bfb51f
Bytes: 77
std::unique_ptr<> here. And std::move() below when adding to other_sections_.

318:4-318:12
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6127ed6_e9bfb51f
UUID: b637de6a_a41b0caf
Bytes: 38
Done.  But why?  Exception safety? :-)

318:4-318:12
Fri Nov 06 20:43:28 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b637de6a_a41b0caf
UUID: b6127ed6_8cfba7a2
Bytes: 76
Even if we don't actually use exceptions, it neatly documents the ownership.

328:4-328:14
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 760c86c0_e71b6200
Bytes: 5
ditto

328:4-328:14
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 760c86c0_e71b6200
UUID: 96173ad8_58645d25
Bytes: 4
Done

333:0-335:5
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6345268_e2902676
Bytes: 190
Can we drop this part and let the caller call WriteOatPatchesSection() explicitly? Are we actually using it anywhere? (ElfWriterQuick is actually doing this explictly for .text.oat_patches.)

333:0-335:5
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d6345268_e2902676
UUID: b6127ed6_0cd1f720
Bytes: 4
Done

344
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6127ed6_e9269561
Bytes: 86
Also record the failure (see the suggestion of moving write_failed_ into the builder).

344
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6127ed6_e9269561
UUID: 9609fab1_4b9c79db
Bytes: 4
Done

406
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d6345268_424232ed
Bytes: 8
Flush()?

406
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d6345268_424232ed
UUID: b6127ed6_ecec63ec
Bytes: 64
OutputStream does not have a Flush method.
I was also surprised.

450:42-450:47
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d61d32f8_7a335938
Bytes: 4
typo

450:42-450:47
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d61d32f8_7a335938
UUID: b637de6a_c42090dd
Bytes: 4
Done

617:0-631:9
Fri Nov 06 15:38:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b6127ed6_495fe1c0
Bytes: 88
Interleaving this with the other headers prevents merging. It should be in its own loop.

617:0-631:9
Fri Nov 06 20:12:20 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b6127ed6_495fe1c0
UUID: d60ff2af_8a9f0b82
Bytes: 4
Done

