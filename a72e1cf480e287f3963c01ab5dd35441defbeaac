Revision: a72e1cf480e287f3963c01ab5dd35441defbeaac
Patch-set: 4
File: compiler/optimizing/code_generator_arm.cc

5212:6-5212:57
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 346221c1_374a9896
Bytes: 198
For the sake of consistency, maybe add something like:

  // /* GcRoot<mirror::Class> */ out = *address

before this line?

(Likewise in LocationsBuilderARM::VisitLoadString and in other back ends.)

5212:6-5212:57
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 346221c1_374a9896
UUID: 747f394d_ca6e17e9
Bytes: 4
Done

5220:6-5220:62
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 545f95f9_d866edd8
Bytes: 113
Ditto, I'd add something like:

  // /* GcRoot<mirror::Class> */ out = *(dex_cache_arrays_base + offset)

before.

5220:6-5220:62
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 545f95f9_d866edd8
UUID: 747f394d_aa69d3e3
Bytes: 4
Done

5233:100-5233:101
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d499c5fa_5c0f3d2c
Bytes: 15
Nit: long line.

5233:100-5233:101
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d499c5fa_5c0f3d2c
UUID: 346221c1_d79b1cdd
Bytes: 4
Done

6698:25-6698:38
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 346221c1_77b090a2
Bytes: 11
target_type

6698:25-6698:38
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 346221c1_77b090a2
UUID: 94658dc6_1d2cd7a4
Bytes: 4
Done

File: compiler/optimizing/code_generator_arm64.cc

3868:25-3868:38
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7468199f_d92ef337
Bytes: 11
target_type

3868:25-3868:38
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7468199f_d92ef337
UUID: b49451c2_5bf823ba
Bytes: 4
Done

4033:6-4033:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f48a499e_9d20e3a8
Bytes: 55
Replace with:

  return;  // No dex cache slow path.

?

4033:6-4033:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f48a499e_9d20e3a8
UUID: 346221c1_97dfe473
Bytes: 310
This is actually correct, we may still need to emit the slow-path if cls->MustGenerateClinitCheck(), though admittedly there should not be many uninitialized image classes. Fixed the arm codegen to comply (that was a copy-paste error) and that also changed one of the statistics reported in the commit message.

4052:6-4052:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b49451c2_9b91cbc3
Bytes: 6
Ditto?

4052:6-4052:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b49451c2_9b91cbc3
UUID: d499c5fa_dce98d21
Bytes: 5
Same.

4058:6-4058:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 545f95f9_58de5d73
Bytes: 6
Ditto?

4058:6-4058:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 545f95f9_58de5d73
UUID: d499c5fa_fcee4926
Bytes: 5
Same.

File: compiler/optimizing/code_generator_x86.cc

5987:6-5987:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 94658dc6_bdb3eb03
Bytes: 55
Replace with:

  return;  // No dex cache slow path.

?

5987:6-5987:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 94658dc6_bdb3eb03
UUID: 747f394d_4aa3e716
Bytes: 26
Same. (See arm64 codegen.)

5994:6-5994:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 747f394d_87db2a81
Bytes: 6
Ditto?

5994:6-5994:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 747f394d_87db2a81
UUID: 7468199f_dcd7c1c9
Bytes: 5
Same.

6002:6-6002:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 94658dc6_dda89f8e
Bytes: 6
Ditto?

6002:6-6002:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 94658dc6_dda89f8e
UUID: 743659c9_69028536
Bytes: 5
Same.

File: compiler/optimizing/code_generator_x86_64.cc

5418:6-5418:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 346221c1_f751001f
Bytes: 55
Replace with:

  return;  // No dex cache slow path.

?

5418:6-5418:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 346221c1_f751001f
UUID: d420e584_84216605
Bytes: 26
Same. (See arm64 codegen.)

5425:6-5425:12
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 346221c1_17675404
Bytes: 6
Ditto?

5425:6-5425:12
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 346221c1_17675404
UUID: 743659c9_899b3930
Bytes: 5
Same.

5454:100-5454:101
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 94658dc6_bdd84b2c
Bytes: 15
Nit: long line.

5454:100-5454:101
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 94658dc6_bdd84b2c
UUID: 346221c1_17d4b453
Bytes: 4
Done

File: compiler/optimizing/dex_cache_array_fixups_arm.cc

48:66-48:73
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 346221c1_37dff8e0
Bytes: 6
types?

48:66-48:73
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 346221c1_37dff8e0
UUID: 1490bdc9_5e7f35fa
Bytes: 4
Done

63:66-63:73
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 94658dc6_fa33a9a0
Bytes: 8
strings?

63:66-63:73
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 94658dc6_fa33a9a0
UUID: 743659c9_c9a5316e
Bytes: 4
Done

File: compiler/optimizing/nodes.h

5342:32-5342:44
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 747f394d_0479d8b0
Bytes: 229
Did you change the base class to HInstruction to get rid of the FieldType bit field provided by HExpression<> (which does not seem to be useful for HLoadClass)?  If so, this change might also be beneficial to HLoadString as well?

5342:32-5342:44
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 747f394d_0479d8b0
UUID: d499c5fa_bc7f614e
Bytes: 237
This was done to avoid the HTemplateInstruction<1>'s inputs which are not mandatory for HLoadClass. And it's already been done for the HLoadString in https://android-review.googlesource.com/#/c/230742/9/compiler/optimizing/nodes.h@5435 .

5342:32-5342:44
Thu Jun 16 13:24:19 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d499c5fa_bc7f614e
UUID: 346221c1_b7dea845
Bytes: 52
Oh right, I was looking at old code for HLoadString.

File: compiler/utils/type_reference.h

39:18-39:54
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f48a499e_dd798be3
Bytes: 107
Why are the arguments passed by value instead of by reference?  (Ditto for StringReferenceValueComparator.)

39:18-39:54
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f48a499e_dd798be3
UUID: d420e584_c42b5edf
Bytes: 190
I don't think it matters for a simple struct with 2 members. Both have their advantages and disadvantages and I don't want to go into a deep discussion about ABIs and compiler optimizations.

File: test/552-checker-sharpening/src/Main.java

282
Wed Jun 15 17:59:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 346221c1_376458fd
Bytes: 197
Maybe also add MIPS32 and MIPS64 cases, even if they don't support class (and string) sharpening yet, so that the test won't silently ignore a potential future change regarding those architectures?

282
Thu Jun 16 11:05:15 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 346221c1_376458fd
UUID: 346221c1_37d1b864
Bytes: 39
I believe that's up to the MIPS people.

