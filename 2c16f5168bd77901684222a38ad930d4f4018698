Revision: 2c16f5168bd77901684222a38ad930d4f4018698
Patch-set: 20
File: runtime/art_method.h

179:58-179:87
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f597825c_02d9aa13
Bytes: 71
in a subinterface? Doesn't this method only applies to interfaces then?

179:58-179:87
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f597825c_02d9aa13
UUID: 9555663b_3d6777ad
Bytes: 194
The comment seems off "in a subinterface" , as per Nicolas.

It still makes sense to call it for a non-interface Class though because a regular class could have its own copy of a default method.

File: runtime/class_linker.cc

3676:0-3676:69
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55eccecd_ed742555
Bytes: 34
Isn't that what you're doing here?

3813:0-3813:67
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f597825c_c2d2a2ef
Bytes: 5
ditto

3827:41-3827:44
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f597825c_e2dda6ff
Bytes: 4
drop

3933:22-3933:51
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 55712e1a_c574ba55
Bytes: 117
There's already initialization steps that wil ltell you whether a class is being initialized. Why can't you use that?

3933:22-3933:51
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 55712e1a_c574ba55
UUID: 354d9aaf_223c6af6
Bytes: 996
This is a special kind of ghetto interface initialization.

When a class is initialized, if its interfaces does not contain any default methods, the interface itself is not initialized, but the interfaces' superinterfaces could end up being initialized (if they have default methods).

So basically a regular non-default-containing interface would never get marked as "initialized" here. OTOH, we don't want to repeat the recursive initialization step for the default-containing interfaces since it would initialize them twice otherwise.

Alex has a section in his doc about the logic for this, "Interface Initialization with Default Methods".

---------------------------
So basically we probably want to rename this to something at least slightly more useful like "HasBeenDefaultMethodInitialized" and have a special term for "default method initialization" to mean the new kind of interface init.

Also this can definitely use more comments since as I suspected the semantics weren't clear :).

3933:22-3933:51
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 354d9aaf_223c6af6
UUID: 9555663b_6bb929fc
Bytes: 401
But this implementation still doesn't seem to cut down on this recursive nature.

If I have B extends A and C implements B, and B is regular, then B will never get "Recursively initialized set," so a class D implements B will walk from B again (and I thought that's what this was supposed to avoid).

Agree with the naming, because it's state you want to set on all interfaces, including regular ones.

3933:22-3933:51
Thu Oct 01 01:07:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9555663b_6bb929fc
UUID: 75439281_b2bc483c
Bytes: 117
Yeah, I have a comment in PS18 asking if there should be an extra SetRecursivelyInitialized somewhere near line 3958.

4823
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_fe0e996b
Bytes: 16
nit: add /*out*/

4827:4-4830:5
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_67932093
Bytes: 135
If we want to enforce this, we should do it at the dex file level, not here. (And I believe irogers once said it is, but I have doubts)

4827:4-4830:5
Thu Oct 01 01:07:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75439281_67932093
UUID: b5526a4f_413d28a3
Bytes: 185
I think the old code might have been doing this already?

I don't see how this can happen anyway, we are restricted to a uint16_t method id limit in the dex file. Defensive programming?

4843
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 953c86f3_087d0b76
Bytes: 22
Why (leave a comment)?

4863
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_69d1e192
Bytes: 90
Couldn't this also happen for non-0 num_virtual_methods, or is another case handling that?

4863
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 15a33681_69d1e192
UUID: 953c86f3_f3f4184c
Bytes: 95
The point is that if you declare virtual methods, you'll get explicit handling down the line...

4868
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_89745d54
Bytes: 106
What does it mean for a super class to not have an embedded imt/vtable? That the vtable wasn't linked yet?

4957:61-4957:63
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_efc3891a
Bytes: 1
'

4963:82-4963:97
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_2642c22e
Bytes: 32
non-default, default, or either?

5063
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 953c86f3_c8168319
Bytes: 31
what about the order (comment)?

5065:41-5065:57
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_524ea4b3
Bytes: 10
Unchecked.

5068:30-5068:55
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_4ce0b33a
Bytes: 113
Why is this necessary? This should be an interface, and not a proxy (else something's going terribly wrong, no?).

5071:6-5072:62
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 354d9aaf_e56f2cea
Bytes: 69
Remove (or make it a DCHECK). The dex file verifier is checking that.

5144:0-5144:47
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_b247288a
Bytes: 162
If you have to explain it, then the logical formula isn't more concise than your textual sentence and not really necessary. I don't see a point of adding it here.

5144:0-5144:47
Thu Oct 01 01:07:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 75439281_b247288a
UUID: b5526a4f_613caca5
Bytes: 96
Sorry, I asked for this particular line to be added (it was initially just the logical formula).

5161:24-5161:26
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_c14ad891
Bytes: 7
Remove.

5162:37-5162:41
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_06269e79
Bytes: 185
The comment helps a lot, I think I understand what this is for now , thanks :).

Perhaps classes_in_iftable ?, seen_in_iftable?

(just gets a bit easy to lose memory of what "seen" is).

5275
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5586271_c37adc3f
Bytes: 104
This looks kinda weird, AllowThreadSuspension twice in a row (here and 5286). Where does it Disallow it?

5277:2-5284:84
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 957f26e6_676312d5
Bytes: 98
I'd avoid classes (ie GC objects) in a std::vector. Especially if you now allow thread suspension.

5277:2-5284:84
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 957f26e6_676312d5
UUID: b5526a4f_fe185983
Bytes: 354
!! Great catch, thanks Nicolas :).

Should this go to a vector of handles or similar instead? (Or the above logic could go into FillIfTable instead, though it probably makes more sense for it to be here)

The obvious solution would be to mark FillIfTable requires uninterruptible, but of course we can't do that since we *just* allowed thread suspension.

5467:0-5472:22
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75ab929e_5e455538
Bytes: 18
indentation is off

5486
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d55b5e6b_c24e5806
Bytes: 64
and when the current class doesn't already implement the method?

5595:55-5595:63
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 957f26e6_87472643
Bytes: 7
virtual

5595:55-5595:63
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 957f26e6_87472643
UUID: 953c86f3_2883af93
Bytes: 145
perhaps "that every method on a classes vtable be in that respective classes virtuals table (e.g. a method cannot be shared across 2 vtables)"

?

5600:37-5600:40
Wed Sep 30 17:07:24 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 957f26e6_a7442a3f
Bytes: 13
are verified?

5602
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_e698dafa
Bytes: 213
I'm not sure if it's arbitrary (agampe to comment), it's just a cache mechanism to avoid probing every single method to see if it's preverified or not.

   preverified(class) = all methods on class are preverified

5603
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_7e69e9ba
Bytes: 150
I guess this is because there's a (D)CHECK somewhere that fails this? But I don't really understand the reason to waste time verifying again.

agampe?

5635:6-5635:10
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5586271_2340f8d4
Bytes: 23
style nit: ArtMethod* ?

5637:6-5637:10
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_1e59cd2a
Bytes: 100
style nit: don't use auto for non-obvious code (it's not even on the same screen, its a pair maybe?)

File: runtime/class_linker.h

732
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9555663b_1d6c338c
Bytes: 175
Please consider leaving a comment what the ints are.

It's also not super clear what the default_translations here are for, it would be great to expand on that with a comment.

732
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9555663b_1d6c338c
UUID: 9555663b_e0c6f8d3
Bytes: 21
Agree, naming is bad.

747:25-747:30
Thu Oct 01 00:34:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_a674120d
Bytes: 3
the

759
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_dedd954a
Bytes: 175
Please consider leaving a comment what the ints are.

It's also not super clear what the default_translations here are for, it would be great to expand on that with a comment.

File: runtime/modifiers.h

56
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_06ca1ed8
Bytes: 18
as well as itself?

56
Thu Oct 01 00:42:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b5398a03_06ca1ed8
UUID: f5586271_69d2d13f
Bytes: 51
I thought the intent was that this wasn't the case.

56
Thu Oct 01 01:07:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5586271_69d2d13f
UUID: 1548969f_0f823539
Bytes: 62
then it should say "but not itself"? It's currently ambiguous.

57
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 953c86f3_28d1ef93
Bytes: 214
this implies it's not recursive (i.e. the interface has a direct method implementation that's default)

I imagine this was meant to be recursive?

  "Interface or a superinterface defines at least 1 default method"

57
Thu Oct 01 00:42:47 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 953c86f3_28d1ef93
UUID: 9555663b_2b83b193
Bytes: 253
You don't really need that, if the above flag is correctly set. Yes, you'll do a bit more work, but you only do it once, which seems acceptable.

(And you'd want these to be two separate ones, as you use the "*this* has a default method" as a fast flag)

File: runtime/parsed_options.cc

693
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9555663b_e00b9859
Bytes: 30
Forgot to update usage message

File: runtime/verifier/method_verifier.cc

666
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_8790ec17
Bytes: 124
Comment is off now, consider moving this to 679 and adding a new comment to 668 about what interfaces *are* allowed to have.

File: test/960-default-smali/build

28:37-28:63
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d55b5e6b_8db49108
Bytes: 116
won't work if there's any spaces in file names

  "$(find src...)"

the double quotes there are needed, not just $()

32
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_04269c79
Bytes: 6
see 28

File: test/960-default-smali/expected.txt

0
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_5e37c5aa
Bytes: 49
What happened here, is this still auto generated?

File: test/960-default-smali/util-src/generate_smali.py

262
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5398a03_06305e7d
Bytes: 26
recursively? transitively?

291
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_e779f089
Bytes: 34
GLOBAL_CONSTANT_NAME
->

TEST_DATA

292
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_2cd2173f
Bytes: 4
same

293:0-293:5
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5586271_23bbd818
Bytes: 4
same

File: test/961-default-iface-resolution-generated/build

0
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 953c86f3_08deab7e
Bytes: 47
same comments as from previous build file apply

24
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_2483d893
Bytes: 190
This needs to be restored even if one of the later commands fail, right?

  restore_ulimit() {
    ulimit -S "$OLD_ULIMIT"
  }
  trap 'restore_ulimit' ERR

and just call restore_ulimit on 42

File: test/961-default-iface-resolution-generated/util-src/generate_smali.py

87
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d55b5e6b_6d077d5d
Bytes: 18
Missing docstrings

92
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 953c86f3_e8f38708
Bytes: 27
style nit: () vs lambda map

File: test/962-iface-static/build

0
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5586271_c3b2dc30
Bytes: 47
same comments as from previous build file apply

File: test/963-default-range-smali/build

0
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_e74e105b
Bytes: 166
Yeah, this looks super copy-pasted. It can be refactored into a common build file that all these sources, or you could edit run-test itself for the new functionality.

File: test/964-default-iface-init-generated/build

0
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_e498d0fa
Bytes: 47
same comments as from previous build file apply

22
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_c73034cb
Bytes: 42
See previous comment about trapping ulimit

File: test/964-default-iface-init-generated/run

20
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_6c26cff8
Bytes: 151
Probably would be good to refactor this entire file to just 

 EXPERIMENTAL_RUNTIME_OPTIONS=default-methods ${RUN} "$@"

(and same for other run files)

File: test/964-default-iface-init-generated/smali/Displayer.smali

22
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_0c1b9bb3
Bytes: 4
Why?

File: test/964-default-iface-init-generated/util-src/generate_smali.py

364
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_ac0b675a
Bytes: 22
style nit: docstrings?

373
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_be91c1da
Bytes: 20
style nit: () vs map

File: test/utils/python/utils.py

16
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1548969f_c4bf942f
Bytes: 72
Might be good to have some comments explaining the purpose of this file?

27:20-27:26
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5586271_03821439
Bytes: 44
generates alphabetically? or something else?

35
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_2708f8f3
Bytes: 78
Might want to mention that it yields a different result every time it's called

40:5-40:10
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 354d9aaf_82fd7e2c
Bytes: 66
Takes a string, returns the same string with empty lines stripped.

41
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b5526a4f_fe9b39f4
Bytes: 27
style nit: () vs lambda map

File: tools/extract-embedded-java

21
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9555663b_007dec75
Bytes: 52
Sanity check $1 is a dir?

  [[ -d "$1" ]] || exit 1

22:31-22:39
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 15a33681_0ca63bae
Bytes: 114
nit: it's an extension not a filetype. file type is determined by the "file" command, which isn't being used here.

27:7-27:9
Wed Sep 30 22:49:56 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 75439281_07117c1e
Bytes: 63
Doesn't need ERE flag, it should work just the same without it.

