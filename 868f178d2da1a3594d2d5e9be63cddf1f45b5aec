Revision: 868f178d2da1a3594d2d5e9be63cddf1f45b5aec
Patch-set: 12
File: cmdline/cmdline_parser_test.cc

108:4-108:8
Wed Jun 17 16:47:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_957354c5
Bytes: 21
Isn't that a T or T*?

108:4-108:8
Wed Jun 17 18:21:30 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_957354c5
UUID: 39b10858_0009f034
Bytes: 111
Not necessarily, it can be something convertible to T (typically signed/unsigned mismatch or widening numerics)

108:4-108:8
Wed Jun 17 18:27:21 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 39b10858_0009f034
UUID: 39b10858_2037d4ec
Bytes: 528
Although looking at the existing test cases ...

UsuallyEquals (the one where the types matter) is implemented for the same type for all overloads except string+char*. 

So while there aren't any 'expected default key value' that check strings against const char*s now, there could be in the future.

And the 'expected (non-default) key-value' definitely make use of this, because I just put in a c-string as the expected to compare against an std::string value.
------
So I guess I can just specify the type explicitly for now.

109:4-109:5
Wed Jun 17 16:47:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_f77bc871
Bytes: 16
Why the nesting?

109:4-109:5
Wed Jun 17 18:21:30 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_f77bc871
UUID: b99c18d9_aaf27610
Bytes: 9
No reason

540:2-540:3
Wed Jun 17 16:47:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_3796001d
Bytes: 56
Could you put the start/end braces in the macro instead?

540:2-540:3
Wed Jun 17 18:21:30 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_3796001d
UUID: 19b8c43c_97ec0306
Bytes: 127
Ok, I'll get rid of the {}s here. The other tests introduced the same local variable over and over again so they needed the {}.

File: runtime/dex_instruction-inl.h

449:25-449:35
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e00c6ef_dbc6938a
Bytes: 55
For consistency, shouldn't you name this HasVarArgs35c?

463:7-463:12
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fef4b642_3f0e876d
Bytes: 28
Where is there no vA and vB?

465:10-465:12
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fef4b642_5f094b63
Bytes: 49
I don't understand: vB is not mentioned line 463.

467:6-467:8
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bef6be49_9dd0033f
Bytes: 60
But what is it? You haven't said what vC is in this comment.

470:0-477:34
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5e114241_5a095563
Bytes: 122
Maybe add an example as well. Even though I understand where you're going to, all the comments above confused me a lot :-)

File: runtime/dex_instruction.h

394:7-395:17
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bef6be49_5de4bb21
Bytes: 30
Rename these to GetAllArgs35c?

551:10-551:16
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fef4b642_1f13c397
Bytes: 56
Why do you need this now? I haven't seen any user of it.

File: runtime/interpreter/interpreter_common.cc

485:32-491:55
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e00c6ef_9bd00b3f
Bytes: 19
Indentation is off.

495:24-501:27
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e00c6ef_7bdf7f4d
Bytes: 5
ditto

629:74-629:79
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9e057a00_7cdf794d
Bytes: 13
slots -> slot

File: runtime/interpreter/interpreter_common.h

110:21-110:22
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9e057a00_dcc68d8a
Bytes: 28
should the ',' be an 'and' ?

192:33-192:47
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9e057a00_9cd0053f
Bytes: 50
Please consider my suggestion in a former comment.

File: runtime/interpreter/interpreter_goto_table_impl.cc

78:52-78:56
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5e114241_1a13dd97
Bytes: 11
Missing '.'

File: runtime/runtime.h

734:66-734:71
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e00c6ef_5be4c321
Bytes: 14
Their -> The ?

File: test/955-lambda-smali/smali/SanityCheck.smali

26:38-26:93
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fef4b642_fff7ffcb
Bytes: 28
I cannot parse this comment.

File: test/955-lambda-smali/smali/TrivialHelloWorld.smali

47:35-47:63
Wed Jun 17 20:48:05 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5e114241_faf709cc
Bytes: 48
do we have such a thing? Are you introducing it?

