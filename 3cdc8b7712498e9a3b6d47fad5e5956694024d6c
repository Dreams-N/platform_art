Revision: 3cdc8b7712498e9a3b6d47fad5e5956694024d6c
Patch-set: 1
File: runtime/arch/x86_64/quick_entrypoints_x86_64.S

52:0-52:81
Fri Feb 14 08:57:08 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_7d372214
Bytes: 231
There's an issue with using native argument convention disagree with the implied location of GPRs from the core spill mask. It leads to this messy interwoven pushes and the GprIndexToGprOffset routine in the quick argument visitor.

52:0-52:81
Fri Feb 14 13:55:31 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_7d372214
UUID: 8f9e016b_90210d86
Bytes: 112
Do you have a better suggestion?  Is the messiness hidden in a couple of routines that aren't generally visible?

52:0-52:81
Tue Feb 18 05:33:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_90210d86
UUID: cf26394f_7645ae88
Bytes: 245
I think the main places are the FillInCalleeSaves routine in Context and the quick argument visitor. I think for the sake of my sanity I'll handle the irregular layout in the argument visitor and the FillInCalleeSaves will just scan numerically.

67
Fri Feb 14 13:55:31 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_90a6515c
Bytes: 42
Wasn't Method* being passed in RAX (arg0)?

67
Tue Feb 18 05:33:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_90a6515c
UUID: 6f8b8d70_96314c09
Bytes: 415
So this is a bridge, the incoming method is in RDI (unless you want to add RAX as another argument register?) this code is placing the callee save method (to describe the spilt arguments and callee saves) on to the stack. The same code is performed in FinishCalleeSaveFrameSetup, but I'd like to remove that code as it will cut down on the number of arguments being passed and some messy argument stomping problems.

234:73-234:76
Sat Feb 15 21:04:01 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cff8f9d4_a37e7af4
Bytes: 117
The macro could take shorty and arg_array registers as arguments. That would make it easier to read at the call site.

261:34-261:48
Fri Feb 14 13:55:31 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_b0253191
Bytes: 24
comment: arg_array+=2 ??

261:34-261:48
Wed Feb 19 03:34:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_b0253191
UUID: ef577db2_04de962e
Bytes: 4
Done

302:17-302:18
Fri Feb 14 13:55:31 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_f02fb96a
Bytes: 56
rcx?   I am also uncertain about movl r10q vs. movq r10.

302:17-302:18
Wed Feb 19 03:34:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_f02fb96a
UUID: ef577db2_c4d2bef1
Bytes: 260
So my possibly broken belief is that movl and movq perform about the same, but movl can sometimes avoid a REX prefix (not in this case as I'm using r10). There aren't partial register penalties. I preferred the movl here as I don't expect >4GB of arguments :-)

322
Sat Feb 15 21:04:01 2014 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cff8f9d4_83837ea8
Bytes: 34
You can move this movq lower down.

322
Wed Feb 19 03:34:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cff8f9d4_83837ea8
UUID: ef7e9d24_4cd4bf10
Bytes: 4
Done

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

162
Fri Feb 14 13:55:31 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_303b01b2
Bytes: 48
Is it better to have an array and a range check?

162
Tue Feb 18 05:33:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_303b01b2
UUID: cf26394f_d63cc2f9
Bytes: 81
Yep, this was a first cut and the arguments are not yet getting passed correctly.

File: runtime/runtime.cc

1492
Fri Feb 14 13:55:31 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_703589ba
Bytes: 91
Seems like this could be optimized to choosing 0 or 8, and not bothering with the popcount.

1492
Tue Feb 18 05:33:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_703589ba
UUID: ef293d20_172b16aa
Bytes: 103
Its more about the readability, we should only ever create these methods when we create the boot image.

