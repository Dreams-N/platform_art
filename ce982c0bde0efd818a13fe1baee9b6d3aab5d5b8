Revision: ce982c0bde0efd818a13fe1baee9b6d3aab5d5b8
Patch-set: 3
File: /COMMIT_MSG

10:19-10:27
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_2663028c
Bytes: 11
assembly :)

File: compiler/optimizing/builder.cc

546:45-546:52
Wed Nov 12 01:04:29 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aa8035b_24455271
Bytes: 187
the use of "_reg" here is ambiguous, dalvik vs machine vs.. perhaps use a typedef for uint16_t to "dalvik_reg_t" make the code more intention revealing. Or maybe just first_dalvik_reg, ..

549:45-549:55
Wed Nov 12 01:04:29 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3aa8035b_6424aadb
Bytes: 291
why are we referring to these as dex_offsets? the term dex offset comes from Dalvik where these were addresses in memory. Currently these should be dex PCs, namely offsets from the start of code items. Quick lacks this clean up but there's no need to bring over the convention to optimizing.

549:45-549:55
Wed Nov 12 10:45:18 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3aa8035b_6424aadb
UUID: ba8dd3f4_a64dd208
Bytes: 172
Yeah I guess it started out as naming like others do, and then when creating instructions that needed it, it naturally got named 'dex_pc'. I agree se should rename it here.

559:6-559:7
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_46bac665
Bytes: 17
weird indentation

File: compiler/optimizing/code_generator_arm.cc

44:75-44:77
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_263a225e
Bytes: 50
It this change OK with respect to the current ABI?

855:9-855:20
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fa83cbc2_8878db66
Bytes: 14
This is wrong.

1646:73-1646:80
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_a6a8721b
Bytes: 100
You need to say that it will call for long division. Otherwise the live registers will not be saved.

1660:55-1660:61
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_463f264d
Bytes: 226
It is strange that this pair is made of two non-consecutive registers.  Is this a requirement of the instruction set?  Or is it because you reuse the first register of the operands' pairs?  Maybe add a comment line about this.

1697:16-1697:33
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fa83cbc2_4882d3da
Bytes: 176
This should only be used on slow paths.

Also, you won't get any live registers saved, as the register allocator only records the set on instructions that that kCallOnSlowPath.

1699:16-1699:28
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_268c62c6
Bytes: 41
InvokeRuntime already calls RecordPcInfo.

1700:16-1700:36
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_469166d9
Bytes: 7
Remove.

File: compiler/optimizing/code_generator_x86.cc

39:78-39:81
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_86b0ce85
Bytes: 6
Ditto.

661:8-661:31
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: da88c7e4_aa3913c6
Bytes: 11
Good catch!

1683:16-1683:33
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_e6851a99
Bytes: 41
Same comments as the ones in arm backend.

File: compiler/optimizing/code_generator_x86_64.cc

1611
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: da88c7e4_8adc4f27
Bytes: 54
Maybe add

  DCHECK_EQ(type, Primitive::kPrimLong);

?

File: compiler/optimizing/nodes.h

1748:86-1748:92
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fa83cbc2_485973fa
Bytes: 154
Don't give a default value, make all callers pass it. Otherwise it is confusing to have a dex pc that does not match the actual pc of the div instruction.

1759:7-1759:23
Wed Nov 12 11:02:17 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ba8dd3f4_e608ba9a
Bytes: 153
The long operation is atomic, so you don't need an environment.

(An environment is only for instructions at which the debugger could inspect the stack).

1766:17-1766:24
Wed Nov 12 01:04:29 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5aabf756_6e5ec3c0
Bytes: 94
perhaps evidence that you should do:
s/dex_offset/dex_pc/g
but not necessarily in this change.

File: compiler/utils/x86_64/assembler_x86_64.cc

909
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fa83cbc2_28abcf6c
Bytes: 81
Nit: add a newline here (there are two blank lines between methods in this file).

1235
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: da88c7e4_aa227398
Bytes: 19
Nit: add a newline.

1238:2-1238:17
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: da88c7e4_0a16ff39
Bytes: 189
This method is usually not directly called by methods generating instructions; maybe add another overloaded EmitRex64 method calling

  EmitOptionalRex(false, true, false, false, false);

?

1241
Wed Nov 12 10:53:28 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fa83cbc2_6888f704
Bytes: 19
Nit: add a newline.

