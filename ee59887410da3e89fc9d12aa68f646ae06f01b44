Revision: ee59887410da3e89fc9d12aa68f646ae06f01b44
Patch-set: 1
File: /COMMIT_MSG

15:0-16:19
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_957f63f2
Bytes: 104
... OatWriter and ElfWriterQuick (file name extension wrong, but class names are probably better anyway)

15:0-16:19
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_957f63f2
UUID: 8f9e016b_30b6a1e2
Bytes: 4
Done

24:19-24:22
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_dd4bae43
Bytes: 4
from

24:19-24:22
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_dd4bae43
UUID: 8f9e016b_50bb25c7
Bytes: 4
Done

File: compiler/compiled_method.cc

163:12-163:69
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_38fd961d
Bytes: 62
simpler just to have DeduplicateCFIInfo handle the null check?

163:12-163:69
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_38fd961d
UUID: 8f9e016b_903aeda7
Bytes: 4
Done

178:2-178:21
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_d578bb09
Bytes: 59
curious why these aren't in the initializer list like above

178:2-178:21
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_d578bb09
UUID: afcbc564_f38c2fdf
Bytes: 49
Just copying existing code conventions....  fixed

File: compiler/dex/quick/codegen_util.cc

1077:0-1078:55
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_98d302a3
Bytes: 103
just have 

UniquePtr<std::vector<uint8_t> > cfi_info(ReturnCallFrameInformation())

and lose the bool?

1077:0-1078:55
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_98d302a3
UUID: afcbc564_738adfbe
Bytes: 4
Done

1083:36-1083:45
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_d01ba986
Bytes: 52
storing the address of a local variable in the heap?

1083:36-1083:45
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_d01ba986
UUID: 8f9e016b_f0489949
Bytes: 4
Done

1226:41-1226:62
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_f3418f56
Bytes: 35
reference arguments should be const

1226:41-1226:62
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_f3418f56
UUID: 8f9e016b_1046fd3c
Bytes: 4
Done

File: compiler/dex/quick/mir_to_lir.h

165:26-165:47
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_1026e1c9
Bytes: 25
const reference arguments

165:26-165:47
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_1026e1c9
UUID: ef13fd9e_1073812c
Bytes: 26
replaced with return value

1095:44-1095:65
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_7d7f22f3
Bytes: 5
const

1095:44-1095:65
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_7d7f22f3
UUID: ef13fd9e_30b5dd64
Bytes: 4
Done

File: compiler/dex/quick/x86/codegen_x86.h

307:49-307:70
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_9d84c6b1
Bytes: 5
const

307:49-307:70
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_9d84c6b1
UUID: ef13fd9e_f015059b
Bytes: 4
Done

315:36-315:57
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_133fd3c7
Bytes: 5
const

315:36-315:57
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_133fd3c7
UUID: ef13fd9e_50b05974
Bytes: 4
Done

557:4-557:9
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_bd78aa08
Bytes: 7
"LIR* "

557:4-557:9
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_bd78aa08
UUID: 8f9e016b_10f43da1
Bytes: 4
Done

560:4-560:9
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_dd756e11
Bytes: 7
"LIR* "

560:4-560:9
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_dd756e11
UUID: afcbc564_1300b35f
Bytes: 4
Done

File: compiler/dex/quick/x86/target_x86.cc

962:0-971:1
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_f5fcd722
Bytes: 75
we have a leb128.h, move there? it would be nice to have a leb128_test too.

962:0-971:1
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_f5fcd722
UUID: 8f9e016b_fd723226
Bytes: 46
there's leb128_encoder and leb128_encoder_test

962:0-971:1
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_fd723226
UUID: afcbc564_d3780b0a
Bytes: 4
Done

File: compiler/driver/compiler_driver.cc

431:9-431:23
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_d0d0f51d
Bytes: 27
Note incorrect map.  fixed.

File: compiler/elf_writer_quick.cc

25:0-25:31
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_d51efbbf
Bytes: 71
We pull external imports out, see art/compiler/elf_writer.h for example

25:0-25:31
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_d51efbbf
UUID: ef13fd9e_30e79d94
Bytes: 4
Done

963:41-963:42
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_537ebb91
Bytes: 6
" - 4"

963:41-963:42
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_537ebb91
UUID: afcbc564_f3750f11
Bytes: 4
Done

965:36-965:38
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_7383bf42
Bytes: 6
" + 4"

965:36-965:38
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_7383bf42
UUID: 8f9e016b_f0ddf932
Bytes: 4
Done

File: compiler/oat_writer.cc

46:21-46:42
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_5de7be92
Bytes: 35
reference arguments should be const

File: compiler/oat_writer.h

72:13-72:44
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_9d93e641
Bytes: 117
The other content to write comes from the CompilerDriver, it seems like we'd want to keep the cfi_info there as well?

72:13-72:44
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_9d93e641
UUID: 8f87e128_29df2d81
Bytes: 4
Done

94:0-96:25
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_b041cd57
Bytes: 10
all const?

94:0-96:25
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_b041cd57
UUID: ef13fd9e_90ec9175
Bytes: 54
Not done, as it makes putting it into a vector harder.

File: dex2oat/dex2oat.cc

65:0-66:56
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_3d84bafa
Bytes: 123
yeah, this seems to be the most hackish part. Why isn't this hiden away within the CompilerDriver? Is that part of the WIP?

314:4-323:5
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_35de6fac
Bytes: 377
I'd add a command line flag for this. I'd make it default on in dex2oatd, and off in dex2oat. I have a WIP change (not yet uploaded) to make it a bit easier to add command line options to dex2oat and have them flow through, so you may want to wait and rebase on that. a corresponding change will also let us use Android system properties to control dex2oat flags for debugging.

314:4-323:5
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_35de6fac
UUID: 6f7c6df1_c8104f6d
Bytes: 164
Moved the logic to compiler_driver.cc.  Will wait until your WIP is done before adding a compiler flag.

How can I tell the difference between dex2oatd and dex2oat?

314:4-323:5
Fri Feb 14 18:45:48 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6f7c6df1_c8104f6d
UUID: 2fab559f_be60d9e1
Bytes: 42
kIsDebugBuild is preferred over the #ifdef

File: runtime/elf_file.cc

59:41-59:56
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_7d6722aa
Bytes: 117
{ 1, 0, nullptr, nullptr }; 

makes it clearer the last two are pointers

actually, is the 0 signifying JIT_NOACTION?

59:41-59:56
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_7d6722aa
UUID: ef13fd9e_70f1154d
Bytes: 4
Done

78:12-78:29
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_1df37683
Bytes: 63
doesn't this need to call __jit_debug_register_code at the end?

78:12-78:29
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_1df37683
UUID: ef13fd9e_d0f5693a
Bytes: 41
It is the last statement in the procedure

78:12-78:29
Fri Feb 14 18:45:48 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_d0f5693a
UUID: 2fab559f_9e651df2
Bytes: 61
duh... my eyes are broken and the new gerrit search failed me

81:3-81:21
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_55868b94
Bytes: 80
if (entry->next != nullptr) {

(we don't typically use implicit bool conversion)

81:3-81:21
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_55868b94
UUID: ef13fd9e_b0f26d4e
Bytes: 4
Done

94:2-94:21
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_f896cebf
Bytes: 8
and here

94:2-94:21
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_f896cebf
UUID: afcbc564_1373532c
Bytes: 4
Done

100:2-100:21
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_358b0f9b
Bytes: 8
and here

100:2-100:21
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_358b0f9b
UUID: ef13fd9e_1000a15f
Bytes: 4
Done

63:0-107:1
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_dde80e8f
Bytes: 129
we seem to Create/Register Unregister/Delete together. Any reason why the Create/Delete can't be folded into the other functions?

63:0-107:1
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_dde80e8f
UUID: afcbc564_3370571d
Bytes: 4
Done

833:22-833:24
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_3d0bda83
Bytes: 6
" - 1"

833:22-833:24
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_3d0bda83
UUID: 8f9e016b_300941fa
Bytes: 4
Done

856:34-856:37
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_f8440e90
Bytes: 106
it would be good to have at least a magic constant for this in ElfFile to keep in sync with ElfWriterQuick

856:34-856:37
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_f8440e90
UUID: 8f9e016b_90082df4
Bytes: 4
Done

869:27-869:31
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_bde6eac9
Bytes: 46
1024 -> KB

but more important, why this much?

869:27-869:31
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_bde6eac9
UUID: ef13fd9e_f0fce522
Bytes: 52
decreased to 1 KB.  Could probably be a bit smaller.

888:0-888:41
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_139c339d
Bytes: 48
fwiw, bionic will abort if the allocation fails.

914:40-914:42
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_98378213
Bytes: 17
constant here too

914:40-914:42
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_98378213
UUID: afcbc564_73e73f93
Bytes: 4
Done

972:32-972:34
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_7842be7f
Bytes: 96
I'd just use the expression 1+3*4 here. is there a sizeof that should be used in the expression?

972:32-972:34
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_7842be7f
UUID: 8f9e016b_b0fc518d
Bytes: 4
Done

978:20-978:21
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_dde3aeb8
Bytes: 30
WS around + here and elsewhere

978:20-978:21
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_dde3aeb8
UUID: afcbc564_93ecc375
Bytes: 4
Done

982:42-982:43
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_35594f7b
Bytes: 82
does the LLVM Dwarf include have any declarations of these so we could use sizeof?

982:42-982:43
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_35594f7b
UUID: ef13fd9e_500b3982
Bytes: 27
Not really.  Using uint32_t

985:58-985:59
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_955e4361
Bytes: 9
and here?

985:58-985:59
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_955e4361
UUID: 8f9e016b_d0f9d59b
Bytes: 4
Done

990:40-990:42
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_7563c724
Bytes: 79
define named constant for offset, especially since it may vary by architecture?

990:40-990:42
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_7563c724
UUID: ef13fd9e_30103daf
Bytes: 97
Should be architecture independent.  It could probably be less than 16, but 16 will work for all.

1008:40-1008:42
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_fde072ae
Bytes: 8
and here

1008:40-1008:42
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_fde072ae
UUID: afcbc564_b3f1c74f
Bytes: 4
Done

1011:12-1011:13
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_b83c46f6
Bytes: 97
i'm kind of fine with the size being repeated here, but its also used below, so maybe a constant?

1011:12-1011:13
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_b83c46f6
UUID: 8f9e016b_f0f6d9aa
Bytes: 4
Done

1065:21-1065:23
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_d5471b92
Bytes: 23
use constant from above

1065:21-1065:23
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_d5471b92
UUID: afcbc564_d3f56b3a
Bytes: 4
Done

1076:16-1076:17
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_d8302a1b
Bytes: 24
use constant from above?

1076:16-1076:17
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_d8302a1b
UUID: ef13fd9e_700ab57c
Bytes: 4
Done

1079:21-1079:23
Fri Feb 14 06:44:51 2014 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: afcbc564_182b72a9
Bytes: 23
use constant from above

1079:21-1079:23
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: afcbc564_182b72a9
UUID: ef13fd9e_d01e09c0
Bytes: 4
Done

File: runtime/elf_file.h

179:2-179:8
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8f9e016b_7d05626c
Bytes: 67
"char* " and use byte rather than char as more intention revealing?

179:2-179:8
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8f9e016b_7d05626c
UUID: ef13fd9e_1019c1d5
Bytes: 4
Done

180:14-180:16
Fri Feb 14 07:40:01 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ef13fd9e_b08eed63
Bytes: 4
"* "

180:14-180:16
Fri Feb 14 18:15:18 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ef13fd9e_b08eed63
UUID: afcbc564_f3f26f4f
Bytes: 4
Done

