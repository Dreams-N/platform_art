Revision: 72df3f125c403d1942f7fddea17e81c57f21c3d3
Patch-set: 4
File: test/139-register-natives/src/Main.java

32:0-36:5
Wed May 20 07:32:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_5e044518
Bytes: 246
I was more thinking of putting the try catch in the helper, eg:

expectThrows(() => new TestSub().foo());

But then realized closures are too 2020 for Java.

An alternative could be to have the helper call the "foo" method on the passed argument.

32:0-36:5
Wed May 20 17:24:25 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d179dd9_5e044518
UUID: adfdb1c1_bdb20a47
Bytes: 38
Reflection, that seems a bit overkill.

32:0-36:5
Wed May 20 17:27:30 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adfdb1c1_bdb20a47
UUID: ed19690f_e07578fb
Bytes: 93
No without reflection. All classes could implement an Interface that only has the foo method.

32:0-36:5
Wed May 20 17:36:36 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed19690f_e07578fb
UUID: adfdb1c1_f8377010
Bytes: 194
This is complicated, and I would need indirection everywhere: the first test is about direct(private) vs virtual(public), see the "fooTest" below. You can't define private methods in interfaces.

