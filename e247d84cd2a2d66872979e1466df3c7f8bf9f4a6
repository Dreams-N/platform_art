Revision: e247d84cd2a2d66872979e1466df3c7f8bf9f4a6
Patch-set: 1
File: runtime/entrypoints/quick/quick_alloc_entrypoints.cc

31
Sat Oct 25 00:45:22 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5594aafe_f709409a
Bytes: 251
Another idea here is adding a kMinimumLargeObjectSize in heap and using kMinimumLargeObjectSize / sizeof(jlong) instead of  tlab_fast_path_array_length_threshold. What do you think of this approach? It should be faster since it doesn't require a load.

31
Mon Oct 27 10:25:29 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5594aafe_f709409a
UUID: 15ccf252_6ba7a19f
Bytes: 136
I agree. It looks like tlab_fast_path_array_length_threshold does not depend on any dynamic value, so could just be set at compile time.

126
Sat Oct 25 00:45:22 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 956b82dc_864a1480
Bytes: 191
Can you put this code in AllocArrayFromCode so that the interpreter can also use it, as well as not requiring the annoying "\" at the end of the lines? Assuming this doesn't cause a slowdown.

126
Wed Oct 29 05:55:54 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 956b82dc_864a1480
UUID: 154a3299_44fc1fd3
Bytes: 68
Also, macros debug terribly. Prefer static functions and templating.

130:42-130:47
Wed Oct 29 05:55:54 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 95570241_9a984908
Bytes: 6
length

File: runtime/mirror/array.h

67:2-67:15
Wed Oct 29 05:55:54 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 95570241_ba9b8d03
Bytes: 175
why is this fashion catching on? Did our compiler tool chains break and forget to inline things? I'm tempted to remove all ALWAYS_INLINEs to stop them turding the codebase up.

