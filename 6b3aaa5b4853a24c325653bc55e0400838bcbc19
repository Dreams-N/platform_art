Revision: 6b3aaa5b4853a24c325653bc55e0400838bcbc19
Patch-set: 1
File: compiler/dwarf/debug_frame_opcode_writer.h

28:52-28:64
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_b1b098be
Bytes: 32
do following -> do the following

28:52-28:64
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_b1b098be
UUID: 83cfde46_35cfb25d
Bytes: 4
Done

36:44-36:49
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_517ff464
Bytes: 11
let's -> we

36:44-36:49
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_517ff464
UUID: c3c55625_17471e2f
Bytes: 4
Done

48:8-48:14
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_95a9c689
Bytes: 49
I'd drop "this->". Here and all occurences below.

48:8-48:14
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_95a9c689
UUID: 63caea3a_d488b223
Bytes: 60
this-> is actually required due to the templated base class.

67:7-67:10
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_b5a642b7
Bytes: 9
Relative?

67:7-67:10
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_b5a642b7
UUID: 63caea3a_94822a00
Bytes: 114
RelOffset is the name used in assemblers.  I would prefer to stick to conventional name - even if it is not ideal.

77:7-77:10
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_b41ba69c
Bytes: 8
Relative

77:7-77:17
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3c55625_f7d9321f
Bytes: 100
Having RelOffsets and RelOffset is confusing. How about RelativeOffsetForMany/RelativeOffsetForOne ?

77:7-77:10
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_b41ba69c
UUID: 83cfde46_15e396ce
Bytes: 5
ditto

77:7-77:17
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3c55625_f7d9321f
UUID: 83cfde46_95d6a6ee
Bytes: 35
Done (RelOffset + RelOffsetForMany)

88:7-88:15
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_55959e3f
Bytes: 43
Restores/Restore -> RestoreMany/RestoreOne?

88:7-88:15
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_55959e3f
UUID: 83cfde46_759bfa4b
Bytes: 28
Done (Restore + RestoreMany)

142:16-142:36
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_35949241
Bytes: 67
Please add a comment what are reg and new_reg. Is that just a move?

142:16-142:36
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_35949241
UUID: c3c55625_37f25a6b
Bytes: 5
Done.

204:0-204:35
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_d588ae23
Bytes: 41
move this to the beginning of the method?

204:0-204:35
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_d588ae23
UUID: c3c55625_f70372c4
Bytes: 4
Done

237:6-237:23
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_346d76ff
Bytes: 50
Style in ART is to call this GetCurrentCFAOffset()

237:6-237:23
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_346d76ff
UUID: 83cfde46_b58962f4
Bytes: 4
Done

241:7-241:29
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_d47192dd
Bytes: 19
SetCurrentCFAOffset

241:7-241:29
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_d47192dd
UUID: c3c55625_1722be59
Bytes: 4
Done

245:2-245:32
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_f585aa0a
Bytes: 21
Could you avoid this?

245:2-245:32
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_f585aa0a
UUID: 63caea3a_b4bac6ab
Bytes: 61
I could just redeclare it, but that does not seem any neater.

245:2-245:32
Mon Mar 30 15:06:18 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_b4bac6ab
UUID: 63caea3a_f4036ec4
Bytes: 69
So what is that for? C++ style guide kind of asks not to use "using".

245:2-245:32
Mon Mar 30 15:11:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_f4036ec4
UUID: 63a3ca80_0007d7d4
Bytes: 271
That's not correct. The style guide is against using namespace.

This is the correct C++ way to ensure 'availability' of the super-classes' field when templates are involved, and we already do this in our codebase.

('Using' is also the now-standard way to do a typedef.)

245:2-245:32
Mon Mar 30 15:13:42 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63a3ca80_0007d7d4
UUID: c3c55625_77aa22fb
Bytes: 123
I said "kind of" because I can't read it fully. So again, what is that for? How would you write the uses without the using?

245:2-245:32
Mon Mar 30 15:17:38 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3c55625_77aa22fb
UUID: 63caea3a_f4312e9c
Bytes: 167
It is there so that the users can access the generated buffer with writer.data()
(on the other hand, I intentionally do not let the users to call writer.push* methods)

245:2-245:32
Mon Mar 30 15:23:46 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_f4312e9c
UUID: 63caea3a_745c5ed3
Bytes: 207
OK, just had a quick chat with Vladimir, I understand now what this is for. Yeah for templates.

Nevermind my comment then, and if Andreas says we're using it elsewhere then this has to be the proper way....

File: compiler/dwarf/debug_frame_writer.h

55:0-55:61
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_947b0aba
Bytes: 37
const? (otherwise make it a pointer).

55:0-55:61
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_947b0aba
UUID: 83cfde46_35733298
Bytes: 4
Done

File: compiler/dwarf/debug_line_opcode_writer.h

27:55-27:63
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_3501f207
Bytes: 13
the following

27:55-27:63
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_3501f207
UUID: 83cfde46_d5574ee4
Bytes: 4
Done

157:24-157:28
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_3446d681
Bytes: 25
Add a kConstant for this?

157:24-157:28
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_3446d681
UUID: 63caea3a_b48966f4
Bytes: 4
Done

172:17-172:21
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3c55625_b7b08abe
Bytes: 5
ditto

172:17-172:21
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3c55625_b7b08abe
UUID: c3c55625_b72baa26
Bytes: 4
Done

191:6-191:22
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_f457ee2a
Bytes: 46
GetCodeFactorBits (applies to here and below).

191:6-191:22
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_f457ee2a
UUID: 83cfde46_f554cae1
Bytes: 4
Done

207:8-207:14
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_94546a28
Bytes: 13
Please avoid.

207:8-207:14
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_94546a28
UUID: 63caea3a_f4a60e8a
Bytes: 27
I am not sure how (easily).

209:0-210:61
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_b4516637
Bytes: 27
nit: one argument per line?

209:0-210:61
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_b4516637
UUID: 83cfde46_9561c6ba
Bytes: 145
Done.  Is there Art Style document somewhere?  So far I have been following the Google C++ Style Guide, and that seems to differ on many aspects.

209:0-210:61
Mon Mar 30 15:06:18 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_9561c6ba
UUID: 83cfde46_d50bced4
Bytes: 162
No, it's more of a per-person preference. This one is more of a nit than a requirement.

(Note that the capital getters/setters is not following C++ style guide).

File: compiler/dwarf/debug_line_writer.h

39:18-39:21
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3c55625_778462e2
Bytes: 6
const?

39:18-39:21
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3c55625_778462e2
UUID: 83cfde46_f53daa8f
Bytes: 4
Done

40:21-40:23
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63caea3a_54acc29d
Bytes: 6
const?

40:21-40:23
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63caea3a_54acc29d
UUID: 83cfde46_953a2695
Bytes: 4
Done

41:18-41:39
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3c55625_17795e7d
Bytes: 6
const?

41:18-41:39
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3c55625_17795e7d
UUID: 63caea3a_b4b086be
Bytes: 4
Done

File: compiler/dwarf/dwarf_test.cc

2:17-2:21
Fri Mar 27 23:45:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 43d246e8_635b6f0d
Bytes: 4
2015

File: compiler/dwarf/dwarf_test.h

2:17-2:21
Mon Mar 30 09:13:56 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3c55625_5418442f
Bytes: 4
2015

1:0-196:43
Fri Mar 27 23:45:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63758ab8_99bca951
Bytes: 96
We don't use header files if there's only one test using it. Please move this into the .cc file.

1:0-196:43
Fri Mar 27 23:47:53 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 63758ab8_99bca951
UUID: 83cfde46_cfa261ef
Bytes: 99
I put it inside header because I expect that there will be more tests using it in the next commits.

1:0-196:43
Sat Mar 28 00:22:22 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_cfa261ef
UUID: 63a3ca80_0f3ce841
Bytes: 43
OK, but they better show up some day... :-)

File: compiler/dwarf/register.h

23:2-52:4
Fri Mar 27 23:45:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 63a3ca80_cfba50ad
Bytes: 36
Indent + vertical whitespace around.

File: compiler/dwarf/writer.h

115:0-115:55
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_7520da99
Bytes: 34
Why not taking a const char* then?

115:0-115:55
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_7520da99
UUID: 83cfde46_b53722ae
Bytes: 58
Then I would just force the reinterpret_cast on the users.

File: runtime/leb128.h

127:0-137:1
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3c55625_d792f624
Bytes: 94
This is the same code as above. I know it doesn't come from you, but could you try sharing it?

127:0-137:1
Mon Mar 30 14:23:10 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3c55625_d792f624
UUID: c3c55625_d740b614
Bytes: 497
Leave this as is. I have made the decision to not share the code and I should be the one to deduplicate if needed.

(I have previously considered

  dest->reserve(dest->size(), UnsignedLeb128Size(value));
  UncodeUnsignedLeb128(&(*dest)[0] + dest->size(), value);

However, this could have very bad impact on performance because, unlike push_back(), consecutive calls to reserve() for one extra element do not guarantee amortized O(1) complexity. libstdc++ would actually reallocate on each call.)

127:0-137:1
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3c55625_d792f624
UUID: 63caea3a_f48feef7
Bytes: 114
I would not be shy to deduplicate the code, but I did not see an easy way so I just moved them next to each other.

152:0-163:1
Mon Mar 30 13:58:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83cfde46_d52e6e8a
Bytes: 5
ditto

152:0-163:1
Mon Mar 30 15:02:21 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83cfde46_d52e6e8a
UUID: 63caea3a_948c6a05
Bytes: 5
ditto

