Revision: 2fe54774d569af8b3f9889b540154d8bc9300a69
Patch-set: 6
File: compiler/optimizing/load_store_elimination.cc

51:0-57:7
Fri Oct 09 09:59:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_aae96fe1
Bytes: 51
I guess that's when the class is unresolved? Calin?

51:0-57:7
Fri Oct 09 11:52:44 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2a27faf5_aae96fe1
UUID: 8a154685_c5093a6a
Bytes: 525
Yes, we will BoundType a NewInstance if it's unresolved and used in an instanceof statement
  
Example:

UnresolvedClasss c = new UnresolvedClass();

if (c instanceof Clazz) {
  // Here we will insert a BoundType for c.
}

Note (as an optimization) that BoundType should not influence is_singleton_ or  is_singleton_and_not_returned_. It's a synthetic use that's added for convenience and ease of design. You can just consider the transitive chain and go to the uses of the BoundType to see if you need to reset is_singleton.

98:22-98:26
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aa1a0ab2_c6f022c2
Bytes: 11
reference_?

99:9-99:13
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a6d3aed_5a1ff5a2
Bytes: 10
position_?

102:0-102:2
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a0fce78_e3da7243
Bytes: 59
DISALLOW_COPY_AND_ASSIGN (here and all other classes below)

114:15-115:48
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a6d3aed_fae60910
Bytes: 17
Nit: one per line

136:7-136:22
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6afbb286_cc5a0f5b
Bytes: 35
Isn't that IsInstanceOrStaticField?

174:57-174:85
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cad81e3d_1ff603c4
Bytes: 22
Maybe explain why too?

198:0-198:24
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_4a1ef3a4
Bytes: 43
Add DCHECK_EQ(i, ref_info->GetPosition()) ?

218:5-218:11
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cad81e3d_3ffbc7aa
Bytes: 18
method -> a method

258:0-259:60
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a6d3aed_9af34dcd
Bytes: 69
Add a comment why i doesn't go to the last and why j started a i + 1.

295:0-295:69
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_8a0f4b6f
Bytes: 49
Add a comment of what index2 and what index2 are.

302:19-302:22
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca557e3a_577a0cac
Bytes: 8
position

309:55-310:44
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_2a1f3fa4
Bytes: 61
This comment belongs to where you actually update the matrix.

341:17-341:23
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a149288_2492d253
Bytes: 12
GetOrCreate?

351:16-351:22
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6afbb286_ac3ce3fe
Bytes: 12
GetOrCreate?

363:0-367:45
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a154685_05fb52aa
Bytes: 52
Why is that not set in the HeapLocation constructor?

390:49-391:51
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a154685_45054a59
Bytes: 46
This does not seem to describe the line below.

420:14-420:17
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca557e3a_976b04df
Bytes: 6
cannot

450:7-450:23
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_ea0c077c
Bytes: 18
ops -> operations.

530:0-530:47
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a154685_a5e99ee1
Bytes: 35
Add DCHECK(!graph->IsDebuggable()).

558:21-559:27
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_0a451b84
Bytes: 140
More concrete example? Is that:

int[] a = foo();
if () {
  a[0] = 2;
} else {
  a[0] = 2;
}

// use a[0] <---- going to be replaced with 2?

611:0-611:64
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ca557e3a_f76880e3
Bytes: 122
Mention that this is because of I/F and D/L array aliasing. Could you also mention the bug (I think there is one already).

628:0-631:54
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a0fce78_c3f016c2
Bytes: 132
Maybe write it:

if (heap_value == kDefaultHeapValue && GetDefaultValue(value->GetType()) == value {
  return true;
}

return false.

669:0-674:7
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a149288_4470ae9b
Bytes: 25
This does not look right.

683:11-683:33
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a149288_a48402d6
Bytes: 35
Please add a comment for this case.

684:0-684:48
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2a27faf5_6ac8173a
Bytes: 40
I'd drop this and handle it in MayAlias?

727:21-728:69
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6a149288_247bf2b3
Bytes: 18
Nit: one per line.

735:21-736:74
Fri Oct 09 14:46:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4a0fce78_83e61e0f
Bytes: 17
Nit: one per line

