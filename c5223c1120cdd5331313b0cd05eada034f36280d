Revision: c5223c1120cdd5331313b0cd05eada034f36280d
Patch-set: 10
File: test/137-cfi/cfi.cc

39:0-39:26
Tue May 19 13:58:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_7867e150
Bytes: 26
char* go_away_compiler_cfi

39:0-39:26
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d179dd9_7867e150
UUID: 0d8cfd85_90db94a0
Bytes: 4
Done

60:43-60:49
Tue May 19 12:34:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_783a8147
Bytes: 5
const

60:43-60:49
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d179dd9_783a8147
UUID: 2d37016d_a7a0ee1b
Bytes: 4
Done

163:2-163:21
Tue May 19 13:58:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0d179dd9_5bf537cd
Bytes: 34
Second SIGSTOP on the same thread?

163:2-163:21
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d179dd9_5bf537cd
UUID: adfdb1c1_281ee3e4
Bytes: 111
Yes, because this was extremely flaky in my tests. It can't do harm, a stopped process stays a stopped process.

163:2-163:21
Tue May 19 16:13:22 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: adfdb1c1_281ee3e4
UUID: 0d179dd9_9bd18fd3
Bytes: 39
Did you try removing the first SIGSTOP?

163:2-163:21
Tue May 19 16:30:08 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d179dd9_9bd18fd3
UUID: 2d37016d_8a6daf00
Bytes: 317
It's the second SIGSTOP that's weird. Libbacktrace does SIGSTOP, then ATTACH. But that didn't work for me in a couple of test runs, so that's why there's the second one after.

In fact, running the test, in many cases you'll still find wait_for_sigstop failed. But at least this one seems to reliably allow unrolling.

163:2-163:21
Tue May 19 20:26:29 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d37016d_8a6daf00
UUID: 2d20e12c_3c4abdb2
Bytes: 382
I think the first SIGSTOP is unnecessary. The reason why we need the second is explained in the "Attaching and detaching" section of http://linux.die.net/man/2/ptrace : "The design bug here is that a ptrace attach and a concurrently delivered SIGSTOP may race and the concurrent SIGSTOP may be lost." And maybe we should even try to deliver SIGSTOP repeatedly in wait_for_sigstop().

163:2-163:21
Wed May 20 17:28:48 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d20e12c_3c4abdb2
UUID: 2d37016d_8ed60c44
Bytes: 153
I removed the first one.

I tried adding a SIGSTOP to the wait loop, but it doesn't change anything, it still simply times out, but is stopped correctly.

196
Tue May 19 13:58:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d20e12c_f963f73e
Bytes: 97
I think the other process should now be stopped in an infinite loop. Are we not going to kill it?

196
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d20e12c_f963f73e
UUID: 0d8cfd85_d0d11c84
Bytes: 119
Sorry, yes, this was supposed to be on the Java side, though I think I'll have to send a SIGCONT for it to react to it.

File: test/137-cfi/src/Main.java

41:34-41:35
Tue May 19 13:58:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d20e12c_59b6a3cc
Bytes: 52
"args.length - 1" to match the code in runPrimary().

41:34-41:35
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d20e12c_59b6a3cc
UUID: adfdb1c1_e828cb05
Bytes: 4
Done

91:9-91:16
Tue May 19 13:58:51 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_d7c11c36
Bytes: 69
"Wait 5s" in line with the sleep below, or non-specific "Wait a bit".

91:9-91:16
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed19690f_d7c11c36
UUID: 2d37016d_87984af2
Bytes: 4
Done

121:4-121:8
Tue May 19 12:34:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_970964b4
Bytes: 14
Missing space.

121:4-121:8
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed19690f_970964b4
UUID: 0d8cfd85_b0e0184b
Bytes: 4
Done

File: test/Android.run-test.mk

441:0-441:69
Tue May 19 12:34:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ed19690f_b70ee8b7
Bytes: 86
Please also mark the test as failing for ndebug (because they are using libarttest.so)

441:0-441:69
Tue May 19 16:07:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ed19690f_b70ee8b7
UUID: adfdb1c1_081b27f5
Bytes: 4
Done

