Revision: f0e154d04fbb0878e6228f31476f114ffc984375
Patch-set: 2
File: /COMMIT_MSG

9:0-9:76
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_aae66fd9
Bytes: 15
Nit: long line.

9:0-9:76
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_aae66fd9
UUID: 466b346a_aa7c2f6e
Bytes: 4
Done

File: compiler/optimizing/stack_map_stream.h

126:8-127:22
Fri Mar 20 12:22:41 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_eacf872c
Bytes: 59
these should be the sizes necessary to represent max values

126:8-127:22
Fri Mar 20 12:34:51 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_eacf872c
UUID: 266e407b_4906e1d7
Bytes: 302
ignore, I thought this is actually adding the actual value of dex_pc_max and native_pc_max to the size, which is not true...

I think my bad was cause by the ComputeStackMapSize is a bit inconsistent anyway: we pass three sizes and then two extra values based on which we compute the rest of the sizes.

126:8-127:22
Fri Mar 20 14:53:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_4906e1d7
UUID: 466b346a_caa3a325
Bytes: 220
Yeah, I think we shouldn't pass sizes for inline info and dex register map, but max offsets. The inconsistency should be temporary, as they should all go through a "HowMayBits" like method, ust like ComputeStackMaskSize.

284:11-284:25
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_4bdca510
Bytes: 37
Nit: rename as native_pc_offset_max_?

284:11-284:25
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_4bdca510
UUID: 667af834_2bfd9935
Bytes: 4
Done

File: runtime/stack_map.cc

53:17-53:69
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_2bb279c6
Bytes: 54
We should give an explicit name to this special value.

53:17-53:69
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_2bb279c6
UUID: 667af834_8b392d89
Bytes: 4
Done

66:12-67:41
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_69b2c5d9
Bytes: 242
Maybe add parentheses around this expression?  It won't change its meaning, but IMHO it would make more clear that

  info.HasSmallDexRegisterMap()
  ⇒ (IsUint<CodeInfo::kBitsForSmallEncoding>(offset)
     ∨ (offset == kNoDexRegisterMap))

66:12-67:41
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_69b2c5d9
UUID: 667af834_ab3e696c
Bytes: 4
Done

79:17-79:69
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_0ab53bad
Bytes: 9
Likewise.

79:17-79:69
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_0ab53bad
UUID: 466b346a_0a3a1b98
Bytes: 4
Done

92:12-93:37
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_ebf6b15e
Bytes: 9
Likewise.

92:12-93:37
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_ebf6b15e
UUID: 466b346a_cacac31f
Bytes: 4
Done

File: runtime/stack_map.h

520:20-520:40
Fri Mar 20 12:22:41 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_8a784b44
Bytes: 415
I'm not very keen on this design.

Our usual access pattern is something like:

CodeInfo code_info = m->GetOptimizedCodeInfo();
StackMap map = code_info.GetStackMapForNativePcOffset(native_pc_offset);
MemoryRegion mask = map.GetStackMask(code_info);

which makes accessing stack map info a bit silly and redundant.

An alternative way is to construct the StackMap with a reference to the parent CodeInfo.

Thoughts?

520:20-520:40
Fri Mar 20 12:37:03 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_8a784b44
UUID: 667af834_ab8c2988
Bytes: 289
Actually, we could do that for all of these objects: instead of passing redundant values like `code_info' to StackMap's methods and `number_of_dex_registers' to DexRegisterMap's methods, we could simply pass these to the constructors of these objects.  I suggest we try that in another CL.

520:20-520:40
Fri Mar 20 14:53:33 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_ab8c2988
UUID: 667af834_8b7e0dde
Bytes: 474
Let's delay this. As discussed, these classes were written as an abstraction over a memory region. Making them state-full (that is have more fields than the memory region) is not ideal wither because it gives you the impression you can have fast access on the data (which you do not because you need to decompress things).

Ideally, I think we should have a high-level abstraction that contains all fields of a stack map, but uncompressed. And the user should just see that.

611:16-611:37
Fri Mar 20 12:22:41 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 466b346a_2a14bff3
Bytes: 104
Please document which kind of entries these refers to. I know now, but it's easier to loose track later.

611:16-611:37
Fri Mar 20 14:55:37 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 466b346a_2a14bff3
UUID: 266e407b_c95bb18c
Bytes: 4
Done

616:0-621:88
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 266e407b_29bccda8
Bytes: 75
Maybe move these constants into StackMap, as they pertain to StackMap data?

616:0-621:88
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 266e407b_29bccda8
UUID: 266e407b_89a05971
Bytes: 109
As discussed, let's keep them here for now. The TODO above is that we should probably get rid of them anyway.

630:10-630:46
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_0be9bd80
Bytes: 100
Maybe add a more explicit comment regarding this special 0xFF value in the case of a small encoding.

630:10-630:46
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_0be9bd80
UUID: 667af834_eb44710a
Bytes: 4
Done

638:21-638:61
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_2be6f9af
Bytes: 9
Likewise.

638:21-638:61
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_2be6f9af
UUID: 466b346a_8a45ab25
Bytes: 4
Done

795:0-799:68
Fri Mar 20 11:02:31 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 667af834_4bab4554
Bytes: 55
Maybe add an "Offset" suffix to all of these constants?

795:0-799:68
Fri Mar 20 11:38:21 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 667af834_4bab4554
UUID: 466b346a_6a3dd78e
Bytes: 4
Done

