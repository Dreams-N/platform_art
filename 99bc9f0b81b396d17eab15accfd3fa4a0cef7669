Revision: 99bc9f0b81b396d17eab15accfd3fa4a0cef7669
Patch-set: 1
File: runtime/stack.cc

224:0-227:88
Wed Jan 21 09:50:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_a6336c11
Bytes: 116
Should that be fatal? kNone is also for when a dex register's value is of no use anymore, or is not initialized yet.

224:0-227:88
Wed Jan 21 10:16:23 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_a6336c11
UUID: 8b0c4779_2fb8e998
Bytes: 215
When debugging the app, you should be able to see all local variables visible at the current location in the frame. If the DEX register matches a visible local variable, we should see it even if it's no longer used.

224:0-227:88
Wed Jan 21 10:31:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b0c4779_2fb8e998
UUID: 4b408f75_a697ec51
Bytes: 92
Sure, but we should not abort. Is there some kind of "Optimized away variable" kind in jdwp?

224:0-227:88
Wed Jan 21 10:37:56 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_a697ec51
UUID: 4b408f75_26059c08
Bytes: 482
Sorry, I agree we should not abort but return false. So far, when a variable is not accessible, we return the ABSENT_INFORMATION error (see Dbg::GetLocalValue and Dbg::SetLocalValue). At least IntelliJ does not really like that since it does not expect to receive this error.

I'll see if another error is more suitable for these cases. FYI, the full list of possible JDWP errors can be found at https://docs.oracle.com/javase/7/docs/platform/jpda/jdwp/jdwp-protocol.html#JDWP_Error

229:4-229:11
Wed Jan 21 09:50:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bc24f1f_c10472b8
Bytes: 51
List them, and change the message to unimplemented?

229:4-229:11
Wed Jan 21 10:16:23 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bc24f1f_c10472b8
UUID: 4b408f75_864f5086
Bytes: 162
They're already all listed above (at the time of this CL). Actually I can remove the default, it would cause compilation error if we introduce new location kinds.

251:41-251:61
Wed Jan 21 09:50:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8b0c4779_cf703d76
Bytes: 9
Low32Bits

251:41-251:61
Wed Jan 21 10:16:23 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b0c4779_cf703d76
UUID: 4bc24f1f_213f764a
Bytes: 60
Do you mean it needs a comment or an explicit variable name?

251:41-251:61
Wed Jan 21 10:31:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bc24f1f_213f764a
UUID: 4bc24f1f_c181d28e
Bytes: 26
No, Low32Bits is a helper.

251:41-251:61
Wed Jan 21 10:37:56 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bc24f1f_c181d28e
UUID: 4b408f75_660fa426
Bytes: 48
Thanks! I didn't remember we have this helper...

253:39-253:56
Wed Jan 21 09:50:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4bc24f1f_61333e98
Bytes: 10
High32Bits

253:39-253:56
Wed Jan 21 10:16:23 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bc24f1f_61333e98
UUID: 4bc24f1f_414402ea
Bytes: 13
Same as above

310:19-310:47
Wed Jan 21 09:50:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_e62d74ae
Bytes: 72
How about just calling GetVRegFromOptimized code for vreg and vreg + 1 ?

310:19-310:47
Wed Jan 21 10:16:23 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_e62d74ae
UUID: 8b0c4779_0fe6c5c0
Bytes: 167
Would it work for kStack and kConstant cases? I mean are both vregs have the same stack offset or constant values and we just need to extract the low and high 32-bits?

310:19-310:47
Wed Jan 21 10:31:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8b0c4779_0fe6c5c0
UUID: 4bc24f1f_61f01e3b
Bytes: 34
For optimizing yes, it would work.

426:1-427:60
Wed Jan 21 09:50:15 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4b408f75_466c28f8
Bytes: 144
Why do we need this? It won't work for constants, as you mention line 453. Isn't it an error if we try to call this? Shouldn't we deopt instead?

426:1-427:60
Wed Jan 21 10:16:23 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_466c28f8
UUID: 4bc24f1f_814aeaf5
Bytes: 479
From the debugger, we should be able to modify values of local variables (so DEX registers). In the case of the kConstant location, we cannot do that so we return false. This allows us to reply to the debugger with a JDWP error.

We receive the request to set a variable only when the thread is suspended. So we cannot deoptimize at this point. To achieve this, we'd need to resume the thread, wait for it to deoptimize that frame then set the new value in the deoptimized frame.

426:1-427:60
Wed Jan 21 10:31:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bc24f1f_814aeaf5
UUID: 4bc24f1f_21fa1619
Bytes: 40
I see, so we do return an error. Thanks.

426:1-427:60
Wed Jan 21 16:53:30 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bc24f1f_814aeaf5
UUID: 4beecfc7_f6307606
Bytes: 108
Is it possible (and would we want) to do complete deopt on debugger attach before even suspend is requested?

426:1-427:60
Wed Jan 21 16:58:12 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4beecfc7_f6307606
UUID: 4b408f75_31bdd889
Bytes: 233
We do not deopt when a debugger attaches to reduce the slowdown caused by using the interpreter and intercepting debugging events (breakpoints, ...). We deopt on demand, only when needed, to execute compiled code as much as possible.

426:1-427:60
Wed Jan 21 17:12:01 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4b408f75_31bdd889
UUID: cb02bf41_5a0fe925
Bytes: 49
Yes, this makes sense and it's what I thought. :)

