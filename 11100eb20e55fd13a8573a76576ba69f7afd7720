Revision: 11100eb20e55fd13a8573a76576ba69f7afd7720
Patch-set: 1
File: /COMMIT_MSG

7:0-7:28
Fri Jan 16 19:14:20 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bae3367_a686263d
Bytes: 216
I mentioned this to you in a previous review. Glad to see it done :) We have definitely seen that inlining exposes optimization opportunities and thus it is vital to do it early before CSE, DCE, and Constant Folding.

10:41-10:51
Fri Jan 16 17:36:51 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: abdbcb04_1f596fff
Bytes: 110
Maybe change this to "result type" (or "return type"), as this could get mixed up with "right-hand side type".

10:41-10:51
Mon Jan 19 09:31:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: abdbcb04_1f596fff
UUID: cbd63fdb_54b84299
Bytes: 4
Done

File: compiler/optimizing/graph_checker.cc

374:35-374:43
Fri Jan 16 17:36:51 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bc55323_029fdaf2
Bytes: 15
constant input?

374:35-374:43
Mon Jan 19 09:31:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bc55323_029fdaf2
UUID: 4bc24f1f_505cd2c9
Bytes: 4
Done

375
Fri Jan 16 17:36:51 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2bcfdb48_7b0f6bd8
Bytes: 52
Nit: Print a period at the end of the error message.

375
Mon Jan 19 09:31:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2bcfdb48_7b0f6bd8
UUID: cbd63fdb_74bd4688
Bytes: 4
Done

396:0-397:40
Fri Jan 16 17:36:51 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bc55323_22fa1619
Bytes: 88
It's a matter of taste, but I would rename `input0' and `input1' as `lhs' and `rhs'. :-)

396:0-397:40
Mon Jan 19 09:31:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bc55323_22fa1619
UUID: 4b408f75_bd689fd8
Bytes: 4
Done

398:6-398:73
Fri Jan 16 17:36:51 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: abdbcb04_9f26bf22
Bytes: 139
I did not know HCompare could have objects as inputs.  Out of curiosity, what kind of Java code would lead to the generation of such nodes?

398:6-398:73
Fri Jan 16 19:14:20 2015 +0000
Author: Razvan A Lupusoru <1013855@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: abdbcb04_9f26bf22
UUID: 8b6b67dc_ddb1bb03
Bytes: 148
I assume that the "condition" is generated as result of if-cc bytecodes. If yes, the object null checks would be something like an if-nez or if-eqz.

398:6-398:73
Mon Jan 19 09:31:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: abdbcb04_9f26bf22
UUID: 4bc24f1f_7061ce7e
Bytes: 85
This is not HCompare, this is HCondition. HCompare is only for long/float and double.

411:17-411:56
Fri Jan 16 17:36:51 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 6bc55323_c20a3291
Bytes: 58
Maybe change to "compares a non-0 integer with an object"?

411:17-411:56
Mon Jan 19 09:31:52 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bc55323_c20a3291
UUID: 4b408f75_9d65e302
Bytes: 4
Done

File: compiler/optimizing/nodes.cc

646:4-651:5
Fri Jan 16 17:36:51 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: abdbcb04_df5207db
Bytes: 46
Good catch!  Thanks for spotting this one. :-)

