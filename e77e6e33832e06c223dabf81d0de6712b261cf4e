Revision: e77e6e33832e06c223dabf81d0de6712b261cf4e
Patch-set: 1
File: compiler/dex/quick/x86/target_x86.cc

657
Sat Jun 07 00:54:17 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_d16924c9
Bytes: 73
Please remove this TODO.  64 bit mode can do atomic 64 bit loads & stores

657
Sat Jun 07 01:25:44 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_d16924c9
UUID: bf505ca5_d107e4e5
Bytes: 4
Done

File: compiler/dex/quick/x86/utility_x86.cc

92
Sat Jun 07 00:54:17 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_b4d1e834
Bytes: 76
typo: immediate.

You can support 64 bit immediates by using 2 operand slots

92
Sat Jun 07 01:25:44 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ff749443_b4d1e834
UUID: bf505ca5_91015cd3
Bytes: 56
Fixed the typo.  Will check how to use 2 slots.  Thanks!

92
Sat Jun 07 01:39:30 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_91015cd3
UUID: 7f33447f_bb5d44cd
Bytes: 585
To use 2 slots, you will have to add a new instruction format, so that ComputeSize can return the right size.  You will then have to Fix GenConstWide to call a LoadConstant(NoClobber?) that takes a int64_t value, and puts the high & low parts into 2 operands.   asssemble_x86.cc will then need to use the new instruction format to generate the correct instruction (and the disassembler will have to display it).

Will a 32 bit move into a 64 bit register clear the upper word?  If so, you can optimize that case for positive 32 bit values.

I suggest we use another CL for this change.

1012
Sat Jun 07 00:54:17 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: bf505ca5_f1a300d1
Bytes: 165
This logic really belongs in Mir2Lir::ForceTempWide, not here.  Please remove this function, and fix that one.

You can use if (!IsPair()) to detect the 64 bit case.

1012
Sat Jun 07 01:25:44 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: bf505ca5_f1a300d1
UUID: bf505ca5_31b968db
Bytes: 4
Done

1024
Sat Jun 07 00:54:17 2014 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ff749443_34be58ed
Bytes: 15
loc.reg = temp;

1024
Sat Jun 07 01:25:44 2014 +0000
Author: Chao-ying Fu <1010712@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ff749443_34be58ed
UUID: bf505ca5_71d7f0f4
Bytes: 4
Done

