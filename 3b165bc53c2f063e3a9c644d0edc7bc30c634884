Revision: 3b165bc53c2f063e3a9c644d0edc7bc30c634884
Patch-set: 4
File: compiler/utils/jni_macro_assembler.h

209
Mon Aug 08 17:52:45 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b977f3bf_cc1d85ca
Bytes: 28
Why do we need a second one?

209
Mon Aug 08 17:56:14 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b977f3bf_cc1d85ca
UUID: b977f3bf_6cbeb17a
Bytes: 74
A helper for implementations, but the scheme doesn't work for all of them.

209
Fri Aug 26 09:24:53 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b977f3bf_6cbeb17a
UUID: 250afa5d_cf367d48
Bytes: 108
I also don't understand why there's a second one and you just don't include that class in JNIMacroAssembler.

209
Fri Aug 26 15:48:36 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 250afa5d_cf367d48
UUID: e541c27a_fa67c01f
Bytes: 192
Clean base class. Not all JNI assemblers were forwarding to a simple, well-known regular assembler. E.g, the old arm32 one distinguished itself between arm & thumb (to factor out common code).

209
Fri Sep 02 15:53:37 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: e541c27a_fa67c01f
UUID: 312fa172_87896681
Bytes: 110
Can you point me to the code that can't just extend JNIMacroAssembler? I'm still confused by your explanation.

