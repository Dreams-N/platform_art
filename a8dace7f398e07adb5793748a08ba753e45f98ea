Revision: a8dace7f398e07adb5793748a08ba753e45f98ea
Patch-set: 18
File: runtime/arch/arm/quick_entrypoints_arm.S

1045
Mon Aug 15 09:40:13 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: fe1dd11b_5611f4ab
Bytes: 384
Why use a load exclusive? Is this what was mentioned the other day, where you try to achieve atomicity?

Unless other code accessing the target memory also use load/store exclusive, I don't think the 'exclusive' brings anything.

Is what you want to know whether the LDRD is loads the 64 bits atomically? In this case have a look at `ArmInstructionSetFeatures::has_atomic_ldrd_strd_`.

1045
Mon Aug 15 15:27:57 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fe1dd11b_5611f4ab
UUID: fe9071cc_3e17c9a4
Bytes: 263
I am not sure if we're even supporting anything older than ARMv7, is it ever the case it's not atomic then (the architecture document seemed to imply it was single-copy atomic always on v7+)?

We already use LDRD/STRD elsewhere in this file assuming it is atomic.

1045
Mon Aug 15 17:27:43 2016 +0000
Author: Christina Wadsworth <1109993@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: fe9071cc_3e17c9a4
UUID: 9e6cd5b9_739340f6
Bytes: 1408
Ok, I had looked into this at the time of this change, and per the arm instruction manual:

"LDM, LDC, LDC2, LDRD, STM, STC, STC2, STRD, PUSH, POP, RFE, SRS, VLDM, VLDR, VSTM, and VSTR instructions are executed as a sequence of word-aligned word accesses. Each 32-bit word access is guaranteed to be single-copy atomic. The architecture does not require subsequences of two or more word accesses from the sequence to be single-copy
atomic.

LDRD and STRD accesses to 64-bit aligned locations are 64-bit single-copy atomic as seen by translation table walks
and accesses to translation tables."

Further down, the manual mentions that this means there are more restrictions on where translation tables are in order for them to meet the atomicity requirements. 

To be safe, I had decided to not assume that ldrd is atomic, since technically it never says that it is atomic in all cases on v7 and on. Perhaps I was too conservative--which would be awesome for me because it would reduce the time this takes pretty significantly.

Also, in instruction_set_features_arm_test.cc, we perform the following: 

  EXPECT_FALSE(arm7_features->AsArmInstructionSetFeatures()->HasAtomicLdrdAndStrd());

This leads me to believe further that I shouldn't be assuming ldrd/strd are atomic, but again, I would love to be wrong!

Do either of you have more insight on whether or not I can make this assumption given the above?

1045
Mon Aug 15 17:34:01 2016 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9e6cd5b9_739340f6
UUID: 9e6cd5b9_d305f41c
Bytes: 388
We do not assume it for plain armv7, but all actual variants we use in practice (stuff like krait) set it to true.

Don't know whether we want to ditch correctness for legacy chips (sounds OK to me). Worst case, you could leave this as-is and write an equivalent for "good" devices, and decide at runtime. Note that at the moment the runtime itself ignores instruction-set-features AFAIK.

1045
Mon Aug 15 17:55:50 2016 +0000
Author: Christina Wadsworth <1109993@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9e6cd5b9_d305f41c
UUID: 9e6cd5b9_b36eb894
Bytes: 207
Ok, so ldrd sounds ok to use here. If someone else will confirm for me that ldrd is ok to use here since it is a relatively important change (@igor?), I would love to switch to that (will save us time yay!).

1045
Mon Aug 15 19:59:19 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9e6cd5b9_b36eb894
UUID: 9e6cd5b9_f9ee4fb3
Bytes: 924
Is it even correct even if we do assume they all have LPAE? I looked up the quote Christiana talked about (A3.5.3 in the ARM Architecture Reference Manual ARMv7-A and ARMv7-R Edition)

and it seemed to imply that even if you have LPAE extension it still doesn't mean 64-bit memory accesses outside of the translation table are guaranteed to be atomic.

> The Large Physical Address Extension adds this requirement to avoid the need for complex measures to avoid atomicity issues when changing translation table entries, *without  creating a requirement that all locations in the memory system are 64-bit single-copy atomic*.

Is there some undocumented quirk here that all systems with LPAE have 64-bit LDRD/STRD atomicity for any memory access?

I haven't looked at the other uses of these instructions in this file but maybe it's just a shorthand for 2 exclusive loads to 32-byte locations with 1 instruction instead of 2.

1045
Tue Aug 16 06:38:47 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9e6cd5b9_f9ee4fb3
UUID: 7b8573c7_82a8ba71
Bytes: 185
AFAIK, the implication is that 64-bit aligned LDRD/STRD are atomic. I will double check with the local expert when he comes in today. And this will likely deserve a comment in the code!

