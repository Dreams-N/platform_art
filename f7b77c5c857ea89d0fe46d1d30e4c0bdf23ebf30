Revision: f7b77c5c857ea89d0fe46d1d30e4c0bdf23ebf30
Patch-set: 5
File: compiler/optimizing/code_generator_arm64.cc

1866
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c283b51b_ad24098f
Bytes: 19
<< instr->GetType()

1866
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c283b51b_ad24098f
UUID: a29b218c_24eb865b
Bytes: 4
Done

1874:0-1874:101
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a2b881d5_dc6e613c
Bytes: 15
Nit: long line.

1874:0-1874:101
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a2b881d5_dc6e613c
UUID: 82bb7df1_b1047df9
Bytes: 4
Done

1880:4-1880:57
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a220812e_f9b7771e
Bytes: 47
Style: one statement per line (here and below).

1880:4-1880:57
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a220812e_f9b7771e
UUID: 02e4ed24_22070f3d
Bytes: 4
Done

File: compiler/optimizing/instruction_simplifier_arm64.cc

243
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42c98578_3c3679e5
Bytes: 35
Maybe DCHECK the type of `op` here?

243
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42c98578_3c3679e5
UUID: 62a5a9c6_b1efdea0
Bytes: 90
Is it useful considering that HArm64BitwiseNegatedRight's constructor already checks that?

243
Wed Feb 24 15:16:52 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 62a5a9c6_b1efdea0
UUID: a2b881d5_9ff13b8b
Bytes: 82
Yes, we do that in other places (see e.g. HandleShift methods in code generators).

250:0-258:5
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c283b51b_cd313dd0
Bytes: 31
Nit: use operator `?:` instead?

250:0-258:5
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c283b51b_cd313dd0
UUID: 62be89e4_294daf68
Bytes: 4
Done

File: compiler/optimizing/nodes_arm64.h

164
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 02c30d5c_fa1b215f
Bytes: 18
<< op->DebugName()

164
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 02c30d5c_fa1b215f
UUID: 62be89e4_e95697fd
Bytes: 35
Done (I think you just meant `op`).

164
Wed Feb 24 15:16:52 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 62be89e4_e95697fd
UUID: 02c30d5c_7a5631a8
Bytes: 73
Right; I read this too fast and thought `op` was a HInstruction at first.

170
Wed Feb 24 11:44:06 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 02c30d5c_fa196159
Bytes: 160
For the sake of completion, could you add static_assert's to make sure that the result type of `x & ~y` is the same as the result type of `x | ~y` and `x ^ ~y`?

170:34-170:49
Wed Feb 24 11:44:06 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a2b881d5_3f9bcf90
Bytes: 98
For consistency with the first return statement (line 172), I'd change that to

  decltype(x & ~y)

170:34-170:49
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: a2b881d5_3f9bcf90
UUID: 22d0113b_2301489e
Bytes: 4
Done

170
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 02c30d5c_fa196159
UUID: 62be89e4_e92fb781
Bytes: 28
Done using some C++11 magic.

172:6-172:45
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 62b209f8_1a6b7983
Bytes: 64
Style: move `return` statement on its own line (here and below).

172:6-172:45
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 62b209f8_1a6b7983
UUID: 62be89e4_891f1b4e
Bytes: 4
Done

176:44-176:53
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 42c98578_fc424133
Bytes: 63
Replace with

  UNREACHABLE();

and remove comment on line 175.

176:44-176:53
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 42c98578_fc424133
UUID: 02e4ed24_62aab74a
Bytes: 4
Done

File: test/564-checker-negbitwise/src/Main.java

2:0-2:1
Wed Feb 24 11:29:14 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c283b51b_0d5d15f4
Bytes: 24
Nit: indentation is off.

2:0-2:1
Wed Feb 24 14:48:37 2016 +0000
Author: Kevin Brodsky <1087715@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c283b51b_0d5d15f4
UUID: 62be89e4_691cc758
Bytes: 217
Done. For the record, this was copy/pasted from another test, it appears that these tests have the same indentation issue:
- 550-checker-multiply-accumulate
- 551-checker-shifter-operand
- 565-checker-doublenegbitwise

2:0-2:1
Wed Feb 24 15:16:52 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 62be89e4_691cc758
UUID: a2b881d5_5fe8839b
Bytes: 74
Thanks for pointing out the issue in other tests!  I'll take care of them.

39:6-39:11
Wed Feb 24 11:39:27 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 82affd8e_bbda935d
Bytes: 50
Use DCHECK-DAG instead of DCHECK (here and below).

39:6-39:11
Wed Feb 24 14:38:39 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 82affd8e_bbda935d
UUID: 82bb7df1_71826585
Bytes: 226
Isn't the order of ParameterValue instructions expected to be in the same as for arguments? If so I don't think we should use CHECK-DAG here. And the other instructions below are also strictly ordered due to data dependencies.

39:6-39:11
Wed Feb 24 15:16:52 2016 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 82bb7df1_71826585
UUID: 22dbb13a_062fa068
Bytes: 245
Right.  I would keep DCHECKs for ParameterValue instructions, but I think we should switch to DCHECK-DAGs for other instructions, as we do not want to enforce a specific order here (and dependencies introduced by use-def information are enough).

39:6-39:11
Wed Feb 24 15:27:52 2016 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 22dbb13a_062fa068
UUID: 82bb7df1_71d02575
Bytes: 776
I think CHECK is better below as well. There is no need for CHECK-DAG, since the order is guaranteed thanks to data dependencies and arguments order.

CHECK-DAG is used if we are unsure of the order the instructions appear. For example in

    int foo(int x, int y) {
      int a = x + y;
      int b = x - y;
      int res = a * b;
      return res;
    }

we would need CHECK-DAG because `a` is not necessarily computed before `b`.

    CHECK       <<y>>        ParameterValue
    CHECK       <<x>>        ParameterValue
    CHECK-DAG   <<a:i\d+>>   Add [<<x>>,<<y>>]
    CHECK-DAG   <<b:i\d+>>   Sub [<<x>>,<<y>>]
    CHECK       <<res:i\d+>> Mul [<<a>>,<<b>>]
    CHECK                    Return <<res>>

Or correct me if I am wrong. Maybe David can help us conclude here.

