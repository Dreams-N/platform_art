Revision: c41148907b7aab06949ec9dd94278fab3fb9b606
Patch-set: 4
File: runtime/class_linker.cc

2192
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0af3e41b_618b90c8
Bytes: 94
should this be replaced by a null check, a == '[' check, and a ThrowNoClassDefFoundError call?

2192
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0af3e41b_618b90c8
UUID: eac690d8_08ff6714
Bytes: 66
This function is private, so we can assume sanity from the caller.

File: runtime/jni_internal.cc

533
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aaf9f8ff_a1763ab2
Bytes: 229
can't you just use 0? JniAbortF is noreturn so we don't actually care, and 0 should convert to every return type in use. having all these pretend return values looks misleading. and makes this diff way larger than it needs to be.

533
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aaf9f8ff_a1763ab2
UUID: eac690d8_881b57d7
Bytes: 26
that fails for return void

2532
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cafc6cef_5ff10f05
Bytes: 111
won't we already have SEGVed in DecodeAndCheckArrayType? it looks like it unconditionally dereferences 'array'.

2532
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cafc6cef_5ff10f05
UUID: eac690d8_a8bbb363
Bytes: 240
This is passing down the JniAbortF for unit testing's benefit. There's a pre-existing potential segv here (and throughout jni_internal) that decoding a weak global may result in a nullptr which leads to a segv. Fixing that is a separate CL.

File: runtime/jni_internal_test.cc

73
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cafc6cef_9f03972e
Bytes: 167
if you want to make a global s/NULL/nullptr/ change, it really ought to be in a stand-alone change. you just obfuscate your patches by mixing it in with other changes.

73
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cafc6cef_9f03972e
UUID: eac690d8_48d03f86
Bytes: 217
In adding new tests I was making the code inconsistent. This change does the s/NULL/nullptr/ but it also makes changes to make sure the code is consistency. This follows the overriding coding guideline of consistency.

402
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cafc6cef_fff8dbe7
Bytes: 127
i think ExampleNativeMethod and losing the comment would be clearer. this is the function pointer passed for the non-null case!

402
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cafc6cef_fff8dbe7
UUID: 2ad50879_6ad37794
Bytes: 160
I think ExampleNativeMethod loses what the intended use of this function is, so I'd want a comment. BogusMethod vs ExampleNativeMethod, I'm not sold either way.

607
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aaf9f8ff_41865654
Bytes: 68
looks like we're still missing the null test in all these new tests.

607
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: aaf9f8ff_41865654
UUID: 8ad6f480_f0f598a7
Bytes: 12
see line 487

834
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: cafc6cef_1f10276f
Bytes: 200
the arguments to all the ASSERT_TRUEs/EXPECT_TRUEs you've turned into ASSERT_NEs and EXPECT_NEs are the wrong way round. (again, this is why you should pull cosmetic stuff out into a separate change.)

834
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cafc6cef_1f10276f
UUID: 2ad50879_8a77cbe7
Bytes: 69
Agreed. The ordering matches the original ordering before the change.

887
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0af3e41b_4102d470
Bytes: 5
class

887
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0af3e41b_4102d470
UUID: 8ad6f480_30e0d0e2
Bytes: 4
Done

902
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0af3e41b_21ffc814
Bytes: 12
either class

902
Wed May 14 18:58:00 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0af3e41b_21ffc814
UUID: eac690d8_e86c8b19
Bytes: 4
Done

934
Wed May 14 15:00:33 2014 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aaf9f8ff_c15a662c
Bytes: 45
i'm going to stop here. this is just silly...

