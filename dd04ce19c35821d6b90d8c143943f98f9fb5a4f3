Revision: dd04ce19c35821d6b90d8c143943f98f9fb5a4f3
Patch-set: 3
File: compiler/compiled_method.h

444
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_77433080
Bytes: 25
Top-level comment please.

444
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_77433080
UUID: 2f62c8c0_37d29868
Bytes: 4
Done

File: compiler/driver/compiler_driver.cc

648:57-648:59
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_97ce0436
Bytes: 24
const? Or "*" otherwise?

648:57-648:59
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_97ce0436
UUID: 2f62c8c0_773410ed
Bytes: 211
I think our style guide now allows non-const references but I'm OK with the pointer. Just don't be scared of the "&*it" this will create in CompileOne(), it is a normal way of turning an iterator into a pointer.

657:14-657:15
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_b7d308df
Bytes: 134
"Already compiled by another compiler"?

I guess if we wanted to do both dex2dex and optimizing, we would just need to remove that if?

657:14-657:15
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_b7d308df
UUID: 2f62c8c0_d7195c80
Bytes: 21
Added extra comments.

2619:5-2620:56
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_776c101c
Bytes: 20
4 more extra spaces?

2619:5-2620:56
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_776c101c
UUID: 2f62c8c0_5788ec84
Bytes: 4
Done

2660:2-2660:10
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_9757e443
Bytes: 4
drop

2660:2-2660:10
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_9757e443
UUID: 2f62c8c0_178e7493
Bytes: 4
Done

2661:53-2661:54
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_b75ce868
Bytes: 4
'*'.

2661:53-2661:54
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_b75ce868
UUID: 2f62c8c0_378b7884
Bytes: 4
Done

2708:0-2720:5
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_f7566044
Bytes: 167
Nit: I Think it would look clearer to say line 2707 that you now will refine the enabled compilers for that class (instead if having both comments line 2710 and 2715).

2708:0-2720:5
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_f7566044
UUID: 2f62c8c0_b7e5c846
Bytes: 4
Done

2722:0-2722:100
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_f7dd80ea
Bytes: 128
Isn't that wrong? If enabled_compilers_ was false for enabled_compilers_ because it's the second pass, you'd now put it to true.

2722:0-2722:100
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_f7dd80ea
UUID: 2f62c8c0_7785f069
Bytes: 54
Thanks for catching that, it shouldn't be here at all.

2722:0-2724:90
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_d7515c4f
Bytes: 45
Why is that not already in enabled_compilers?

2722:0-2724:90
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_d7515c4f
UUID: 2f62c8c0_97e0c437
Bytes: 82
Just like the JNI case above, this is something I forgot to clean up, i.e. remove.

2791:58-2791:59
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_174cb4b1
Bytes: 1
*

2791:58-2791:59
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_174cb4b1
UUID: 2f62c8c0_d7ea3c15
Bytes: 4
Done

File: runtime/base/dchecked_vector.h

189:4-189:10
Mon Jun 13 11:50:14 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2f62c8c0_3749b8a2
Bytes: 27
And no compiler complained?

189:4-189:10
Mon Jun 13 17:22:28 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2f62c8c0_3749b8a2
UUID: 2f62c8c0_f750201b
Bytes: 241
Yeah, looks like you need to instantiate the function to actually trigger the warning. From the compiler's PoV, the "iterator" could theoretically be "void", so as long as all instantiations happen to be for such a case, there is no problem.

