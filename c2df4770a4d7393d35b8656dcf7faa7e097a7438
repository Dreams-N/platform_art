Revision: c2df4770a4d7393d35b8656dcf7faa7e097a7438
Patch-set: 4
File: compiler/driver/compiler_driver.cc

1593:39-1593:41
Sat May 17 00:52:32 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8a3274d1_840a3a3a
Bytes: 375
This operator is overloaded to perform string comparison, but in my view, it could be confusing as the lhs is a const char*. I don't know what the style guide is on this, and it's probably a matter of taste.

How about calling String::compare() explicitly, use GetDescriptorEquals() or put GetDescriptor() on the lhs at least?

This comment applies to many places in this CL.

1593
Sun May 18 19:59:59 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8a3274d1_840a3a3a
UUID: 5f15a02d_136ce4d7
Bytes: 29
I'll use GetDescriptorEquals.

File: runtime/interpreter/interpreter_common.cc

120:70-120:75
Sat May 17 00:52:32 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5f15a02d_023c904d
Bytes: 199
I tend to get confused with this, there's no object lifetime issue between std::string and its c_str() (c_str() is still in use while std::string goes out of scope) here and in other places, correct?

120
Sun May 18 19:59:59 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5f15a02d_023c904d
UUID: 7f10a43e_2f1d39f8
Bytes: 62
The string goes out of scope after the statement is completed.

File: runtime/mirror/class-inl.h

536:6-536:8
Sat May 17 00:07:13 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3f0aac14_5bda7783
Bytes: 9
2 spaces?

536
Sun May 18 19:59:59 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f0aac14_5bda7783
UUID: 7f10a43e_0f1275e6
Bytes: 4
Done

File: runtime/mirror/class.h

780:2-780:8
Sat May 17 00:52:32 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7f10a43e_8e7a0bfe
Bytes: 171
Are these turned into static functions because we don't want to do the "h_this" thing? Any other reason? Why does ComputeName() use the h_this thing and while these don't?

780:2-780:8
Sat May 17 01:12:34 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f10a43e_8e7a0bfe
UUID: 3f0aac14_9b07ef7d
Bytes: 59
Presumably ComputeName allocates a string and needs handle.

780
Sun May 18 19:59:59 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7f10a43e_8e7a0bfe
UUID: 3f0aac14_c10a1887
Bytes: 85
Since its static, you pass in h_this as klass. I'll consider renaming in a future CL.

780
Sun May 18 19:59:59 2014 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3f0aac14_9b07ef7d
UUID: 7f10a43e_cf0b5db2
Bytes: 4
Done

