Revision: dd64a5e648d8d08d630d2099e1383204917c3516
Patch-set: 4
File: runtime/interpreter/interpreter.cc

491:40-491:61
Fri May 20 17:54:30 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7d7ee7d_993607f1
Bytes: 95
Add something like "we don't want to use ResolveMethod which includes a suspend point and GC" ?

491:40-491:61
Fri May 20 18:35:59 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7d7ee7d_993607f1
UUID: b7d7ee7d_641c46af
Bytes: 158
Changed the comment to:
    // Instead of calling ResolveMethod() which has suspend point and can trigger
    // GC, check out the callee method symbolically.

556:17-556:29
Fri May 20 17:54:30 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7d7ee7d_190df726
Bytes: 269
Is this guaranteed to have a valid non-null ref here?

What if we call ResolveType below or do "value.SetJ(0)" and then we don't call Execute below (if new_dex_pc == DexFile::kDexNoIndex), and in the next iteration of the loop we reach here? Is it impossible to happen?

556:17-556:29
Fri May 20 18:35:59 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7d7ee7d_190df726
UUID: b7d7ee7d_e4d2f6df
Bytes: 227
Since we get past the pending exception test at line 535, we should come back from string init successfully and hold a valid string.
DexFile::kDexNoIndex is used for exception path. Once we hit here, we'll call Execute() below.

566:15-566:27
Fri May 20 17:54:30 2016 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b7d7ee7d_193697d6
Bytes: 10
Same here.

566:15-566:27
Fri May 20 18:35:59 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b7d7ee7d_193697d6
UUID: b7d7ee7d_64df26e4
Bytes: 18
See comment above.

