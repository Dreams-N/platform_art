Revision: ee4749ff5908e5be024302a919430c6d1dc5ae1b
Patch-set: 6
File: compiler/optimizing/code_generator_arm.cc

1246:2-1252:3
Mon Nov 16 16:41:08 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b8e83ee_837680e3
Bytes: 281
I find this code pattern weird:
 - what type of parameters are true/false_target? in/out/both?
 - they can't be out since you assign a local address to them. That's a bit fishy.
 - not clear who owns the pointers.

Maybe docs will help but I would try to refactor the code as well.

1246:2-1252:3
Mon Nov 16 16:47:19 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b8e83ee_837680e3
UUID: 9b8e83ee_63d6dceb
Bytes: 569
I don't find it that confusing. If they were out params, they'd be stored into with "*ptr=".

Would you prefer me to better document that providing nullptr signals that the corresponding target is fallthrough? 

That's all there is to it. For example, if the caller says true_target should be fallthrough (calls with true_target==nullptr), the function internally creates one (because the generated code needs one) but does not export it. Is it that confusing that it reuses the same local variable? I don't want to pollute the code with "internal_true_target" stuff...

1246:2-1252:3
Mon Nov 16 16:55:00 2015 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9b8e83ee_63d6dceb
UUID: 5b25eb9e_b6b75da2
Bytes: 357
I think this fragment would be much more clear if you use a local for this rather than the parameter, and rename the incoming parameter, something like

Label* true_target = (true_target_in != nullptr)
                   ? true_target_in
                   : &fallthrough_target;

with parameter true_target_in (or a better name if you can come up with one)

1246:2-1252:3
Mon Nov 16 16:58:05 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5b25eb9e_b6b75da2
UUID: 169a6aee_0250ee07
Bytes: 140
+1 for Aart sugestions. 

(imo re-assigning to the function parameters always makes the reading harder as you need to pay special attention)

1321:4-1321:6
Mon Nov 16 14:08:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 169a6aee_a2fd7a62
Bytes: 20
Remove extra spaces.

1331:14-1331:15
Mon Nov 16 14:08:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 96865a95_09cbb125
Bytes: 4
"is"

1349:4-1349:6
Mon Nov 16 14:08:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b8e83ee_006a6631
Bytes: 20
Remove extra spaces.

1373:23-1374:52
Mon Nov 16 14:08:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 169a6aee_c2028621
Bytes: 16
Helper function?

File: compiler/optimizing/code_generator_arm64.cc

2289:0-2290:39
Mon Nov 16 14:08:30 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9b8e83ee_c0631e5b
Bytes: 202
These variables are not needed for the the "both fall-through" and "constand condition" cases, so move them further down.

You can also avoid the bool if you check whether fallthrough_target.IsLinked().

File: compiler/optimizing/code_generator_utils.cc

98:5-98:7
Mon Nov 16 16:41:08 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 169a6aee_426bd6c6
Bytes: 53
nit: I'd call this `Needs` to mirror the actual test.

