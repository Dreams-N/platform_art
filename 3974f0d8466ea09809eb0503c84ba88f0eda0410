Revision: 3974f0d8466ea09809eb0503c84ba88f0eda0410
Patch-set: 1
File: runtime/gc/accounting/space_bitmap.h

163:7-163:18
Thu Jan 08 22:23:20 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e733d24_08c347cd
Bytes: 82
Is the intent that we do not bother to shrink the mem map for the bitmap, correct?

163
Thu Jan 08 22:43:59 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e733d24_08c347cd
UUID: 4e733d24_eb0505b2
Bytes: 56
Yes this would provide minimal savings, I'll add a TODO.

File: runtime/gc/heap.cc

2986:6-2986:72
Thu Jan 08 22:23:20 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee97915c_e5c3706a
Bytes: 164
Would it be more restricted and safer/cleaner if SetNonGrowthLimitCapacity is renamed to ClampGrowthLimit() and this logic is implemented internally in MallocSpace?

2986
Thu Jan 08 22:43:59 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee97915c_e5c3706a
UUID: ce9c8d86_c12bc21e
Bytes: 4
Done

File: runtime/gc/space/malloc_space.cc

251:18-251:43
Thu Jan 08 22:23:20 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e733d24_abd94d87
Bytes: 127
It seems like we need to shrink the ContinuousSpace::limit_ as well here. (and maybe check that end_ <= begin_ + new_capacity).

251:18-251:43
Thu Jan 08 23:59:06 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e733d24_abd94d87
UUID: aea119bc_c3dce82a
Bytes: 192
Any comment here? It looks like as limit_ is initialized to the non growth limit capacity in RosAllocSpace/DlMallocSpace::CreateFromMemMap(), it should be updated to begin + new capacity here.

252:0-252:45
Thu Jan 08 20:41:34 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e733d24_8599e288
Bytes: 103
in the interface, you note that currently only shrinking is supported. can we assert that here somehow?

252
Thu Jan 08 22:43:59 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e733d24_8599e288
UUID: 4e733d24_450b6a1b
Bytes: 4
Done

253:2-253:15
Thu Jan 08 22:23:20 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: aea119bc_00c9a6bc
Bytes: 32
Assert that temp_bitmap is null?

File: runtime/mem_map.cc

672:34-672:45
Thu Jan 08 20:41:34 2015 +0000
Author: Brian Carlstrom <1003723@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4e733d24_050172fb
Bytes: 81
I do see these checks here, but it seems like the higher level one is useful too.

672
Thu Jan 08 22:43:59 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4e733d24_050172fb
UUID: 4e733d24_8b701147
Bytes: 4
Done

674:2-674:10
Thu Jan 08 22:23:20 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee97915c_825b7a7f
Bytes: 58
Would it be useful to check that new_size is page-aligned?

674
Thu Jan 08 22:43:59 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee97915c_825b7a7f
UUID: aea119bc_e07b625d
Bytes: 4
Done

File: runtime/native/dalvik_system_VMRuntime.cc

137:12-137:38
Thu Jan 08 22:23:20 2015 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ae7cb9f1_cec057bc
Bytes: 72
I assume this gets called from the framework when it's a small-heap app?

137
Thu Jan 08 22:43:59 2015 +0000
Author: Mathieu Chartier <1015378@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ae7cb9f1_cec057bc
UUID: aea119bc_40756e62
Bytes: 33
Yes, uploading other changes now.

