Revision: b4e6915c1f1d05a58908099d43691b523b84e368
Patch-set: 2
File: compiler/optimizing/code_generator_mips64.cc

2:17-2:21
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_06653cc5
Bytes: 4
2015

2:17-2:21
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_06653cc5
UUID: d01c3e21_99aa9ffb
Bytes: 4
Done

70:19-70:35
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_e47a1470
Bytes: 26
Unexpected parameter type?

70:19-70:35
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_e47a1470
UUID: 100336c0_2165148f
Bytes: 4
Done

230:33-231:12
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_66daf0ec
Bytes: 35
Please place one argument per line.

230:33-231:12
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_66daf0ec
UUID: b017cafa_8aeeb701
Bytes: 4
Done

330:36-331:23
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_68b07b6d
Bytes: 9
Likewise.

330:36-331:23
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_68b07b6d
UUID: b017cafa_2af163e1
Bytes: 4
Done

407:2-407:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_ebf54599
Bytes: 30
Maybe document or remove this?

407:2-407:26
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_ebf54599
UUID: d01c3e21_39154bc2
Bytes: 379
These all benign Xori's into register 0 (whether commented out or not) are for debugging purposes. Mind you, this is an initial version that is meant to be shared for the benefit of collecting early feedback and, hopefully, the changes coming from Google. The Xori's will go away when they have served their purpose. The code isn't complete and we haven't even started debugging.

413:2-413:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_27fcfeb0
Bytes: 9
Likewise.

431:2-436:3
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_a8a4332d
Bytes: 42
Use ?: to define load_type and store_type.

431:2-436:3
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_a8a4332d
UUID: 100336c0_014e101b
Bytes: 4
Done

456:0-460:6
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_089467ba
Bytes: 7
Remove?

456:0-460:6
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_089467ba
UUID: b017cafa_0adaa765
Bytes: 4
Done

482:23-482:33
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_445b0010
Bytes: 59
Maybe introduce a constant defined as 2 * 1024 * 1024 here?

482:23-482:33
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_445b0010
UUID: d01c3e21_1c6e7dfc
Bytes: 631
Sorry, I don't see a point. The code (the generic part and the architecture-specific parts) is already too much dependent on things being 32-bit (e.g. there is a soup of int, size_t, int32_t, uint32_t all used for offsets and sizes, then 32-bit short Java references on 64-bit platforms and 32-bit immediate offsets in memory operands on x86/64, etc). Not to mention 2GB being quite a lot for an execution stack by any standard. Things won't magically become 64-bit friendly across the board. I don't see how a single constant here would help anything. 0x7FFFFFFF is in the context and is traceable from the log in case of failure.

517:2-517:47
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_460fb4e5
Bytes: 42
Could this be turned into a static_assert?

517:2-517:47
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_460fb4e5
UUID: b017cafa_6ad4fb3a
Bytes: 4
Done

605:10-605:47
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_48157fc0
Bytes: 79
Invert this condition and exchange the branches of this `if' to get rid of `!'.

605:10-605:47
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_48157fc0
UUID: b017cafa_eac76b93
Bytes: 4
Done

606:26-607:34
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_e646e012
Bytes: 22
One argument per line.

606:26-607:34
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_e646e012
UUID: b017cafa_0ac3c78b
Bytes: 4
Done

609:29-610:34
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_6812bbdb
Bytes: 5
Ditto

609:29-610:34
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_6812bbdb
UUID: d01c3e21_fc662125
Bytes: 4
Done

628
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_6633d0a2
Bytes: 74
Maybe add

  DCHECK(source.IsRegister() || source.IsFpuRegister());

here?

628
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_6633d0a2
UUID: 100336c0_81306095
Bytes: 74
Location::As[Fpu]Register<T>() already contains DCHECK(Is[Fpu]Register()).

637:10-637:48
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_68395b51
Bytes: 14
Use DCHECK_EQ.

637:10-637:48
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_68395b51
UUID: b017cafa_cfa4410a
Bytes: 4
Done

657:25-658:39
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_64e444a9
Bytes: 22
One argument per line.

657:25-658:39
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_64e444a9
UUID: 100336c0_6116ecfc
Bytes: 4
Done

660:28-661:38
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_86760c53
Bytes: 6
Ditto.

660:28-661:38
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_86760c53
UUID: 100336c0_8119802f
Bytes: 4
Done

675:6-675:74
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_88dcd799
Bytes: 14
Use DCHECK_EQ.

675:6-675:74
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_88dcd799
UUID: d01c3e21_fc2bc1ad
Bytes: 4
Done

712:0-717:21
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_84fea82f
Bytes: 172
Agreed; I believe you could use mov.s and mov.d here, but I also think that you need to use to address the float and double cases separately to avoid overwriting registers.

712:0-717:21
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_84fea82f
UUID: b017cafa_eff81dfa
Bytes: 709
My understanding is that on MIPS64 all floating point registers are 64-bit and:
1. every one of them is supposed to be used either for a float or for a double and never for a half of a double
2. there are no skipped odd-numbered or even-numbered registers.
So, I'm not sure what you're talking about when you mention overwriting registers.

This is a WIP comment, really aimed at the MIPS folks. We need to know the effective type to choose the right instruction or we need to confirm that copying the entire 64-bit f-p register is OK when it contains a 32-bit float (I'm almost certain it is).

The effective type can be extracted from the parallel mover and passed into this function. But this is still TBD.

726:26-727:33
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_e429743f
Bytes: 22
One argument per line.

726:26-727:33
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_e429743f
UUID: b017cafa_8fd1a97e
Bytes: 4
Done

728:6-728:42
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_c6a5e42c
Bytes: 43
Maybe write a test to exercise these cases?

728:6-728:42
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_c6a5e42c
UUID: b017cafa_2fc4d5bd
Bytes: 44
WIP comment, really aimed at the MIPS folks.

731
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_88ae17e6
Bytes: 55
Maybe add

  DCHECK(mem_loc.IsDoubleStackSlot())

here?

731
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_88ae17e6
UUID: b017cafa_0fdd9994
Bytes: 4
Done

734
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_26bab84d
Bytes: 48
Maybe add

  DCHECK(reg_loc.IsRegister())

here?

734
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_26bab84d
UUID: d01c3e21_bc314920
Bytes: 64
Location::AsRegister<T>() already contains DCHECK(IsRegister()).

743:4-743:34
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_04773851
Bytes: 81
LOG(FATAL) << "Unimplemented swap between locations " << loc1 << " and " << loc2;

743:4-743:34
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_04773851
UUID: b017cafa_6f336d70
Bytes: 4
Done

767:28-767:70
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_e87b0bed
Bytes: 64
Maybe use

  instruction->AsLongConstant()->GetValue()

instead?

776:28-776:70
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_88805747
Bytes: 9
Likewise?

790
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_486b3f1e
Bytes: 18
Remove empty line.

790
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_486b3f1e
UUID: 100336c0_01257061
Bytes: 4
Done

849:2-849:48
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_269158cb
Bytes: 15
Yes, please. :)

856:2-856:33
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_087547f3
Bytes: 105
I don't think of any other registers to block; maybe remove this comment if there is nothing more to add?

856:2-856:33
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_087547f3
UUID: d01c3e21_5c06354e
Bytes: 51
It's a WIP comment, really aimed at the MIPS folks.

876:19-876:27
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_ab30ad17
Bytes: 67
Is this cast really needed?  If so, please use static_cast instead.

876:19-876:27
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_ab30ad17
UUID: 100336c0_a11f6415
Bytes: 4
Done

880:19-880:27
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_64ce04e0
Bytes: 9
Likewise.

880:19-880:27
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_64ce04e0
UUID: b017cafa_af058598
Bytes: 4
Done

926:6-926:28
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_2b1d9d8f
Bytes: 41
In which cases can `instruction` be null?

926:6-926:28
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_2b1d9d8f
UUID: b017cafa_4f9af1ec
Bytes: 71
No idea. Copied over from and still exists in the ARM64 implementation.

938:2-938:25
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_44ee6036
Bytes: 20
Maybe document this?

952:2-952:25
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_8b661125
Bytes: 9
Likewise.

988:10-988:84
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_e662603b
Bytes: 46
This is odd.  I'll try to have a look at this.

1001:0-1006:11
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_c45d5080
Bytes: 43
Why this special logging code for xor only?

1001:0-1006:11
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_c45d5080
UUID: d01c3e21_dc19a5b1
Bytes: 93
It's a rarely used operation. Shorter log output. It's for debugging and doomed to go anyway.

1070:13-1070:14
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_4452e06b
Bytes: 21
Why this extra block?

1070:13-1070:14
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_4452e06b
UUID: d01c3e21_fc146179
Bytes: 4
Done

1560:2-1560:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_cbf089ac
Bytes: 9
Likewise.

1570:45-1571:38
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_072c5ac5
Bytes: 62
"checks for index < 0 and for length <= index simultaneously"?

1570:45-1571:38
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_072c5ac5
UUID: d01c3e21_9c0f2d68
Bytes: 4
Done

1584:2-1584:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_c90ad559
Bytes: 9
Likewise.

1598:2-1598:35
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_0909cd5e
Bytes: 86
From what I am seeing in other code generators, I think we use a signed load for this.

1598:2-1598:35
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_0909cd5e
UUID: d01c3e21_bc0ae957
Bytes: 155
Will be taken care of later. It belongs to the "lw/lwu issue" work item that is still yet to be done. I'd be working on it now if it wasn't for this CR. :)

1619:6-1619:64
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_eb1c656b
Bytes: 49
Please align this argument with the previous one.

1619:6-1619:64
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_eb1c656b
UUID: b017cafa_af71055f
Bytes: 4
Done

1625:2-1628:3
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_e936b114
Bytes: 33
Use ?: to initialize `call_kind'.

1625:2-1628:3
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_e936b114
UUID: d01c3e21_bcdf8956
Bytes: 4
Done

1630:0-1631:71
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_07673a23
Bytes: 30
Please place on a single line.

1630:0-1631:71
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_07673a23
UUID: d01c3e21_5cd4753a
Bytes: 4
Done

1643
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_e76b36ed
Bytes: 29
Maybe remove this blank line?

1643
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_e76b36ed
UUID: b017cafa_af462511
Bytes: 4
Done

1644:0-1645:51
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_0b26a1b2
Bytes: 30
Please place on a single line.

1644:0-1645:51
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_0b26a1b2
UUID: b017cafa_cf41e1fd
Bytes: 4
Done

1646:0-1647:51
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_477142d9
Bytes: 9
Likewise.

1646:0-1647:51
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_477142d9
UUID: 100336c0_c1eff883
Bytes: 4
Done

1670:0-1672:29
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_abd18d00
Bytes: 13
Very nice! :)

1670:0-1672:29
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_abd18d00
UUID: d01c3e21_7cd7b140
Bytes: 4
Done

1678:6-1678:30
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_4926e5e5
Bytes: 6
Ditto.

1687:0-1690:39
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_a7480e91
Bytes: 30
Please place on a single line.

1687:0-1690:39
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_a7480e91
UUID: d01c3e21_1ccafd9c
Bytes: 4
Done

1712:2-1712:29
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_0bc1c12d
Bytes: 6
Ditto.

1724:4-1725:30
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_87522a37
Bytes: 63
What about using GetInt32ValueOf and getting rid of the DCHECK?

1762:0-1764:7
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_47a302ad
Bytes: 122
Instead of emitting an extra instruction for GE-type conditions, what about handling it in its own `case' of the `switch'?

1762:0-1764:7
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_47a302ad
UUID: d01c3e21_fcc2a185
Bytes: 66
There are no sge, sgt or sle instructions, only slt. So, ge = !lt.

1780:0-1782:9
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_27a07e9e
Bytes: 9
Likewise.

1780:0-1782:9
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_27a07e9e
UUID: d01c3e21_3ccd39b5
Bytes: 6
Ditto.

1786:0-1787:43
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_67aa8680
Bytes: 85
Is this really necessary, given the fact that you covered all the values of the enum?

1786:0-1787:43
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_67aa8680
UUID: 100336c0_213fd487
Bytes: 4
Done

1856:2-1856:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_89ccdd6b
Bytes: 6
Ditto.

1865:50-1865:52
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_a9d19900
Bytes: 19
Nit: missing space.

1865:50-1865:52
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_a9d19900
UUID: d01c3e21_bcb8290c
Bytes: 4
Done

1866:4-1866:11
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_0be781af
Bytes: 57
Remove, as LOG(FATAL) is already taking care of aborting.

1866:4-1866:11
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_0be781af
UUID: d01c3e21_594927bd
Bytes: 4
Done

1890:2-1890:19
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_67be06a2
Bytes: 29
Use ATTRIBUTE_UNUSED instead.

1890:2-1890:19
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_67be06a2
UUID: d01c3e21_f90ab3a6
Bytes: 4
Done

1898:2-1898:15
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_e9eeb1b7
Bytes: 9
Likewise.

1898:2-1898:15
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_e9eeb1b7
UUID: d01c3e21_d90ff7b4
Bytes: 4
Done

1909:2-1909:19
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_c7e9d2b2
Bytes: 9
Likewise.

1909:2-1909:19
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_c7e9d2b2
UUID: 100336c0_2187d414
Bytes: 4
Done

1932:4-1932:31
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_cb1ac927
Bytes: 6
Ditto.

1941:2-1941:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_899e1d38
Bytes: 6
Ditto.

1963
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_2b16fdfb
Bytes: 18
Remove blank line?

1963
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_2b16fdfb
UUID: 100336c0_4142c81d
Bytes: 4
Done

1966
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_cb4169fd
Bytes: 18
Remove blank line?

1966
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_cb4169fd
UUID: 100336c0_e14cbc53
Bytes: 4
Done

1971:6-1972:33
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_e7a3367c
Bytes: 63
What about using GetInt32ValueOf and getting rid of the DCHECK?

1978
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_4990251a
Bytes: 18
Remove blank line?

1978
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_4990251a
UUID: b017cafa_cf1a8127
Bytes: 4
Done

1999:8-2000:47
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_098a2dec
Bytes: 8
Useless?

1999:8-2000:47
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_098a2dec
UUID: b017cafa_6ffb6d41
Bytes: 4
Done

2026:8-2027:47
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_ab40adf5
Bytes: 8
Useless?

2026:8-2027:47
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_ab40adf5
UUID: d01c3e21_794ce3ce
Bytes: 4
Done

2079:2-2079:21
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_a9751978
Bytes: 6
Ditto.

2079:2-2079:21
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_a9751978
UUID: d01c3e21_d98a576e
Bytes: 4
Done

2092:2-2092:29
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_495b4510
Bytes: 6
Ditto.

2095
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_cb6c098b
Bytes: 18
Remove blank line?

2095
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_cb6c098b
UUID: d01c3e21_194fafc5
Bytes: 4
Done

2097
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_eb71c55d
Bytes: 18
Remove blank line?

2097
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_eb71c55d
UUID: d01c3e21_39526b6b
Bytes: 4
Done

2125:4-2125:12
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_4b81f996
Bytes: 45
Replace with

  case Primitive::kPrimVoid:

?

2125:4-2125:12
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_4b81f996
UUID: b017cafa_8ffec92f
Bytes: 4
Done

2146:2-2146:21
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_cb53a9c1
Bytes: 6
Ditto.

2146:2-2146:21
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_cb53a9c1
UUID: 100336c0_a16be49f
Bytes: 4
Done

2159:2-2159:29
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_b3b8580c
Bytes: 6
Ditto.

2162
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_e9cd5138
Bytes: 18
Remove blank line?

2162
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_e9cd5138
UUID: 100336c0_4115a8c0
Bytes: 4
Done

2165
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_f3c2d085
Bytes: 18
Remove blank line?

2165
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_f3c2d085
UUID: d01c3e21_1c879d14
Bytes: 4
Done

2184:4-2184:12
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_d3c7d493
Bytes: 45
Replace with

  case Primitive::kPrimVoid:

?

2184:4-2184:12
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_d3c7d493
UUID: d01c3e21_7c84d10d
Bytes: 4
Done

2234:2-2234:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_8bc851f8
Bytes: 6
Ditto.

2248:2-2248:35
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_89d29dd3
Bytes: 6
Ditto.

2248:2-2248:35
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_89d29dd3
UUID: d01c3e21_5c8115fc
Bytes: 60
Will be taken care of later, when fixing the "lw/lwu issue".

2259
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_49dd85e1
Bytes: 26
Add a 4-space indentation.

2259
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_49dd85e1
UUID: b017cafa_2f0175bf
Bytes: 4
Done

2276:2-2276:19
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_73d7e040
Bytes: 6
Ditto.

2276:2-2276:19
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_73d7e040
UUID: 100336c0_0171f08b
Bytes: 4
Done

2286:2-2286:19
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_53d4643a
Bytes: 6
Ditto.

2286:2-2286:19
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_53d4643a
UUID: b017cafa_af990554
Bytes: 4
Done

2350
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_89e93d81
Bytes: 259
Please also add this DCHECK:

  // When we do not run baseline, explicit clinit checks triggered by static
  // invokes must have been pruned by art::PrepareForRegisterAllocation.
  DCHECK(codegen_->IsBaseline() || !invoke->IsStaticWithExplicitClinitCheck());

2350
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_89e93d81
UUID: d01c3e21_d95c1782
Bytes: 4
Done

2373
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_13f14ce1
Bytes: 84
Please handle the special case of string initialization (see other code generators).

2373
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_13f14ce1
UUID: d01c3e21_f957535a
Bytes: 4
Done

2397
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_0bbd4144
Bytes: 259
Please also add this DCHECK:

  // When we do not run baseline, explicit clinit checks triggered by static
  // invokes must have been pruned by art::PrepareForRegisterAllocation.
  DCHECK(codegen_->IsBaseline() || !invoke->IsStaticWithExplicitClinitCheck());

2397
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_0bbd4144
UUID: d01c3e21_19684f1f
Bytes: 4
Done

2408
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_2bba7d4d
Bytes: 58
Maybe add:

  // TODO: Try to generate intrinsics code.

?

2408
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_2bba7d4d
UUID: d01c3e21_9cf56d9b
Bytes: 4
Done

2443:2-2443:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_cba5e92c
Bytes: 6
Ditto.

2454:22-2455:69
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_a9ee7984
Bytes: 22
One argument per line.

2454:22-2455:69
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_a9ee7984
UUID: 100336c0_a152c4eb
Bytes: 4
Done

2476:2-2476:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_8b9ff1dc
Bytes: 6
Ditto.

2528:2-2528:19
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_690161be
Bytes: 6
Ditto.

2528:2-2528:19
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_690161be
UUID: b017cafa_0f9f5936
Bytes: 4
Done

2659:2-2660:52
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_5306244e
Bytes: 59
Yes, I think it would be better to use GetReturnLocation().

2659:2-2660:52
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_5306244e
UUID: d01c3e21_997bbfee
Bytes: 4
Done

2662
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_c91ad527
Bytes: 142
Maybe add:

  CheckEntrypointTypes<kQuickAllocArrayWithAccessCheck,
                       void*, uint32_t, int32_t, mirror::ArtMethod*>();

?

2662
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_c91ad527
UUID: 100336c0_611c2cec
Bytes: 69
It already exists in InstructionCodeGeneratorMIPS64::VisitNewArray().

2685
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_d3307419
Bytes: 111
Maybe add:

  CheckEntrypointTypes<kQuickAllocObjectWithAccessCheck, void*, uint32_t, mirror::ArtMethod*>();

?

2685
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_d3307419
UUID: 100336c0_413c8842
Bytes: 72
It already exists in InstructionCodeGeneratorMIPS64::VisitNewInstance().

2746:2-2746:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_732080c6
Bytes: 6
Ditto.

2757:2-2757:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_531d848e
Bytes: 6
Ditto.

2783:2-2783:22
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_8b0a91a6
Bytes: 6
Ditto.

2783:2-2783:22
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_8b0a91a6
UUID: 100336c0_0190d04a
Bytes: 4
Done

2788:2-2788:27
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_9361dc11
Bytes: 6
Ditto.

2805:2-2805:22
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_4b1579c0
Bytes: 6
Ditto.

2805:2-2805:22
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_4b1579c0
UUID: b017cafa_cfdf2156
Bytes: 4
Done

2816:2-2817:22
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_d36b54ed
Bytes: 6
Ditto.

2816:2-2817:22
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_d36b54ed
UUID: b017cafa_2fca159d
Bytes: 4
Done

2893:2-2893:14
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_690c01f0
Bytes: 6
Ditto.

2893:2-2893:14
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_690c01f0
UUID: d01c3e21_b9003b89
Bytes: 4
Done

2902:2-2902:14
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_0919cd2c
Bytes: 6
Ditto.

2902:2-2902:14
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_0919cd2c
UUID: d01c3e21_1997afc2
Bytes: 4
Done

2947:2-2947:16
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_291609fc
Bytes: 6
Ditto.

2947:2-2947:16
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_291609fc
UUID: 100336c0_e1bddcc8
Bytes: 4
Done

2998:2-2998:15
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_2b1cbdea
Bytes: 6
Ditto.

2998:2-2998:15
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_2b1cbdea
UUID: b017cafa_6449d4bd
Bytes: 4
Done

3030:0-3031:74
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_8b213120
Bytes: 23
Place on a single line.

3030:0-3031:74
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_8b213120
UUID: b017cafa_844cf0cf
Bytes: 4
Done

3049:0-3050:51
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7011d208_b3433874
Bytes: 23
Place on a single line.

3049:0-3050:51
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7011d208_b3433874
UUID: 100336c0_a1b3e4fc
Bytes: 4
Done

3052:0-3053:48
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_ab266d33
Bytes: 23
Place on a single line.

3052:0-3053:48
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_ab266d33
UUID: b017cafa_c45d4880
Bytes: 4
Done

3164:2-3164:22
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_e946b112
Bytes: 6
Ditto.

3164:2-3164:22
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_e946b112
UUID: 100336c0_c1aed898
Bytes: 4
Done

3170:2-3170:22
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_0b36a160
Bytes: 6
Ditto.

3170:2-3170:22
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_0b36a160
UUID: d01c3e21_d9a4172f
Bytes: 4
Done

File: compiler/optimizing/code_generator_mips64.h

2:17-2:21
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_683f1b87
Bytes: 4
2015

2:17-2:21
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_683f1b87
UUID: d01c3e21_598807ba
Bytes: 4
Done

78:6-78:39
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_88761753
Bytes: 145
Rename as InvokeDexCallingConventionVisitorMIPS64 and inherit from InvokeDexCallingConventionVisitor (from compiler/optimizing/code_generator.h).

207:2-208:63
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_465b3410
Bytes: 28
Place this on a single line.

207:2-208:63
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_465b3410
UUID: 100336c0_41f488d1
Bytes: 4
Done

263:5-263:26
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_a4992c54
Bytes: 23
Why making it optional?

263:5-263:26
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_a4992c54
UUID: b017cafa_84307095
Bytes: 62
Copied over from and still exists in the ARM64 implementation.

File: compiler/utils/mips64/assembler_mips64.cc

60:31-60:39
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_283923a0
Bytes: 36
Maybe place this mask in a constant?

60:31-60:39
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_283923a0
UUID: d01c3e21_19b04f6c
Bytes: 226
I think it's good in the context. Also, so far there aren't any uses with large immediate values (there are a couple with imm21 == 2). This will probably change when branch/jump optimizations are in. But that's far away ahead.

66:32-66:41
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_86cccc6b
Bytes: 6
Ditto.

66:32-66:41
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_86cccc6b
UUID: d01c3e21_79bd0344
Bytes: 143
I think it's good in the context. And there aren't any uses at the moment (will be when MIPS32 support is in, which, again, is far away ahead).

247:9-247:29
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_c8c88f2b
Bytes: 31
Nit:

  0 <= pos && pos < 32

?

247:9-247:29
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_c8c88f2b
UUID: 100336c0_a1612411
Bytes: 4
Done

248:9-248:49
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_a6d1c800
Bytes: 6
Ditto.

248:9-248:49
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_a6d1c800
UUID: b017cafa_24c4fcbd
Bytes: 4
Done

666:13-667:45
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_24299c84
Bytes: 111
Suggestion:

  (value & 0xFFFF) == 0 &&
  (-32768 - bit31) <= (value >> 32) && (value >> 32) <= (32767 - bit31)

666:13-667:45
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_24299c84
UUID: d01c3e21_f94d931f
Bytes: 4
Done

674:4-679:5
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_e4ffb476
Bytes: 29
Use CTZ from runtime/utils.h?

674:4-679:5
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_e4ffb476
UUID: d01c3e21_595f67c0
Bytes: 4
Done

686:35-686:39
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_c6e964b2
Bytes: 3
31?

686:35-686:39
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_c6e964b2
UUID: b017cafa_449ad8ec
Bytes: 4
Done

692:35-692:39
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_08e787af
Bytes: 9
Likewise?

692:35-692:39
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_08e787af
UUID: b017cafa_e4a4c42e
Bytes: 4
Done

700:35-700:39
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_c694041c
Bytes: 9
Likewise?

700:35-700:39
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_c694041c
UUID: 100336c0_c131b81f
Bytes: 4
Done

703:2-707:7
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_e6990053
Bytes: 8
Use CTZ?

703:2-707:7
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_e6990053
UUID: d01c3e21_79622388
Bytes: 4
Done

714:37-714:41
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_68015bbe
Bytes: 9
Likewise?

714:37-714:41
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_68015bbe
UUID: 100336c0_6106ec4e
Bytes: 4
Done

721:37-721:41
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_6423a4a2
Bytes: 9
Likewise?

721:37-721:41
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_6423a4a2
UUID: 100336c0_81098061
Bytes: 4
Done

847:13-847:28
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_46a9f45b
Bytes: 28
static_cast<int32_t>(offset)

847:13-847:28
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_46a9f45b
UUID: 100336c0_01157073
Bytes: 4
Done

869:13-869:28
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_e846ab12
Bytes: 6
Ditto.

869:13-869:28
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_e846ab12
UUID: 100336c0_a10f6467
Bytes: 4
Done

977:0-978:34
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 30e3da4b_04e458d4
Bytes: 66
Is this really necessary, as you cover all the values of the enum?

977:0-978:34
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 30e3da4b_04e458d4
UUID: b017cafa_044e201b
Bytes: 4
Done

File: dex2oat/dex2oat.cc

762:6-763:54
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 705392ca_a616a845
Bytes: 33
Maybe place this on a singe line?

762:6-763:54
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 705392ca_a616a845
UUID: d01c3e21_f9763353
Bytes: 4
Done

File: disassembler/disassembler_mips.h

39:0-40:22
Thu Apr 30 17:33:25 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b0598aea_083c678f
Bytes: 34
Please document these new members.

39:0-40:22
Fri May 01 07:49:31 2015 +0000
Author: Alexey Frunze <1057043@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0598aea_083c678f
UUID: d01c3e21_9971ff5f
Bytes: 4
Done

