Revision: e8a2e9d1dfe9c88acade68114604addac736089a
Patch-set: 3
File: runtime/interpreter/interpreter.cc

496:4-508:5
Mon Jan 19 19:42:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb586371_2048ee8d
Bytes: 122
Feels like this belongs in interpreter_common(-inl), as it's shared (it's a straight-forward copy from switch, isn't it?).

496:4-508:5
Tue Jan 20 07:27:26 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb586371_2048ee8d
UUID: 4bc24f1f_16eba207
Bytes: 281
It's similar but not exactly the same. We handle both "pending exception" and "no pending exception" paths here. In the interpreter, this is shared between the instruction handling (when there is no pending exception) and the exception handling (when there is a pending exception).

File: runtime/interpreter/interpreter_goto_table_impl.cc

152:4-154:5
Mon Jan 19 19:42:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eb586371_803d7ae2
Bytes: 269
I think this is actually wrong with deopt (mea culpa). What if the catch handler starts there? It's not valid Java, but one should be able to construct a dex file for it. (I'm decent with the instruction constraints, but it has been a while for structural constraints.)

152:4-154:5
Tue Jan 20 07:27:26 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eb586371_803d7ae2
UUID: 4b408f75_60faec80
Bytes: 281
I don't think a catch handler can start at 0x0. A catch handler would need a previous instruction to throw the exception. This instruction could be at 0x0 but not the catch handler. Plus the instruction throwing the instruction itself cannot be part of the catch handler I believe.

