Revision: 3693af1eff27ca5b0b9ccad5749283a2653674b5
Patch-set: 1
File: compiler/optimizing/builder.cc

212:6-212:65
Fri Mar 28 16:15:10 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f904af03_a5dba402
Bytes: 256
Just a detail: thinking about future optimizations, it may be easier to get the vreg first and the constant next. IIRC, this is done so in LLVM IR but I'm not saying we should do the same. Anyway, the order must be consistent for all arithmetic operations.

212:6-212:65
Fri Mar 28 16:19:53 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f904af03_a5dba402
UUID: 19f8a337_265b1cc1
Bytes: 122
Yeah, to help GVN we should make it consistent for commutative operations. How about just ensuring first.id <= second.id ?

212:6-212:65
Fri Mar 28 16:25:50 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 19f8a337_265b1cc1
UUID: 19f8a337_a6660c81
Bytes: 229
Would it be always true? I mean, if you want to merge multiple operations into one (constant propagation for instance), you may end up with the reverse order. Unless we ensure this is always the case when doing such optimization.

212:6-212:65
Fri Mar 28 16:35:14 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 19f8a337_a6660c81
UUID: f904af03_85230839
Bytes: 121
We can ensure it. In any case, if we want consistency, we have to ensure a determined order when setting/updating inputs.

File: compiler/optimizing/nodes.h

572:2-572:17
Fri Mar 28 16:15:10 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 19f8a337_864c300d
Bytes: 22
const Primitive::Type.

