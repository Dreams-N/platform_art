Revision: eeeb34761cb0f2942f54fe6196cd37d964c03a52
Patch-set: 4
File: compiler/optimizing/code_generator_arm.cc

3878:19-3878:34
Wed Apr 22 15:16:49 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 50984e8f_450fbc33
Bytes: 432
You can skip this if !obj->CanBeNull() (obj = instruction_->InAt(0).

So it should be smth like
if (obj->CanBeNull() || instruction->MustDoNullCheck()).

So given that you need to do an || here I'm thinking that  maybe "MustDoNullCheck" is not the best name either. I don't have a better naming suggestion though.

The alternative is to SetMustDoNullCheck() when the input cannot be null but I also don't know a good place to do it.

3878:19-3878:34
Wed Apr 22 16:12:20 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 50984e8f_450fbc33
UUID: 9070061a_871488c7
Bytes: 96
But the point is that you can not trust the input, so what Guillaume is doing looks right to me.

3878:19-3878:34
Wed Apr 22 16:17:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9070061a_871488c7
UUID: b088aa37_70d2ee04
Bytes: 4
Done

3878:19-3878:34
Wed Apr 22 17:05:23 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9070061a_871488c7
UUID: 90972654_6f7bed74
Bytes: 341
You can't trust the input to have the most precise value, but it will never be incorrect. If it is, then we have a bug.

I mentioned before that we could end up with patterns where the input of the HInstanceOf is a HNewInstance for example.

If we don't check for that or we don't propagate the info then we may miss on not-adding the check.

3878:19-3878:34
Wed Apr 22 17:21:13 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90972654_6f7bed74
UUID: b0718a1d_2b9abd46
Bytes: 119
Ah, I see. How about visiting InstanceOf and Checkcast in prepapre_for_register_allocation and update the flag as well?

3878:19-3878:34
Wed Apr 22 17:38:07 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b0718a1d_2b9abd46
UUID: 50984e8f_a5cd6807
Bytes: 43
sgtm. i was thinking to a similar solution.

3878:19-3878:34
Wed Apr 22 17:39:41 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 50984e8f_a5cd6807
UUID: 50984e8f_85b3847a
Bytes: 41
What about the solution proposed in PS 5?

File: compiler/optimizing/nodes.h

3352:2-3352:34
Wed Apr 22 15:16:49 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90972654_8f7019d7
Bytes: 103
Don't think it's needed. There are a lot of other stuff we have for codegen and we don't document them.

3352:2-3352:34
Wed Apr 22 16:12:20 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90972654_8f7019d7
UUID: 706b9231_6676b085
Bytes: 98
I suggested it. It avoids confusing readers that might thing it's the same as Input(0)->CanBeNull.

3352:2-3352:34
Wed Apr 22 17:05:23 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 706b9231_6676b085
UUID: 50984e8f_8581449a
Bytes: 403
oki, then it's good to add a short story why we need it.

i.e.: Ideally the code generator would only have to look at the input to decide if it needs to null check the object. However, because we replace the inputs during the preparation for register allocator we loose the nullability information. This indicates whether or not the input of the instruction can be null.

or something along these lines.

File: compiler/optimizing/prepare_for_register_allocation.cc

45:35-45:49
Wed Apr 22 15:16:49 2015 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 90972654_affb15b9
Bytes: 50
you need to do the same for the null check, right?

45:35-45:49
Wed Apr 22 16:17:55 2015 +0000
Author: Guillaume Sanchez <1068522@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90972654_affb15b9
UUID: 90972654_ef227d9c
Bytes: 4
Done

