Revision: 01f079ccddd891d770052222e37e591f7ffb1dbd
Patch-set: 4
File: test/004-checker-UnsafeTest18/src/Main.java

29
Mon Mar 07 19:36:02 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 977021c5_1983cbc7
Bytes: 226
This throws a SecurityException when trying to run it on an architecture without intrinsics implemented

(I actually tried to run it with all the compiler intrinsics backed out, to double check the non-intrinsics were correct)

29
Mon Mar 07 19:42:19 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 977021c5_1983cbc7
UUID: 5791490c_02710cac
Bytes: 361
Ok, I got it passing by replacing the above line with this code:

  private static Unsafe getUnsafe() {
    try {
      Field f = Unsafe.class.getDeclaredField("THE_ONE");
      f.setAccessible(true);
      return (Unsafe) f.get(null);
    } catch (Exception e) {
      throw new AssertionError(e);
    }
  }

  private static final Unsafe unsafe = getUnsafe();

29
Mon Mar 07 19:42:20 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 977021c5_1983cbc7
UUID: 37985533_de75450b
Bytes: 110
I already have used the method from the other test for this. It worked while I was waiting for your CL though.

29
Mon Mar 07 19:48:44 2016 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 37985533_de75450b
UUID: f7a15d5f_df2a1f5d
Bytes: 198
Not sure I understand?

I am confused as to how it could work since the Unsafe.java code checks that #getUnsafe callers are within the bootclasspath, this test appears to run on a regular classpath.

29
Mon Mar 07 19:50:01 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f7a15d5f_df2a1f5d
UUID: d79c592c_9b758b5a
Bytes: 192
I used the getUnsafe from the existing test. Which is more or less what you suggested. Obviously I was waiting for your CL before running this on all archs, so the getUnsafe worked for now :-)

29
Mon Mar 07 20:18:09 2016 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d79c592c_9b758b5a
UUID: c26575c5_da0505aa
Bytes: 450
What existing test ? The existing tests define getUnsafe like so:

  private static Unsafe getUnsafe() throws Exception {
    Class<?> unsafeClass = Class.forName("sun.misc.Unsafe");
    Field f = unsafeClass.getDeclaredField("theUnsafe");
    f.setAccessible(true);
    return (Unsafe) f.get(null);
  }

That's how application code is "supposed" to access Unsafe (as propagated by stackoverflow et al.). Unsafe.getUnsafe has always behaved this way.

