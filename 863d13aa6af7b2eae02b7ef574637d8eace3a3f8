Revision: 863d13aa6af7b2eae02b7ef574637d8eace3a3f8
Patch-set: 1
File: compiler/dex/quick/x86/target_x86.cc

631:6-631:69
Thu Jan 28 18:54:13 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 14beeac6_45ec2cb2
Bytes: 382
According to Intel's documentation, this seems to be wrong.  Only SFENCE or MFENCE are claimed to work here.  See the (rather vague) MOVNTI documentation.

I'm inclined to believe the documentation, since this is my current best theory as to why MFENCE is slower.

I missed this the last time around.

This CL gets this right elsewhere.  And this looks like it's unused code anyway.

631:6-631:69
Thu Jan 28 19:35:11 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 14beeac6_45ec2cb2
UUID: 5418622c_75b7c8f4
Bytes: 234
An SFENCE or MFENCE is needed after MOVNTI.  That is a special case that avoids the caches. For Java semantics, the locked add (and strong memory model) do the right thing.  In any case, I expect the Quick compiler will be deprecated.

631:6-631:69
Thu Jan 28 19:44:29 2016 +0000
Author: Hans Boehm <1042828@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5418622c_75b7c8f4
UUID: f40956de_ba74b1ae
Bytes: 198
I believe kNTStoreStore is designed for the MOVNTI case?

We agree that we're beating a dead horse here, and this isn't important.  But if we're touching this code at all, I'd leave the SFENCE case.

