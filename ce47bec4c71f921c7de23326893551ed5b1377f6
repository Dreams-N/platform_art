Revision: ce47bec4c71f921c7de23326893551ed5b1377f6
Patch-set: 1
File: runtime/arch/arm/context_arm.h

48:7-48:14
Thu Jun 04 08:55:26 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9ec18cf_964652d0
Bytes: 128
Not sure about the abstraction here. Isn't it really SetArtMethod?

SetArg0 seems like there is a generic ABI for all platforms.

48:7-48:14
Thu Jun 04 14:54:40 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9ec18cf_964652d0
UUID: f955b039_76c0e9be
Bytes: 286
Context doesn't know what registers are ABI and supposed to hold methods and so on, so I let the QuickExceptionHandler know and handle it.

And yes, SetArg0 is generic - as the register is platform-dependent and it would be the Context's job (or something else arch-specific) to map it.

48:7-48:14
Thu Jun 04 15:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f955b039_76c0e9be
UUID: d9f1cca3_e2826e82
Bytes: 188
Yeah, but was is arg0 really? Is that the c++ abi arg0? the art abi arg0? But then the actual argument or the method?

Hence the suggestion to use SetArtMethod which makes it pretty clear.

File: runtime/entrypoints/quick/quick_trampoline_entrypoints.cc

645:0-645:31
Thu Jun 04 08:55:26 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9f1cca3_97c76e85
Bytes: 84
How about if (IsSingleFrameDeopt()) { ...

Then you wouldn't need the comment below.

645:0-645:31
Thu Jun 04 14:54:40 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9f1cca3_97c76e85
UUID: d96c6c17_0c9d20b6
Bytes: 124
So if (IsSingleFrameDeopt(self)) or something like that? I don't think it makes sense to do IsSingleFrameDeopt(deopt_frame).

645:0-645:31
Thu Jun 04 15:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d96c6c17_0c9d20b6
UUID: 99fbd485_7bd10bc5
Bytes: 102
Oh I didn't realize the deopt frame was on the thread, I though it was on this object. Nevermind then.

657:0-659:57
Thu Jun 04 08:55:26 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 99fbd485_b5a4223f
Bytes: 80
This is very scary. Why is there an alloca? Why can't the deopt_frame be enough?

657:0-659:57
Thu Jun 04 14:54:40 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 99fbd485_b5a4223f
UUID: f955b039_36b6717c
Bytes: 177
Because that's how normal interpreter transitions look like. I don't think this is technically required, but it felt the right thing to move back to a unified stack after deopt.

657:0-659:57
Thu Jun 04 15:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f955b039_36b6717c
UUID: d9f1cca3_826d6a7f
Bytes: 146
I understand the unified statement, it's more the magic that you're pushing the frame on the C stack. But I can see it'd done below, so nevermind.

657:0-659:57
Wed Jun 10 01:23:58 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9f1cca3_826d6a7f
UUID: 193e044a_a91e851d
Bytes: 250
I actually can't do that anyways. Single managed frame != single shadow frame, actually, doh. Inlining will force to have multiple shadow frames, and they'll have to live on the heap anyways. I'll have to use the same loop that full-stack deopt uses.

669:8-669:38
Thu Jun 04 08:55:26 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 99fbd485_95a1262f
Bytes: 28
Do you plan on keeping this?

669:8-669:38
Thu Jun 04 14:54:40 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 99fbd485_95a1262f
UUID: f923f0e9_7692bedb
Bytes: 115
Yes, except if you think that it should be part of VLOG(deopt) (which currently only dumps the stack before deopt).

669:8-669:38
Thu Jun 04 15:36:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f923f0e9_7692bedb
UUID: d9f1cca3_a273465e
Bytes: 41
Yeah, I think VLOG(deopt) is good enough.

File: runtime/quick_exception_handler.cc

326:0-326:69
Thu Jun 04 03:44:00 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d96c6c17_71790ff4
Bytes: 111
Can probably be unified with the full-deopt visitor, but for quick changes and so on it seemed easier this way.

326:0-326:69
Thu Jun 04 08:55:26 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d96c6c17_71790ff4
UUID: d9f1cca3_d7d1f641
Bytes: 68
I don't think it's too crazy thinking to unify it before submitting?

326:0-326:69
Thu Jun 04 14:54:40 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9f1cca3_d7d1f641
UUID: d96c6c17_6c7934f4
Bytes: 103
As mentioned, this is early work and more for people to look at and give early critique than review it.

533:0-536:6
Thu Jun 04 03:44:00 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d96c6c17_31a037ef
Bytes: 181
Alternative for this is another entrypoint that "wraps" the interpreter bridge and does the stack update transparently (so is a nop for arm). Or just not re-use the bridge at all...

600:2-602:3
Thu Jun 04 03:44:00 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d96c6c17_119d3bb6
Bytes: 86
Could have delegated this further, but it seemed to weird to have "smash_except_arg0."

File: runtime/quick_exception_handler.h

91:0-93:91
Thu Jun 04 03:44:00 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f955b039_16ec0d04
Bytes: 164
This is special-purposed because it's only for debugging - I didn't want to play in the regular StackDumpVisitor which is quite heavyweight (for lock dumping etc.).

