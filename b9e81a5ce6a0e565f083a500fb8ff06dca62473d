Revision: b9e81a5ce6a0e565f083a500fb8ff06dca62473d
Patch-set: 1
File: compiler/optimizing/ssa_liveness_analysis.cc

186:0-186:31
Tue Feb 02 17:47:24 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 31c3005d_9424c48e
Bytes: 199
This can fail in the case where one of the inputs is HX86LoadFromConstantTable, which has emitted_at_use_site_ true and no output.  How about:
DCHECK(has_out_location || input->IsEmittedAtUseSite())?

186:0-186:31
Tue Feb 02 17:52:44 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 31c3005d_9424c48e
UUID: 5116b490_a5ba3e24
Bytes: 134
No, that is not enough, as the input has no SSA index.  I think you need to handle this case (IsEmittedAtUseSite) first.  Will confirm

186:0-186:31
Tue Feb 02 17:57:58 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5116b490_a5ba3e24
UUID: 91d90c41_3fd587de
Bytes: 444
There's nothing wrong with the DCHECK. What this says is that if an instruction expects an input value, the input instruction must produce one.

What you need to do is not set the in-location on the input which uses the HX86LoadFromConstantTable in the LocationBuilder. If you look at LocationBuilderX86::VisitAdd, you'll see that I've added code that does exactly that. You should do the same with the instructions you're modifying in your CL.

186:0-186:31
Tue Feb 02 17:58:13 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5116b490_a5ba3e24
UUID: 5116b490_8530e28e
Bytes: 1157
Working version:
  for (size_t i = 0, e = current->InputCount(); i < e; ++i) {
    HInstruction* input = current->InputAt(i);
    if (input->IsEmittedAtUseSite()) {
      // `Input` is inlined into `current`. Walk over its inputs and record
      // uses at `current`.
      RecursivelyProcessInputs(input, actual_user, live_in);
    } else {
      bool has_in_location = current->GetLocations()->InAt(i).IsValid();
      bool has_out_location = input->GetLocations()->Out().IsValid();

      if (has_in_location) {
        DCHECK(has_out_location);
        DCHECK(input->HasSsaIndex());
        // `Input` generates a result used by `current`. Add use and update
        // the live-in set.
        input->GetLiveInterval()->AddUse(current, /* environment */ nullptr, i, actual_user);
        live_in->SetBit(input->GetSsaIndex());
      } else if (has_out_location) {
        // `Input` generates a result but it is not used by `current`.
      }
    }
  }

This is similar to the version that I had in my code.  You could eliminate the last else if and replace the bools has_in_location and has_out_location with their expression in the only uses of them

186:6-186:31
Wed Feb 03 08:43:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f1b5e8da_7a10f92b
Bytes: 61
Add a << that would explain why it must have an out location.

186:6-186:31
Wed Feb 03 10:00:14 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f1b5e8da_7a10f92b
UUID: 11e51cf3_5bf26352
Bytes: 4
Done

187:6-187:35
Wed Feb 03 08:43:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 91d90c41_3fd027d5
Bytes: 11
maybe ditto

187:6-187:35
Wed Feb 03 10:00:14 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 91d90c41_3fd027d5
UUID: f1b5e8da_da3745b4
Bytes: 80
Not done. That's a sanity check for 

  has_out_location => input->HasSsaIndex()

188:10-188:15
Wed Feb 03 08:43:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b1d6100b_404b4e63
Bytes: 5
input

188:10-188:15
Wed Feb 03 10:00:14 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b1d6100b_404b4e63
UUID: d1b8e4d6_39cccfe2
Bytes: 4
Done

193:10-193:15
Wed Feb 03 08:43:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d1b8e4d6_59e8a331
Bytes: 5
ditto

193:10-193:15
Wed Feb 03 10:00:14 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d1b8e4d6_59e8a331
UUID: 1110bc94_c36776f5
Bytes: 4
Done

195:10-195:15
Wed Feb 03 08:43:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d1cf0471_6144d633
Bytes: 5
input

195:10-195:15
Wed Feb 03 10:00:14 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d1cf0471_6144d633
UUID: d1b8e4d6_59c183a9
Bytes: 4
Done

197:6-197:42
Wed Feb 03 08:43:56 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f1cc087f_a2fb3e29
Bytes: 110
We should probably also DCHECK that the input is not a phi, otherwise loop phi could send us to infinite loop.

197:6-197:42
Wed Feb 03 10:00:14 2016 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f1cc087f_a2fb3e29
UUID: f1b5e8da_fa3409b2
Bytes: 4
Done

