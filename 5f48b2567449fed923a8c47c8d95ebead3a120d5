Revision: 5f48b2567449fed923a8c47c8d95ebead3a120d5
Patch-set: 1
File: compiler/dex/quick/mips64/mips64_lir.h

26:0-26:32
Wed Mar 04 18:40:40 2015 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 928ac69d_dd17cb40
Bytes: 106
Wow, a giant copy-paste of the compiler too. Why not factor the code? Look at x86 for how to achieve this.

26:0-26:32
Wed Mar 04 20:16:58 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 928ac69d_dd17cb40
UUID: 321d9af7_f79f77db
Bytes: 266
I'd prefer we get this in (so that there's not always the "we're three weeks behind AOSP") and iterate on it, with the clear understanding that if this is not refactored by, say, the end of March, I'll revert.

x86 started out separate, too, if I remember correctly.

26:0-26:32
Wed Mar 04 21:30:39 2015 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 321d9af7_f79f77db
UUID: 526daeb2_731fc086
Bytes: 175
You don't. x86 was merged at the assembler and LIR level from the get go. The only place not merged was the non-quick assembler and that was an expedience that sadly persists.

File: compiler/dex/quick/mips64/utility_mips64.cc

73:47-73:81
Tue Mar 03 16:02:18 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9271e61d_c5975a8d
Bytes: 83
This and below has been updated for readability in the mips backend. Please update.

73:47-73:81
Wed Mar 04 18:22:14 2015 +0000
Author: Maja Gagic <1068027@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9271e61d_c5975a8d
UUID: 929c86d9_d04222f7
Bytes: 4
Done

File: compiler/dex/quick/quick_compiler.cc

91:4-91:19
Tue Mar 03 05:46:17 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9271e61d_a507be14
Bytes: 246
Considering that the mips64 files still bear witness to being copied from mips (with large swaths being unmodified or trivial changes, e.g., renames from MIPS to MIPS64), what are the arguments that you can suddenly allow all those optimizations?

File: compiler/driver/compiler_driver.cc

2175:4-2175:40
Tue Mar 03 10:19:17 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d2a43ecd_3f7967c7
Bytes: 25
This doesn't belong here.

2175:4-2175:40
Tue Mar 03 16:01:16 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d2a43ecd_3f7967c7
UUID: 9271e61d_a59a5eb6
Bytes: 79
That's a bit unfair. Exactly this place had instruction-set decisions before...

2175:4-2175:40
Tue Mar 03 16:08:06 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9271e61d_a59a5eb6
UUID: 52b04e09_5b7c4337
Bytes: 143
I'm not familiar with the old code. But looking at this change here, something does not look logical. Like we're not going to have JNI methods?

2175:4-2175:40
Tue Mar 03 16:14:53 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 52b04e09_5b7c4337
UUID: 9271e61d_08e6e732
Bytes: 142
GenericJNI works for Mips64. But it seems the JNI compiler doesn't. That was the situation for the other 64b backends in the beginning, too...

2175:4-2175:40
Tue Mar 03 16:20:23 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9271e61d_08e6e732
UUID: 52b04e09_9b508bb2
Bytes: 180
Erf, ok the code is kind of convoluted here. Maybe a InstructionSetHasJniCompiler would be better (and not require a comment. Without a comment the current code is hard to follow).

2175:4-2175:40
Wed Mar 04 18:22:14 2015 +0000
Author: Maja Gagic <1068027@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 52b04e09_9b508bb2
UUID: 929c86d9_d05062b3
Bytes: 150
We are working on enabling JNI compiler and we will update the patch as soon as it is finished. Until then, we will add a comment with an explanation.

