Revision: 87e5e065079351bb81109506b0b53d45d41cb463
Patch-set: 8
File: compiler/utils/arm/assembler_arm.h

42:31-42:35
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_e30e726c
Bytes: 9
uint8_t ?

42:31-42:35
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_e30e726c
UUID: 397f484e_a13bbe8c
Bytes: 4
Done

49:14-49:15
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_35eff0fb
Bytes: 6
const?

49:14-49:15
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_35eff0fb
UUID: 397f484e_81107a06
Bytes: 4
Done

74:2-74:10
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_c3137694
Bytes: 6
const?

74:2-74:10
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_c3137694
UUID: 79bf0033_03746e45
Bytes: 4
Done

File: compiler/utils/arm/assembler_arm32.h

245:0-245:12
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_a3047a4e
Bytes: 36
Old comment. I think you can remove.

245:0-245:12
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_a3047a4e
UUID: 397f484e_c140c2eb
Bytes: 4
Done

File: compiler/utils/arm/assembler_thumb2.cc

57:0-57:6
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 799460c1_fb13af93
Bytes: 7
Remove?

57:0-57:6
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_fb13af93
UUID: 79bf0033_e3d032c4
Bytes: 4
Done

77:71-77:73
Fri Jun 12 15:59:00 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 59095cdc_7a5859cf
Bytes: 7
Remove.

77:71-77:73
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 59095cdc_7a5859cf
UUID: 397f484e_413752eb
Bytes: 4
Done

126:2-126:72
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_83305e28
Bytes: 45
Can't you do:

for (Fixup& fixup : fixups_) ?

126:2-126:72
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_83305e28
UUID: 799460c1_9bcc6b60
Bytes: 41
No, we're iterating in the reverse order.

127:19-127:22
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_21f24ee5
Bytes: 5
sigh.

154:0-156:5
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_a32bdaba
Bytes: 37
Add a comment why you need alignment.

154:0-156:5
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_a32bdaba
UUID: 397f484e_01dc6a0c
Bytes: 4
Done

160:0-162:7
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_b5094068
Bytes: 35
Do we need to care about alignment?

160:0-162:7
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_b5094068
UUID: 79bf0033_a3811ad8
Bytes: 42
Done (added DCHECK for literal.GetSize()).

167:0-167:6
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_d50ebc6c
Bytes: 24
Why (here and all below)

167:0-167:6
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_d50ebc6c
UUID: 79bf0033_e36cb282
Bytes: 137
These are small helper methods, so hint the compiler to inline. (And avoid bloating symbol the table of the stripped libart-compiler.so.)

1637:4-1639:20
Fri Jun 12 15:59:00 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 390ca8ed_998c5b3f
Bytes: 147
Remove default, move the LOG(FATAL) to after the switch. That way the compiler will warn on missing enum cases.

Similarly below a couple of times.

1637:4-1639:20
Fri Jun 12 16:33:41 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 390ca8ed_998c5b3f
UUID: 99fd94eb_df619f08
Bytes: 77
Should I rewrite all the other places to use early return instead of "break"?

1637:4-1639:20
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 99fd94eb_df619f08
UUID: 79bf0033_23db6ae7
Bytes: 53
Done: just removed the default in the other switches.

3009:26-3009:42
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 799460c1_3bf6f7cf
Bytes: 24
ComputeAdjustedPosition?

3009:26-3009:42
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 799460c1_3bf6f7cf
UUID: 799460c1_3b2d174a
Bytes: 206
I'll go with GetAdjustedPosition(). It's the FinalizeCode() that really calculates the adjusted position, it's just keeping the data spread across Fixups instead of collecting it in some new data structure.

File: compiler/utils/arm/assembler_thumb2.h

284:0-284:12
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_15f2f4e4
Bytes: 7
Remove?

284:0-284:12
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_15f2f4e4
UUID: 79bf0033_6381e297
Bytes: 4
Done

360:53-360:58
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_03f62ecf
Bytes: 16
with -> with a ?

360:18-360:23
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_23f9aac1
Bytes: 35
instructions (here and thereafter).

360:18-360:23
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_23f9aac1
UUID: 799460c1_7b279f67
Bytes: 4
Done

360:53-360:58
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_03f62ecf
UUID: b9733893_55af0c19
Bytes: 4
Done

361:34-361:38
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 397f484e_01dd4a51
Bytes: 15
Load -> Loading

361:34-361:38
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 397f484e_01dd4a51
UUID: 397f484e_013b8a8b
Bytes: 42
In this context, I consider "load" a noun.

435:10-437:64
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_55ec6c04
Bytes: 35
Nit: one per line? (here and below)

435:10-437:64
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_55ec6c04
UUID: 397f484e_21308ea3
Bytes: 93
Done for the initializer-list of the constructor - only one after addressing a comment below.

451:6-451:11
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_6303a241
Bytes: 23
DCHECK for consistency?

451:6-451:11
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_6303a241
UUID: 799460c1_bb67679c
Bytes: 4
Done

454:0-474:5
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_75e968f3
Bytes: 179
Instead of mutliple constructors, consider having just one private constructor and static methods named more or less with the comment you added, eg: Fixup::(Make)WideLiteralFixup.

454:0-474:5
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_75e968f3
UUID: 799460c1_7bc6bfa8
Bytes: 4
Done

546:92-546:98
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b9733893_9504444f
Bytes: 7
updated

546:92-546:98
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: b9733893_9504444f
UUID: 79bf0033_a3491a09
Bytes: 4
Done

File: compiler/utils/assembler.h

211:22-211:28
Sat Jun 13 15:49:59 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 79bf0033_83097e68
Bytes: 22
Please update comment.

211:22-211:28
Mon Jun 15 13:31:04 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 79bf0033_83097e68
UUID: 799460c1_5b2ae332
Bytes: 4
Done

