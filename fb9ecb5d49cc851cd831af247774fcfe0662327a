Revision: fb9ecb5d49cc851cd831af247774fcfe0662327a
Patch-set: 1
File: cmdline/cmdline_types.h

99
Fri Feb 06 18:39:28 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc08ccdb_7a35f951
Bytes: 172
minor nit [optional for consistency], I use 'Result <varname> = ...' everywhere else, you'll notice CmdlineParseResult has a move constructor so it's very cheap to do that.

99
Mon Feb 16 13:52:49 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc08ccdb_7a35f951
UUID: 0be93ccf_1c00d5e4
Bytes: 4
Done

101
Fri Feb 06 18:39:28 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc08ccdb_1a383d4a
Bytes: 371
minor nit:

It's a bit redundant to have it both as an out-parameter and the return value, it's possible to get away with having only 2 parameters to ParseJdwpOption by making it a local:

  JdwpOptions jdwp_options;

(removing it from line 90)

and can just do

  const JdwpOptions& jdwp_options = parse_attempt.GetValue();

and change line 115 to 'return parse_attempt'

101
Mon Feb 16 13:52:49 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc08ccdb_1a383d4a
UUID: 4bdfb423_be18b91c
Bytes: 251
I don't quite follow you here: where jdwp_options should be declared then?
We pass it to ParseJdwpOption to build it with each option (x=y). 
We could make jdwp_options a field here so we can access it from ParseJdwpOption. Is it what you had in mind?

101
Tue Feb 17 18:11:30 2015 +0000
Author: Igor Murashkin <1021471@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4bdfb423_be18b91c
UUID: 6bb398fa_bd5d276e
Bytes: 747
So what I mean is, you can move the declaration from line 90 to line 105

  Result parse_attempt = ParseJdwpOption(
        jdwp_option.substr(0, equals_pos),
        jdwp_option.substr(equals_pos + 1));

  if (parse_attempt.IsError()) {
    return parse_attempt;
  }
  
  const JDWP::JdwpOptions& jdwp_options = parse_attempt.GetValue();
 
  ...

See how by doing that you no longer need to pass in an extra parameter to 'ParseJdwpOption' (since it's already nested inside of the result)

You would also need to change line 119 to allocate automatic storage for it there

  Result ParseJdwpOption(const std::string& name, const std::string& value) {
      JDWP::JdwpOptions jdwp_options;
      ....
      return Result::Success(jdwp_options);
  }

101
Tue Feb 17 18:34:00 2015 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6bb398fa_bd5d276e
UUID: ebb1480e_bbe227d7
Bytes: 480
Sorry but I don't understand how it can work if you declare the JdwpOptions object locally in ParseJdwpOption. This means you do not preserve its state with the options already parsed before (we loop on each option of the form x=y).

Imagine you have something a string like "option1=value1,option2=value2". You will call ParseJdwpOption for each option ("option1=value1" and "option2=value2"). So you need to preserve the state of JdwpOptions between calls.

Do I miss something?

