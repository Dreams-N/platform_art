Revision: 91d297d2a7b2a2591205a8e7664ab92eb3794c44
Patch-set: 1
File: compiler/optimizing/intrinsics_arm.cc

1595:74-1597:24
Mon Feb 01 14:58:49 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 712ad87b_ce86c340
Bytes: 114
Does it fail if we specify r0/r1 as input and output locations? Are we allowed to specify core regs for FP values?

1595:74-1597:24
Mon Feb 01 15:27:24 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 712ad87b_ce86c340
UUID: f1116843_dda8bf98
Bytes: 96
No, we are not. Refer to art::CheckTypeConsistency() (compiler/optimizing/code_generator.cc:99).

1595:74-1597:24
Mon Feb 01 16:06:31 2016 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f1116843_dda8bf98
UUID: d162a4ed_acb5cbee
Bytes: 277
And can we insert kDoubleDoubleToRawLongBits for inputs and kDoubleLongBitsToDouble for the output (in an extra ARM-specific pass)? That would put the burden back on the register allocator and allow elimination of unnecessary kDoubleLongBitsToDouble+kDoubleDoubleToRawLongBits.

1597:25-1597:91
Tue Feb 02 14:36:05 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f1b5e8da_3aef61dd
Bytes: 57
Just don't do the intrinsic if the graph is debuggable...

1597:25-1597:91
Tue Feb 02 14:46:25 2016 +0000
Author: Anton Kirilov <1084448@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f1b5e8da_3aef61dd
UUID: 51687402_358e701d
Bytes: 363
This is still profitable even if the graph is debuggable. However, if the graph is not debuggable, then the input and output constraints can be relaxed to Location::RequiresFpuRegister(). In any case, Vladimir's suggestion is even better because it avoids this issue and provides a further optimization for code such as Math.cos(Math.sin( ... )) at the same time.

1597:25-1597:91
Tue Feb 02 14:59:57 2016 +0000
Author: Serban Constantinescu <1072549@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51687402_358e701d
UUID: 314ea0ac_fc8b4904
Bytes: 643
@Nicolas

1) if the graph is !debuggable we can have:
codegen() {
 vmovrrd(r0, r1, AnyFPReg())
 blx 
 vmovrrd(AnyFPReg(), r0, r1))
}

2) if the graph is debuggable we can only have:
codegen() {
 vmovrrd(r0, r1, FixedFPReg())
 blx 
 vmovrrd(FixedFPReg(), r0, r1))
}

However, none of them are ideal since we would still not generate the best code for something like (extra useless moves between FP-GP regs):

sin(cos(sin(cos(#value))));

(But this would be handled by what Vladimir suggested).

I suggest for now we proceed with the 2nd variant that works fine for both debuggagle and non debuggable graphs, and we work on fixing this properly.

