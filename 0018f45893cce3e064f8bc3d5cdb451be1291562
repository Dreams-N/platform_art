Revision: 0018f45893cce3e064f8bc3d5cdb451be1291562
Patch-set: 4
File: runtime/arch/x86/opcodes.txt

32:16-32:18
Thu Jul 24 00:19:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f974b47c_bb4ccf8a
Bytes: 2
ws

32:16-32:18
Thu Jul 24 01:11:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f974b47c_bb4ccf8a
UUID: 193d089f_68d8bf03
Bytes: 4
Done

File: runtime/arch/x86/x86_inst_len.cc

37:0-41:6
Thu Jul 24 00:19:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9949f84f_f8ff2940
Bytes: 50
If this is generic then this should be an argument

37:0-41:6
Thu Jul 24 01:11:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9949f84f_f8ff2940
UUID: 193d089f_a8f0e774
Bytes: 12
Fair enough.

File: runtime/arch/x86/x86_opcodes.cc

26:0-26:71
Thu Jul 24 00:19:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9949f84f_f81649e0
Bytes: 116
This feels like the disassembler in table form, can we fold the code? (It also feels a lot like the quick assembler)

26:0-26:71
Thu Jul 24 01:11:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9949f84f_f81649e0
UUID: d9461042_26ad0a1f
Bytes: 357
I'd rather not rewrite the intel disassembler.  The purpose of this table is to provide the information needed for the length calculation only.  It doesn't handle all instructions (no x87, 3-byte-opcodes or alternate two-byte tables).  It would be a reasonable amount of work to redo the disassembler and I don't think it's worth it right now.  Maybe later?

File: runtime/fault_handler.h

47:15-47:17
Thu Jul 24 00:19:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f974b47c_fb464766
Bytes: 3
the

47:15-47:17
Thu Jul 24 01:11:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f974b47c_fb464766
UUID: f93914b5_87331a09
Bytes: 4
Done

48:0-48:64
Thu Jul 24 00:19:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f922f488_25534ef9
Bytes: 188
This isn't true, we can assert we hold a lock and then have fake lock/unlock functions. So that we can statically analyze the lock usage in this code. It should be a TODO here to fix this.

48:0-48:64
Thu Jul 24 01:11:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f922f488_25534ef9
UUID: 193d089f_683c3f4b
Bytes: 4
Done

File: runtime/thread_linux.cc

38:21-38:31
Thu Jul 24 00:19:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9949f84f_b84be1e9
Bytes: 20
kHostAltSigStackSize

38:21-38:31
Thu Jul 24 01:11:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9949f84f_b84be1e9
UUID: d9461042_069e4ee2
Bytes: 4
Done

41:0-41:2
Thu Jul 24 00:19:58 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9949f84f_f8556985
Bytes: 110
We should assert we never come here for ANDROID_OS for both documentation and to avoid memory usage on device.

41:0-41:2
Thu Jul 24 01:11:59 2014 +0000
Author: Dave Allison <1036486@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9949f84f_f8556985
UUID: 193d089f_a87b8700
Bytes: 4
Done

