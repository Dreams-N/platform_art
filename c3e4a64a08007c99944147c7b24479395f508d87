Revision: c3e4a64a08007c99944147c7b24479395f508d87
Patch-set: 10
File: compiler/optimizing/builder.cc

282:4-282:60
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_d0458265
Bytes: 46
Please add a comment why this may not be true.

282:4-282:60
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_d0458265
UUID: 3e6e4e7b_c93c1186
Bytes: 4
Done

277:0-285:3
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_c2179c75
Bytes: 90
I guess this is to create the blocks with HTryBoundary instructions? Please add a comment.

277:0-285:3
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_c2179c75
UUID: 3e0c8eed_39e9cfa6
Bytes: 4
Done

322:22-322:34
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_8257642c
Bytes: 23
try_boundary = nullptr;

322:22-322:34
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_8257642c
UUID: 3e0c8eed_19e68bd6
Bytes: 4
Done

330:41-330:59
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_70aace8d
Bytes: 18
Nit: one per line.

330:41-330:59
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_70aace8d
UUID: 3e0c8eed_79e347c6
Bytes: 4
Done

342:0-343:23
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_0263540f
Bytes: 135
Why hasn't it been split? The builder updates the block at each instruction. Why don't we have a new block for the start of a try item?

342:0-343:23
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_0263540f
UUID: 3e856e59_11fd6c31
Bytes: 462
I don't follow entirely but it's obvious that the comment is confusing, so let me rephrase. This branch covers two situations:
1) `block` is in a try block, `predecessor` isn't
2) they're each in a different try block and we managed to hit `block` first. When we later iterate over `predecessor`, it will see that this edge has been split by the try block on the other side and it will not split it again.

Comment updated, lemme know if it makes more sense now.

351
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_425082d9
Bytes: 47
Add a DCHECK that the try_boundary is not null?

351
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_425082d9
UUID: fe8e767f_2f84c98e
Bytes: 4
Done

371:0-375:55
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_50afd29b
Bytes: 49
Same question about why hasn't it been split yet?

371:0-375:55
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_50afd29b
UUID: 3e0c8eed_d9a89365
Bytes: 5
ditto

487:0-487:51
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_b0939664
Bytes: 38
Update to FindOrCreateBlockStartingAt?

487:0-487:51
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_b0939664
UUID: 3e856e59_911ddc23
Bytes: 4
Done

500:0-500:58
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_a2e3669c
Bytes: 6
ditto?

500:0-500:58
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_a2e3669c
UUID: fe8e767f_2f292913
Bytes: 4
Done

517:0-517:53
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dec53225_c2e0f291
Bytes: 5
ditto

517:0-517:53
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dec53225_c2e0f291
UUID: fe8e767f_cf365d75
Bytes: 4
Done

537:0-537:58
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: beecfece_90901a59
Bytes: 5
ditto

537:0-537:58
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: beecfece_90901a59
UUID: 3e0c8eed_39aeef6e
Bytes: 4
Done

555:64-555:69
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_2f3bc5fd
Bytes: 7
dex_pc.

555:64-555:69
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_2f3bc5fd
UUID: fe8e767f_ef3b215a
Bytes: 4
Done

File: compiler/optimizing/code_generator_arm.cc

1000:0-1002:3
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9efbba85_6f35cd06
Bytes: 271
Should you DCHECK that the try boundary is an exit?

Also is it just to simplify the builder that now returns don't necessarily jump to the exit block? So now we can have:
HReturn
HThrow
HTryBoundary

that can jump to the exit block. Could we avoid the HTryBoundary case?

1000:0-1002:3
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9efbba85_6f35cd06
UUID: 3e0c8eed_79b867b2
Bytes: 279
As discussed, having a TryBoundary between a Throw and Exit makes sense and should be allowed. On the other hand, inserting it between Return and Exit is pretty awkward. I've now modified the algorithm to move the Return outside the try block and added a check into GraphChecker.

File: compiler/optimizing/nodes.h

1954:0-1957:42
Tue Jun 23 13:42:53 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7e7526b8_423aacf6
Bytes: 24
Maybe remove these then?

1954:0-1957:42
Thu Jun 25 11:25:08 2015 +0000
Author: David Brazdil <1059815@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7e7526b8_423aacf6
UUID: 3e6e4e7b_89b9396c
Bytes: 63
The code looks pretty weird without them, I'd leave them there.

