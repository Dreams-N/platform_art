Revision: 78600bde9fc463517a5160e01df723911b1da55b
Patch-set: 2
File: compiler/optimizing/builder.cc

29:44-29:63
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc0199f4_3e61e51d
Bytes: 236
Passing the parent block as parameter is error prone (and redundant). Could it be set by the parent itself in HBasicBlock::AddInstruction ? At least AddInstruction should check parent is correctly set. Sorry, I didn't catch this before.

29:44-29:63
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc0199f4_3e61e51d
UUID: dc0199f4_c15b46e4
Bytes: 228
Currently passing the block is only needed for fetching the arena. I could imagine it will also be used to store it in the instruction, if one of the optimization has such a need.

Would you prefer that I pass the arena instead?

29:44-29:63
Wed Feb 26 10:50:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc0199f4_c15b46e4
UUID: dc0199f4_c1f8e65e
Bytes: 180
You don't seem to store the block in the instruction (to keep the parent info) so I don't understand why you need to pass it. Prefer passing the arena if it's really what you need.

29:44-29:63
Wed Feb 26 10:57:20 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc0199f4_c1f8e65e
UUID: 7c0a6d15_1e962d30
Bytes: 301
No I'm not storing it in the instruction for now. In my previous comment, I was saying that I could imagine we will in the future (writing optimization passes could be easier if the block is directly available).

I'll pass the arena instead then. I agree we could also set the block in AddInstruction.

37:2-37:9
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc0199f4_fe4a5d9c
Bytes: 98
It's an offset: prefer uint32_t or size_t which is the return type of Instruction::SizeInCodeUnits

37:2-37:9
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc0199f4_fe4a5d9c
UUID: 7c0a6d15_5e0f0501
Bytes: 4
Done

52:44-52:47
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc0199f4_7e852d87
Bytes: 19
Prefer using size_t

52:44-52:47
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc0199f4_7e852d87
UUID: 9c156131_1fc4eb4f
Bytes: 4
Done

67:0-68:28
Wed Feb 26 06:03:05 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3cfb9535_75b53cf6
Bytes: 68
Comments like this belong at the declaration rather than definition.

67:0-68:28
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cfb9535_75b53cf6
UUID: dc0199f4_81a9be62
Bytes: 4
Done

69:20-69:40
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9c156131_df21d383
Bytes: 40
Maybe add a TODO to support switch later

69:20-69:40
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c156131_df21d383
UUID: dc0199f4_a1583ae8
Bytes: 4
Done

79:2-79:9
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c0a6d15_3e1b315b
Bytes: 46
same than above: should be uint32_t or size_t.

79:2-79:9
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c0a6d15_3e1b315b
UUID: 9c156131_ffc81766
Bytes: 4
Done

102:56-102:61
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dc0199f4_61ba32c4
Bytes: 84
Index represents an absolute DEX pc so must not be negative. Add CHECK_GE(index, 0).

102:56-102:61
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dc0199f4_61ba32c4
UUID: 9c156131_dfc5534c
Bytes: 4
Done

116:13-116:24
Wed Feb 26 06:03:05 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3cfb9535_f5a02cb6
Bytes: 53
Android style is not to put author names in the code.

116:13-116:24
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cfb9535_f5a02cb6
UUID: 7c0a6d15_fefdb987
Bytes: 4
Done

117:19-117:25
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c0a6d15_fe249995
Bytes: 66
Block 'target' must exist at this point: CHECK(target != nullptr).

117:19-117:25
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c0a6d15_fe249995
UUID: 9c156131_bfd29f0e
Bytes: 4
Done

120:6-120:12
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9c156131_5f3dc3a0
Bytes: 14
And there too.

120:6-120:12
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c156131_5f3dc3a0
UUID: 7c0a6d15_defaf58d
Bytes: 4
Done

128:19-128:25
Wed Feb 26 09:40:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7c0a6d15_de21d583
Bytes: 42
Same than above: CHECK(target != nullptr).

128:19-128:25
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c0a6d15_de21d583
UUID: 7c0a6d15_bef741a4
Bytes: 4
Done

File: compiler/optimizing/dominator_test.cc

261:19-261:21
Wed Feb 26 06:03:05 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1cf89137_4e25118f
Bytes: 2
ws

261:19-261:21
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1cf89137_4e25118f
UUID: 9c156131_7f9c075b
Bytes: 4
Done

File: compiler/optimizing/nodes.h

124:10-124:15
Wed Feb 26 06:03:05 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3cfb9535_d53890b4
Bytes: 75
what was the reason for the non-coding style member function namings again?

124:10-124:15
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3cfb9535_d53890b4
UUID: 9c156131_1f9bcb61
Bytes: 140
This is the style I'm following:
http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml#Access_Control

Should I follow another one?

124:10-124:15
Wed Feb 26 10:50:28 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c156131_1f9bcb61
UUID: 7c0a6d15_1e9bcd61
Bytes: 67
We mostly use "GetFoo" and "SetFoo" to control "foo_" class member.

124:10-124:15
Wed Feb 26 10:57:20 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 7c0a6d15_1e9bcd61
UUID: 9c156131_5faee369
Bytes: 200
Do we have that written down somewhere? I thought we would be following google's conventions.

I'll leave it as is, and rename all members in a future CL, if we're not following google's coding style.

124:10-124:15
Wed Feb 26 11:05:32 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c156131_5faee369
UUID: 9c156131_5fd5c3d3
Bytes: 228
I think we follow kind of Android style guide in Art but I don't know if it's written somewhere. It's much inherited from the conventions you mention though. We try to be consistent as much as possible with the rest of the code.

124:10-124:15
Wed Feb 26 11:07:17 2014 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 9c156131_5fd5c3d3
UUID: 7c0a6d15_1e6d0d8a
Bytes: 77
This isn't true. Art code is much closer to google3 style than android style.

319:8-319:17
Wed Feb 26 06:03:05 2014 +0000
Author: Ian Rogers <1010118@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1cf89137_0e2f0971
Bytes: 9
as before

319:8-319:17
Wed Feb 26 10:34:07 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 1cf89137_0e2f0971
UUID: dc0199f4_41b3b6cc
Bytes: 4
Done

