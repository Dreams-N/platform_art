Revision: b75d184cb3be397ccbef9d0289709edef542a54d
Patch-set: 2
File: compiler/optimizing/code_generator.cc

444:0-446:3
Wed Apr 08 10:18:33 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fd1eeb_7c3b399b
Bytes: 72
If this is only for testing, we should just provide a dummy output data.

444:0-446:3
Wed Apr 08 13:14:01 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83fd1eeb_7c3b399b
UUID: 430966dc_5d80eff7
Bytes: 444
It is not just for tests.  I call this method from OptimizingCompiler::CompileOptimized now.
I confess that I do not fully follow and just guessing.  Is StackMap a newer replacement for vmap?  And that is why the OptimizingCompiler::CompileOptimized does not call BuildMappingTable?  But I want to call it anyway (only if getting debug symbols) just to get src_map.  I believe this is necessary to get line numbers from the optimizing compiler.

444:0-446:3
Wed Apr 08 13:59:44 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 430966dc_5d80eff7
UUID: 83fd1eeb_7f1fab8a
Bytes: 310
I think the "src_map" creation should be factored out of BuildMappingTable() to a function of its own.

Yes, StackMap is a replacement for vmap used by the truly Optimizing compiler. (There are 2 modes in the optimizing compiler, the truly Optimizing and Baseline. Only the Baseline calls BuildMappingTable().)

File: compiler/optimizing/code_generator_arm.cc

560
Wed Apr 08 10:18:33 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 430966dc_da26c56b
Bytes: 104
Missing __ cfi().AdjustCFAOffset(...) corresponding to the missing .cfi_def.cfa_offset in the test file.

File: compiler/optimizing/code_generator_arm64.h

230:7-230:16
Wed Apr 08 14:09:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f39619_6152703c
Bytes: 19
Nit: SpillRegisters

231:7-231:18
Wed Apr 08 14:09:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 83fd1eeb_ff2a9ba7
Bytes: 21
Nit: UnspillRegisters

File: compiler/optimizing/optimizing_cfi_test.cc

44:0-46:50
Wed Apr 08 10:18:33 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 430966dc_1a3e7d8b
Bytes: 28
Out of date. Rebase and fix.

52:0-53:60
Wed Apr 08 14:09:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 430966dc_7d6213bf
Bytes: 26
Nit: fit on a single line?

File: compiler/optimizing/optimizing_cfi_test_expected.inc

24
Wed Apr 08 10:18:33 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 430966dc_dad885f7
Bytes: 31
Missing .cfi_def_cfa_offset: 12

58
Wed Apr 08 10:18:33 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c3f39619_de724592
Bytes: 51
Where's the "ret"? (Also for x86 and x86-64 below.)

58
Wed Apr 08 13:14:01 2015 +0000
Author: David Srbecky <1065473@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3f39619_de724592
UUID: c3f39619_61eef000
Bytes: 225
GenerateFrameExit does not generate the ret instruction.  It is done by a visitor just after the call.
I agree that the output looks incomplete without it, but I was not sure how to call it as well.  I will take another look.

58
Wed Apr 08 13:59:44 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: c3f39619_61eef000
UUID: 83fd1eeb_9fe7172a
Bytes: 81
That sounds like the wrong division of responsibility in the optimizing compiler.

58
Wed Apr 08 14:09:14 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 83fd1eeb_9fe7172a
UUID: c3f39619_212ce88f
Bytes: 207
FYI the "ret" instruction is emitted by the art::InstructionCodeGenerator*::VisitReturnVoid and art::InstructionCodeGenerator*::VisitReturn methods (which also call art::CodeGenerator*::GenerateFrameExit()).

