Revision: 764e1f36ea730fa1f362ebc62166675b259fd8c6
Patch-set: 1
File: compiler/optimizing/reference_type_propagation.cc

685:0-687:21
Mon Apr 11 12:45:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ee1b4859_63470249
Bytes: 222
This fixes MergeTypes, but maybe we have other places where we check assignability. Could we instead prevent a ReferenceTypeInfo to get an erroneous class? If we try to create one, it will automatically use Object instead?

685:0-687:21
Mon Apr 11 13:12:18 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee1b4859_63470249
UUID: ee1b4859_03f64e3d
Bytes: 261
We should be able to track that by looking at IsObjectClass(). I suggested that we should check that the class is not erronous as part of IsObjectClass().

That should protect us against the any mis-uses (and probably expose a few other places where we'd crash)

685:0-687:21
Mon Apr 11 17:05:09 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee1b4859_03f64e3d
UUID: 2e22c08a_3d835a81
Bytes: 534
I have not found an easy way to get a checker test for this, so I constructed a unit test for this method (seems complex enough that such a test is useful anyways).

This also brought up some questions, since some of the test cases that I came up with fail (merging imprecise types), which may be a bug, or at the very least an implied feature of clients of this method (always dangerous).

Please have a look at next CL.

And yes, I plan to do Calin's idea on putting more checks in place, but like to do that separate from this fix.

685:0-687:21
Mon Apr 11 17:07:55 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e22c08a_3d835a81
UUID: ee1b4859_83cddeaf
Bytes: 173
It's not more checks, it's just a way to avoid seeing Erroneous classes in ReferenceTypeInfo completely. I'd prefer avoid adding the IsErroenous helper in ReferenceTypeInfo.

685:0-687:21
Mon Apr 11 17:18:22 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ee1b4859_83cddeaf
UUID: 2e22c08a_7d615278
Bytes: 295
So you want some logic in ReferenceTypeInfo::Create() ?
Or somewhere else? 

You need to be more specific, as I have become very familiar with this particular problem, but not so much with the full phase as of yet?

In any case, I will still send out my unit test, as it also exposes some issues

685:0-687:21
Mon Apr 11 17:21:27 2016 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e22c08a_7d615278
UUID: ee1b4859_e3dcd262
Bytes: 97
Yeah, like ReferenceTypeInfo::Create check if the class is erroneous and just use Object instead.

685:0-687:21
Mon Apr 11 17:21:57 2016 +0000
Author: Calin Juravle <1022077@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2e22c08a_7d615278
UUID: ee1b4859_23dfca54
Bytes: 155
a DCHECK in ReferenceTypeInfo::Create that the type is not errornous sounds good to me. The callers will need to make sure they don't attempt to create it.

