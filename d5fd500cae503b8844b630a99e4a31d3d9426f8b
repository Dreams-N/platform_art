Revision: d5fd500cae503b8844b630a99e4a31d3d9426f8b
Patch-set: 3
File: compiler/optimizing/nodes.h

3327
Thu Jul 23 15:23:58 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2d3aa6f6_c36ae8de
Bytes: 59
How do we handle Intel 80bit floating-point related issues?

3327
Tue Jul 28 09:47:48 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d3aa6f6_c36ae8de
UUID: 2d862697_60fff29f
Bytes: 118
I thought all our operations in x86/x86-64 were only 32- or 64-bit; is there any place where we use 80-bit operations?

3327
Tue Jul 28 10:21:18 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d862697_60fff29f
UUID: 0d8962a8_ff0f1f6a
Bytes: 290
I meant, do we pay attention that we compile with gcc/clang flags disabling (not enabling?) 80bit float in the C++ compiled code? Otherwise the `ComputeFP` functions could operate with a higher precision than what should happen, and we could get 'wrong' results out of constant propagation.

3327
Tue Jul 28 11:08:35 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d8962a8_ff0f1f6a
UUID: 4d7fda4c_21524e35
Bytes: 235
Oh right, I thought you were talking about the code generated by ART/dex2oat.  Thanks for pointing that out!  I'll look at the options here (using compile flags; or maybe using special instructions, such as SSE) and I'll update the CL.

3327
Tue Jul 28 16:03:39 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0d8962a8_ff0f1f6a
UUID: cd174afa_953c2481
Bytes: 341
I don't think this really matters. It seems rather unlikely that there will be code produced that doesn't use intermediates. For some reason, multiple operations would have to line up somewhere. I don't think the driver for the constant folding looks that way. (I'd contend that any inliner/unroller that produces such code is a bit insane.)

3327
Tue Jul 28 16:36:32 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: cd174afa_953c2481
UUID: 4d7fda4c_21fece2d
Bytes: 302
I think that is incorrect and that the issue can happen for a single operation.
If 80bit FP is enabled, the operation can happen with more precision, and when rounded back to 64bit FP the value can be different. I think we have seen this issue in real-world examples when working on the VIXL simulator.

3327
Tue Jul 28 16:40:30 2015 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d7fda4c_21fece2d
UUID: 2d862697_a053baeb
Bytes: 188
I'll try to come up with an example and turn it into a test.

Regarding the fix, I like the idea of using SSE intrinsics, as it is the closest to what we use in the x86 & x86-64 back ends.

3327
Tue Jul 28 16:42:07 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2d862697_a053baeb
UUID: 6d657ec3_daa8a563
Bytes: 181
This is a tricky issue when cross-compiling. The compiler must know how to evaluate the FP expression exactly as the target would evaluate it if we actually emitted the code for it.

3327
Tue Jul 28 16:47:37 2015 +0000
Author: Alexandre Rames <1052304@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d657ec3_daa8a563
UUID: ad9936fb_9c37059c
Bytes: 145
There should be tests and code for that in the VIXL simulator that can serve as examples. I'll try to find exacly where and send you the details.

3327
Tue Jul 28 16:58:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4d7fda4c_21fece2d
UUID: ad1696fe_57ce0ea5
Bytes: 169
Alex: really? If things are stored into doubles, shouldn't things be correctly rounded for a *single* operation?

Mark: I added you to the bug to chime in on that... :-)

3327
Tue Jul 28 16:58:11 2015 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 6d657ec3_daa8a563
UUID: ed1c0e21_d9d1b7ca
Bytes: 135
vmarko: No, you don't need to know how the target would evaluate it. You just need to follow IEEE-754, as that is what Java mandates...

