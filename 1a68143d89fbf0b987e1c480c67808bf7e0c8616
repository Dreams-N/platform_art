Revision: 1a68143d89fbf0b987e1c480c67808bf7e0c8616
Patch-set: 1
File: compiler/optimizing/test/ConstantFolding.java

25:0-27:59
Wed Dec 31 11:23:06 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a185ac8b_06271ed9
Bytes: 135
So it seems you replaced all occurrences of CHECK with CHECK-DAG.  Out of curiosity, do we have (or will we have) a use case for CHECK?

File: compiler/optimizing/test/Inliner.java

10:0-10:2
Wed Dec 31 11:23:06 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a185ac8b_c699b60c
Bytes: 41
Trailing whitespace (and likewise below).

File: tools/checker.py

23:30-23:76
Wed Dec 31 11:23:06 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c180e07b_aaf8f38c
Bytes: 50
assertions formatted as comments in the Java file?

37:43-37:48
Wed Dec 31 11:23:06 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a185ac8b_e6fb1a1d
Bytes: 114
Suggestion: I would mention the "keyword" CHECK earlier in the explanation (likewise for CHECK-DAG and CHECK-NOT).

205:27-205:30
Wed Dec 31 11:23:06 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: c180e07b_eaf2fbaa
Bytes: 10
CHECK-NOT?

368:25-368:28
Wed Dec 31 11:23:06 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: a185ac8b_860deea8
Bytes: 10
CHECK-NOT?

