Revision: 4b6b43c6c568b69d7455433e565aa8d4ad5da5f9
Patch-set: 4
File: compiler/optimizing/builder.cc

524:28-524:64
Wed Oct 22 10:06:42 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 351e565a_d4ed3cca
Bytes: 26
Surround with parenthesis?

524:28-524:64
Wed Oct 22 10:10:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 351e565a_d4ed3cca
UUID: f5359ed2_7270d880
Bytes: 4
Done

552:20-552:42
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d53a5ac4_513a7470
Bytes: 89
This function seems to be a special case of BuildFillArrayData.  Why a dedicated routine?

552:20-552:42
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d53a5ac4_513a7470
UUID: 351e565a_f4b7185c
Bytes: 133
Because it calls GetLongConstant instead of GetIntConstant. I could templatize it even further with a boolean, would you prefer that?

552:20-552:42
Wed Oct 22 13:33:51 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 351e565a_f4b7185c
UUID: d53a5ac4_7160d82e
Bytes: 231
Oh right, I didn't see one used GetIntConstant while the other used GetLongConstant, sorry.

I guess the current code is simpler and faster (no need to check a Boolean value at each iteration), so you should probably keep it as-is.

872:30-872:35
Wed Oct 22 10:06:42 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d53a5ac4_51a7149f
Bytes: 70
Why not using VRegA_22C since you already use VRegB_22c and VRegC_22c?

872:30-872:35
Wed Oct 22 10:10:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d53a5ac4_51a7149f
UUID: f5359ed2_327a505f
Bytes: 4
Done

877:15-877:39
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d53a5ac4_d1b2e4db
Bytes: 54
Maybe add

  DCHECK_LE(number_of_vreg_arguments, 5)

?

877:15-877:39
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d53a5ac4_d1b2e4db
UUID: f5359ed2_f2328864
Bytes: 171
Things would be very broken if not (we assume the verifier already ran). In general, when it comes to instruction format, we trust the instruction is of the correct shape.

877:15-877:39
Wed Oct 22 13:33:51 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_f2328864
UUID: 351e565a_747b08ed
Bytes: 8
Alright.

File: compiler/optimizing/builder.h

144:5-145:16
Wed Oct 22 10:06:42 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d53a5ac4_718b38ff
Bytes: 62
Also indicate it's only dedicated for int and reference array.

144:5-145:16
Wed Oct 22 10:10:44 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d53a5ac4_718b38ff
UUID: d53a5ac4_317a505f
Bytes: 65
Done (it's actually only for non-floating point primitive types).

144:5-145:16
Wed Oct 22 10:18:41 2014 +0000
Author: Sebastien Hertz <1029223@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d53a5ac4_317a505f
UUID: d53a5ac4_916a1c86
Bytes: 67
Right, I mixed up with filled-new-array, thanks for the correction.

181:18-181:29
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_9239fcc6
Bytes: 30
Maybe document this attribute.

181:18-181:29
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_9239fcc6
UUID: f5359ed2_f2b7285c
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.cc

412
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 351e565a_b4776043
Bytes: 67
Add

  DCHECK(location.IsConstant());

as in code_generator_x86.cc?

412
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 351e565a_b4776043
UUID: f5359ed2_d22f84f8
Bytes: 4
Done

422
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 351e565a_744308e0
Bytes: 6
Ditto?

422
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 351e565a_744308e0
UUID: f5359ed2_b22c0005
Bytes: 4
Done

File: compiler/optimizing/nodes.h

510:2-510:26
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 351e565a_b4eac0ae
Bytes: 216
This is probably a nit-picking issue, but shouldn't we try to keep this list sorted?  Suggestions:
- sort using alphabetical order on node name;
- sort using alphabetical order on super class name, then on node name.

510:2-510:26
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 351e565a_b4eac0ae
UUID: 351e565a_14ecd44d
Bytes: 89
Sure. Let's compete on who does this first :-)

Strong preference would be suggestion 1).

510:2-510:26
Wed Oct 22 13:33:51 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 351e565a_14ecd44d
UUID: f5359ed2_727b38ed
Bytes: 10
Agreed. :)

File: test/Android.run-test.mk

288:2-288:15
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f5359ed2_122e2c80
Bytes: 72
Do you whether it is a problem with the test or with the Quick compiler?

288:2-288:15
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_122e2c80
UUID: 351e565a_f4e03854
Bytes: 68
With Quick. The interpreter works fine for example. I'll file a bug.

File: test/etc/default-build

31:5-31:7
Wed Oct 22 11:35:20 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d53a5ac4_f156089d
Bytes: 20
Or use `-d' instead?

31:5-31:7
Wed Oct 22 13:00:55 2014 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d53a5ac4_f156089d
UUID: f5359ed2_72c458cf
Bytes: 46
I made it consistent with test line 27 and 37.

31:5-31:7
Wed Oct 22 13:33:51 2014 +0000
Author: Roland Levillain <1052644@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f5359ed2_72c458cf
UUID: f5359ed2_b288807c
Bytes: 143
Fair enough.  I believe we should change lines 23 and 37 as well (maybe in another CL), as the tested path is searched with `find' right after.

