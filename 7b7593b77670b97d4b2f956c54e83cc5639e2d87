Revision: 7b7593b77670b97d4b2f956c54e83cc5639e2d87
Patch-set: 3
File: compiler/dex/quick/gen_common.cc

822:4-822:84
Thu Jul 10 05:37:39 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 593f80b5_5026ecd6
Bytes: 858
I see that this code is already in AOSP with this FIXME.
To me actually, the question is to fix this FIXME or not at all. As I understand the problem is that code rl_dest which fp can be associated with core reg. So the question whether we want to have a restriction that fp RegLocation contains only fp RegStorage and non-fp RegLocation contains only non-fp RegStorage. Please note that this condition is broken not only in this place but lowering of move bytecode can lead to the same situation. So we really want to have such restriction we should fix StoreValue and StoreWideValue from my point of view.

Also please note that sGet should also be fixed, I have uploaded a patch for it: https://android-review.googlesource.com/#/c/100641/1/compiler/dex/quick/gen_common.cc. The only one think I cannot decide for now is whether kRefReg is required or not.

822:4-822:84
Thu Jul 10 05:39:45 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 593f80b5_5026ecd6
UUID: 19298885_ee14df61
Bytes: 63
Correction :)
So IF we really want to have such restriction....

822:4-822:84
Thu Jul 10 07:33:49 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 593f80b5_5026ecd6
UUID: 593f80b5_7048d076
Bytes: 132
Please ignore the part related to "already fixed" and "please note". I have mixed-up iget and iput and completely confused myself :)

828
Thu Jul 10 12:42:49 2014 +0000
Author: Matteo Franchin <1037505@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: d9045004_462d0317
Bytes: 507
What you did seems right, but then this means the code above was clearly wrong. I wonder how it could have worked. Do you know whether the code was never called for ARM, x86 or did it just work by accident?

Concerning how we fix the issue, I don't have a strong opinion on this. Using different flavours of registers (GP/FP) may slightly complicate the code (in the original C++ implementation and above) without a clear benefit apart from being slightly cleaner. The way you did it looks acceptable to me.

828
Thu Jul 10 18:26:46 2014 +0000
Author: Douglas Leung <1003299@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: d9045004_462d0317
UUID: 19526823_69c58175
Bytes: 155
This problem only shows up for Mips because  the return value is in different registers depending on the return type, where for Arm, it is always in r0:r1.

828
Thu Jul 10 18:46:12 2014 +0000
Author: Serguei I Katkov <1040038@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 19526823_69c58175
UUID: 593f80b5_33281208
Bytes: 276
I saw this problem on x86_64 when it needed double. The reason we did not mention it before probably because FastGet is false seems to be a rare condition + for floats/doubles it will just results in incorrect calculation and we can simply missed that the result is incorrect.

