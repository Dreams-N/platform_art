Revision: 074e30d65e469fc5bf568b4a42f73d6d666447d5
Patch-set: 1
File: compiler/optimizing/induction_var_analysis.cc

207:30-207:40
Mon Feb 08 19:06:15 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5d91680c_1fb883ed
Bytes: 31
you are doing part of this TODO

213:13-213:23
Mon Feb 08 19:06:15 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3d53d428_e6463e9a
Bytes: 109
by doing this you are violating the invariant that induction nodes always have the same type as their context

213:13-213:23
Mon Feb 08 19:29:35 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3d53d428_e6463e9a
UUID: 5d91680c_3f19c7bd
Bytes: 74
I didn't know about that assumption.  What is a better way to handle this?

268:24-268:28
Mon Feb 08 19:06:15 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7d8e2cf1_4042ae88
Bytes: 4
typo

278:12-278:22
Mon Feb 08 19:15:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 1d4e1083_c5c45a0b
Bytes: 198
you are using this field as a "global variable' so that you don't have to pass this information around, something i tried to avoid in the original implementation, as it gets to cloud rather quickly.

640:25-640:35
Mon Feb 08 19:15:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: dd471866_e319929d
Bytes: 189
you added an enormous amount of code to this method that only serves a few corner cases on type conversions, which make it now very hard to read; at least put this in self-contained methods

640:25-640:35
Mon Feb 08 19:29:35 2016 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: dd471866_e319929d
UUID: 9d8760d1_a1aa9e47
Bytes: 315
While the checks are needed, I don't like using the type_conv_ data member, as it affects the whole method, which is bogus.  This code is just here to demonstrate the checking, but I am looking for guidance on how to do a better job.  Where could this code code that would be IV dependent, and not method dependent?

655:31-655:35
Mon Feb 08 19:15:36 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3d983433_3e19c9bd
Bytes: 4
typo

File: compiler/optimizing/induction_var_analysis.h

132:22-132:33
Mon Feb 08 19:06:15 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9d8760d1_61e576f5
Bytes: 61
why is this not part of the constructor, like all the others?

222:44-222:47
Mon Feb 08 19:06:15 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 7d8e2cf1_600c928f
Bytes: 88
I would really prefer a solution that is more general and would include int/long as well

