Revision: b7ec501482c40f8a8efa71d89a29d60f67b8de89
Patch-set: 28
File: compiler/optimizing/register_allocator_graph_color.cc

114
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_0570c00b
Bytes: 246
this is a minor nit that you can ignore, but I would have a slight preference for putting helper methods and helper classes at the top, followed by all class methods defined in the public header (and then following decl order strictly, see below)

114
Thu Aug 04 19:36:59 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_0570c00b
UUID: 34894a78_4d0b4e7b
Bytes: 120
Good point; I'll move helper classes to the top. Some helper methods I'll try to keep close to their use points, though.

170
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_058c40de
Bytes: 116
rather than marking stuff with TUNING, maybe use the more common TODO (our team is more used to searching for those)

170
Thu Aug 04 19:36:59 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_058c40de
UUID: 34894a78_b7ea47de
Bytes: 4
Done

191
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_051e80c6
Bytes: 149
our readability prefers that methods in the cc file follow the declaration order found in the h file. So validate should come after AllocateRegisters

191
Thu Aug 04 19:36:59 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_051e80c6
UUID: 34894a78_3a9b9e63
Bytes: 4
Done

236
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_e5ad7c39
Bytes: 111
when a loop is this long, I would recommend closing this with a comment such as

}  // for processing_core_regs

236
Thu Aug 04 19:36:59 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_e5ad7c39
UUID: 34894a78_daa29295
Bytes: 4
Done

271
Thu Aug 04 19:25:00 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_1a0fba3d
Bytes: 208
Does each attempt start with the full set of intervals? It seems to me all intervals that can be trivially pruned shouldn't go into the next attempt. Each attempt should be dealing with a smaller subset only.

271
Thu Aug 04 19:47:07 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_1a0fba3d
UUID: 34894a78_6d7bb2d0
Bytes: 492
That's a really good point. Things may get trickier in my next CL where I start coalescing nodes that can be pruned trivially, but I believe what you suggest is still possible then. (One complication is that if the nodes interfering with a trivially prunable nodes are split, then it might actually open up a more preferable register for the trivially prunable node.)

I'll definitely look into this, but perhaps it's best for a future CL? The current implementation is safer/simpler for now.

317
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_65a2ec46
Bytes: 48
same suggestion, mark the while and the for loop

317
Thu Aug 04 19:36:59 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_65a2ec46
UUID: 34894a78_5aaf827a
Bytes: 4
Done

722
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_a52c54b3
Bytes: 66
add some vertical space here, and a comment, you are sorting here!

722
Thu Aug 04 19:36:59 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_a52c54b3
UUID: 34894a78_daddb210
Bytes: 4
Done

761
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_65174c57
Bytes: 27
this will be important yes!

761
Thu Aug 04 19:36:59 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_65174c57
UUID: 34894a78_9ac08a28
Bytes: 50
This is used in my iterative move coalescing CL :)

924
Thu Aug 04 19:25:00 2016 +0000
Author: Mingyao Yang <1043514@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_9a772a99
Bytes: 536
Some idea here, if I understand your algorithm right. I'd consider the option of incrementally rebuilding the interference graph since the intervals from the split can only interfere with its neighbors (a subset of remaining nodes). With my previous comment, you can start to prune away the trivially prunable nodes after the split. And then proceed from there, dealing with a smaller and smaller interference graph. So the algorithm is more like a loop of split-prune of remaining graph, instead of attempting again with all intervals.

924
Thu Aug 04 19:47:07 2016 +0000
Author: Matthew Gharrity <1108540@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 34894a78_9a772a99
UUID: 34894a78_8d629612
Bytes: 232
I definitely like the idea of using the current interference graph to help build the next interference graph. (See my other reply as well.) Perhaps this is also best left for a future CL, since the present implementation is simpler.

File: compiler/optimizing/register_allocator_graph_color.h

39
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_8ad91f4c
Bytes: 22
nice detailed comment!

77
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_6aa71bbd
Bytes: 71
overall this is a very clean written and documented header file, kudos!

151
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_85c03028
Bytes: 102
I am not sure if we have a strict rule for this, but I have a slight preference for one field per line

161:29-161:53
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_45ca4848
Bytes: 4
same

181
Thu Aug 04 17:29:04 2016 +0000
Author: Aart Bik <1074526@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 34894a78_8a8b5f1c
Bytes: 140
reads ambiguous at first; several rounds or allocators? Also, I am not 100% what having several implies? Can you make this a bit more clear?

