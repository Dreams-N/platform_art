Revision: ffe276857b461f583635531f105cf387ded5d9f3
Patch-set: 1
File: runtime/check_jni.cc

1098:17-1098:30
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b12b43c2_a9ffbdba
Bytes: 55
Might be worth documenting what we consider valid here.

1121
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: b12b43c2_29ec6d1c
Bytes: 27
Nit: Could fit on one line?

1124
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51f127a1_4e70d3c2
Bytes: 7
pattern

1124
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51f127a1_4e70d3c2
UUID: 9120ffdf_a8217b49
Bytes: 4
Done

File: runtime/jni_internal_test.cc

1379
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51f127a1_ee7edf94
Bytes: 26
maybe spaces between them?

1379
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51f127a1_ee7edf94
UUID: 9120ffdf_c8182f16
Bytes: 4
Done

File: runtime/mirror/object_test.cc

428
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51f127a1_0e4d2b84
Bytes: 55
four-byte (or change the others above to be more en-US)

428
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51f127a1_0e4d2b84
UUID: 9120ffdf_28510ba6
Bytes: 4
Done

File: runtime/mirror/string-inl.h

36:24-36:39
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3117538d_a5d87e77
Bytes: 91
It's clear what is "unchecked" about this. Maybe it's obvious to others. Perhaps a comment.

File: runtime/mirror/string.cc

174
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f1493ba5_dbe653b5
Bytes: 7
why 32?

197
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51f127a1_ae5b373a
Bytes: 177
these seem big enough to warrant factoring out now. or just have this overload call the other one. that doesn't cost anything. (the other way round would cost a useless strlen.)

197
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51f127a1_ae5b373a
UUID: 3117538d_45eeeacb
Bytes: 4
Done

197
Mon Feb 09 17:19:44 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3117538d_45eeeacb
UUID: 9120ffdf_8893d7f0
Bytes: 130
Actually, I'll do this separately. There's a minor annoyance here : one of them checks for null termination and the other doesn't.

200:7-200:14
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9120ffdf_084d2784
Bytes: 58
Should this be uint32_t as well, or is there some expense?

200:34-200:36
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11fb2f87_6ce95bc2
Bytes: 353
I may be odd so feel free to ignore: I always get slightly twitchy when I see a for loop with a counter that can be incremented independently of the main clause. It makes me want to turn it into a while() so the reader has to go hunting for the increments.

Here it would mean changes:
line 203 to be i++,
line 209 to be (i == length)
line 213 to be i++

File: runtime/mirror/string.h

87:5-87:9
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9120ffdf_4870bfc2
Bytes: 37
Bug number, or is this for reviewers?

89
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11a88f5a_e71dfc5e
Bytes: 1
?

89
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 11a88f5a_e71dfc5e
UUID: 9120ffdf_0856c79d
Bytes: 4
Done

93
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11a88f5a_872a087a
Bytes: 96
(/me sniggers at the thought of this being pronounced like the disease rather than like "stud".)

133
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f1493ba5_fbe98f87
Bytes: 40
GetCharArray and pull chars out of that?

133:5-133:9
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11fb2f87_8c1da760
Bytes: 21
Bug number or remove.

File: runtime/utf-inl.h

24
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51f127a1_ce52031b
Bytes: 135
i'm torn. java usually uses high and low rather than leading or trailing, but the latter do seem clearer for streams.

s/pseudo/maybe/?

24
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51f127a1_ce52031b
UUID: 11fb2f87_0c0c17e7
Bytes: 159
I chose Leading and Trailing because it's a more intuitive name wrt. to string indices; the leading surrogate always comes "first".

re: s/pseduo/maybe - done.

24:16-24:36
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9120ffdf_68bdc3e4
Bytes: 37
I would have found docs helpful here.

32
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11a88f5a_473410da
Bytes: 100
oh, i see. i think we should change the name of this now, especially because of implicit truncation.

32
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 11a88f5a_473410da
UUID: 3117538d_e541d62a
Bytes: 116
any suggestions ? I toyed around with a few names before i put this up, but they were all generally worse than this.

65:42-65:48
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11fb2f87_acefc38c
Bytes: 207
This is neat. It's not the classic way it's explained in the docs I've read, but I did check it and 

(x >> 10) + (0xD800 - (0x10000 >> 10))

seems a reasonable way of doing: 

((x - 0x10000) >> 10) + 0xD800

85:7-85:11
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11fb2f87_8cec8799
Bytes: 17
To do for review?

File: runtime/utf.cc

26:7-26:29
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11fb2f87_ac64e388
Bytes: 157
So, this is the count in UTF16 code-units, where as previously it was the count in characters / code-points. Might be worth a rename or doc change somewhere.

File: runtime/utf.h

89:3-89:12
Mon Feb 09 17:22:42 2015 +0000
Author: Neil Fuller <1038039@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 9120ffdf_08a88726
Bytes: 217
I suppose it doesn't matter too much what the return value is given it is supposed to be used with the methods below. 

However, I wasn't sure that "UTF character" was a correct phrase here. Perhaps "UTF16 code unit"?

101
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f1493ba5_5b16c3f4
Bytes: 85
!

they're assuming there's no such thing as a deliberately-crafted invalid dex file?

101
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f1493ba5_5b16c3f4
UUID: 9120ffdf_88ec7799
Bytes: 175
This is supposed to be handled by the verifier, but i can't really see that happening anywhere.

I wonder what the difference in performance is if we do validate these values.

File: runtime/utf_test.cc

45
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f1493ba5_9bf7ab59
Bytes: 2
\n

45
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f1493ba5_9bf7ab59
UUID: 3117538d_c5277ab0
Bytes: 4
Done

56
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 51f127a1_4ec2935a
Bytes: 5
type*

56
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 51f127a1_4ec2935a
UUID: 11fb2f87_2cdc73e6
Bytes: 4
Done

File: runtime/utils.cc

639
Mon Feb 09 16:38:41 2015 +0000
Author: Elliott Hughes <1003224@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 11a88f5a_072e188c
Bytes: 61
maybe we should just have one function that breaks ch in two?

639
Mon Feb 09 17:10:47 2015 +0000
Author: Narayan Kamath <1014443@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 11a88f5a_072e188c
UUID: 3117538d_053992d1
Bytes: 419
I considered doing that. This reads slightly better in places where we look at leading and trailing at different points in the code. Speaking of which, I can move the call to GetTrailing closer to the point of use.

There's no efficiency argument either, since i've marked these as always inline. Even if i didn't, the compiler would inline these because they're less than a handful of instructions (1 in the best case)

