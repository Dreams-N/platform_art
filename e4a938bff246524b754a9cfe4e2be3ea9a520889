Revision: e4a938bff246524b754a9cfe4e2be3ea9a520889
Patch-set: 2
File: runtime/arch/x86_64/quick_entrypoints_x86_64.S

492
Thu May 29 17:19:38 2014 +0000
Author: Dmitry Petrochenko <1039576@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5fea00f0_91e4dc71
Bytes: 280
There are several places where RDI (Method*) is pushed to stack (push rdi). Could you please review them and update that logic if it is applicable to this change?

I beleive push RDI should be replaced by something like "mod edi , [rsp]" if edi is method pointer. Is that correct?

492
Thu May 29 18:26:10 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 5fea00f0_91e4dc71
UUID: 3fef0c01_50842cba
Bytes: 243
Those pushes are in situations where we do not need a quick frame. The following calls are to artIsAssignableFromCode,
which can neither throw exceptions nor allows a GC to run. So it is acceptable to store the complete pointer for simplicity.

File: runtime/entrypoints/quick/quick_dexcache_entrypoints.cc

50:67-50:85
Thu May 29 15:02:41 2014 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 5fea00f0_31f53060
Bytes: 142
In cases like this I break the line before the first parameter and I often put multiple parameters on the same line. (No strict rules though.)

File: runtime/thread.cc

2012:0-2017:5
Thu May 29 17:51:21 2014 +0000
Author: Hiroshi Yamauchi <1022530@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 3fbaacee_de1835dc
Bytes: 470
This looks good, but it might be a little bit cleaner if we call GetCurrentQuickFrame() first and uses its StackReference return value, instead of accessing it twice in two ways via GetMethod() and GetCurrentQuickFrame(). As in,

StackReference<mirror::ArtMethod>* cur_quick_frame = GetCurrentQuickFrame();
mirror::ArtMethod* m = cur_quick_frame->AsMirrorPtr();
mirror::ArtMethod* old_method = m;
visitor_(...);
if (m != old_method) {
  cur_quick_frame->Assign(m);
}
...

2012:0-2017:5
Thu May 29 18:26:10 2014 +0000
Author: Andreas Gampe <1041833@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 3fbaacee_de1835dc
UUID: 3fef0c01_3091a8f8
Bytes: 4
Done

