Revision: 8ce7dc81ddb3df94cb2fe6947fa09ce4e8e357ba
Patch-set: 2
File: compiler/optimizing/code_generator_x86.cc

5613:9-5613:20
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: ce074951_b322826a
Bytes: 10
comparison

5613:9-5613:20
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: ce074951_b322826a
UUID: 2e470569_5e18223e
Bytes: 4
Done

File: compiler/optimizing/code_generator_x86_64.cc

1002:9-1002:20
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_bdf52b8b
Bytes: 10
comparison

1002:9-1002:20
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_bdf52b8b
UUID: 2e470569_3e156605
Bytes: 4
Done

File: compiler/optimizing/generate_selects.cc

22:0-25:3
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_36a05696
Bytes: 93
Shouldn't you check if the number of predecessors is 1 instead? Or do you handle those cases?

22:0-25:3
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_36a05696
UUID: 4e4c398b_300b5d30
Bytes: 51
The number of predecessors is checked at line 75/76

32:1-37:3
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 0eb5e1d9_dd02df15
Bytes: 32
Make this a helper on the graph?

32:1-37:3
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 0eb5e1d9_dd02df15
UUID: ae5bf53d_9f4e99af
Bytes: 87
Does this happen often enough that it is worth it?  What other optimization would care?

39:19-39:27
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 4ec27958_17d43625
Bytes: 91
This is a subset of the CanBeMoved below. CanBeMoved if false for other things, like calls.

39:19-39:27
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 4ec27958_17d43625
UUID: ee616dea_97cb27e1
Bytes: 4
Done

82:26-82:33
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 8ec8f176_19ad4fc1
Bytes: 40
describe (or name) the pattern here too.

82:26-82:33
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 8ec8f176_19ad4fc1
UUID: 2e470569_5e4a6222
Bytes: 4
Done

111:0-111:4
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_4487e003
Bytes: 13
2 more spaces

111:0-111:4
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_4487e003
UUID: 4e4c398b_b0b18dc4
Bytes: 4
Done

File: compiler/optimizing/graph_checker.cc

734:23-734:40
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: 2ebd45ca_56a5d2a4
Bytes: 72
ARch dependent shouldn't be here as this will conditionnaly be compiled.

734:23-734:40
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 2ebd45ca_56a5d2a4
UUID: ee86cdd4_c049d3fb
Bytes: 55
Added #ifdefs.  Not sure how to do this without ifdefs.

File: compiler/optimizing/nodes_x86_common.h

30:0-31:38
Mon Sep 28 09:02:50 2015 +0000
Author: Nicolas Geoffray <1038443@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: eececd75_8481e8ee
Bytes: 78
Why can't you take the condition as input and rely on the materialization bit?

30:0-31:38
Mon Sep 28 19:00:29 2015 +0000
Author: Mark P Mendell <1036869@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: eececd75_8481e8ee
UUID: 6e4d7d85_78b66033
Bytes: 118
Because I want to ensure that the comparison is done right before the CMOV.  This also lets the HIf go dead using DCE.

