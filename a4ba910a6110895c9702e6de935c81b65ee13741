Revision: a4ba910a6110895c9702e6de935c81b65ee13741
Patch-set: 3
File: compiler/jni/quick/arm64/calling_convention_arm64.cc

161:30-161:49
Mon Apr 13 17:08:44 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f4e242_c22fc436
Bytes: 195
kNumberOfXRegisters = 33 is bad. 1 << 32 is implementation-defined and could easily be 1. Can we change kNumberOfXRegisters to 32? (This actually applies to all the other places where it's used.)

161:30-161:49
Tue Apr 14 12:11:35 2015 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f4e242_c22fc436
UUID: 90a1e660_1ca09518
Bytes: 161
If we want to distinguish sp and zr, we *do* have 32 registers. Having different names for sp and zr can help us to detect misuse of these two registers earlier.

161:30-161:49
Tue Apr 14 14:11:25 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: 90a1e660_1ca09518
UUID: 709c722a_9ec0192b
Bytes: 508
If you want to keep kNumberOfXRegisters = 33, it's OK. But then you shouldn't use it as the upper bound for for-loops like this one. If the core_spill_mask contained x0, you could also easily push the bogus x32 here. You can get away with this only because x0 is not in the spill mask.

I'm going to accept this CL as it is but it would be preferable to clean this up everywhere. Preferably by using

  for (uint32_t mask = core_spill_mask; mask != 0u; mask = mask & (mask - 1u)) {
    int x_reg = CTZ(mask);

File: compiler/utils/arm64/assembler_arm64.cc

647:0-648:61
Mon Apr 13 17:08:44 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f4e242_826d3c87
Bytes: 87
C++11:

  for (auto r : callee_save_regs) {
    Arm64ManagedRegister reg = r.AsArm64();

647:0-648:61
Tue Apr 14 12:11:35 2015 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f4e242_826d3c87
UUID: b0926a12_9d4b43b7
Bytes: 4
Done

709:0-710:61
Mon Apr 13 17:08:44 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f4e242_82bf7c43
Bytes: 87
C++11:

  for (auto r : callee_save_regs) {
    Arm64ManagedRegister reg = r.AsArm64();

709:0-710:61
Tue Apr 14 12:11:35 2015 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f4e242_82bf7c43
UUID: 709c722a_9b74abf9
Bytes: 4
Done

721:57-721:63
Mon Apr 13 17:08:44 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f4e242_c2610483
Bytes: 5
large

721:57-721:63
Tue Apr 14 12:11:35 2015 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f4e242_c2610483
UUID: 709c722a_bb716708
Bytes: 4
Done

File: runtime/arch/arm64/quick_entrypoints_arm64.S

51:30-51:31
Mon Apr 13 17:08:44 2015 +0000
Author: Vladimir Marko <1018108@85c56323-6fa9-3386-8a01-6480fb634889>
UUID: f0f4e242_62723863
Bytes: 20
add space before '('

51:30-51:31
Tue Apr 14 12:11:35 2015 +0000
Author: Zheng Xu <1042649@85c56323-6fa9-3386-8a01-6480fb634889>
Parent: f0f4e242_62723863
UUID: 90a1e660_3ca55129
Bytes: 4
Done

